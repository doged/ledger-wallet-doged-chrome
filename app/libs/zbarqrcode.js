function zbarProcessImageData(imgData) {
    function globalEval(x) {
        eval.call(null, x)
    }

    function assert(e, t) {
        if (!e) {
            abort("Assertion failed: " + t)
        }
    }

    function getCFunc(ident) {
        var func = Module["_" + ident];
        if (!func) {
            try {
                func = eval("_" + ident)
            } catch (e) {}
        }
        assert(func, "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)");
        return func
    }

    function setValue(e, t, n, r) {
        n = n || "i8";
        if (n.charAt(n.length - 1) === "*") n = "i32";
        switch (n) {
            case "i1":
                HEAP8[e >> 0] = t;
                break;
            case "i8":
                HEAP8[e >> 0] = t;
                break;
            case "i16":
                HEAP16[e >> 1] = t;
                break;
            case "i32":
                HEAP32[e >> 2] = t;
                break;
            case "i64":
                tempI64 = [t >>> 0, (tempDouble = t, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[e >> 2] = tempI64[0], HEAP32[e + 4 >> 2] = tempI64[1];
                break;
            case "float":
                HEAPF32[e >> 2] = t;
                break;
            case "double":
                HEAPF64[e >> 3] = t;
                break;
            default:
                abort("invalid type for setValue: " + n)
        }
    }

    function getValue(e, t, n) {
        t = t || "i8";
        if (t.charAt(t.length - 1) === "*") t = "i32";
        switch (t) {
            case "i1":
                return HEAP8[e >> 0];
            case "i8":
                return HEAP8[e >> 0];
            case "i16":
                return HEAP16[e >> 1];
            case "i32":
                return HEAP32[e >> 2];
            case "i64":
                return HEAP32[e >> 2];
            case "float":
                return HEAPF32[e >> 2];
            case "double":
                return HEAPF64[e >> 3];
            default:
                abort("invalid type for setValue: " + t)
        }
        return null
    }

    function allocate(e, t, n, r) {
        var i, s;
        if (typeof e === "number") {
            i = true;
            s = e
        } else {
            i = false;
            s = e.length
        }
        var o = typeof t === "string" ? t : null;
        var u;
        if (n == ALLOC_NONE) {
            u = r
        } else {
            u = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][n === undefined ? ALLOC_STATIC : n](Math.max(s, o ? 1 : t.length))
        }
        if (i) {
            var r = u,
                a;
            assert((u & 3) == 0);
            a = u + (s & ~3);
            for (; r < a; r += 4) {
                HEAP32[r >> 2] = 0
            }
            a = u + s;
            while (r < a) {
                HEAP8[r++ >> 0] = 0
            }
            return u
        }
        if (o === "i8") {
            if (e.subarray || e.slice) {
                HEAPU8.set(e, u)
            } else {
                HEAPU8.set(new Uint8Array(e), u)
            }
            return u
        }
        var f = 0,
            l, c, h;
        while (f < s) {
            var p = e[f];
            if (typeof p === "function") {
                p = Runtime.getFunctionIndex(p)
            }
            l = o || t[f];
            if (l === 0) {
                f++;
                continue
            }
            if (l == "i64") l = "i32";
            setValue(u + f, p, l);
            if (h !== l) {
                c = Runtime.getNativeTypeSize(l);
                h = l
            }
            f += c
        }
        return u
    }

    function Pointer_stringify(e, t) {
        if (t === 0) return "";
        var n = false;
        var r;
        var i = 0;
        while (1) {
            r = HEAPU8[e + i >> 0];
            if (r >= 128) n = true;
            else if (r == 0 && !t) break;
            i++;
            if (t && i == t) break
        }
        if (!t) t = i;
        var s = "";
        if (!n) {
            var o = 1024;
            var u;
            while (t > 0) {
                u = String.fromCharCode.apply(String, HEAPU8.subarray(e, e + Math.min(t, o)));
                s = s ? s + u : u;
                e += o;
                t -= o
            }
            return s
        }
        var a = new Runtime.UTF8Processor;
        for (i = 0; i < t; i++) {
            r = HEAPU8[e + i >> 0];
            s += a.processCChar(r)
        }
        return s
    }

    function UTF16ToString(e) {
        var t = 0;
        var n = "";
        while (1) {
            var r = HEAP16[e + t * 2 >> 1];
            if (r == 0) return n;
            ++t;
            n += String.fromCharCode(r)
        }
    }

    function stringToUTF16(e, t) {
        for (var n = 0; n < e.length; ++n) {
            var r = e.charCodeAt(n);
            HEAP16[t + n * 2 >> 1] = r
        }
        HEAP16[t + e.length * 2 >> 1] = 0
    }

    function UTF32ToString(e) {
        var t = 0;
        var n = "";
        while (1) {
            var r = HEAP32[e + t * 4 >> 2];
            if (r == 0) return n;
            ++t;
            if (r >= 65536) {
                var i = r - 65536;
                n += String.fromCharCode(55296 | i >> 10, 56320 | i & 1023)
            } else {
                n += String.fromCharCode(r)
            }
        }
    }

    function stringToUTF32(e, t) {
        var n = 0;
        for (var r = 0; r < e.length; ++r) {
            var i = e.charCodeAt(r);
            if (i >= 55296 && i <= 57343) {
                var s = e.charCodeAt(++r);
                i = 65536 + ((i & 1023) << 10) | s & 1023
            }
            HEAP32[t + n * 4 >> 2] = i;
            ++n
        }
        HEAP32[t + n * 4 >> 2] = 0
    }

    function demangle(e) {
        function l(t) {
            if (t) Module.print(t);
            Module.print(e);
            var n = "";
            for (var r = 0; r < o; r++) n += " ";
            Module.print(n + "^")
        }

        function c() {
            o++;
            if (e[o] === "K") o++;
            var t = [];
            while (e[o] !== "E") {
                if (e[o] === "S") {
                    o++;
                    var n = e.indexOf("_", o);
                    var r = e.substring(o, n) || 0;
                    t.push(a[r] || "?");
                    o = n + 1;
                    continue
                }
                if (e[o] === "C") {
                    t.push(t[t.length - 1]);
                    o += 2;
                    continue
                }
                var i = parseInt(e.substr(o));
                var s = i.toString().length;
                if (!i || !s) {
                    o--;
                    break
                }
                var u = e.substr(o + s, i);
                t.push(u);
                a.push(u);
                o += s + i
            }
            o++;
            return t
        }

        function h(t, n, r) {
            function a() {
                return "(" + s.join(", ") + ")"
            }
            n = n || Infinity;
            var i = "",
                s = [];
            var l;
            if (e[o] === "N") {
                l = c().join("::");
                n--;
                if (n === 0) return t ? [l] : l
            } else {
                if (e[o] === "K" || f && e[o] === "L") o++;
                var p = parseInt(e.substr(o));
                if (p) {
                    var d = p.toString().length;
                    l = e.substr(o + d, p);
                    o += d + p
                }
            }
            f = false;
            if (e[o] === "I") {
                o++;
                var v = h(true);
                var m = h(true, 1, true);
                i += m[0] + " " + l + "<" + v.join(", ") + ">"
            } else {
                i = l
            }
            e: while (o < e.length && n-- > 0) {
                var g = e[o++];
                if (g in u) {
                    s.push(u[g])
                } else {
                    switch (g) {
                        case "P":
                            s.push(h(true, 1, true)[0] + "*");
                            break;
                        case "R":
                            s.push(h(true, 1, true)[0] + "&");
                            break;
                        case "L":
                            {
                                o++;
                                var y = e.indexOf("E", o);
                                var p = y - o;
                                s.push(e.substr(o, p));
                                o += p + 2;
                                break
                            };
                        case "A":
                            {
                                var p = parseInt(e.substr(o));
                                o += p.toString().length;
                                if (e[o] !== "_") throw "?";
                                o++;
                                s.push(h(true, 1, true)[0] + " [" + p + "]");
                                break
                            };
                        case "E":
                            break e;
                        default:
                            i += "?" + g;
                            break e
                    }
                }
            }
            if (!r && s.length === 1 && s[0] === "void") s = [];
            if (t) {
                if (i) {
                    s.push(i + "?")
                }
                return s
            } else {
                return i + a()
            }
        }
        var t = !!Module["___cxa_demangle"];
        if (t) {
            try {
                var n = _malloc(e.length);
                writeStringToMemory(e.substr(1), n);
                var r = _malloc(4);
                var i = Module["___cxa_demangle"](n, 0, 0, r);
                if (getValue(r, "i32") === 0 && i) {
                    return Pointer_stringify(i)
                }
            } catch (s) {} finally {
                if (n) _free(n);
                if (r) _free(r);
                if (i) _free(i)
            }
        }
        var o = 3;
        var u = {
            v: "void",
            b: "bool",
            c: "char",
            s: "short",
            i: "int",
            l: "long",
            f: "float",
            d: "double",
            w: "wchar_t",
            a: "signed char",
            h: "unsigned char",
            t: "unsigned short",
            j: "unsigned int",
            m: "unsigned long",
            x: "long long",
            y: "unsigned long long",
            z: "..."
        };
        var a = [];
        var f = true;
        var p = e;
        try {
            if (e == "Object._main" || e == "_main") {
                return "main()"
            }
            if (typeof e === "number") e = Pointer_stringify(e);
            if (e[0] !== "_") return e;
            if (e[1] !== "_") return e;
            if (e[2] !== "Z") return e;
            switch (e[3]) {
                case "n":
                    return "operator new()";
                case "d":
                    return "operator delete()"
            }
            p = h()
        } catch (s) {
            p += "?"
        }
        if (p.indexOf("?") >= 0 && !t) {
            Runtime.warnOnce("warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling")
        }
        return p
    }

    function demangleAll(e) {
        return e.replace(/__Z[\w\d_]+/g, function(e) {
            var t = demangle(e);
            return e === t ? e : e + " [" + t + "]"
        })
    }

    function jsStackTrace() {
        var e = new Error;
        if (!e.stack) {
            try {
                throw new Error(0)
            } catch (t) {
                e = t
            }
            if (!e.stack) {
                return "(no stack trace available)"
            }
        }
        return e.stack.toString()
    }

    function stackTrace() {
        return demangleAll(jsStackTrace())
    }

    function alignMemoryPage(e) {
        return e + 4095 & -4096
    }

    function enlargeMemory() {
        abort("Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value " + TOTAL_MEMORY + ", (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.")
    }

    function callRuntimeCallbacks(e) {
        while (e.length > 0) {
            var t = e.shift();
            if (typeof t == "function") {
                t();
                continue
            }
            var n = t.func;
            if (typeof n === "number") {
                if (t.arg === undefined) {
                    Runtime.dynCall("v", n)
                } else {
                    Runtime.dynCall("vi", n, [t.arg])
                }
            } else {
                n(t.arg === undefined ? null : t.arg)
            }
        }
    }

    function preRun() {
        if (Module["preRun"]) {
            if (typeof Module["preRun"] == "function") Module["preRun"] = [Module["preRun"]];
            while (Module["preRun"].length) {
                addOnPreRun(Module["preRun"].shift())
            }
        }
        callRuntimeCallbacks(__ATPRERUN__)
    }

    function ensureInitRuntime() {
        if (runtimeInitialized) return;
        runtimeInitialized = true;
        callRuntimeCallbacks(__ATINIT__)
    }

    function preMain() {
        callRuntimeCallbacks(__ATMAIN__)
    }

    function exitRuntime() {
        callRuntimeCallbacks(__ATEXIT__);
        runtimeExited = true
    }

    function postRun() {
        if (Module["postRun"]) {
            if (typeof Module["postRun"] == "function") Module["postRun"] = [Module["postRun"]];
            while (Module["postRun"].length) {
                addOnPostRun(Module["postRun"].shift())
            }
        }
        callRuntimeCallbacks(__ATPOSTRUN__)
    }

    function addOnPreRun(e) {
        __ATPRERUN__.unshift(e)
    }

    function addOnInit(e) {
        __ATINIT__.unshift(e)
    }

    function addOnPreMain(e) {
        __ATMAIN__.unshift(e)
    }

    function addOnExit(e) {
        __ATEXIT__.unshift(e)
    }

    function addOnPostRun(e) {
        __ATPOSTRUN__.unshift(e)
    }

    function intArrayFromString(e, t, n) {
        var r = (new Runtime.UTF8Processor).processJSString(e);
        if (n) {
            r.length = n
        }
        if (!t) {
            r.push(0)
        }
        return r
    }

    function intArrayToString(e) {
        var t = [];
        for (var n = 0; n < e.length; n++) {
            var r = e[n];
            if (r > 255) {
                r &= 255
            }
            t.push(String.fromCharCode(r))
        }
        return t.join("")
    }

    function writeStringToMemory(e, t, n) {
        var r = intArrayFromString(e, n);
        var i = 0;
        while (i < r.length) {
            var s = r[i];
            HEAP8[t + i >> 0] = s;
            i = i + 1
        }
    }

    function writeArrayToMemory(e, t) {
        for (var n = 0; n < e.length; n++) {
            HEAP8[t + n >> 0] = e[n]
        }
    }

    function writeAsciiToMemory(e, t, n) {
        for (var r = 0; r < e.length; r++) {
            HEAP8[t + r >> 0] = e.charCodeAt(r)
        }
        if (!n) HEAP8[t + e.length >> 0] = 0
    }

    function unSign(e, t, n) {
        if (e >= 0) {
            return e
        }
        return t <= 32 ? 2 * Math.abs(1 << t - 1) + e : Math.pow(2, t) + e
    }

    function reSign(e, t, n) {
        if (e <= 0) {
            return e
        }
        var r = t <= 32 ? Math.abs(1 << t - 1) : Math.pow(2, t - 1);
        if (e >= r && (t <= 32 || e > r)) {
            e = -2 * r + e
        }
        return e
    }

    function addRunDependency(e) {
        runDependencies++;
        if (Module["monitorRunDependencies"]) {
            Module["monitorRunDependencies"](runDependencies)
        }
    }

    function removeRunDependency(e) {
        runDependencies--;
        if (Module["monitorRunDependencies"]) {
            Module["monitorRunDependencies"](runDependencies)
        }
        if (runDependencies == 0) {
            if (runDependencyWatcher !== null) {
                clearInterval(runDependencyWatcher);
                runDependencyWatcher = null
            }
            if (dependenciesFulfilled) {
                var t = dependenciesFulfilled;
                dependenciesFulfilled = null;
                t()
            }
        }
    }

    function copyTempFloat(e) {
        HEAP8[tempDoublePtr] = HEAP8[e];
        HEAP8[tempDoublePtr + 1] = HEAP8[e + 1];
        HEAP8[tempDoublePtr + 2] = HEAP8[e + 2];
        HEAP8[tempDoublePtr + 3] = HEAP8[e + 3]
    }

    function copyTempDouble(e) {
        HEAP8[tempDoublePtr] = HEAP8[e];
        HEAP8[tempDoublePtr + 1] = HEAP8[e + 1];
        HEAP8[tempDoublePtr + 2] = HEAP8[e + 2];
        HEAP8[tempDoublePtr + 3] = HEAP8[e + 3];
        HEAP8[tempDoublePtr + 4] = HEAP8[e + 4];
        HEAP8[tempDoublePtr + 5] = HEAP8[e + 5];
        HEAP8[tempDoublePtr + 6] = HEAP8[e + 6];
        HEAP8[tempDoublePtr + 7] = HEAP8[e + 7]
    }

    function _emscripten_get_now() {
        if (!_emscripten_get_now.actual) {
            if (ENVIRONMENT_IS_NODE) {
                _emscripten_get_now.actual = function() {
                    var t = process["hrtime"]();
                    return t[0] * 1e3 + t[1] / 1e6
                }
            } else if (typeof dateNow !== "undefined") {
                _emscripten_get_now.actual = dateNow
            } else if (ENVIRONMENT_IS_WEB && window["performance"] && window["performance"]["now"]) {
                _emscripten_get_now.actual = function() {
                    return window["performance"]["now"]()
                }
            } else {
                _emscripten_get_now.actual = Date.now
            }
        }
        return _emscripten_get_now.actual()
    }

    function _emscripten_get_now_is_monotonic() {
        return ENVIRONMENT_IS_NODE || typeof dateNow !== "undefined" || ENVIRONMENT_IS_WEB && window["performance"] && window["performance"]["now"]
    }

    function ___setErrNo(e) {
        HEAP32[___errno_state >> 2] = e;
        return e
    }

    function _clock_gettime(e, t) {
        var n;
        if (e === 0) {
            n = Date.now()
        } else if (e === 1 && _emscripten_get_now_is_monotonic()) {
            n = _emscripten_get_now()
        } else {
            ___setErrNo(ERRNO_CODES.EINVAL);
            return -1
        }
        HEAP32[t >> 2] = n / 1e3 | 0;
        HEAP32[t + 4 >> 2] = n % 1e3 * 1e3 * 1e3 | 0;
        return 0
    }

    function ___assert_fail(e, t, n, r) {
        ABORT = true;
        throw "Assertion failed: " + Pointer_stringify(e) + ", at: " + [t ? Pointer_stringify(t) : "unknown filename", n, r ? Pointer_stringify(r) : "unknown function"] + " at " + stackTrace()
    }

    function _fflush(e) {}

    function _close(e) {
        var t = FS.getStream(e);
        if (!t) {
            ___setErrNo(ERRNO_CODES.EBADF);
            return -1
        }
        try {
            FS.close(t);
            return 0
        } catch (n) {
            FS.handleFSError(n);
            return -1
        }
    }

    function _fsync(e) {
        var t = FS.getStream(e);
        if (t) {
            return 0
        } else {
            ___setErrNo(ERRNO_CODES.EBADF);
            return -1
        }
    }

    function _fileno(e) {
        e = FS.getStreamFromPtr(e);
        if (!e) return -1;
        return e.fd
    }

    function _fclose(e) {
        var t = _fileno(e);
        _fsync(t);
        return _close(t)
    }

    function _strerror_r(e, t, n) {
        if (e in ERRNO_MESSAGES) {
            if (ERRNO_MESSAGES[e].length > n - 1) {
                return ___setErrNo(ERRNO_CODES.ERANGE)
            } else {
                var r = ERRNO_MESSAGES[e];
                writeAsciiToMemory(r, t);
                return 0
            }
        } else {
            return ___setErrNo(ERRNO_CODES.EINVAL)
        }
    }

    function _strerror(e) {
        if (!_strerror.buffer) _strerror.buffer = _malloc(256);
        _strerror_r(e, _strerror.buffer, 256);
        return _strerror.buffer
    }

    function _abort() {
        Module["abort"]()
    }

    function _mkport() {
        throw "TODO"
    }

    function _send(e, t, n, r) {
        var i = SOCKFS.getSocket(e);
        if (!i) {
            ___setErrNo(ERRNO_CODES.EBADF);
            return -1
        }
        return _write(e, t, n)
    }

    function _pwrite(e, t, n, r) {
        var i = FS.getStream(e);
        if (!i) {
            ___setErrNo(ERRNO_CODES.EBADF);
            return -1
        }
        try {
            var s = HEAP8;
            return FS.write(i, s, t, n, r)
        } catch (o) {
            FS.handleFSError(o);
            return -1
        }
    }

    function _write(e, t, n) {
        var r = FS.getStream(e);
        if (!r) {
            ___setErrNo(ERRNO_CODES.EBADF);
            return -1
        }
        try {
            var i = HEAP8;
            return FS.write(r, i, t, n)
        } catch (s) {
            FS.handleFSError(s);
            return -1
        }
    }

    function _fwrite(e, t, n, r) {
        var i = n * t;
        if (i == 0) return 0;
        var s = _fileno(r);
        var o = _write(s, e, i);
        if (o == -1) {
            var u = FS.getStreamFromPtr(r);
            if (u) u.error = true;
            return 0
        } else {
            return o / t | 0
        }
    }

    function __reallyNegative(e) {
        return e < 0 || e === 0 && 1 / e === -Infinity
    }

    function __formatString(e, t) {
        function i(e) {
            var n;
            if (e === "double") {
                n = (HEAP32[tempDoublePtr >> 2] = HEAP32[t + r >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[t + (r + 4) >> 2], +HEAPF64[tempDoublePtr >> 3])
            } else if (e == "i64") {
                n = [HEAP32[t + r >> 2], HEAP32[t + (r + 4) >> 2]]
            } else {
                e = "i32";
                n = HEAP32[t + r >> 2]
            }
            r += Runtime.getNativeFieldSize(e);
            return n
        }
        var n = e;
        var r = 0;
        var s = [];
        var o, u, a;
        while (1) {
            var f = n;
            o = HEAP8[n >> 0];
            if (o === 0) break;
            u = HEAP8[n + 1 >> 0];
            if (o == 37) {
                var l = false;
                var c = false;
                var h = false;
                var p = false;
                var d = false;
                e: while (1) {
                    switch (u) {
                        case 43:
                            l = true;
                            break;
                        case 45:
                            c = true;
                            break;
                        case 35:
                            h = true;
                            break;
                        case 48:
                            if (p) {
                                break e
                            } else {
                                p = true;
                                break
                            };
                        case 32:
                            d = true;
                            break;
                        default:
                            break e
                    }
                    n++;
                    u = HEAP8[n + 1 >> 0]
                }
                var v = 0;
                if (u == 42) {
                    v = i("i32");
                    n++;
                    u = HEAP8[n + 1 >> 0]
                } else {
                    while (u >= 48 && u <= 57) {
                        v = v * 10 + (u - 48);
                        n++;
                        u = HEAP8[n + 1 >> 0]
                    }
                }
                var m = false,
                    g = -1;
                if (u == 46) {
                    g = 0;
                    m = true;
                    n++;
                    u = HEAP8[n + 1 >> 0];
                    if (u == 42) {
                        g = i("i32");
                        n++
                    } else {
                        while (1) {
                            var y = HEAP8[n + 1 >> 0];
                            if (y < 48 || y > 57) break;
                            g = g * 10 + (y - 48);
                            n++
                        }
                    }
                    u = HEAP8[n + 1 >> 0]
                }
                if (g < 0) {
                    g = 6;
                    m = false
                }
                var b;
                switch (String.fromCharCode(u)) {
                    case "h":
                        var w = HEAP8[n + 2 >> 0];
                        if (w == 104) {
                            n++;
                            b = 1
                        } else {
                            b = 2
                        }
                        break;
                    case "l":
                        var w = HEAP8[n + 2 >> 0];
                        if (w == 108) {
                            n++;
                            b = 8
                        } else {
                            b = 4
                        }
                        break;
                    case "L":
                    case "q":
                    case "j":
                        b = 8;
                        break;
                    case "z":
                    case "t":
                    case "I":
                        b = 4;
                        break;
                    default:
                        b = null
                }
                if (b) n++;
                u = HEAP8[n + 1 >> 0];
                switch (String.fromCharCode(u)) {
                    case "d":
                    case "i":
                    case "u":
                    case "o":
                    case "x":
                    case "X":
                    case "p":
                        {
                            var E = u == 100 || u == 105;
                            b = b || 4;
                            var a = i("i" + b * 8);
                            var S = a;
                            var x;
                            if (b == 8) {
                                a = Runtime.makeBigInt(a[0], a[1], u == 117)
                            }
                            if (b <= 4) {
                                var T = Math.pow(256, b) - 1;
                                a = (E ? reSign : unSign)(a & T, b * 8)
                            }
                            var N = Math.abs(a);
                            var C = "";
                            if (u == 100 || u == 105) {
                                if (b == 8 && i64Math) x = i64Math.stringify(S[0], S[1], null);
                                else x = reSign(a, 8 * b, 1).toString(10)
                            } else if (u == 117) {
                                if (b == 8 && i64Math) x = i64Math.stringify(S[0], S[1], true);
                                else x = unSign(a, 8 * b, 1).toString(10);
                                a = Math.abs(a)
                            } else if (u == 111) {
                                x = (h ? "0" : "") + N.toString(8)
                            } else if (u == 120 || u == 88) {
                                C = h && a != 0 ? "0x" : "";
                                if (b == 8 && i64Math) {
                                    if (S[1]) {
                                        x = (S[1] >>> 0).toString(16);
                                        var k = (S[0] >>> 0).toString(16);
                                        while (k.length < 8) k = "0" + k;
                                        x += k
                                    } else {
                                        x = (S[0] >>> 0).toString(16)
                                    }
                                } else if (a < 0) {
                                    a = -a;
                                    x = (N - 1).toString(16);
                                    var L = [];
                                    for (var A = 0; A < x.length; A++) {
                                        L.push((15 - parseInt(x[A], 16)).toString(16))
                                    }
                                    x = L.join("");
                                    while (x.length < b * 2) x = "f" + x
                                } else {
                                    x = N.toString(16)
                                }
                                if (u == 88) {
                                    C = C.toUpperCase();
                                    x = x.toUpperCase()
                                }
                            } else if (u == 112) {
                                if (N === 0) {
                                    x = "(nil)"
                                } else {
                                    C = "0x";
                                    x = N.toString(16)
                                }
                            }
                            if (m) {
                                while (x.length < g) {
                                    x = "0" + x
                                }
                            }
                            if (a >= 0) {
                                if (l) {
                                    C = "+" + C
                                } else if (d) {
                                    C = " " + C
                                }
                            }
                            if (x.charAt(0) == "-") {
                                C = "-" + C;
                                x = x.substr(1)
                            }
                            while (C.length + x.length < v) {
                                if (c) {
                                    x += " "
                                } else {
                                    if (p) {
                                        x = "0" + x
                                    } else {
                                        C = " " + C
                                    }
                                }
                            }
                            x = C + x;
                            x.split("").forEach(function(e) {
                                s.push(e.charCodeAt(0))
                            });
                            break
                        };
                    case "f":
                    case "F":
                    case "e":
                    case "E":
                    case "g":
                    case "G":
                        {
                            var a = i("double");
                            var x;
                            if (isNaN(a)) {
                                x = "nan";
                                p = false
                            } else if (!isFinite(a)) {
                                x = (a < 0 ? "-" : "") + "inf";
                                p = false
                            } else {
                                var O = false;
                                var M = Math.min(g, 20);
                                if (u == 103 || u == 71) {
                                    O = true;
                                    g = g || 1;
                                    var _ = parseInt(a.toExponential(M).split("e")[1], 10);
                                    if (g > _ && _ >= -4) {
                                        u = (u == 103 ? "f" : "F").charCodeAt(0);
                                        g -= _ + 1
                                    } else {
                                        u = (u == 103 ? "e" : "E").charCodeAt(0);
                                        g--
                                    }
                                    M = Math.min(g, 20)
                                }
                                if (u == 101 || u == 69) {
                                    x = a.toExponential(M);
                                    if (/[eE][-+]\d$/.test(x)) {
                                        x = x.slice(0, -1) + "0" + x.slice(-1)
                                    }
                                } else if (u == 102 || u == 70) {
                                    x = a.toFixed(M);
                                    if (a === 0 && __reallyNegative(a)) {
                                        x = "-" + x
                                    }
                                }
                                var D = x.split("e");
                                if (O && !h) {
                                    while (D[0].length > 1 && D[0].indexOf(".") != -1 && (D[0].slice(-1) == "0" || D[0].slice(-1) == ".")) {
                                        D[0] = D[0].slice(0, -1)
                                    }
                                } else {
                                    if (h && x.indexOf(".") == -1) D[0] += ".";
                                    while (g > M++) D[0] += "0"
                                }
                                x = D[0] + (D.length > 1 ? "e" + D[1] : "");
                                if (u == 69) x = x.toUpperCase();
                                if (a >= 0) {
                                    if (l) {
                                        x = "+" + x
                                    } else if (d) {
                                        x = " " + x
                                    }
                                }
                            }
                            while (x.length < v) {
                                if (c) {
                                    x += " "
                                } else {
                                    if (p && (x[0] == "-" || x[0] == "+")) {
                                        x = x[0] + "0" + x.slice(1)
                                    } else {
                                        x = (p ? "0" : " ") + x
                                    }
                                }
                            }
                            if (u < 97) x = x.toUpperCase();
                            x.split("").forEach(function(e) {
                                s.push(e.charCodeAt(0))
                            });
                            break
                        };
                    case "s":
                        {
                            var P = i("i8*");
                            var H = P ? _strlen(P) : "(null)".length;
                            if (m) H = Math.min(H, g);
                            if (!c) {
                                while (H < v--) {
                                    s.push(32)
                                }
                            }
                            if (P) {
                                for (var A = 0; A < H; A++) {
                                    s.push(HEAPU8[P++ >> 0])
                                }
                            } else {
                                s = s.concat(intArrayFromString("(null)".substr(0, H), true))
                            }
                            if (c) {
                                while (H < v--) {
                                    s.push(32)
                                }
                            }
                            break
                        };
                    case "c":
                        {
                            if (c) s.push(i("i8"));
                            while (--v > 0) {
                                s.push(32)
                            }
                            if (!c) s.push(i("i8"));
                            break
                        };
                    case "n":
                        {
                            var B = i("i32*");
                            HEAP32[B >> 2] = s.length;
                            break
                        };
                    case "%":
                        {
                            s.push(o);
                            break
                        };
                    default:
                        {
                            for (var A = f; A < n + 2; A++) {
                                s.push(HEAP8[A >> 0])
                            }
                        }
                }
                n += 2
            } else {
                s.push(o);
                n += 1
            }
        }
        return s
    }

    function _fprintf(e, t, n) {
        var r = __formatString(t, n);
        var i = Runtime.stackSave();
        var s = _fwrite(allocate(r, "i8", ALLOC_STACK), 1, r.length, e);
        Runtime.stackRestore(i);
        return s
    }

    function _open(e, t, n) {
        var r = HEAP32[n >> 2];
        e = Pointer_stringify(e);
        try {
            var i = FS.open(e, t, r);
            return i.fd
        } catch (s) {
            FS.handleFSError(s);
            return -1
        }
    }

    function _fopen(e, t) {
        var n;
        t = Pointer_stringify(t);
        if (t[0] == "r") {
            if (t.indexOf("+") != -1) {
                n = 2
            } else {
                n = 0
            }
        } else if (t[0] == "w") {
            if (t.indexOf("+") != -1) {
                n = 2
            } else {
                n = 1
            }
            n |= 64;
            n |= 512
        } else if (t[0] == "a") {
            if (t.indexOf("+") != -1) {
                n = 2
            } else {
                n = 1
            }
            n |= 64;
            n |= 1024
        } else {
            ___setErrNo(ERRNO_CODES.EINVAL);
            return 0
        }
        var r = _open(e, n, allocate([511, 0, 0, 0], "i32", ALLOC_STACK));
        return r === -1 ? 0 : FS.getPtrForStream(FS.getStream(r))
    }

    function _fputc(e, t) {
        var n = unSign(e & 255);
        HEAP8[_fputc.ret >> 0] = n;
        var r = _fileno(t);
        var i = _write(r, _fputc.ret, 1);
        if (i == -1) {
            var s = FS.getStreamFromPtr(t);
            if (s) s.error = true;
            return -1
        } else {
            return n
        }
    }

    function _poll(e, t, n) {
        var r = 0;
        for (var i = 0; i < t; i++) {
            var s = e + 8 * i;
            var o = HEAP32[s >> 2];
            var u = HEAP16[s + 4 >> 1];
            var a = 32;
            var f = FS.getStream(o);
            if (f) {
                a = ___DEFAULT_POLLMASK;
                if (f.stream_ops.poll) {
                    a = f.stream_ops.poll(f)
                }
            }
            a &= u | 8 | 16;
            if (a) r++;
            HEAP16[s + 6 >> 1] = a
        }
        return r
    }

    function _js_read_image(e, t) {
        var n = Module["HEAPU8"];
        var r = n.subarray(e, e + t);
        Module["getImageData"](r);
        return r.length
    }

    function _usleep(e) {
        var t = e / 1e3;
        if (ENVIRONMENT_IS_WEB && window["performance"] && window["performance"]["now"]) {
            var n = window["performance"]["now"]();
            while (window["performance"]["now"]() - n < t) {}
        } else {
            var n = Date.now();
            while (Date.now() - n < t) {}
        }
        return 0
    }

    function _nanosleep(e, t) {
        var n = HEAP32[e >> 2];
        var r = HEAP32[e + 4 >> 2];
        if (t !== 0) {
            HEAP32[t >> 2] = 0;
            HEAP32[t + 4 >> 2] = 0
        }
        return _usleep(n * 1e6 + r / 1e3)
    }

    function _fputs(e, t) {
        var n = _fileno(t);
        return _write(n, e, _strlen(e))
    }

    function _emscripten_set_main_loop_timing(e, t) {
        Browser.mainLoop.timingMode = e;
        Browser.mainLoop.timingValue = t;
        if (!Browser.mainLoop.func) {
            return 1
        }
        if (e == 0) {
            Browser.mainLoop.scheduler = function() {
                setTimeout(Browser.mainLoop.runner, t)
            };
            Browser.mainLoop.method = "timeout"
        } else if (e == 1) {
            Browser.mainLoop.scheduler = function() {
                Browser.requestAnimationFrame(Browser.mainLoop.runner)
            };
            Browser.mainLoop.method = "rAF"
        }
        return 0
    }

    function _emscripten_set_main_loop(e, t, n, r) {
        Module["noExitRuntime"] = true;
        assert(!Browser.mainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");
        Browser.mainLoop.func = e;
        Browser.mainLoop.arg = r;
        var i = Browser.mainLoop.currentlyRunningMainloop;
        Browser.mainLoop.runner = function() {
            if (ABORT) return;
            if (Browser.mainLoop.queue.length > 0) {
                var n = Date.now();
                var s = Browser.mainLoop.queue.shift();
                s.func(s.arg);
                if (Browser.mainLoop.remainingBlockers) {
                    var o = Browser.mainLoop.remainingBlockers;
                    var u = o % 1 == 0 ? o - 1 : Math.floor(o);
                    if (s.counted) {
                        Browser.mainLoop.remainingBlockers = u
                    } else {
                        u = u + .5;
                        Browser.mainLoop.remainingBlockers = (8 * o + u) / 9
                    }
                }
                console.log('main loop blocker "' + s.name + '" took ' + (Date.now() - n) + " ms");
                Browser.mainLoop.updateStatus();
                setTimeout(Browser.mainLoop.runner, 0);
                return
            }
            if (i < Browser.mainLoop.currentlyRunningMainloop) return;
            Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
            if (Browser.mainLoop.timingMode == 1 && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
                Browser.mainLoop.scheduler();
                return
            }
            if (Browser.mainLoop.method === "timeout" && Module.ctx) {
                Module.printErr("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");
                Browser.mainLoop.method = ""
            }
            Browser.mainLoop.runIter(function() {
                if (typeof r !== "undefined") {
                    Runtime.dynCall("vi", e, [r])
                } else {
                    Runtime.dynCall("v", e)
                }
            });
            if (i < Browser.mainLoop.currentlyRunningMainloop) return;
            if (typeof SDL === "object" && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
            Browser.mainLoop.scheduler()
        };
        if (t && t > 0) _emscripten_set_main_loop_timing(0, 1e3 / t);
        else _emscripten_set_main_loop_timing(1, 1);
        Browser.mainLoop.scheduler();
        if (n) {
            throw "SimulateInfiniteLoop"
        }
    }

    function _time(e) {
        var t = Date.now() / 1e3 | 0;
        if (e) {
            HEAP32[e >> 2] = t
        }
        return t
    }

    function _js_get_height() {
        return Module["imageHeight"]
    }

    function _recv(e, t, n, r) {
        var i = SOCKFS.getSocket(e);
        if (!i) {
            ___setErrNo(ERRNO_CODES.EBADF);
            return -1
        }
        return _read(e, t, n)
    }

    function _pread(e, t, n, r) {
        var i = FS.getStream(e);
        if (!i) {
            ___setErrNo(ERRNO_CODES.EBADF);
            return -1
        }
        try {
            var s = HEAP8;
            return FS.read(i, s, t, n, r)
        } catch (o) {
            FS.handleFSError(o);
            return -1
        }
    }

    function _read(e, t, n) {
        var r = FS.getStream(e);
        if (!r) {
            ___setErrNo(ERRNO_CODES.EBADF);
            return -1
        }
        try {
            var i = HEAP8;
            return FS.read(r, i, t, n)
        } catch (s) {
            FS.handleFSError(s);
            return -1
        }
    }

    function _js_output_result(e, t, n) {
        var r = Module["Pointer_stringify"];
        Module["outputResult"](r(e), r(t), r(n))
    }

    function _emscripten_memcpy_big(e, t, n) {
        HEAPU8.set(HEAPU8.subarray(t, t + n), e);
        return e
    }

    function _js_get_width() {
        return Module["imageWidth"]
    }

    function _puts(e) {
        var t = HEAP32[_stdout >> 2];
        var n = _fputs(e, t);
        if (n < 0) {
            return n
        } else {
            var r = _fputc(10, t);
            return r < 0 ? -1 : n + 1
        }
    }

    function ___errno_location() {
        return ___errno_state
    }

    function _perror(e) {
        var t = HEAP32[_stdout >> 2];
        if (e) {
            _fputs(e, t);
            _fputc(58, t);
            _fputc(32, t)
        }
        var n = HEAP32[___errno_location() >> 2];
        _puts(_strerror(n))
    }

    function _sbrk(e) {
        var t = _sbrk;
        if (!t.called) {
            DYNAMICTOP = alignMemoryPage(DYNAMICTOP);
            t.called = true;
            assert(Runtime.dynamicAlloc);
            t.alloc = Runtime.dynamicAlloc;
            Runtime.dynamicAlloc = function() {
                abort("cannot dynamically allocate, sbrk now has control")
            }
        }
        var n = DYNAMICTOP;
        if (e != 0) t.alloc(e);
        return n
    }

    function _pipe(e) {
        ___setErrNo(ERRNO_CODES.ENOSYS);
        return -1
    }

    function _sysconf(e) {
        switch (e) {
            case 30:
                return PAGE_SIZE;
            case 132:
            case 133:
            case 12:
            case 137:
            case 138:
            case 15:
            case 235:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 149:
            case 13:
            case 10:
            case 236:
            case 153:
            case 9:
            case 21:
            case 22:
            case 159:
            case 154:
            case 14:
            case 77:
            case 78:
            case 139:
            case 80:
            case 81:
            case 79:
            case 82:
            case 68:
            case 67:
            case 164:
            case 11:
            case 29:
            case 47:
            case 48:
            case 95:
            case 52:
            case 51:
            case 46:
                return 200809;
            case 27:
            case 246:
            case 127:
            case 128:
            case 23:
            case 24:
            case 160:
            case 161:
            case 181:
            case 182:
            case 242:
            case 183:
            case 184:
            case 243:
            case 244:
            case 245:
            case 165:
            case 178:
            case 179:
            case 49:
            case 50:
            case 168:
            case 169:
            case 175:
            case 170:
            case 171:
            case 172:
            case 97:
            case 76:
            case 32:
            case 173:
            case 35:
                return -1;
            case 176:
            case 177:
            case 7:
            case 155:
            case 8:
            case 157:
            case 125:
            case 126:
            case 92:
            case 93:
            case 129:
            case 130:
            case 131:
            case 94:
            case 91:
                return 1;
            case 74:
            case 60:
            case 69:
            case 70:
            case 4:
                return 1024;
            case 31:
            case 42:
            case 72:
                return 32;
            case 87:
            case 26:
            case 33:
                return 2147483647;
            case 34:
            case 1:
                return 47839;
            case 38:
            case 36:
                return 99;
            case 43:
            case 37:
                return 2048;
            case 0:
                return 2097152;
            case 3:
                return 65536;
            case 28:
                return 32768;
            case 44:
                return 32767;
            case 75:
                return 16384;
            case 39:
                return 1e3;
            case 89:
                return 700;
            case 71:
                return 256;
            case 40:
                return 255;
            case 2:
                return 100;
            case 180:
                return 64;
            case 25:
                return 20;
            case 5:
                return 16;
            case 6:
                return 6;
            case 73:
                return 4;
            case 84:
                {
                    if (typeof navigator === "object") return navigator["hardwareConcurrency"] || 1;
                    return 1
                }
        }
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1
    }

    function invoke_iiii(e, t, n, r) {
        try {
            return Module["dynCall_iiii"](e, t, n, r)
        } catch (i) {
            if (typeof i !== "number" && i !== "longjmp") throw i;
            asm["setThrew"](1, 0)
        }
    }

    function invoke_vi(e, t) {
        try {
            Module["dynCall_vi"](e, t)
        } catch (n) {
            if (typeof n !== "number" && n !== "longjmp") throw n;
            asm["setThrew"](1, 0)
        }
    }

    function invoke_vii(e, t, n) {
        try {
            Module["dynCall_vii"](e, t, n)
        } catch (r) {
            if (typeof r !== "number" && r !== "longjmp") throw r;
            asm["setThrew"](1, 0)
        }
    }

    function invoke_ii(e, t) {
        try {
            return Module["dynCall_ii"](e, t)
        } catch (n) {
            if (typeof n !== "number" && n !== "longjmp") throw n;
            asm["setThrew"](1, 0)
        }
    }

    function invoke_iii(e, t, n) {
        try {
            return Module["dynCall_iii"](e, t, n)
        } catch (r) {
            if (typeof r !== "number" && r !== "longjmp") throw r;
            asm["setThrew"](1, 0)
        }
    }

    function invoke_viiii(e, t, n, r, i) {
        try {
            Module["dynCall_viiii"](e, t, n, r, i)
        } catch (s) {
            if (typeof s !== "number" && s !== "longjmp") throw s;
            asm["setThrew"](1, 0)
        }
    }

    function ExitStatus(e) {
        this.name = "ExitStatus";
        this.message = "Program terminated with exit(" + e + ")";
        this.status = e
    }

    function run(e) {
        function t() {
            if (Module["calledRun"]) return;
            Module["calledRun"] = true;
            if (ABORT) return;
            ensureInitRuntime();
            preMain();
            if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
                Module.printErr("pre-main prep time: " + (Date.now() - preloadStartTime) + " ms")
            }
            if (Module["_main"] && shouldRunNow) {
                Module["callMain"](e)
            }
            postRun()
        }
        e = e || Module["arguments"];
        if (preloadStartTime === null) preloadStartTime = Date.now();
        if (runDependencies > 0) {
            return
        }
        preRun();
        if (runDependencies > 0) return;
        if (Module["calledRun"]) return;
        if (Module["setStatus"]) {
            Module["setStatus"]("Running...");
            setTimeout(function() {
                setTimeout(function() {
                    Module["setStatus"]("")
                }, 1);
                t()
            }, 1)
        } else {
            t()
        }
    }

    function exit(e) {
        if (Module["noExitRuntime"]) {
            return
        }
        ABORT = true;
        EXITSTATUS = e;
        STACKTOP = initialStackTop;
        exitRuntime();
        if (ENVIRONMENT_IS_NODE) {
            process["stdout"]["once"]("drain", function() {
                process["exit"](e)
            });
            console.log(" ");
            setTimeout(function() {
                process["exit"](e)
            }, 500)
        } else if (ENVIRONMENT_IS_SHELL && typeof quit === "function") {
            quit(e)
        }
        throw new ExitStatus(e)
    }

    function abort(e) {
        if (e) {
            Module.print(e);
            Module.printErr(e)
        }
        ABORT = true;
        EXITSTATUS = 1;
        var t = "\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";
        throw "abort() at " + stackTrace() + t
    }
    var result = [];
    var Module = {};
    Module["imageWidth"] = imgData.width;
    Module["imageHeight"] = imgData.height;
    Module["getImageData"] = function(e) {
        var t = imgData.data;
        for (var n = 0, r = 0; n < t.length; n += 4, r++) {
            e[r] = t[n] * 66 + t[n + 1] * 129 + t[n + 2] * 25 + 4096 >> 8
        }
    };
    Module["outputResult"] = function(e, t, n) {
        result.push([e, t, n])
    };
    var Module;
    if (!Module) Module = (typeof Module !== "undefined" ? Module : null) || {};
    var moduleOverrides = {};
    for (var key in Module) {
        if (Module.hasOwnProperty(key)) {
            moduleOverrides[key] = Module[key]
        }
    }
    var ENVIRONMENT_IS_NODE = typeof process === "object" && typeof require === "function";
    var ENVIRONMENT_IS_WEB = typeof window === "object";
    var ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
    var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
    if (ENVIRONMENT_IS_NODE) {
        if (!Module["print"]) Module["print"] = function(t) {
            process["stdout"].write(t + "\n")
        };
        if (!Module["printErr"]) Module["printErr"] = function(t) {
            process["stderr"].write(t + "\n")
        };
        var nodeFS = require("fs");
        var nodePath = require("path");
        Module["read"] = function(t, n) {
            t = nodePath["normalize"](t);
            var r = nodeFS["readFileSync"](t);
            if (!r && t != nodePath["resolve"](t)) {
                t = path.join(__dirname, "..", "src", t);
                r = nodeFS["readFileSync"](t)
            }
            if (r && !n) r = r.toString();
            return r
        };
        Module["readBinary"] = function(t) {
            return Module["read"](t, true)
        };
        Module["load"] = function(t) {
            globalEval(read(t))
        };
        Module["thisProgram"] = process["argv"][1].replace(/\\/g, "/");
        Module["arguments"] = process["argv"].slice(2);
        if (typeof module !== "undefined") {
            module["exports"] = Module
        }
        process["on"]("uncaughtException", function(e) {
            if (!(e instanceof ExitStatus)) {
                throw e
            }
        })
    } else if (ENVIRONMENT_IS_SHELL) {
        if (!Module["print"]) Module["print"] = print;
        if (typeof printErr != "undefined") Module["printErr"] = printErr;
        if (typeof read != "undefined") {
            Module["read"] = read
        } else {
            Module["read"] = function() {
                throw "no read() available (jsc?)"
            }
        }
        Module["readBinary"] = function(t) {
            if (typeof readbuffer === "function") {
                return new Uint8Array(readbuffer(t))
            }
            var n = read(t, "binary");
            assert(typeof n === "object");
            return n
        };
        if (typeof scriptArgs != "undefined") {
            Module["arguments"] = scriptArgs
        } else if (typeof arguments != "undefined") {
            Module["arguments"] = arguments
        }
        this["Module"] = Module
    } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
        Module["read"] = function(t) {
            var n = new XMLHttpRequest;
            n.open("GET", t, false);
            n.send(null);
            return n.responseText
        };
        if (typeof arguments != "undefined") {
            Module["arguments"] = arguments
        }
        if (typeof console !== "undefined") {
            if (!Module["print"]) Module["print"] = function(t) {
                console.log(t)
            };
            if (!Module["printErr"]) Module["printErr"] = function(t) {
                console.log(t)
            }
        } else {
            var TRY_USE_DUMP = false;
            if (!Module["print"]) Module["print"] = TRY_USE_DUMP && typeof dump !== "undefined" ? function(e) {
                dump(e)
            } : function(e) {}
        }
        if (ENVIRONMENT_IS_WEB) {
            window["Module"] = Module
        } else {
            Module["load"] = importScripts
        }
    } else {
        throw "Unknown runtime environment. Where are we?"
    }
    if (!Module["load"] && Module["read"]) {
        Module["load"] = function(t) {
            globalEval(Module["read"](t))
        }
    }
    if (!Module["print"]) {
        Module["print"] = function() {}
    }
    if (!Module["printErr"]) {
        Module["printErr"] = Module["print"]
    }
    if (!Module["arguments"]) {
        Module["arguments"] = []
    }
    if (!Module["thisProgram"]) {
        Module["thisProgram"] = "./this.program"
    }
    Module.print = Module["print"];
    Module.printErr = Module["printErr"];
    Module["preRun"] = [];
    Module["postRun"] = [];
    for (var key in moduleOverrides) {
        if (moduleOverrides.hasOwnProperty(key)) {
            Module[key] = moduleOverrides[key]
        }
    }
    var Runtime = {
        setTempRet0: function(e) {
            tempRet0 = e
        },
        getTempRet0: function() {
            return tempRet0
        },
        stackSave: function() {
            return STACKTOP
        },
        stackRestore: function(e) {
            STACKTOP = e
        },
        getNativeTypeSize: function(e) {
            switch (e) {
                case "i1":
                case "i8":
                    return 1;
                case "i16":
                    return 2;
                case "i32":
                    return 4;
                case "i64":
                    return 8;
                case "float":
                    return 4;
                case "double":
                    return 8;
                default:
                    {
                        if (e[e.length - 1] === "*") {
                            return Runtime.QUANTUM_SIZE
                        } else if (e[0] === "i") {
                            var t = parseInt(e.substr(1));
                            assert(t % 8 === 0);
                            return t / 8
                        } else {
                            return 0
                        }
                    }
            }
        },
        getNativeFieldSize: function(e) {
            return Math.max(Runtime.getNativeTypeSize(e), Runtime.QUANTUM_SIZE)
        },
        STACK_ALIGN: 16,
        getAlignSize: function(e, t, n) {
            if (!n && (e == "i64" || e == "double")) return 8;
            if (!e) return Math.min(t, 8);
            return Math.min(t || (e ? Runtime.getNativeFieldSize(e) : 0), Runtime.QUANTUM_SIZE)
        },
        dynCall: function(e, t, n) {
            if (n && n.length) {
                if (!n.splice) n = Array.prototype.slice.call(n);
                n.splice(0, 0, t);
                return Module["dynCall_" + e].apply(null, n)
            } else {
                return Module["dynCall_" + e].call(null, t)
            }
        },
        functionPointers: [],
        addFunction: function(e) {
            for (var t = 0; t < Runtime.functionPointers.length; t++) {
                if (!Runtime.functionPointers[t]) {
                    Runtime.functionPointers[t] = e;
                    return 2 * (1 + t)
                }
            }
            throw "Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS."
        },
        removeFunction: function(e) {
            Runtime.functionPointers[(e - 2) / 2] = null
        },
        getAsmConst: function(code, numArgs) {
            if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
            var func = Runtime.asmConstCache[code];
            if (func) return func;
            var args = [];
            for (var i = 0; i < numArgs; i++) {
                args.push(String.fromCharCode(36) + i)
            }
            var source = Pointer_stringify(code);
            if (source[0] === '"') {
                if (source.indexOf('"', 1) === source.length - 1) {
                    source = source.substr(1, source.length - 2)
                } else {
                    abort("invalid EM_ASM input |" + source + "|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)")
                }
            }
            try {
                var evalled = eval("(function(Module, FS) { return function(" + args.join(",") + "){ " + source + " } })")(Module, typeof FS !== "undefined" ? FS : null)
            } catch (e) {
                Module.printErr("error in executing inline EM_ASM code: " + e + " on: \n\n" + source + "\n\nwith args |" + args + "| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)");
                throw e
            }
            return Runtime.asmConstCache[code] = evalled
        },
        warnOnce: function(e) {
            if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
            if (!Runtime.warnOnce.shown[e]) {
                Runtime.warnOnce.shown[e] = 1;
                Module.printErr(e)
            }
        },
        funcWrappers: {},
        getFuncWrapper: function(e, t) {
            assert(t);
            if (!Runtime.funcWrappers[t]) {
                Runtime.funcWrappers[t] = {}
            }
            var n = Runtime.funcWrappers[t];
            if (!n[e]) {
                n[e] = function() {
                    return Runtime.dynCall(t, e, arguments)
                }
            }
            return n[e]
        },
        UTF8Processor: function() {
            var e = [];
            var t = 0;
            this.processCChar = function(n) {
                n = n & 255;
                if (e.length == 0) {
                    if ((n & 128) == 0) {
                        return String.fromCharCode(n)
                    }
                    e.push(n);
                    if ((n & 224) == 192) {
                        t = 1
                    } else if ((n & 240) == 224) {
                        t = 2
                    } else {
                        t = 3
                    }
                    return ""
                }
                if (t) {
                    e.push(n);
                    t--;
                    if (t > 0) return ""
                }
                var r = e[0];
                var i = e[1];
                var s = e[2];
                var o = e[3];
                var u;
                if (e.length == 2) {
                    u = String.fromCharCode((r & 31) << 6 | i & 63)
                } else if (e.length == 3) {
                    u = String.fromCharCode((r & 15) << 12 | (i & 63) << 6 | s & 63)
                } else {
                    var a = (r & 7) << 18 | (i & 63) << 12 | (s & 63) << 6 | o & 63;
                    u = String.fromCharCode(((a - 65536) / 1024 | 0) + 55296, (a - 65536) % 1024 + 56320)
                }
                e.length = 0;
                return u
            };
            this.processJSString = function(t) {
                t = unescape(encodeURIComponent(t));
                var n = [];
                for (var r = 0; r < t.length; r++) {
                    n.push(t.charCodeAt(r))
                }
                return n
            }
        },
        getCompilerSetting: function(e) {
            throw "You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work"
        },
        stackAlloc: function(e) {
            var t = STACKTOP;
            STACKTOP = STACKTOP + e | 0;
            STACKTOP = STACKTOP + 15 & -16;
            return t
        },
        staticAlloc: function(e) {
            var t = STATICTOP;
            STATICTOP = STATICTOP + e | 0;
            STATICTOP = STATICTOP + 15 & -16;
            return t
        },
        dynamicAlloc: function(e) {
            var t = DYNAMICTOP;
            DYNAMICTOP = DYNAMICTOP + e | 0;
            DYNAMICTOP = DYNAMICTOP + 15 & -16;
            if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();
            return t
        },
        alignMemory: function(e, t) {
            var n = e = Math.ceil(e / (t ? t : 16)) * (t ? t : 16);
            return n
        },
        makeBigInt: function(e, t, n) {
            var r = n ? +(e >>> 0) + +(t >>> 0) * 4294967296 : +(e >>> 0) + +(t | 0) * 4294967296;
            return r
        },
        GLOBAL_BASE: 8,
        QUANTUM_SIZE: 4,
        __dummy__: 0
    };
    Module["Runtime"] = Runtime;
    var __THREW__ = 0;
    var ABORT = false;
    var EXITSTATUS = 0;
    var undef = 0;
    var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
    var tempI64, tempI64b;
    var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
    var globalScope = this;
    var cwrap, ccall;
    (function() {
        function parseJSFunc(e) {
            var t = e.toString().match(sourceRegex).slice(1);
            return {
                arguments: t[0],
                body: t[1],
                returnValue: t[2]
            }
        }
        var stack = 0;
        var JSfuncs = {
            stackSave: function() {
                stack = Runtime.stackSave()
            },
            stackRestore: function() {
                Runtime.stackRestore(stack)
            },
            arrayToC: function(e) {
                var t = Runtime.stackAlloc(e.length);
                writeArrayToMemory(e, t);
                return t
            },
            stringToC: function(e) {
                var t = 0;
                if (e !== null && e !== undefined && e !== 0) {
                    t = Runtime.stackAlloc((e.length << 2) + 1);
                    writeStringToMemory(e, t)
                }
                return t
            }
        };
        var toC = {
            string: JSfuncs["stringToC"],
            array: JSfuncs["arrayToC"]
        };
        ccall = function(t, n, r, i) {
            var s = getCFunc(t);
            var o = [];
            if (i) {
                for (var u = 0; u < i.length; u++) {
                    var a = toC[r[u]];
                    if (a) {
                        if (stack === 0) stack = Runtime.stackSave();
                        o[u] = a(i[u])
                    } else {
                        o[u] = i[u]
                    }
                }
            }
            var f = s.apply(null, o);
            if (n === "string") f = Pointer_stringify(f);
            if (stack !== 0) JSfuncs["stackRestore"]();
            return f
        };
        var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
        var JSsource = {};
        for (var fun in JSfuncs) {
            if (JSfuncs.hasOwnProperty(fun)) {
                JSsource[fun] = parseJSFunc(JSfuncs[fun])
            }
        }
        cwrap = function cwrap(ident, returnType, argTypes) {
            argTypes = argTypes || [];
            var cfunc = getCFunc(ident);
            var numericArgs = argTypes.every(function(e) {
                return e === "number"
            });
            var numericRet = returnType !== "string";
            if (numericRet && numericArgs) {
                return cfunc
            }
            var argNames = argTypes.map(function(e, t) {
                return "$" + t
            });
            var funcstr = "(function(" + argNames.join(",") + ") {";
            var nargs = argTypes.length;
            if (!numericArgs) {
                funcstr += JSsource["stackSave"].body + ";";
                for (var i = 0; i < nargs; i++) {
                    var arg = argNames[i],
                        type = argTypes[i];
                    if (type === "number") continue;
                    var convertCode = JSsource[type + "ToC"];
                    funcstr += "var " + convertCode.arguments + " = " + arg + ";";
                    funcstr += convertCode.body + ";";
                    funcstr += arg + "=" + convertCode.returnValue + ";"
                }
            }
            var cfuncname = parseJSFunc(function() {
                return cfunc
            }).returnValue;
            funcstr += "var ret = " + cfuncname + "(" + argNames.join(",") + ");";
            if (!numericRet) {
                var strgfy = parseJSFunc(function() {
                    return Pointer_stringify
                }).returnValue;
                funcstr += "ret = " + strgfy + "(ret);"
            }
            if (!numericArgs) {
                funcstr += JSsource["stackRestore"].body + ";"
            }
            funcstr += "return ret})";
            return eval(funcstr)
        }
    })();
    Module["cwrap"] = cwrap;
    Module["ccall"] = ccall;
    Module["setValue"] = setValue;
    Module["getValue"] = getValue;
    var ALLOC_NORMAL = 0;
    var ALLOC_STACK = 1;
    var ALLOC_STATIC = 2;
    var ALLOC_DYNAMIC = 3;
    var ALLOC_NONE = 4;
    Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
    Module["ALLOC_STACK"] = ALLOC_STACK;
    Module["ALLOC_STATIC"] = ALLOC_STATIC;
    Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
    Module["ALLOC_NONE"] = ALLOC_NONE;
    Module["allocate"] = allocate;
    Module["Pointer_stringify"] = Pointer_stringify;
    Module["UTF16ToString"] = UTF16ToString;
    Module["stringToUTF16"] = stringToUTF16;
    Module["UTF32ToString"] = UTF32ToString;
    Module["stringToUTF32"] = stringToUTF32;
    Module["stackTrace"] = stackTrace;
    var PAGE_SIZE = 4096;
    var HEAP;
    var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
    var STATIC_BASE = 0,
        STATICTOP = 0,
        staticSealed = false;
    var STACK_BASE = 0,
        STACKTOP = 0,
        STACK_MAX = 0;
    var DYNAMIC_BASE = 0,
        DYNAMICTOP = 0;
    var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;
    var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 16777216;
    var FAST_MEMORY = Module["FAST_MEMORY"] || 2097152;
    var totalMemory = 64 * 1024;
    while (totalMemory < TOTAL_MEMORY || totalMemory < 2 * TOTAL_STACK) {
        if (totalMemory < 16 * 1024 * 1024) {
            totalMemory *= 2
        } else {
            totalMemory += 16 * 1024 * 1024
        }
    }
    if (totalMemory !== TOTAL_MEMORY) {
        Module.printErr("increasing TOTAL_MEMORY to " + totalMemory + " to be compliant with the asm.js spec");
        TOTAL_MEMORY = totalMemory
    }
    assert(typeof Int32Array !== "undefined" && typeof Float64Array !== "undefined" && !!(new Int32Array(1))["subarray"] && !!(new Int32Array(1))["set"], "JS engine does not provide full typed array support");
    var buffer = new ArrayBuffer(TOTAL_MEMORY);
    HEAP8 = new Int8Array(buffer);
    HEAP16 = new Int16Array(buffer);
    HEAP32 = new Int32Array(buffer);
    HEAPU8 = new Uint8Array(buffer);
    HEAPU16 = new Uint16Array(buffer);
    HEAPU32 = new Uint32Array(buffer);
    HEAPF32 = new Float32Array(buffer);
    HEAPF64 = new Float64Array(buffer);
    HEAP32[0] = 255;
    assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, "Typed arrays 2 must be run on a little-endian system");
    Module["HEAP"] = HEAP;
    Module["buffer"] = buffer;
    Module["HEAP8"] = HEAP8;
    Module["HEAP16"] = HEAP16;
    Module["HEAP32"] = HEAP32;
    Module["HEAPU8"] = HEAPU8;
    Module["HEAPU16"] = HEAPU16;
    Module["HEAPU32"] = HEAPU32;
    Module["HEAPF32"] = HEAPF32;
    Module["HEAPF64"] = HEAPF64;
    var __ATPRERUN__ = [];
    var __ATINIT__ = [];
    var __ATMAIN__ = [];
    var __ATEXIT__ = [];
    var __ATPOSTRUN__ = [];
    var runtimeInitialized = false;
    var runtimeExited = false;
    Module["addOnPreRun"] = Module.addOnPreRun = addOnPreRun;
    Module["addOnInit"] = Module.addOnInit = addOnInit;
    Module["addOnPreMain"] = Module.addOnPreMain = addOnPreMain;
    Module["addOnExit"] = Module.addOnExit = addOnExit;
    Module["addOnPostRun"] = Module.addOnPostRun = addOnPostRun;
    Module["intArrayFromString"] = intArrayFromString;
    Module["intArrayToString"] = intArrayToString;
    Module["writeStringToMemory"] = writeStringToMemory;
    Module["writeArrayToMemory"] = writeArrayToMemory;
    Module["writeAsciiToMemory"] = writeAsciiToMemory;
    if (!Math["imul"] || Math["imul"](4294967295, 5) !== -5) Math["imul"] = function(t, n) {
        var r = t >>> 16;
        var i = t & 65535;
        var s = n >>> 16;
        var o = n & 65535;
        return i * o + (r * o + i * s << 16) | 0
    };
    Math.imul = Math["imul"];
    var Math_abs = Math.abs;
    var Math_cos = Math.cos;
    var Math_sin = Math.sin;
    var Math_tan = Math.tan;
    var Math_acos = Math.acos;
    var Math_asin = Math.asin;
    var Math_atan = Math.atan;
    var Math_atan2 = Math.atan2;
    var Math_exp = Math.exp;
    var Math_log = Math.log;
    var Math_sqrt = Math.sqrt;
    var Math_ceil = Math.ceil;
    var Math_floor = Math.floor;
    var Math_pow = Math.pow;
    var Math_imul = Math.imul;
    var Math_fround = Math.fround;
    var Math_min = Math.min;
    var runDependencies = 0;
    var runDependencyWatcher = null;
    var dependenciesFulfilled = null;
    Module["addRunDependency"] = addRunDependency;
    Module["removeRunDependency"] = removeRunDependency;
    Module["preloadedImages"] = {};
    Module["preloadedAudios"] = {};
    var memoryInitializer = null;
    STATIC_BASE = 8;
    STATICTOP = STATIC_BASE + 134416;
    __ATINIT__.push();
    allocate([0, 0, 0, 0, 0, 0, 0, 0, 112, 114, 111, 99, 101, 115, 115, 111, 114, 0, 0, 0, 0, 0, 0, 0, 46, 46, 47, 116, 101, 109, 112, 108, 97, 116, 101, 115, 47, 122, 98, 97, 114, 45, 109, 97, 105, 110, 46, 99, 0, 0, 0, 0, 0, 0, 0, 0, 109, 97, 105, 110, 0, 0, 0, 0, 122, 105, 109, 97, 103, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 114, 114, 45, 62, 109, 97, 103, 105, 99, 32, 61, 61, 32, 69, 82, 82, 73, 78, 70, 79, 95, 77, 65, 71, 73, 67, 0, 0, 0, 0, 0, 122, 98, 97, 114, 47, 101, 114, 114, 111, 114, 46, 99, 0, 0, 0, 0, 95, 122, 98, 97, 114, 95, 101, 114, 114, 111, 114, 95, 115, 112, 101, 119, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115, 0, 0, 0, 0, 0, 0, 37, 115, 58, 32, 122, 98, 97, 114, 32, 37, 115, 32, 105, 110, 32, 37, 115, 40, 41, 58, 10, 32, 32, 32, 32, 37, 115, 58, 32, 0, 0, 0, 95, 122, 98, 97, 114, 95, 101, 114, 114, 111, 114, 95, 115, 116, 114, 105, 110, 103, 0, 0, 0, 0, 0, 0, 184, 2, 0, 0, 200, 2, 0, 0, 208, 2, 0, 0, 216, 2, 0, 0, 224, 2, 0, 0, 0, 0, 0, 0, 136, 2, 0, 0, 152, 2, 0, 0, 160, 2, 0, 0, 168, 2, 0, 0, 16, 1, 0, 0, 0, 0, 0, 0, 60, 117, 110, 107, 110, 111, 119, 110, 62, 0, 0, 0, 0, 0, 0, 0, 128, 1, 0, 0, 144, 1, 0, 0, 160, 1, 0, 0, 184, 1, 0, 0, 208, 1, 0, 0, 224, 1, 0, 0, 240, 1, 0, 0, 0, 2, 0, 0, 24, 2, 0, 0, 48, 2, 0, 0, 72, 2, 0, 0, 96, 2, 0, 0, 120, 2, 0, 0, 0, 0, 0, 0, 60, 63, 62, 0, 0, 0, 0, 0, 37, 100, 0, 0, 0, 0, 0, 0, 37, 120, 0, 0, 0, 0, 0, 0, 58, 32, 37, 115, 32, 40, 37, 100, 41, 10, 0, 0, 0, 0, 0, 0, 110, 111, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 0, 0, 0, 0, 111, 117, 116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 0, 0, 0, 105, 110, 116, 101, 114, 110, 97, 108, 32, 108, 105, 98, 114, 97, 114, 121, 32, 101, 114, 114, 111, 114, 0, 0, 117, 110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 114, 101, 113, 117, 101, 115, 116, 0, 0, 0, 0, 0, 105, 110, 118, 97, 108, 105, 100, 32, 114, 101, 113, 117, 101, 115, 116, 0, 115, 121, 115, 116, 101, 109, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 108, 111, 99, 107, 105, 110, 103, 32, 101, 114, 114, 111, 114, 0, 0, 0, 97, 108, 108, 32, 114, 101, 115, 111, 117, 114, 99, 101, 115, 32, 98, 117, 115, 121, 0, 0, 0, 0, 0, 0, 88, 49, 49, 32, 100, 105, 115, 112, 108, 97, 121, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 0, 0, 0, 88, 49, 49, 32, 112, 114, 111, 116, 111, 99, 111, 108, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 0, 0, 111, 117, 116, 112, 117, 116, 32, 119, 105, 110, 100, 111, 119, 32, 105, 115, 32, 99, 108, 111, 115, 101, 100, 0, 119, 105, 110, 100, 111, 119, 115, 32, 115, 121, 115, 116, 101, 109, 32, 101, 114, 114, 111, 114, 0, 0, 0, 0, 117, 110, 107, 110, 111, 119, 110, 32, 101, 114, 114, 111, 114, 0, 0, 0, 112, 114, 111, 99, 101, 115, 115, 111, 114, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 111, 0, 0, 0, 119, 105, 110, 100, 111, 119, 0, 0, 105, 109, 97, 103, 101, 32, 115, 99, 97, 110, 110, 101, 114, 0, 0, 0, 70, 65, 84, 65, 76, 32, 69, 82, 82, 79, 82, 0, 0, 0, 0, 0, 69, 82, 82, 79, 82, 0, 0, 0, 79, 75, 0, 0, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 0, 78, 79, 84, 69, 0, 0, 0, 0, 105, 109, 103, 45, 62, 114, 101, 102, 99, 110, 116, 0, 0, 0, 0, 0, 122, 98, 97, 114, 47, 105, 109, 97, 103, 101, 46, 99, 0, 0, 0, 0, 122, 98, 97, 114, 95, 105, 109, 97, 103, 101, 95, 102, 114, 101, 101, 95, 100, 97, 116, 97, 0, 0, 0, 0, 37, 115, 46, 37, 46, 52, 115, 46, 122, 105, 109, 103, 0, 0, 0, 0, 37, 115, 46, 37, 48, 56, 120, 46, 122, 105, 109, 103, 0, 0, 0, 0, 110, 32, 60, 32, 108, 101, 110, 32, 45, 32, 49, 0, 0, 0, 0, 0, 122, 98, 97, 114, 95, 105, 109, 97, 103, 101, 95, 119, 114, 105, 116, 101, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115, 58, 32, 100, 117, 109, 112, 105, 110, 103, 32, 37, 46, 52, 115, 40, 37, 48, 56, 120, 41, 32, 105, 109, 97, 103, 101, 32, 116, 111, 32, 37, 115, 10, 0, 0, 0, 0, 0, 119, 0, 0, 0, 0, 0, 0, 0, 37, 115, 58, 32, 69, 82, 82, 79, 82, 32, 111, 112, 101, 110, 105, 110, 103, 32, 37, 115, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 37, 115, 58, 32, 69, 82, 82, 79, 82, 32, 119, 114, 105, 116, 105, 110, 103, 32, 37, 115, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 0, 0, 114, 99, 32, 62, 61, 32, 48, 0, 46, 47, 122, 98, 97, 114, 47, 114, 101, 102, 99, 110, 116, 46, 104, 0, 95, 122, 98, 97, 114, 95, 114, 101, 102, 99, 110, 116, 0, 0, 0, 0, 122, 98, 97, 114, 0, 0, 0, 0, 37, 115, 58, 32, 112, 114, 111, 99, 101, 115, 115, 105, 110, 103, 58, 32, 37, 46, 52, 115, 40, 37, 48, 56, 120, 41, 32, 37, 100, 120, 37, 100, 32, 64, 37, 112, 10, 0, 0, 0, 95, 122, 98, 97, 114, 95, 112, 114, 111, 99, 101, 115, 115, 95, 105, 109, 97, 103, 101, 0, 0, 0, 0, 0, 37, 115, 58, 32, 37, 115, 58, 32, 37, 115, 32, 40, 37, 100, 32, 112, 116, 115, 41, 32, 40, 100, 105, 114, 61, 37, 100, 41, 32, 40, 113, 61, 37, 100, 41, 32, 40, 37, 115, 41, 10, 0, 0, 0, 0, 0, 0, 0, 117, 110, 99, 101, 114, 116, 97, 105, 110, 0, 0, 0, 0, 0, 0, 0, 100, 117, 112, 108, 105, 99, 97, 116, 101, 0, 0, 0, 0, 0, 0, 0, 110, 101, 119, 0, 0, 0, 0, 0, 117, 110, 107, 110, 111, 119, 110, 32, 105, 109, 97, 103, 101, 32, 102, 111, 114, 109, 97, 116, 0, 0, 0, 0, 33, 112, 114, 111, 99, 45, 62, 119, 97, 105, 116, 95, 104, 101, 97, 100, 0, 0, 0, 0, 0, 0, 0, 0, 122, 98, 97, 114, 47, 112, 114, 111, 99, 101, 115, 115, 111, 114, 46, 99, 0, 0, 0, 0, 0, 0, 0, 0, 122, 98, 97, 114, 95, 112, 114, 111, 99, 101, 115, 115, 111, 114, 95, 100, 101, 115, 116, 114, 111, 121, 0, 0, 33, 112, 114, 111, 99, 45, 62, 119, 97, 105, 116, 95, 116, 97, 105, 108, 0, 0, 0, 0, 0, 0, 0, 0, 33, 112, 114, 111, 99, 45, 62, 119, 97, 105, 116, 95, 110, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 122, 98, 97, 114, 95, 112, 114, 111, 99, 101, 115, 115, 111, 114, 95, 105, 110, 105, 116, 0, 0, 0, 0, 0, 97, 108, 108, 111, 99, 97, 116, 105, 110, 103, 32, 119, 105, 110, 100, 111, 119, 32, 114, 101, 115, 111, 117, 114, 99, 101, 115, 0, 0, 0, 0, 0, 97, 108, 108, 111, 99, 97, 116, 105, 110, 103, 32, 118, 105, 100, 101, 111, 32, 114, 101, 115, 111, 117, 114, 99, 101, 115, 0, 0, 0, 0, 0, 0, 115, 112, 97, 119, 110, 105, 110, 103, 32, 118, 105, 100, 101, 111, 32, 116, 104, 114, 101, 97, 100, 0, 0, 0, 115, 112, 97, 119, 110, 105, 110, 103, 32, 105, 110, 112, 117, 116, 32, 116, 104, 114, 101, 97, 100, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 110, 111, 32, 99, 111, 109, 112, 97, 116, 105, 98, 108, 101, 32, 105, 110, 112, 117, 116, 32, 116, 111, 32, 111, 117, 116, 112, 117, 116, 32, 102, 111, 114, 109, 97, 116, 10, 46, 46, 46, 116, 114, 121, 105, 110, 103, 32, 97, 103, 97, 105, 110, 32, 119, 105, 116, 104, 32, 111, 117, 116, 112, 117, 116, 32, 100, 105, 115, 97, 98, 108, 101, 100, 10, 0, 0, 0, 0, 0, 37, 115, 58, 32, 69, 82, 82, 79, 82, 58, 32, 110, 111, 32, 99, 111, 109, 112, 97, 116, 105, 98, 108, 101, 32, 37, 115, 32, 102, 111, 114, 109, 97, 116, 10, 0, 0, 0, 0, 0, 118, 105, 100, 101, 111, 32, 105, 110, 112, 117, 116, 0, 0, 0, 0, 0, 119, 105, 110, 100, 111, 119, 32, 111, 117, 116, 112, 117, 116, 0, 0, 0, 110, 111, 32, 99, 111, 109, 112, 97, 116, 105, 98, 108, 101, 32, 105, 109, 97, 103, 101, 32, 102, 111, 114, 109, 97, 116, 0, 0, 0, 0, 0, 0, 122, 98, 97, 114, 95, 112, 114, 111, 99, 101, 115, 115, 111, 114, 95, 117, 115, 101, 114, 95, 119, 97, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 100, 105, 115, 112, 108, 97, 121, 32, 119, 105, 110, 100, 111, 119, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 32, 102, 111, 114, 32, 105, 110, 112, 117, 116, 0, 0, 122, 98, 97, 114, 95, 112, 114, 111, 99, 101, 115, 115, 111, 114, 95, 115, 101, 116, 95, 97, 99, 116, 105, 118, 101, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 111, 32, 105, 110, 112, 117, 116, 32, 110, 111, 116, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 100, 0, 0, 0, 0, 0, 122, 98, 97, 114, 32, 98, 97, 114, 99, 111, 100, 101, 32, 114, 101, 97, 100, 101, 114, 0, 0, 0, 0, 0, 101, 114, 114, 45, 62, 109, 97, 103, 105, 99, 32, 61, 61, 32, 69, 82, 82, 73, 78, 70, 79, 95, 77, 65, 71, 73, 67, 0, 0, 0, 0, 0, 46, 47, 122, 98, 97, 114, 47, 101, 114, 114, 111, 114, 46, 104, 0, 0, 101, 114, 114, 95, 99, 108, 101, 97, 110, 117, 112, 0, 0, 0, 0, 0, 101, 114, 114, 95, 99, 97, 112, 116, 117, 114, 101, 0, 0, 0, 0, 0, 100, 115, 116, 45, 62, 109, 97, 103, 105, 99, 32, 61, 61, 32, 69, 82, 82, 73, 78, 70, 79, 95, 77, 65, 71, 73, 67, 0, 0, 0, 0, 0, 101, 114, 114, 95, 99, 111, 112, 121, 0, 0, 0, 0, 0, 0, 0, 0, 115, 114, 99, 45, 62, 109, 97, 103, 105, 99, 32, 61, 61, 32, 69, 82, 82, 73, 78, 70, 79, 95, 77, 65, 71, 73, 67, 0, 0, 0, 0, 0, 69, 65, 78, 45, 50, 0, 0, 0, 69, 65, 78, 45, 53, 0, 0, 0, 69, 65, 78, 45, 56, 0, 0, 0, 85, 80, 67, 45, 69, 0, 0, 0, 73, 83, 66, 78, 45, 49, 48, 0, 85, 80, 67, 45, 65, 0, 0, 0, 69, 65, 78, 45, 49, 51, 0, 0, 73, 83, 66, 78, 45, 49, 51, 0, 67, 79, 77, 80, 79, 83, 73, 84, 69, 0, 0, 0, 0, 0, 0, 0, 73, 50, 47, 53, 0, 0, 0, 0, 68, 97, 116, 97, 66, 97, 114, 0, 68, 97, 116, 97, 66, 97, 114, 45, 69, 120, 112, 0, 0, 0, 0, 0, 67, 111, 100, 97, 98, 97, 114, 0, 67, 79, 68, 69, 45, 51, 57, 0, 67, 79, 68, 69, 45, 57, 51, 0, 67, 79, 68, 69, 45, 49, 50, 56, 0, 0, 0, 0, 0, 0, 0, 0, 80, 68, 70, 52, 49, 55, 0, 0, 81, 82, 45, 67, 111, 100, 101, 0, 85, 78, 75, 78, 79, 87, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 16, 17, 255, 17, 22, 12, 5, 6, 8, 255, 4, 3, 7, 18, 255, 255, 255, 255, 255, 255, 255, 2, 255, 0, 18, 12, 11, 29, 10, 0, 103, 48, 32, 62, 61, 32, 48, 32, 38, 38, 32, 103, 49, 32, 62, 61, 32, 48, 0, 0, 0, 0, 0, 0, 122, 98, 97, 114, 47, 115, 121, 109, 98, 111, 108, 46, 99, 0, 0, 0, 95, 122, 98, 97, 114, 95, 103, 101, 116, 95, 115, 121, 109, 98, 111, 108, 95, 104, 97, 115, 104, 0, 0, 0, 114, 99, 32, 62, 61, 32, 48, 0, 46, 47, 122, 98, 97, 114, 47, 114, 101, 102, 99, 110, 116, 46, 104, 0, 95, 122, 98, 97, 114, 95, 114, 101, 102, 99, 110, 116, 0, 0, 0, 0, 37, 115, 58, 32, 99, 108, 111, 115, 101, 100, 32, 99, 97, 109, 101, 114, 97, 32, 40, 102, 100, 61, 37, 100, 41, 10, 0, 0, 0, 0, 0, 0, 122, 98, 97, 114, 95, 118, 105, 100, 101, 111, 95, 111, 112, 101, 110, 0, 47, 100, 101, 118, 47, 118, 105, 100, 101, 111, 48, 0, 0, 0, 0, 0, 122, 98, 97, 114, 95, 118, 105, 100, 101, 111, 95, 103, 101, 116, 95, 102, 100, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 111, 32, 100, 101, 118, 105, 99, 101, 32, 110, 111, 116, 32, 111, 112, 101, 110, 101, 100, 0, 118, 105, 100, 101, 111, 32, 100, 114, 105, 118, 101, 114, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 32, 112, 111, 108, 108, 105, 110, 103, 0, 0, 0, 122, 98, 97, 114, 95, 118, 105, 100, 101, 111, 95, 114, 101, 113, 117, 101, 115, 116, 95, 115, 105, 122, 101, 0, 97, 108, 114, 101, 97, 100, 121, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 100, 44, 32, 117, 110, 97, 98, 108, 101, 32, 116, 111, 32, 114, 101, 115, 105, 122, 101, 0, 0, 0, 37, 115, 58, 32, 114, 101, 113, 117, 101, 115, 116, 32, 115, 105, 122, 101, 58, 32, 37, 100, 32, 120, 32, 37, 100, 10, 0, 0, 0, 0, 0, 0, 122, 98, 97, 114, 95, 118, 105, 100, 101, 111, 95, 114, 101, 113, 117, 101, 115, 116, 95, 105, 110, 116, 101, 114, 102, 97, 99, 101, 0, 0, 0, 0, 100, 101, 118, 105, 99, 101, 32, 97, 108, 114, 101, 97, 100, 121, 32, 111, 112, 101, 110, 101, 100, 44, 32, 117, 110, 97, 98, 108, 101, 32, 116, 111, 32, 99, 104, 97, 110, 103, 101, 32, 105, 110, 116, 101, 114, 102, 97, 99, 101, 0, 0, 0, 0, 0, 0, 0, 37, 115, 58, 32, 114, 101, 113, 117, 101, 115, 116, 32, 105, 110, 116, 101, 114, 102, 97, 99, 101, 32, 118, 101, 114, 115, 105, 111, 110, 32, 37, 100, 10, 0, 0, 0, 0, 0, 0, 0, 122, 98, 97, 114, 95, 118, 105, 100, 101, 111, 95, 114, 101, 113, 117, 101, 115, 116, 95, 105, 111, 109, 111, 100, 101, 0, 0, 0, 0, 0, 0, 0, 100, 101, 118, 105, 99, 101, 32, 97, 108, 114, 101, 97, 100, 121, 32, 111, 112, 101, 110, 101, 100, 44, 32, 117, 110, 97, 98, 108, 101, 32, 116, 111, 32, 99, 104, 97, 110, 103, 101, 32, 105, 111, 109, 111, 100, 101, 0, 0, 105, 110, 118, 97, 108, 105, 100, 32, 105, 111, 109, 111, 100, 101, 32, 114, 101, 113, 117, 101, 115, 116, 101, 100, 0, 0, 0, 0, 0, 0, 0, 0, 122, 98, 97, 114, 95, 118, 105, 100, 101, 111, 95, 105, 110, 105, 116, 0, 97, 108, 114, 101, 97, 100, 121, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 100, 44, 32, 114, 101, 45, 105, 110, 105, 116, 32, 117, 110, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 0, 0, 0, 0, 0, 0, 122, 98, 97, 114, 95, 118, 105, 100, 101, 111, 95, 101, 110, 97, 98, 108, 101, 0, 0, 0, 0, 0, 0, 0, 105, 109, 103, 0, 0, 0, 0, 0, 122, 98, 97, 114, 47, 118, 105, 100, 101, 111, 46, 99, 0, 0, 0, 0, 122, 98, 97, 114, 95, 118, 105, 100, 101, 111, 95, 110, 101, 120, 116, 95, 105, 109, 97, 103, 101, 0, 0, 0, 114, 99, 32, 62, 61, 32, 48, 0, 46, 47, 122, 98, 97, 114, 47, 114, 101, 102, 99, 110, 116, 46, 104, 0, 95, 122, 98, 97, 114, 95, 114, 101, 102, 99, 110, 116, 0, 0, 0, 0, 118, 100, 111, 0, 0, 0, 0, 0, 95, 122, 98, 97, 114, 95, 118, 105, 100, 101, 111, 95, 114, 101, 99, 121, 99, 108, 101, 95, 115, 104, 97, 100, 111, 119, 0, 0, 0, 0, 0, 0, 105, 109, 103, 45, 62, 115, 114, 99, 105, 100, 120, 32, 61, 61, 32, 45, 49, 0, 0, 0, 0, 0, 0, 0, 118, 100, 111, 45, 62, 100, 97, 116, 97, 108, 101, 110, 0, 0, 0, 0, 118, 105, 100, 101, 111, 95, 105, 110, 105, 116, 95, 105, 109, 97, 103, 101, 115, 0, 0, 0, 0, 0, 0, 0, 33, 118, 100, 111, 45, 62, 98, 117, 102, 0, 0, 0, 0, 0, 0, 0, 117, 110, 97, 98, 108, 101, 32, 116, 111, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 105, 109, 97, 103, 101, 32, 98, 117, 102, 102, 101, 114, 115, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115, 58, 32, 112, 114, 101, 45, 97, 108, 108, 111, 99, 97, 116, 101, 100, 32, 37, 100, 32, 37, 115, 32, 98, 117, 102, 102, 101, 114, 115, 32, 115, 105, 122, 101, 61, 48, 120, 37, 108, 120, 10, 0, 0, 0, 0, 0, 82, 69, 65, 68, 0, 0, 0, 0, 85, 83, 69, 82, 80, 84, 82, 0, 37, 115, 58, 32, 32, 32, 32, 32, 91, 37, 48, 50, 100, 93, 32, 64, 37, 48, 56, 108, 120, 10, 0, 0, 101, 114, 114, 45, 62, 109, 97, 103, 105, 99, 32, 61, 61, 32, 69, 82, 82, 73, 78, 70, 79, 95, 77, 65, 71, 73, 67, 0, 0, 0, 0, 0, 46, 47, 122, 98, 97, 114, 47, 101, 114, 114, 111, 114, 46, 104, 0, 0, 101, 114, 114, 95, 99, 97, 112, 116, 117, 114, 101, 0, 0, 0, 0, 0, 101, 114, 114, 95, 99, 108, 101, 97, 110, 117, 112, 0, 0, 0, 0, 0, 95, 122, 98, 97, 114, 95, 118, 105, 100, 101, 111, 95, 114, 101, 99, 121, 99, 108, 101, 95, 105, 109, 97, 103, 101, 0, 0, 0, 0, 0, 0, 0, 105, 109, 103, 45, 62, 115, 114, 99, 105, 100, 120, 32, 62, 61, 32, 48, 0, 0, 0, 0, 0, 0, 0, 0, 114, 99, 32, 62, 61, 32, 48, 0, 46, 47, 122, 98, 97, 114, 47, 114, 101, 102, 99, 110, 116, 46, 104, 0, 95, 122, 98, 97, 114, 95, 114, 101, 102, 99, 110, 116, 0, 0, 0, 0, 101, 114, 114, 45, 62, 109, 97, 103, 105, 99, 32, 61, 61, 32, 69, 82, 82, 73, 78, 70, 79, 95, 77, 65, 71, 73, 67, 0, 0, 0, 0, 0, 46, 47, 122, 98, 97, 114, 47, 101, 114, 114, 111, 114, 46, 104, 0, 0, 101, 114, 114, 95, 99, 108, 101, 97, 110, 117, 112, 0, 0, 0, 0, 0, 95, 122, 98, 97, 114, 95, 112, 114, 111, 99, 101, 115, 115, 111, 114, 95, 111, 112, 101, 110, 0, 0, 0, 0, 95, 122, 98, 97, 114, 95, 112, 114, 111, 99, 101, 115, 115, 111, 114, 95, 99, 108, 111, 115, 101, 0, 0, 0, 95, 122, 98, 97, 114, 95, 112, 114, 111, 99, 101, 115, 115, 111, 114, 95, 115, 101, 116, 95, 115, 105, 122, 101, 0, 0, 0, 0, 0, 0, 0, 0, 95, 122, 98, 97, 114, 95, 112, 114, 111, 99, 101, 115, 115, 111, 114, 95, 105, 110, 118, 97, 108, 105, 100, 97, 116, 101, 0, 0, 0, 0, 0, 0, 110, 111, 116, 32, 99, 111, 109, 112, 105, 108, 101, 100, 32, 119, 105, 116, 104, 32, 111, 117, 116, 112, 117, 116, 32, 119, 105, 110, 100, 111, 119, 32, 115, 117, 112, 112, 111, 114, 116, 0, 101, 114, 114, 45, 62, 109, 97, 103, 105, 99, 32, 61, 61, 32, 69, 82, 82, 73, 78, 70, 79, 95, 77, 65, 71, 73, 67, 0, 0, 0, 0, 0, 46, 47, 122, 98, 97, 114, 47, 101, 114, 114, 111, 114, 46, 104, 0, 0, 101, 114, 114, 95, 99, 97, 112, 116, 117, 114, 101, 0, 0, 0, 0, 0, 95, 122, 98, 97, 114, 95, 119, 105, 110, 100, 111, 119, 95, 97, 116, 116, 97, 99, 104, 0, 0, 0, 0, 0, 110, 111, 116, 32, 99, 111, 109, 112, 105, 108, 101, 100, 32, 119, 105, 116, 104, 32, 111, 117, 116, 112, 117, 116, 32, 119, 105, 110, 100, 111, 119, 32, 115, 117, 112, 112, 111, 114, 116, 0, 101, 114, 114, 45, 62, 109, 97, 103, 105, 99, 32, 61, 61, 32, 69, 82, 82, 73, 78, 70, 79, 95, 77, 65, 71, 73, 67, 0, 0, 0, 0, 0, 46, 47, 122, 98, 97, 114, 47, 101, 114, 114, 111, 114, 46, 104, 0, 0, 101, 114, 114, 95, 99, 97, 112, 116, 117, 114, 101, 0, 0, 0, 0, 0, 112, 114, 111, 99, 45, 62, 108, 111, 99, 107, 95, 108, 101, 118, 101, 108, 32, 62, 32, 48, 0, 0, 0, 0, 122, 98, 97, 114, 47, 112, 114, 111, 99, 101, 115, 115, 111, 114, 47, 108, 111, 99, 107, 46, 99, 0, 0, 0, 95, 122, 98, 97, 114, 95, 112, 114, 111, 99, 101, 115, 115, 111, 114, 95, 117, 110, 108, 111, 99, 107, 0, 0, 119, 32, 61, 61, 32, 119, 97, 105, 116, 101, 114, 0, 0, 0, 0, 0, 95, 122, 98, 97, 114, 95, 112, 114, 111, 99, 101, 115, 115, 111, 114, 95, 119, 97, 105, 116, 0, 0, 0, 0, 112, 114, 111, 99, 45, 62, 108, 111, 99, 107, 95, 108, 101, 118, 101, 108, 32, 61, 61, 32, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 122, 98, 97, 114, 95, 112, 114, 111, 99, 101, 115, 115, 111, 114, 95, 105, 110, 105, 116, 0, 0, 0, 0, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32, 112, 105, 112, 101, 0, 0, 0, 0, 0, 37, 115, 58, 32, 91, 37, 100, 93, 32, 102, 100, 61, 37, 100, 32, 110, 61, 37, 100, 10, 0, 0, 0, 0, 114, 101, 109, 111, 118, 101, 95, 112, 111, 108, 108, 0, 0, 0, 0, 0, 37, 115, 58, 32, 107, 105, 99, 107, 105, 110, 103, 32, 37, 100, 32, 102, 100, 115, 10, 0, 0, 0, 0, 0, 112, 114, 111, 99, 95, 107, 105, 99, 107, 95, 104, 97, 110, 100, 108, 101, 114, 0, 0, 0, 0, 0, 0, 0, 112, 114, 111, 99, 45, 62, 116, 104, 114, 101, 97, 100, 101, 100, 0, 0, 122, 98, 97, 114, 47, 112, 114, 111, 99, 101, 115, 115, 111, 114, 47, 112, 111, 115, 105, 120, 46, 99, 0, 0, 37, 115, 58, 32, 91, 37, 100, 93, 32, 102, 100, 61, 37, 100, 32, 104, 97, 110, 100, 108, 101, 114, 61, 37, 112, 10, 0, 0, 0, 0, 0, 0, 97, 100, 100, 95, 112, 111, 108, 108, 0, 0, 0, 0, 0, 0, 0, 0, 115, 116, 97, 116, 101, 45, 62, 107, 105, 99, 107, 95, 102, 100, 115, 91, 49, 93, 32, 62, 61, 32, 48, 0, 122, 98, 97, 114, 47, 112, 114, 111, 99, 101, 115, 115, 111, 114, 47, 112, 111, 115, 105, 120, 46, 104, 0, 0, 101, 114, 114, 45, 62, 109, 97, 103, 105, 99, 32, 61, 61, 32, 69, 82, 82, 73, 78, 70, 79, 95, 77, 65, 71, 73, 67, 0, 0, 0, 0, 0, 46, 47, 122, 98, 97, 114, 47, 101, 114, 114, 111, 114, 46, 104, 0, 0, 101, 114, 114, 95, 99, 97, 112, 116, 117, 114, 101, 0, 0, 0, 0, 0, 112, 45, 62, 110, 117, 109, 0, 0, 112, 114, 111, 99, 95, 112, 111, 108, 108, 95, 105, 110, 112, 117, 116, 115, 0, 0, 0, 0, 0, 0, 0, 0, 33, 114, 99, 0, 0, 0, 0, 0, 116, 105, 109, 101, 111, 117, 116, 32, 62, 32, 48, 0, 0, 0, 0, 0, 112, 114, 111, 99, 95, 115, 108, 101, 101, 112, 0, 0, 0, 0, 0, 0, 95, 122, 98, 97, 114, 95, 118, 105, 100, 101, 111, 95, 111, 112, 101, 110, 0, 0, 0, 0, 0, 0, 0, 0, 110, 111, 116, 32, 99, 111, 109, 112, 105, 108, 101, 100, 32, 119, 105, 116, 104, 32, 118, 105, 100, 101, 111, 32, 105, 110, 112, 117, 116, 32, 115, 117, 112, 112, 111, 114, 116, 0, 0, 0, 101, 114, 114, 45, 62, 109, 97, 103, 105, 99, 32, 61, 61, 32, 69, 82, 82, 73, 78, 70, 79, 95, 77, 65, 71, 73, 67, 0, 0, 0, 0, 0, 46, 47, 122, 98, 97, 114, 47, 101, 114, 114, 111, 114, 46, 104, 0, 0, 101, 114, 114, 95, 99, 97, 112, 116, 117, 114, 101, 0, 0, 0, 0, 0, 52, 50, 50, 80, 73, 52, 50, 48, 89, 85, 49, 50, 89, 86, 49, 50, 52, 49, 49, 80, 78, 86, 49, 50, 78, 86, 50, 49, 89, 85, 89, 86, 85, 89, 86, 89, 89, 85, 89, 50, 89, 85, 86, 52, 82, 71, 66, 51, 3, 0, 0, 0, 66, 71, 82, 51, 82, 71, 66, 52, 66, 71, 82, 52, 82, 71, 66, 80, 82, 71, 66, 79, 82, 71, 66, 82, 82, 71, 66, 81, 89, 85, 86, 57, 89, 86, 85, 57, 71, 82, 69, 89, 89, 56, 48, 48, 89, 56, 32, 32, 89, 56, 0, 0, 82, 71, 66, 49, 82, 52, 52, 52, 66, 65, 56, 49, 89, 52, 49, 80, 89, 52, 52, 52, 89, 85, 86, 79, 72, 77, 49, 50, 72, 73, 50, 52, 74, 80, 69, 71, 77, 74, 80, 71, 77, 80, 69, 71, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 24, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 48, 0, 0, 0, 5, 0, 0, 0, 64, 0, 0, 0, 3, 0, 0, 0, 128, 0, 0, 0, 4, 0, 0, 0, 40, 0, 0, 0, 2, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 24, 0, 0, 0, 6, 0, 0, 0, 52, 0, 0, 0, 6, 0, 0, 0, 20, 0, 0, 0, 7, 0, 0, 0, 144, 0, 0, 0, 8, 0, 0, 0, 18, 0, 0, 0, 6, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 112, 0, 0, 0, 9, 0, 0, 0, 160, 0, 0, 0, 9, 0, 0, 0, 144, 0, 0, 0, 10, 0, 0, 0, 120, 0, 0, 0, 11, 0, 0, 0, 152, 0, 0, 0, 9, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 24, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 37, 115, 58, 32, 115, 104, 97, 114, 101, 100, 32, 102, 111, 114, 109, 97, 116, 58, 32, 37, 52, 46, 52, 115, 10, 0, 0, 0, 0, 0, 0, 0, 95, 122, 98, 97, 114, 95, 98, 101, 115, 116, 95, 102, 111, 114, 109, 97, 116, 0, 0, 0, 0, 0, 0, 0, 37, 115, 58, 32, 102, 114, 111, 109, 32, 37, 46, 52, 115, 40, 37, 48, 56, 120, 41, 32, 116, 111, 0, 0, 32, 37, 46, 52, 115, 40, 37, 48, 56, 120, 41, 61, 37, 100, 0, 0, 89, 56, 48, 48, 0, 0, 0, 0, 122, 98, 97, 114, 95, 110, 101, 103, 111, 116, 105, 97, 116, 101, 95, 102, 111, 114, 109, 97, 116, 0, 0, 0, 105, 109, 97, 103, 101, 32, 102, 111, 114, 109, 97, 116, 32, 108, 105, 115, 116, 32, 105, 115, 32, 110, 111, 116, 32, 115, 111, 114, 116, 101, 100, 33, 63, 0, 0, 0, 0, 0, 0, 0, 110, 111, 32, 105, 110, 112, 117, 116, 32, 111, 114, 32, 111, 117, 116, 112, 117, 116, 32, 102, 111, 114, 109, 97, 116, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 0, 0, 0, 37, 115, 58, 32, 37, 46, 52, 115, 40, 37, 48, 56, 120, 41, 32, 45, 62, 32, 63, 32, 40, 117, 110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 41, 10, 0, 0, 0, 0, 0, 0, 37, 115, 58, 32, 37, 46, 52, 115, 40, 37, 48, 56, 120, 41, 32, 45, 62, 32, 37, 46, 52, 115, 40, 37, 48, 56, 120, 41, 32, 40, 37, 100, 41, 10, 0, 0, 0, 0, 0, 0, 110, 111, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 105, 109, 97, 103, 101, 32, 102, 111, 114, 109, 97, 116, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 0, 0, 0, 37, 115, 58, 32, 115, 101, 116, 116, 105, 110, 103, 32, 98, 101, 115, 116, 32, 102, 111, 114, 109, 97, 116, 32, 37, 46, 52, 115, 40, 37, 48, 56, 120, 41, 32, 40, 37, 100, 41, 10, 0, 0, 0, 0, 0, 0, 0, 0, 101, 114, 114, 45, 62, 109, 97, 103, 105, 99, 32, 61, 61, 32, 69, 82, 82, 73, 78, 70, 79, 95, 77, 65, 71, 73, 67, 0, 0, 0, 0, 0, 46, 47, 122, 98, 97, 114, 47, 101, 114, 114, 111, 114, 46, 104, 0, 0, 101, 114, 114, 95, 99, 97, 112, 116, 117, 114, 101, 0, 0, 0, 0, 0, 69, 82, 82, 79, 82, 58, 32, 105, 109, 97, 103, 101, 32, 102, 111, 114, 109, 97, 116, 32, 108, 105, 115, 116, 32, 105, 115, 32, 110, 111, 116, 32, 115, 111, 114, 116, 101, 100, 33, 63, 10, 0, 0, 0, 0, 0, 0, 0, 115, 114, 99, 45, 62, 100, 97, 116, 97, 108, 101, 110, 32, 62, 61, 32, 40, 115, 114, 99, 45, 62, 119, 105, 100, 116, 104, 32, 42, 32, 115, 114, 99, 45, 62, 104, 101, 105, 103, 104, 116, 32, 42, 32, 115, 114, 99, 102, 109, 116, 45, 62, 112, 46, 114, 103, 98, 46, 98, 112, 112, 41, 0, 0, 122, 98, 97, 114, 47, 99, 111, 110, 118, 101, 114, 116, 46, 99, 0, 0, 99, 111, 110, 118, 101, 114, 116, 95, 114, 103, 98, 95, 114, 101, 115, 97, 109, 112, 108, 101, 0, 0, 0, 0, 99, 111, 110, 118, 101, 114, 116, 95, 114, 103, 98, 95, 116, 111, 95, 121, 117, 118, 0, 0, 0, 0, 0, 0, 99, 111, 110, 118, 101, 114, 116, 95, 114, 103, 98, 95, 116, 111, 95, 121, 117, 118, 112, 0, 0, 0, 0, 0, 115, 114, 99, 45, 62, 100, 97, 116, 97, 108, 101, 110, 32, 62, 61, 32, 40, 115, 114, 99, 45, 62, 119, 105, 100, 116, 104, 32, 42, 32, 115, 114, 99, 45, 62, 104, 101, 105, 103, 104, 116, 32, 43, 32, 117, 118, 112, 95, 115, 105, 122, 101, 40, 115, 114, 99, 44, 32, 115, 114, 99, 102, 109, 116, 41, 32, 42, 32, 50, 41, 0, 0, 99, 111, 110, 118, 101, 114, 116, 95, 121, 117, 118, 95, 116, 111, 95, 114, 103, 98, 0, 0, 0, 0, 0, 0, 115, 114, 99, 102, 109, 116, 45, 62, 112, 46, 121, 117, 118, 46, 120, 115, 117, 98, 50, 32, 61, 61, 32, 49, 0, 0, 0, 0, 0, 0, 0, 0, 115, 114, 99, 45, 62, 100, 97, 116, 97, 108, 101, 110, 32, 62, 61, 32, 115, 114, 99, 110, 32, 43, 32, 50, 32, 42, 32, 115, 114, 99, 109, 0, 99, 111, 110, 118, 101, 114, 116, 95, 121, 117, 118, 112, 95, 116, 111, 95, 114, 103, 98, 0, 0, 0, 0, 0, 115, 114, 99, 45, 62, 100, 97, 116, 97, 108, 101, 110, 32, 62, 61, 32, 115, 114, 99, 110, 32, 43, 32, 50, 32, 42, 32, 115, 114, 99, 110, 0, 99, 111, 110, 118, 101, 114, 116, 95, 121, 117, 118, 95, 112, 97, 99, 107, 0, 0, 0, 0, 0, 0, 0, 0, 115, 114, 99, 45, 62, 100, 97, 116, 97, 108, 101, 110, 32, 62, 61, 32, 115, 114, 99, 45, 62, 119, 105, 100, 116, 104, 32, 42, 32, 115, 114, 99, 45, 62, 104, 101, 105, 103, 104, 116, 0, 0, 0, 0, 0, 0, 0, 0, 99, 111, 110, 118, 101, 114, 116, 95, 117, 118, 112, 95, 97, 112, 112, 101, 110, 100, 0, 0, 0, 0, 0, 0, 37, 115, 58, 32, 100, 115, 116, 61, 37, 100, 120, 37, 100, 32, 40, 37, 108, 120, 41, 32, 37, 108, 120, 32, 115, 114, 99, 61, 37, 100, 120, 37, 100, 32, 37, 108, 120, 10, 0, 0, 114, 99, 32, 62, 61, 32, 48, 0, 46, 47, 122, 98, 97, 114, 47, 114, 101, 102, 99, 110, 116, 46, 104, 0, 95, 122, 98, 97, 114, 95, 114, 101, 102, 99, 110, 116, 0, 0, 0, 0, 82, 71, 66, 52, 3, 0, 0, 0, 4, 8, 16, 24, 66, 71, 82, 49, 3, 0, 0, 0, 1, 160, 163, 198, 52, 50, 50, 80, 1, 0, 0, 0, 1, 0, 0, 0, 89, 56, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 89, 85, 89, 50, 2, 0, 0, 0, 1, 0, 0, 0, 74, 80, 69, 71, 5, 0, 0, 0, 0, 0, 0, 0, 89, 86, 89, 85, 2, 0, 0, 0, 1, 0, 1, 0, 89, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 86, 50, 49, 4, 0, 0, 0, 1, 1, 1, 0, 78, 86, 49, 50, 4, 0, 0, 0, 1, 1, 0, 0, 66, 71, 82, 51, 3, 0, 0, 0, 3, 16, 8, 0, 89, 86, 85, 57, 1, 0, 0, 0, 2, 2, 1, 0, 82, 71, 66, 79, 3, 0, 0, 0, 2, 106, 101, 96, 82, 71, 66, 81, 3, 0, 0, 0, 2, 98, 109, 104, 71, 82, 69, 89, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 4, 16, 8, 0, 89, 56, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 73, 52, 50, 48, 1, 0, 0, 0, 1, 1, 0, 0, 82, 71, 66, 49, 3, 0, 0, 0, 1, 165, 162, 192, 89, 85, 49, 50, 1, 0, 0, 0, 1, 1, 0, 0, 89, 86, 49, 50, 1, 0, 0, 0, 1, 1, 1, 0, 82, 71, 66, 51, 3, 0, 0, 0, 3, 0, 8, 16, 82, 52, 52, 52, 3, 0, 0, 0, 2, 136, 132, 128, 66, 71, 82, 52, 3, 0, 0, 0, 4, 16, 8, 0, 89, 85, 86, 57, 1, 0, 0, 0, 2, 2, 0, 0, 77, 74, 80, 71, 5, 0, 0, 0, 0, 0, 0, 0, 52, 49, 49, 80, 1, 0, 0, 0, 2, 0, 0, 0, 82, 71, 66, 80, 3, 0, 0, 0, 2, 107, 69, 96, 82, 71, 66, 82, 3, 0, 0, 0, 2, 99, 77, 104, 89, 85, 89, 86, 2, 0, 0, 0, 1, 0, 0, 0, 85, 89, 86, 89, 2, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 115, 121, 109, 45, 62, 100, 97, 116, 97, 95, 97, 108, 108, 111, 99, 0, 122, 98, 97, 114, 47, 105, 109, 103, 95, 115, 99, 97, 110, 110, 101, 114, 46, 99, 0, 0, 0, 0, 0, 0, 95, 122, 98, 97, 114, 95, 105, 109, 97, 103, 101, 95, 115, 99, 97, 110, 110, 101, 114, 95, 114, 101, 99, 121, 99, 108, 101, 95, 115, 121, 109, 115, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 115, 121, 109, 45, 62, 100, 97, 116, 97, 0, 0, 0, 0, 0, 0, 0, 105, 115, 99, 110, 45, 62, 114, 101, 99, 121, 99, 108, 101, 91, 105, 93, 46, 110, 115, 121, 109, 115, 0, 0, 95, 122, 98, 97, 114, 95, 105, 109, 97, 103, 101, 95, 115, 99, 97, 110, 110, 101, 114, 95, 97, 108, 108, 111, 99, 95, 115, 121, 109, 0, 0, 0, 33, 115, 121, 109, 45, 62, 115, 121, 109, 115, 0, 0, 0, 0, 0, 0, 99, 120, 49, 32, 60, 61, 32, 119, 0, 0, 0, 0, 0, 0, 0, 0, 122, 98, 97, 114, 95, 115, 99, 97, 110, 95, 105, 109, 97, 103, 101, 0, 99, 121, 49, 32, 60, 61, 32, 104, 0, 0, 0, 0, 0, 0, 0, 0, 98, 111, 114, 100, 101, 114, 32, 60, 61, 32, 104, 0, 0, 0, 0, 0, 37, 115, 58, 32, 105, 109, 103, 95, 120, 43, 58, 32, 37, 48, 52, 100, 44, 37, 48, 52, 100, 32, 64, 37, 112, 10, 0, 0, 0, 0, 0, 0, 112, 32, 61, 61, 32, 100, 97, 116, 97, 32, 43, 32, 120, 32, 43, 32, 121, 32, 42, 32, 40, 105, 110, 116, 112, 116, 114, 95, 116, 41, 119, 0, 37, 115, 58, 32, 105, 109, 103, 95, 120, 45, 58, 32, 37, 48, 52, 100, 44, 37, 48, 52, 100, 32, 64, 37, 112, 10, 0, 0, 0, 0, 0, 0, 98, 111, 114, 100, 101, 114, 32, 60, 61, 32, 119, 0, 0, 0, 0, 0, 37, 115, 58, 32, 105, 109, 103, 95, 121, 43, 58, 32, 37, 48, 52, 100, 44, 37, 48, 52, 100, 32, 64, 37, 112, 10, 0, 0, 0, 0, 0, 0, 37, 115, 58, 32, 105, 109, 103, 95, 121, 45, 58, 32, 37, 48, 52, 100, 44, 37, 48, 52, 100, 32, 64, 37, 112, 10, 0, 0, 0, 0, 0, 0, 101, 97, 110, 0, 0, 0, 0, 0, 97, 100, 100, 111, 110, 0, 0, 0, 37, 115, 58, 32, 115, 121, 109, 98, 111, 108, 32, 115, 101, 116, 115, 32, 97, 108, 108, 111, 99, 97, 116, 101, 100, 32, 32, 32, 61, 32, 37, 45, 52, 100, 10, 0, 0, 0, 0, 0, 100, 117, 109, 112, 95, 115, 116, 97, 116, 115, 0, 0, 0, 0, 0, 0, 37, 115, 58, 32, 32, 32, 32, 32, 115, 99, 97, 110, 110, 101, 114, 32, 115, 121, 109, 115, 32, 105, 110, 32, 117, 115, 101, 32, 61, 32, 37, 45, 52, 100, 9, 114, 101, 99, 121, 99, 108, 101, 100, 32, 32, 61, 32, 37, 45, 52, 100, 10, 0, 0, 0, 0, 37, 115, 58, 32, 32, 32, 32, 32, 105, 109, 97, 103, 101, 32, 115, 121, 109, 115, 32, 105, 110, 32, 117, 115, 101, 32, 32, 32, 61, 32, 37, 45, 52, 100, 9, 114, 101, 99, 121, 99, 108, 101, 100, 32, 32, 61, 32, 37, 45, 52, 100, 10, 0, 0, 0, 0, 37, 115, 58, 32, 115, 121, 109, 98, 111, 108, 115, 32, 97, 108, 108, 111, 99, 97, 116, 101, 100, 32, 32, 32, 32, 32, 32, 32, 61, 32, 37, 45, 52, 100, 10, 0, 0, 0, 0, 0, 37, 115, 58, 32, 32, 32, 32, 32, 32, 114, 101, 99, 121, 99, 108, 101, 100, 91, 37, 100, 93, 32, 32, 32, 32, 32, 32, 32, 32, 61, 32, 37, 45, 52, 100, 10, 0, 0, 0, 0, 37, 115, 58, 32, 112, 97, 114, 116, 105, 97, 108, 32, 115, 121, 109, 98, 111, 108, 32, 64, 40, 37, 100, 44, 37, 100, 41, 10, 0, 0, 0, 0, 115, 121, 109, 98, 111, 108, 95, 104, 97, 110, 100, 108, 101, 114, 0, 0, 37, 115, 58, 32, 100, 117, 112, 32, 115, 121, 109, 98, 111, 108, 32, 64, 40, 37, 100, 44, 37, 100, 41, 58, 32, 100, 117, 112, 32, 37, 115, 58, 32, 37, 46, 50, 48, 115, 10, 0, 37, 115, 58, 32, 110, 101, 119, 32, 115, 121, 109, 98, 111, 108, 32, 64, 40, 37, 100, 44, 37, 100, 41, 58, 32, 37, 115, 58, 32, 37, 46, 50, 48, 115, 10, 0, 0, 0, 0, 0, 108, 105, 110, 101, 0, 0, 0, 0, 113, 114, 95, 104, 97, 110, 100, 108, 101, 114, 0, 0, 0, 0, 0, 0, 114, 99, 32, 62, 61, 32, 48, 0, 46, 47, 122, 98, 97, 114, 47, 114, 101, 102, 99, 110, 116, 46, 104, 0, 95, 122, 98, 97, 114, 95, 114, 101, 102, 99, 110, 116, 0, 0, 0, 0, 37, 115, 58, 32, 109, 97, 120, 32, 102, 105, 110, 100, 101, 114, 32, 108, 105, 110, 101, 115, 32, 61, 32, 37, 100, 120, 37, 100, 10, 0, 0, 0, 95, 122, 98, 97, 114, 95, 113, 114, 95, 100, 101, 115, 116, 114, 111, 121, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115, 58, 32, 37, 100, 120, 37, 100, 32, 102, 105, 110, 100, 101, 114, 115, 44, 32, 37, 100, 32, 99, 101, 110, 116, 101, 114, 115, 58, 10, 0, 95, 122, 98, 97, 114, 95, 113, 114, 95, 100, 101, 99, 111, 100, 101, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 4, 1, 2, 4, 4, 2, 4, 4, 4, 2, 4, 6, 5, 2, 4, 6, 6, 2, 5, 8, 8, 4, 5, 8, 8, 4, 5, 8, 11, 4, 8, 10, 11, 4, 9, 12, 16, 4, 9, 16, 16, 6, 10, 12, 18, 6, 10, 17, 16, 6, 11, 16, 19, 6, 13, 18, 21, 7, 14, 21, 25, 8, 16, 20, 25, 8, 17, 23, 25, 9, 17, 23, 34, 9, 18, 25, 30, 10, 20, 27, 32, 12, 21, 29, 35, 12, 23, 34, 37, 12, 25, 34, 40, 13, 26, 35, 42, 14, 28, 38, 45, 15, 29, 40, 48, 16, 31, 43, 51, 17, 33, 45, 54, 18, 35, 48, 57, 19, 37, 51, 60, 19, 38, 53, 63, 20, 40, 56, 66, 21, 43, 59, 70, 22, 45, 62, 74, 24, 47, 65, 77, 25, 49, 68, 81, 7, 10, 13, 17, 10, 16, 22, 28, 26, 26, 26, 22, 24, 22, 22, 26, 24, 18, 22, 15, 26, 18, 22, 24, 30, 24, 20, 24, 18, 16, 24, 28, 28, 28, 28, 30, 24, 20, 18, 18, 26, 24, 28, 24, 30, 26, 28, 28, 26, 28, 30, 30, 22, 20, 24, 20, 18, 26, 16, 20, 30, 28, 24, 22, 26, 28, 26, 30, 28, 30, 30, 0, 0, 4, 19, 55, 15, 28, 37, 12, 51, 39, 59, 62, 10, 24, 22, 41, 31, 44, 7, 65, 47, 33, 67, 67, 48, 32, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 10, 9, 8, 8, 12, 11, 16, 10, 14, 13, 16, 12, 0, 0, 0, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 32, 36, 37, 42, 43, 45, 46, 47, 58, 0, 0, 0, 16, 18, 20, 22, 24, 26, 28, 20, 22, 24, 24, 26, 28, 28, 22, 24, 24, 26, 26, 28, 28, 24, 24, 26, 26, 26, 28, 28, 24, 26, 26, 26, 28, 28, 0, 0, 0, 0, 0, 0, 65, 0, 4, 1, 1, 0, 0, 1, 64, 16, 4, 0, 0, 16, 0, 0, 16, 1, 17, 0, 16, 0, 16, 0, 0, 17, 1, 0, 0, 16, 0, 0, 132, 0, 66, 0, 4, 0, 64, 0, 128, 16, 2, 0, 0, 16, 0, 0, 0, 108, 0, 0, 0, 68, 0, 0, 0, 56, 0, 0, 0, 16, 0, 0, 0, 0, 1, 1, 4, 0, 3, 1, 2, 0, 2, 1, 0, 2, 1, 2, 148, 124, 0, 0, 188, 133, 0, 0, 153, 154, 0, 0, 211, 164, 0, 0, 246, 187, 0, 0, 98, 199, 0, 0, 71, 216, 0, 0, 13, 230, 0, 0, 40, 249, 0, 0, 120, 11, 1, 0, 93, 20, 1, 0, 23, 42, 1, 0, 50, 53, 1, 0, 166, 73, 1, 0, 131, 86, 1, 0, 201, 104, 1, 0, 236, 119, 1, 0, 196, 142, 1, 0, 225, 145, 1, 0, 171, 175, 1, 0, 142, 176, 1, 0, 26, 204, 1, 0, 63, 211, 1, 0, 117, 237, 1, 0, 80, 242, 1, 0, 213, 9, 2, 0, 240, 22, 2, 0, 186, 40, 2, 0, 159, 55, 2, 0, 11, 75, 2, 0, 46, 84, 2, 0, 100, 106, 2, 0, 65, 117, 2, 0, 105, 140, 2, 0, 85, 84, 70, 45, 56, 0, 0, 0, 73, 83, 79, 56, 56, 53, 57, 45, 49, 0, 0, 0, 0, 0, 0, 0, 83, 74, 73, 83, 0, 0, 0, 0, 73, 83, 79, 56, 56, 53, 57, 45, 37, 105, 0, 0, 0, 0, 0, 0, 67, 80, 52, 51, 55, 0, 0, 0, 110, 101, 120, 116, 32, 62, 32, 115, 121, 109, 115, 45, 62, 100, 97, 116, 97, 108, 101, 110, 0, 0, 0, 0, 122, 98, 97, 114, 47, 113, 114, 99, 111, 100, 101, 47, 113, 114, 100, 101, 99, 116, 120, 116, 46, 99, 0, 0, 113, 114, 95, 99, 111, 100, 101, 95, 100, 97, 116, 97, 95, 108, 105, 115, 116, 95, 101, 120, 116, 114, 97, 99, 116, 95, 116, 101, 120, 116, 0, 0, 114, 99, 32, 62, 61, 32, 48, 0, 46, 47, 122, 98, 97, 114, 47, 114, 101, 102, 99, 110, 116, 46, 104, 0, 95, 122, 98, 97, 114, 95, 114, 101, 102, 99, 110, 116, 0, 0, 0, 0, 87, 65, 82, 78, 73, 78, 71, 58, 32, 37, 115, 58, 37, 100, 58, 32, 37, 115, 58, 32, 65, 115, 115, 101, 114, 116, 105, 111, 110, 32, 34, 37, 115, 34, 32, 102, 97, 105, 108, 101, 100, 46, 10, 9, 108, 111, 99, 107, 61, 37, 100, 32, 114, 101, 113, 61, 37, 100, 10, 0, 0, 0, 0, 0, 46, 47, 122, 98, 97, 114, 47, 100, 101, 99, 111, 100, 101, 114, 46, 104, 0, 0, 0, 0, 0, 0, 0, 0, 114, 101, 108, 101, 97, 115, 101, 95, 108, 111, 99, 107, 0, 0, 0, 0, 100, 99, 111, 100, 101, 45, 62, 108, 111, 99, 107, 32, 61, 61, 32, 114, 101, 113, 0, 0, 0, 0, 0, 0, 255, 0, 1, 4, 2, 8, 5, 10, 3, 14, 9, 7, 6, 13, 11, 12, 1, 2, 4, 8, 3, 6, 12, 11, 5, 10, 7, 14, 15, 13, 9, 1, 2, 4, 8, 3, 6, 12, 11, 5, 10, 7, 14, 15, 13, 9, 1, 0, 11, 2, 8, 16, 10, 4, 8, 9, 117, 116, 102, 56, 0, 0, 200, 119, 99, 104, 97, 114, 116, 0, 0, 198, 117, 99, 115, 50, 0, 117, 99, 115, 50, 98, 101, 0, 0, 196, 117, 99, 115, 50, 108, 101, 0, 0, 197, 117, 116, 102, 49, 54, 0, 117, 116, 102, 49, 54, 98, 101, 0, 0, 194, 117, 116, 102, 49, 54, 108, 101, 0, 0, 193, 117, 99, 115, 52, 0, 117, 99, 115, 52, 98, 101, 0, 117, 116, 102, 51, 50, 0, 117, 116, 102, 51, 50, 98, 101, 0, 0, 192, 117, 99, 115, 52, 108, 101, 0, 117, 116, 102, 51, 50, 108, 101, 0, 0, 195, 97, 115, 99, 105, 105, 0, 117, 115, 97, 115, 99, 105, 105, 0, 105, 115, 111, 54, 52, 54, 0, 105, 115, 111, 54, 52, 54, 117, 115, 0, 0, 199, 101, 117, 99, 106, 112, 0, 0, 208, 115, 104, 105, 102, 116, 106, 105, 115, 0, 115, 106, 105, 115, 0, 0, 209, 103, 98, 49, 56, 48, 51, 48, 0, 0, 216, 103, 98, 107, 0, 0, 217, 103, 98, 50, 51, 49, 50, 0, 0, 218, 98, 105, 103, 53, 0, 98, 105, 103, 102, 105, 118, 101, 0, 99, 112, 57, 53, 48, 0, 98, 105, 103, 53, 104, 107, 115, 99, 115, 0, 0, 224, 101, 117, 99, 107, 114, 0, 107, 115, 99, 53, 54, 48, 49, 0, 107, 115, 120, 49, 48, 48, 49, 0, 99, 112, 57, 52, 57, 0, 0, 232, 105, 115, 111, 56, 56, 53, 57, 49, 0, 108, 97, 116, 105, 110, 49, 0, 0, 128, 105, 115, 111, 56, 56, 53, 57, 50, 0, 0, 32, 0, 84, 0, 137, 18, 0, 32, 1, 6, 0, 0, 152, 65, 134, 26, 127, 0, 48, 72, 32, 0, 88, 32, 201, 18, 0, 36, 17, 198, 35, 0, 156, 81, 198, 26, 128, 80, 66, 136, 32, 90, 0, 0, 192, 4, 0, 16, 113, 1, 0, 29, 0, 112, 2, 0, 41, 0, 0, 192, 7, 33, 48, 1, 5, 0, 0, 88, 1, 0, 0, 94, 208, 1, 128, 29, 0, 0, 128, 6, 0, 91, 0, 0, 0, 5, 0, 20, 129, 1, 0, 30, 0, 128, 2, 0, 42, 0, 0, 0, 8, 34, 52, 17, 5, 0, 0, 92, 1, 0, 0, 95, 212, 1, 192, 29, 0, 0, 144, 70, 36, 105, 115, 111, 56, 56, 53, 57, 51, 0, 0, 32, 0, 212, 0, 9, 0, 0, 4, 48, 3, 0, 0, 244, 64, 70, 11, 63, 0, 16, 64, 32, 0, 216, 0, 0, 0, 0, 0, 64, 3, 0, 0, 248, 80, 134, 11, 64, 0, 16, 128, 32, 0, 0, 0, 64, 0, 0, 108, 144, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 188, 0, 0, 0, 43, 0, 0, 0, 0, 0, 200, 33, 6, 0, 0, 0, 0, 64, 0, 0, 112, 160, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 192, 0, 0, 0, 44, 0, 0, 0, 0, 0, 204, 49, 70, 36, 105, 115, 111, 56, 56, 53, 57, 52, 0, 0, 32, 0, 84, 48, 4, 23, 0, 220, 96, 4, 0, 0, 152, 49, 66, 12, 108, 0, 48, 8, 0, 0, 88, 32, 73, 23, 0, 224, 112, 196, 35, 0, 156, 65, 130, 12, 109, 72, 65, 200, 20, 17, 0, 0, 0, 0, 0, 0, 0, 192, 14, 29, 0, 112, 2, 0, 37, 0, 0, 64, 14, 33, 56, 65, 69, 16, 0, 0, 0, 0, 0, 0, 224, 1, 0, 0, 0, 184, 1, 7, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 15, 30, 0, 128, 2, 0, 38, 0, 0, 128, 14, 34, 60, 81, 133, 16, 0, 0, 0, 0, 0, 0, 228, 1, 0, 0, 0, 188, 17, 71, 36, 105, 115, 111, 56, 56, 53, 57, 53, 0, 0, 32, 0, 136, 51, 14, 57, 229, 152, 115, 14, 58, 233, 168, 179, 14, 59, 237, 0, 224, 206, 59, 240, 196, 35, 207, 60, 244, 212, 99, 207, 61, 248, 228, 163, 207, 62, 252, 244, 227, 207, 63, 0, 5, 36, 208, 64, 4, 21, 100, 208, 65, 8, 37, 164, 208, 66, 12, 53, 228, 208, 67, 16, 69, 36, 209, 68, 20, 85, 100, 209, 69, 24, 101, 164, 209, 70, 28, 117, 228, 209, 71, 32, 133, 36, 210, 72, 36, 149, 100, 210, 73, 40, 165, 164, 210, 74, 44, 181, 228, 210, 75, 53, 194, 20, 147, 76, 51, 209, 84, 147, 77, 55, 225, 148, 147, 78, 59, 13, 192, 83, 79, 105, 115, 111, 56, 56, 53, 57, 54, 0, 0, 32, 0, 4, 16, 64, 0, 0, 4, 16, 64, 0, 1, 4, 16, 64, 0, 115, 1, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 0, 93, 1, 4, 16, 64, 93, 1, 216, 117, 23, 94, 121, 233, 181, 23, 95, 125, 249, 245, 23, 96, 129, 9, 54, 24, 97, 133, 25, 118, 24, 98, 137, 41, 182, 24, 99, 141, 57, 246, 88, 0, 1, 4, 16, 64, 0, 144, 69, 38, 217, 100, 148, 85, 102, 217, 101, 152, 101, 166, 217, 102, 156, 117, 230, 217, 103, 160, 133, 38, 90, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 105, 115, 111, 56, 56, 53, 57, 55, 0, 0, 32, 0, 144, 88, 34, 0, 51, 210, 8, 0, 0, 0, 0, 160, 9, 0, 0, 0, 16, 128, 136, 0, 0, 0, 0, 0, 155, 112, 210, 9, 0, 158, 124, 2, 10, 0, 161, 0, 32, 202, 40, 164, 148, 98, 202, 41, 168, 164, 162, 202, 42, 172, 180, 226, 202, 43, 176, 196, 34, 203, 44, 180, 212, 18, 128, 45, 183, 224, 146, 139, 46, 187, 240, 210, 139, 47, 191, 0, 19, 140, 48, 195, 16, 83, 140, 49, 199, 32, 147, 140, 50, 203, 48, 211, 140, 51, 207, 64, 19, 141, 52, 211, 80, 83, 141, 53, 215, 96, 147, 141, 54, 219, 112, 211, 141, 55, 223, 128, 19, 78, 0, 105, 115, 111, 56, 56, 53, 57, 56, 0, 0, 32, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 0, 0, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 64, 0, 1, 4, 16, 192, 136, 83, 81, 85, 149, 85, 87, 97, 149, 149, 86, 91, 113, 213, 149, 87, 95, 129, 21, 150, 88, 99, 145, 85, 150, 89, 103, 161, 149, 150, 90, 107, 177, 213, 86, 0, 1, 120, 248, 97, 0, 105, 115, 111, 56, 56, 53, 57, 57, 0, 0, 80, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 64, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 80, 6, 0, 105, 115, 111, 56, 56, 53, 57, 49, 48, 0, 0, 32, 0, 84, 48, 66, 12, 57, 220, 16, 4, 0, 70, 132, 96, 6, 27, 131, 0, 0, 135, 20, 0, 88, 64, 130, 12, 58, 224, 32, 4, 0, 71, 136, 112, 70, 27, 132, 136, 24, 199, 20, 17, 0, 0, 0, 0, 0, 0, 0, 192, 14, 29, 0, 112, 2, 0, 37, 0, 0, 0, 0, 0, 56, 65, 5, 0, 0, 0, 0, 128, 27, 0, 224, 1, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 15, 30, 0, 128, 2, 0, 38, 0, 0, 0, 0, 0, 60, 81, 5, 0, 0, 0, 0, 192, 27, 0, 228, 1, 0, 0, 0, 0, 0, 192, 16, 105, 115, 111, 56, 56, 53, 57, 49, 49, 0, 116, 105, 115, 54, 50, 48, 0, 0, 32, 0, 188, 6, 91, 108, 178, 205, 70, 91, 109, 182, 221, 134, 91, 110, 186, 237, 198, 91, 111, 190, 253, 6, 92, 112, 194, 13, 71, 92, 113, 198, 29, 135, 92, 114, 202, 45, 199, 92, 115, 206, 61, 7, 93, 116, 210, 77, 71, 93, 117, 214, 93, 135, 93, 118, 218, 109, 199, 93, 119, 222, 125, 7, 94, 120, 226, 141, 71, 94, 121, 230, 157, 135, 94, 0, 1, 4, 16, 64, 122, 234, 173, 199, 94, 123, 238, 189, 7, 95, 124, 242, 205, 71, 95, 125, 246, 221, 135, 95, 126, 250, 237, 199, 95, 127, 254, 253, 7, 96, 128, 2, 14, 72, 96, 129, 1, 4, 16, 64, 0, 105, 115, 111, 56, 56, 53, 57, 49, 51, 0, 0, 32, 0, 160, 8, 0, 0, 0, 164, 8, 0, 0, 13, 0, 192, 5, 0, 0, 0, 0, 192, 2, 0, 0, 0, 0, 0, 39, 2, 0, 0, 0, 16, 0, 208, 5, 0, 0, 0, 0, 128, 3, 21, 236, 16, 193, 5, 0, 0, 112, 194, 8, 29, 0, 240, 71, 9, 49, 4, 145, 131, 17, 102, 48, 225, 4, 0, 84, 0, 0, 0, 0, 120, 40, 1, 6, 28, 0, 4, 50, 8, 0, 22, 240, 32, 1, 6, 0, 0, 128, 2, 9, 30, 0, 0, 136, 9, 50, 8, 161, 195, 17, 103, 52, 241, 4, 0, 85, 0, 0, 0, 0, 121, 44, 17, 70, 28, 0, 8, 66, 72, 137, 105, 115, 111, 56, 56, 53, 57, 49, 52, 0, 0, 32, 0, 24, 120, 32, 0, 27, 112, 128, 32, 0, 20, 2, 96, 97, 130, 26, 2, 0, 128, 31, 10, 46, 248, 2, 12, 12, 54, 8, 128, 131, 21, 62, 120, 33, 132, 27, 98, 152, 97, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 128, 132, 0, 0, 0, 0, 0, 0, 0, 192, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 192, 132, 0, 0, 0, 0, 0, 0, 0, 208, 7, 0, 105, 115, 111, 56, 56, 53, 57, 49, 53, 0, 108, 97, 116, 105, 110, 57, 0, 0, 36, 51, 2, 96, 6, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 132, 0, 0, 0, 0, 88, 100, 225, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 115, 111, 56, 56, 53, 57, 49, 54, 0, 0, 32, 0, 84, 96, 129, 18, 51, 166, 104, 6, 0, 103, 0, 160, 8, 0, 127, 0, 0, 72, 32, 0, 0, 208, 193, 18, 131, 160, 8, 0, 0, 132, 120, 176, 8, 0, 88, 100, 225, 135, 32, 0, 0, 0, 192, 4, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
    allocate([48, 1, 0, 0, 0, 88, 1, 0, 24, 118, 0, 0, 0, 0, 0, 156, 192, 8, 0, 0, 0, 0, 0, 5, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 52, 1, 0, 0, 0, 92, 1, 64, 24, 119, 0, 0, 0, 0, 0, 160, 208, 8, 0, 99, 112, 49, 50, 53, 48, 0, 119, 105, 110, 100, 111, 119, 115, 49, 50, 53, 48, 0, 0, 0, 51, 6, 96, 98, 0, 41, 182, 168, 226, 138, 1, 184, 104, 198, 139, 96, 168, 49, 200, 31, 1, 144, 88, 226, 137, 40, 178, 8, 98, 136, 1, 216, 120, 6, 140, 97, 172, 65, 8, 32, 0, 60, 2, 137, 18, 0, 84, 0, 0, 0, 0, 0, 64, 6, 0, 0, 0, 0, 64, 32, 0, 0, 32, 201, 18, 0, 0, 0, 0, 0, 0, 88, 80, 6, 0, 72, 80, 146, 132, 32, 90, 0, 0, 192, 4, 0, 16, 113, 1, 0, 29, 0, 112, 2, 0, 41, 0, 0, 192, 7, 33, 48, 1, 5, 0, 0, 88, 1, 0, 0, 94, 208, 1, 128, 29, 0, 0, 128, 6, 0, 91, 0, 0, 0, 5, 0, 20, 129, 1, 0, 30, 0, 128, 2, 0, 42, 0, 0, 0, 8, 34, 52, 17, 5, 0, 0, 92, 1, 0, 0, 95, 212, 1, 192, 29, 0, 0, 144, 70, 36, 99, 112, 49, 50, 53, 49, 0, 119, 105, 110, 100, 111, 119, 115, 49, 50, 53, 49, 0, 0, 0, 227, 144, 99, 162, 76, 41, 182, 168, 226, 138, 51, 186, 168, 206, 139, 235, 180, 195, 206, 59, 49, 145, 88, 226, 137, 40, 178, 8, 98, 136, 1, 216, 136, 19, 140, 57, 237, 164, 83, 79, 0, 184, 195, 83, 58, 0, 248, 4, 0, 0, 226, 0, 80, 14, 0, 0, 0, 0, 0, 58, 0, 0, 112, 78, 77, 63, 1, 0, 0, 0, 48, 213, 56, 19, 0, 55, 153, 67, 147, 77, 240, 196, 35, 207, 60, 244, 212, 99, 207, 61, 248, 228, 163, 207, 62, 252, 244, 227, 207, 63, 0, 5, 36, 208, 64, 4, 21, 100, 208, 65, 8, 37, 164, 208, 66, 12, 53, 228, 208, 67, 16, 69, 36, 209, 68, 20, 85, 100, 209, 69, 24, 101, 164, 209, 70, 28, 117, 228, 209, 71, 32, 133, 36, 210, 72, 36, 149, 100, 210, 73, 40, 165, 164, 210, 74, 44, 181, 228, 210, 75, 99, 112, 49, 50, 53, 50, 0, 119, 105, 110, 100, 111, 119, 115, 49, 50, 53, 50, 0, 0, 0, 51, 6, 96, 98, 33, 41, 182, 168, 226, 138, 142, 184, 104, 198, 139, 88, 4, 48, 72, 0, 1, 144, 88, 226, 137, 40, 178, 8, 98, 136, 147, 216, 120, 6, 140, 89, 4, 64, 136, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 112, 49, 50, 53, 51, 0, 119, 105, 110, 100, 111, 119, 115, 49, 50, 53, 51, 0, 0, 0, 51, 6, 96, 98, 33, 41, 182, 168, 226, 138, 1, 184, 24, 192, 139, 1, 4, 16, 64, 0, 1, 144, 88, 226, 137, 40, 178, 8, 98, 136, 1, 216, 24, 0, 140, 1, 4, 16, 64, 0, 0, 112, 210, 9, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 128, 136, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 158, 124, 2, 10, 0, 161, 0, 32, 202, 40, 164, 148, 98, 202, 41, 168, 164, 162, 202, 42, 172, 180, 226, 202, 43, 176, 196, 34, 203, 44, 180, 212, 18, 128, 45, 183, 224, 146, 139, 46, 187, 240, 210, 139, 47, 191, 0, 19, 140, 48, 195, 16, 83, 140, 49, 199, 32, 147, 140, 50, 203, 48, 211, 140, 51, 207, 64, 19, 141, 52, 211, 80, 83, 141, 53, 215, 96, 147, 141, 54, 219, 112, 211, 141, 55, 223, 128, 19, 78, 0, 99, 112, 49, 50, 53, 52, 0, 119, 105, 110, 100, 111, 119, 115, 49, 50, 53, 52, 0, 0, 0, 51, 6, 96, 98, 33, 41, 182, 168, 226, 138, 142, 184, 104, 198, 139, 88, 4, 16, 64, 0, 1, 144, 88, 226, 137, 40, 178, 8, 98, 136, 147, 216, 120, 6, 140, 89, 4, 16, 128, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 64, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 80, 6, 0, 99, 112, 49, 50, 53, 53, 0, 119, 105, 110, 100, 111, 119, 115, 49, 50, 53, 53, 0, 0, 0, 51, 6, 96, 98, 33, 41, 182, 168, 226, 138, 142, 184, 24, 192, 139, 1, 4, 16, 64, 0, 1, 144, 88, 226, 137, 40, 178, 8, 98, 136, 147, 216, 24, 0, 140, 1, 4, 16, 64, 0, 0, 0, 0, 0, 0, 49, 2, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 0, 0, 0, 0, 64, 5, 37, 212, 80, 68, 21, 101, 212, 81, 72, 37, 21, 128, 82, 75, 49, 213, 148, 83, 79, 65, 21, 149, 84, 110, 189, 5, 87, 92, 114, 5, 16, 64, 0, 1, 4, 16, 64, 0, 83, 81, 85, 149, 85, 87, 97, 149, 149, 86, 91, 113, 213, 149, 87, 95, 129, 21, 150, 88, 99, 145, 85, 150, 89, 103, 161, 149, 150, 90, 107, 177, 213, 86, 0, 1, 120, 248, 97, 0, 99, 112, 49, 50, 53, 54, 0, 119, 105, 110, 100, 111, 119, 115, 49, 50, 53, 54, 0, 0, 0, 51, 146, 102, 98, 33, 41, 182, 168, 226, 138, 142, 184, 56, 218, 139, 88, 148, 134, 154, 105, 170, 145, 88, 226, 137, 40, 178, 8, 98, 136, 169, 217, 120, 26, 140, 89, 112, 216, 225, 106, 0, 204, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 23, 0, 0, 0, 0, 64, 93, 173, 217, 117, 23, 94, 121, 233, 181, 23, 95, 125, 249, 245, 23, 96, 129, 9, 54, 24, 97, 133, 25, 118, 24, 98, 137, 41, 182, 24, 0, 140, 53, 230, 216, 99, 144, 69, 38, 217, 100, 0, 80, 6, 64, 101, 150, 93, 134, 25, 0, 0, 0, 0, 0, 0, 153, 105, 6, 0, 0, 155, 113, 214, 153, 103, 0, 124, 6, 26, 0, 161, 1, 32, 26, 0, 0, 120, 248, 161, 107, 99, 112, 49, 50, 53, 55, 0, 119, 105, 110, 100, 111, 119, 115, 49, 50, 53, 55, 0, 0, 0, 51, 6, 96, 98, 0, 41, 182, 168, 226, 138, 1, 184, 24, 192, 139, 1, 16, 240, 136, 2, 1, 144, 88, 226, 137, 40, 178, 8, 98, 136, 1, 216, 24, 0, 140, 1, 24, 32, 73, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 13, 0, 192, 5, 0, 0, 0, 0, 192, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 208, 5, 0, 0, 0, 0, 128, 3, 21, 236, 16, 193, 5, 0, 0, 112, 194, 8, 29, 0, 240, 71, 9, 49, 4, 145, 131, 17, 102, 48, 225, 4, 0, 84, 0, 0, 0, 0, 120, 40, 1, 6, 28, 0, 4, 50, 8, 0, 22, 240, 32, 1, 6, 0, 0, 128, 2, 9, 30, 0, 0, 136, 9, 50, 8, 161, 195, 17, 103, 52, 241, 4, 0, 85, 0, 0, 0, 0, 121, 44, 17, 70, 28, 0, 8, 66, 72, 36, 99, 112, 49, 50, 53, 56, 0, 119, 105, 110, 100, 111, 119, 115, 49, 50, 53, 56, 0, 0, 0, 51, 6, 96, 98, 33, 41, 182, 168, 226, 138, 142, 184, 24, 192, 139, 88, 4, 16, 64, 0, 1, 144, 88, 226, 137, 40, 178, 8, 98, 136, 147, 216, 24, 0, 140, 89, 4, 16, 128, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 33, 0, 128, 9, 0, 0, 24, 2, 0, 0, 0, 0, 0, 0, 0, 0, 32, 114, 9, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 34, 0, 144, 9, 0, 0, 28, 2, 0, 0, 0, 0, 0, 0, 0, 0, 36, 34, 35, 0, 107, 111, 105, 56, 114, 0, 0, 0, 62, 254, 8, 100, 144, 66, 14, 73, 100, 145, 70, 30, 137, 164, 153, 103, 162, 153, 166, 154, 107, 178, 217, 38, 143, 110, 222, 136, 99, 142, 58, 238, 40, 64, 143, 7, 32, 144, 192, 3, 73, 42, 185, 36, 76, 76, 54, 233, 228, 147, 80, 70, 41, 229, 148, 84, 86, 105, 229, 149, 88, 102, 169, 165, 56, 91, 114, 217, 165, 151, 95, 130, 25, 166, 152, 99, 146, 89, 102, 1, 46, 65, 20, 145, 73, 20, 85, 68, 210, 68, 37, 97, 148, 145, 70, 27, 113, 212, 145, 71, 31, 189, 4, 82, 72, 34, 141, 100, 145, 68, 44, 173, 116, 17, 74, 45, 165, 116, 146, 74, 14, 193, 19, 143, 65, 244, 212, 67, 208, 60, 5, 225, 147, 143, 62, 251, 240, 211, 143, 63, 255, 60, 4, 80, 64, 2, 13, 100, 143, 60, 12, 45, 116, 15, 66, 13, 37, 116, 144, 66, 107, 111, 105, 56, 117, 0, 0, 0, 62, 254, 8, 100, 144, 66, 14, 73, 100, 145, 70, 30, 137, 164, 153, 103, 162, 153, 166, 154, 107, 178, 217, 38, 143, 110, 222, 136, 99, 142, 58, 238, 40, 64, 143, 7, 32, 144, 192, 3, 73, 42, 185, 36, 76, 51, 53, 89, 147, 77, 80, 70, 41, 229, 148, 84, 254, 100, 229, 149, 88, 102, 169, 165, 56, 229, 112, 121, 14, 58, 95, 130, 25, 166, 152, 99, 250, 84, 102, 1, 46, 65, 20, 145, 73, 20, 85, 68, 210, 68, 37, 97, 148, 145, 70, 27, 113, 212, 145, 71, 31, 189, 4, 82, 72, 34, 141, 100, 145, 68, 44, 173, 116, 17, 74, 45, 165, 116, 146, 74, 14, 193, 19, 143, 65, 244, 212, 67, 208, 60, 5, 225, 147, 143, 62, 251, 240, 211, 143, 63, 255, 60, 4, 80, 64, 2, 13, 100, 143, 60, 12, 45, 116, 15, 66, 13, 37, 116, 144, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 1, 48, 2, 48, 12, 255, 14, 255, 251, 48, 26, 255, 27, 255, 31, 255, 1, 255, 155, 48, 156, 48, 180, 0, 64, 255, 168, 0, 62, 255, 227, 255, 63, 255, 253, 48, 254, 48, 157, 48, 158, 48, 3, 48, 221, 78, 5, 48, 6, 48, 7, 48, 252, 48, 21, 32, 16, 32, 15, 255, 92, 0, 28, 48, 22, 32, 92, 255, 38, 32, 37, 32, 24, 32, 25, 32, 28, 32, 29, 32, 8, 255, 9, 255, 20, 48, 21, 48, 59, 255, 61, 255, 91, 255, 93, 255, 8, 48, 9, 48, 10, 48, 11, 48, 12, 48, 13, 48, 14, 48, 15, 48, 16, 48, 17, 48, 11, 255, 18, 34, 177, 0, 215, 0, 247, 0, 29, 255, 96, 34, 28, 255, 30, 255, 102, 34, 103, 34, 30, 34, 52, 34, 66, 38, 64, 38, 176, 0, 50, 32, 51, 32, 3, 33, 229, 255, 4, 255, 162, 0, 163, 0, 5, 255, 3, 255, 6, 255, 10, 255, 32, 255, 167, 0, 6, 38, 5, 38, 203, 37, 207, 37, 206, 37, 199, 37, 198, 37, 161, 37, 160, 37, 179, 37, 178, 37, 189, 37, 188, 37, 59, 32, 18, 48, 146, 33, 144, 33, 145, 33, 147, 33, 19, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 34, 11, 34, 134, 34, 135, 34, 130, 34, 131, 34, 42, 34, 41, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 34, 40, 34, 172, 0, 210, 33, 212, 33, 0, 34, 3, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 34, 165, 34, 18, 35, 2, 34, 7, 34, 97, 34, 82, 34, 106, 34, 107, 34, 26, 34, 61, 34, 29, 34, 53, 34, 43, 34, 44, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 33, 48, 32, 111, 38, 109, 38, 106, 38, 32, 32, 33, 32, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 239, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 255, 17, 255, 18, 255, 19, 255, 20, 255, 21, 255, 22, 255, 23, 255, 24, 255, 25, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 255, 34, 255, 35, 255, 36, 255, 37, 255, 38, 255, 39, 255, 40, 255, 41, 255, 42, 255, 43, 255, 44, 255, 45, 255, 46, 255, 47, 255, 48, 255, 49, 255, 50, 255, 51, 255, 52, 255, 53, 255, 54, 255, 55, 255, 56, 255, 57, 255, 58, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 255, 66, 255, 67, 255, 68, 255, 69, 255, 70, 255, 71, 255, 72, 255, 73, 255, 74, 255, 75, 255, 76, 255, 77, 255, 78, 255, 79, 255, 80, 255, 81, 255, 82, 255, 83, 255, 84, 255, 85, 255, 86, 255, 87, 255, 88, 255, 89, 255, 90, 255, 0, 0, 0, 0, 0, 0, 0, 0, 65, 48, 66, 48, 67, 48, 68, 48, 69, 48, 70, 48, 71, 48, 72, 48, 73, 48, 74, 48, 75, 48, 76, 48, 77, 48, 78, 48, 79, 48, 80, 48, 81, 48, 82, 48, 83, 48, 84, 48, 85, 48, 86, 48, 87, 48, 88, 48, 89, 48, 90, 48, 91, 48, 92, 48, 93, 48, 94, 48, 95, 48, 96, 48, 97, 48, 98, 48, 99, 48, 100, 48, 101, 48, 102, 48, 103, 48, 104, 48, 105, 48, 106, 48, 107, 48, 108, 48, 109, 48, 110, 48, 111, 48, 112, 48, 113, 48, 114, 48, 115, 48, 116, 48, 117, 48, 118, 48, 119, 48, 120, 48, 121, 48, 122, 48, 123, 48, 124, 48, 125, 48, 126, 48, 127, 48, 128, 48, 129, 48, 130, 48, 131, 48, 132, 48, 133, 48, 134, 48, 135, 48, 136, 48, 137, 48, 138, 48, 139, 48, 140, 48, 141, 48, 142, 48, 143, 48, 144, 48, 145, 48, 146, 48, 147, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 48, 162, 48, 163, 48, 164, 48, 165, 48, 166, 48, 167, 48, 168, 48, 169, 48, 170, 48, 171, 48, 172, 48, 173, 48, 174, 48, 175, 48, 176, 48, 177, 48, 178, 48, 179, 48, 180, 48, 181, 48, 182, 48, 183, 48, 184, 48, 185, 48, 186, 48, 187, 48, 188, 48, 189, 48, 190, 48, 191, 48, 192, 48, 193, 48, 194, 48, 195, 48, 196, 48, 197, 48, 198, 48, 199, 48, 200, 48, 201, 48, 202, 48, 203, 48, 204, 48, 205, 48, 206, 48, 207, 48, 208, 48, 209, 48, 210, 48, 211, 48, 212, 48, 213, 48, 214, 48, 215, 48, 216, 48, 217, 48, 218, 48, 219, 48, 220, 48, 221, 48, 222, 48, 223, 48, 224, 48, 225, 48, 226, 48, 227, 48, 228, 48, 229, 48, 230, 48, 231, 48, 232, 48, 233, 48, 234, 48, 235, 48, 236, 48, 237, 48, 238, 48, 239, 48, 240, 48, 241, 48, 242, 48, 243, 48, 244, 48, 245, 48, 246, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145, 3, 146, 3, 147, 3, 148, 3, 149, 3, 150, 3, 151, 3, 152, 3, 153, 3, 154, 3, 155, 3, 156, 3, 157, 3, 158, 3, 159, 3, 160, 3, 161, 3, 163, 3, 164, 3, 165, 3, 166, 3, 167, 3, 168, 3, 169, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 177, 3, 178, 3, 179, 3, 180, 3, 181, 3, 182, 3, 183, 3, 184, 3, 185, 3, 186, 3, 187, 3, 188, 3, 189, 3, 190, 3, 191, 3, 192, 3, 193, 3, 195, 3, 196, 3, 197, 3, 198, 3, 199, 3, 200, 3, 201, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 4, 17, 4, 18, 4, 19, 4, 20, 4, 21, 4, 1, 4, 22, 4, 23, 4, 24, 4, 25, 4, 26, 4, 27, 4, 28, 4, 29, 4, 30, 4, 31, 4, 32, 4, 33, 4, 34, 4, 35, 4, 36, 4, 37, 4, 38, 4, 39, 4, 40, 4, 41, 4, 42, 4, 43, 4, 44, 4, 45, 4, 46, 4, 47, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 4, 49, 4, 50, 4, 51, 4, 52, 4, 53, 4, 81, 4, 54, 4, 55, 4, 56, 4, 57, 4, 58, 4, 59, 4, 60, 4, 61, 4, 62, 4, 63, 4, 64, 4, 65, 4, 66, 4, 67, 4, 68, 4, 69, 4, 70, 4, 71, 4, 72, 4, 73, 4, 74, 4, 75, 4, 76, 4, 77, 4, 78, 4, 79, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 2, 37, 12, 37, 16, 37, 24, 37, 20, 37, 28, 37, 44, 37, 36, 37, 52, 37, 60, 37, 1, 37, 3, 37, 15, 37, 19, 37, 27, 37, 23, 37, 35, 37, 51, 37, 43, 37, 59, 37, 75, 37, 32, 37, 47, 37, 40, 37, 55, 37, 63, 37, 29, 37, 48, 37, 37, 37, 56, 37, 66, 37], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 10240);
    allocate([156, 78, 22, 85, 3, 90, 63, 150, 192, 84, 27, 97, 40, 99, 246, 89, 34, 144, 117, 132, 28, 131, 80, 122, 170, 96, 225, 99, 37, 110, 237, 101, 102, 132, 166, 130, 245, 155, 147, 104, 39, 87, 161, 101, 113, 98, 155, 91, 208, 89, 123, 134, 244, 152, 98, 125, 190, 125, 142, 155, 22, 98, 159, 124, 183, 136, 137, 91, 181, 94, 9, 99, 151, 102, 72, 104, 199, 149, 141, 151, 79, 103, 229, 78, 10, 79, 77, 79, 157, 79, 73, 80, 242, 86, 55, 89, 212, 89, 1, 90, 9, 92, 223, 96, 15, 97, 112, 97, 19, 102, 5, 105, 186, 112, 79, 117, 112, 117, 251, 121, 173, 125, 239, 125, 195, 128, 14, 132, 99, 136, 2, 139, 85, 144, 122, 144, 59, 83, 149, 78, 165, 78, 223, 87, 178, 128, 193, 144, 239, 120, 0, 78, 241, 88, 162, 110, 56, 144, 50, 122, 40, 131, 139, 130, 47, 156, 65, 81, 112, 83, 189, 84, 225, 84, 224, 86, 251, 89, 21, 95, 242, 152, 235, 109, 228, 128, 45, 133, 98, 150, 112, 150, 160, 150, 251, 151, 11, 84, 243, 83, 135, 91, 207, 112, 189, 127, 194, 143, 232, 150, 111, 83, 92, 157, 186, 122, 17, 78, 147, 120, 252, 129, 38, 110, 24, 86, 4, 85, 29, 107, 26, 133, 59, 156, 229, 89, 169, 83, 102, 109, 220, 116, 143, 149, 66, 86, 145, 78, 75, 144, 242, 150, 79, 131, 12, 153, 225, 83, 182, 85, 48, 91, 113, 95, 32, 102, 243, 102, 4, 104, 56, 108, 243, 108, 41, 109, 91, 116, 200, 118, 78, 122, 52, 152, 241, 130, 91, 136, 96, 138, 237, 146, 178, 109, 171, 117, 202, 118, 197, 153, 166, 96, 1, 139, 138, 141, 178, 149, 142, 105, 173, 83, 134, 81, 18, 87, 48, 88, 68, 89, 180, 91, 246, 94, 40, 96, 169, 99, 244, 99, 191, 108, 20, 111, 142, 112, 20, 113, 89, 113, 213, 113, 63, 115, 1, 126, 118, 130, 209, 130, 151, 133, 96, 144, 91, 146, 27, 157, 105, 88, 188, 101, 90, 108, 37, 117, 249, 81, 46, 89, 101, 89, 128, 95, 220, 95, 188, 98, 250, 101, 42, 106, 39, 107, 180, 107, 139, 115, 193, 127, 86, 137, 44, 157, 14, 157, 196, 158, 161, 92, 150, 108, 123, 131, 4, 81, 75, 92, 182, 97, 198, 129, 118, 104, 97, 114, 89, 78, 250, 79, 120, 83, 105, 96, 41, 110, 79, 122, 243, 151, 11, 78, 22, 83, 238, 78, 85, 79, 61, 79, 161, 79, 115, 79, 160, 82, 239, 83, 9, 86, 15, 89, 193, 90, 182, 91, 225, 91, 209, 121, 135, 102, 156, 103, 182, 103, 76, 107, 179, 108, 107, 112, 194, 115, 141, 121, 190, 121, 60, 122, 135, 123, 177, 130, 219, 130, 4, 131, 119, 131, 239, 131, 211, 131, 102, 135, 178, 138, 41, 86, 168, 140, 230, 143, 78, 144, 30, 151, 138, 134, 196, 79, 232, 92, 17, 98, 89, 114, 59, 117, 229, 129, 189, 130, 254, 134, 192, 140, 197, 150, 19, 153, 213, 153, 203, 78, 26, 79, 227, 137, 222, 86, 74, 88, 202, 88, 251, 94, 235, 95, 42, 96, 148, 96, 98, 96, 208, 97, 18, 98, 208, 98, 57, 101, 65, 155, 102, 102, 176, 104, 119, 109, 112, 112, 76, 117, 134, 118, 117, 125, 165, 130, 249, 135, 139, 149, 142, 150, 157, 140, 241, 81, 190, 82, 22, 89, 179, 84, 179, 91, 22, 93, 104, 97, 130, 105, 175, 109, 141, 120, 203, 132, 87, 136, 114, 138, 167, 147, 184, 154, 108, 109, 168, 153, 217, 134, 163, 87, 255, 103, 206, 134, 14, 146, 131, 82, 135, 86, 4, 84, 211, 94, 225, 98, 185, 100, 60, 104, 56, 104, 187, 107, 114, 115, 186, 120, 107, 122, 154, 137, 210, 137, 107, 141, 3, 143, 237, 144, 163, 149, 148, 150, 105, 151, 102, 91, 179, 92, 125, 105, 77, 152, 78, 152, 155, 99, 32, 123, 43, 106, 127, 106, 182, 104, 13, 156, 95, 111, 114, 82, 157, 85, 112, 96, 236, 98, 59, 109, 7, 110, 209, 110, 91, 132, 16, 137, 68, 143, 20, 78, 57, 156, 246, 83, 27, 105, 58, 106, 132, 151, 42, 104, 92, 81, 195, 122, 178, 132, 220, 145, 140, 147, 91, 86, 40, 157, 34, 104, 5, 131, 49, 132, 165, 124, 8, 82, 197, 130, 230, 116, 126, 78, 131, 79, 160, 81, 210, 91, 10, 82, 216, 82, 231, 82, 251, 93, 154, 85, 42, 88, 230, 89, 140, 91, 152, 91, 219, 91, 114, 94, 121, 94, 163, 96, 31, 97, 99, 97, 190, 97, 219, 99, 98, 101, 209, 103, 83, 104, 250, 104, 62, 107, 83, 107, 87, 108, 34, 111, 151, 111, 69, 111, 176, 116, 24, 117, 227, 118, 11, 119, 255, 122, 161, 123, 33, 124, 233, 125, 54, 127, 240, 127, 157, 128, 102, 130, 158, 131, 179, 137, 204, 138, 171, 140, 132, 144, 81, 148, 147, 149, 145, 149, 162, 149, 101, 150, 211, 151, 40, 153, 24, 130, 56, 78, 43, 84, 184, 92, 204, 93, 169, 115, 76, 118, 60, 119, 169, 92, 235, 127, 11, 141, 193, 150, 17, 152, 84, 152, 88, 152, 1, 79, 14, 79, 113, 83, 156, 85, 104, 86, 250, 87, 71, 89, 9, 91, 196, 91, 144, 92, 12, 94, 126, 94, 204, 95, 238, 99, 58, 103, 215, 101, 226, 101, 31, 103, 203, 104, 196, 104, 95, 106, 48, 94, 197, 107, 23, 108, 125, 108, 127, 117, 72, 121, 99, 91, 0, 122, 0, 125, 189, 95, 143, 137, 24, 138, 180, 140, 119, 141, 204, 142, 29, 143, 226, 152, 14, 154, 60, 155, 128, 78, 125, 80, 0, 81, 147, 89, 156, 91, 47, 98, 128, 98, 236, 100, 58, 107, 160, 114, 145, 117, 71, 121, 169, 127, 251, 135, 188, 138, 112, 139, 172, 99, 202, 131, 160, 151, 9, 84, 3, 84, 171, 85, 84, 104, 88, 106, 112, 138, 39, 120, 117, 103, 205, 158, 116, 83, 162, 91, 26, 129, 80, 134, 6, 144, 24, 78, 69, 78, 199, 78, 17, 79, 202, 83, 56, 84, 174, 91, 19, 95, 37, 96, 81, 101, 61, 103, 66, 108, 114, 108, 227, 108, 120, 112, 3, 116, 118, 122, 174, 122, 8, 123, 26, 125, 254, 124, 102, 125, 231, 101, 91, 114, 187, 83, 69, 92, 232, 93, 210, 98, 224, 98, 25, 99, 32, 110, 90, 134, 49, 138, 221, 141, 248, 146, 1, 111, 166, 121, 90, 155, 168, 78, 171, 78, 172, 78, 155, 79, 160, 79, 209, 80, 71, 81, 246, 122, 113, 81, 246, 81, 84, 83, 33, 83, 127, 83, 235, 83, 172, 85, 131, 88, 225, 92, 55, 95, 74, 95, 47, 96, 80, 96, 109, 96, 31, 99, 89, 101, 75, 106, 193, 108, 194, 114, 237, 114, 239, 119, 248, 128, 5, 129, 8, 130, 78, 133, 247, 144, 225, 147, 255, 151, 87, 153, 90, 154, 240, 78, 221, 81, 45, 92, 129, 102, 109, 105, 64, 92, 242, 102, 117, 105, 137, 115, 80, 104, 129, 124, 197, 80, 228, 82, 71, 87, 254, 93, 38, 147, 164, 101, 35, 107, 61, 107, 52, 116, 129, 121, 189, 121, 75, 123, 202, 125, 185, 130, 204, 131, 127, 136, 95, 137, 57, 139, 209, 143, 209, 145, 31, 84, 128, 146, 93, 78, 54, 80, 229, 83, 58, 83, 215, 114, 150, 115, 233, 119, 230, 130, 175, 142, 198, 153, 200, 153, 210, 153, 119, 81, 26, 97, 94, 134, 176, 85, 122, 122, 118, 80, 211, 91, 71, 144, 133, 150, 50, 78, 219, 106, 231, 145, 81, 92, 72, 92, 152, 99, 159, 122, 147, 108, 116, 151, 97, 143, 170, 122, 138, 113, 136, 150, 130, 124, 23, 104, 112, 126, 81, 104, 108, 147, 242, 82, 27, 84, 171, 133, 19, 138, 164, 127, 205, 142, 225, 144, 102, 83, 136, 136, 65, 121, 194, 79, 190, 80, 17, 82, 68, 81, 83, 85, 45, 87, 234, 115, 139, 87, 81, 89, 98, 95, 132, 95, 117, 96, 118, 97, 103, 97, 169, 97, 178, 99, 58, 100, 108, 101, 111, 102, 66, 104, 19, 110, 102, 117, 61, 122, 251, 124, 76, 125, 153, 125, 75, 126, 107, 127, 14, 131, 74, 131, 205, 134, 8, 138, 99, 138, 102, 139, 253, 142, 26, 152, 143, 157, 184, 130, 206, 143, 232, 155, 135, 82, 31, 98, 131, 100, 192, 111, 153, 150, 65, 104, 145, 80, 32, 107, 122, 108, 84, 111, 116, 122, 80, 125, 64, 136, 35, 138, 8, 103, 246, 78, 57, 80, 38, 80, 101, 80, 124, 81, 56, 82, 99, 82, 167, 85, 15, 87, 5, 88, 204, 90, 250, 94, 178, 97, 248, 97, 243, 98, 114, 99, 28, 105, 41, 106, 125, 114, 172, 114, 46, 115, 20, 120, 111, 120, 121, 125, 12, 119, 169, 128, 139, 137, 25, 139, 226, 140, 210, 142, 99, 144, 117, 147, 122, 150, 85, 152, 19, 154, 120, 158, 67, 81, 159, 83, 179, 83, 123, 94, 38, 95, 27, 110, 144, 110, 132, 115, 254, 115, 67, 125, 55, 130, 0, 138, 250, 138, 80, 150, 78, 78, 11, 80, 228, 83, 124, 84, 250, 86, 209, 89, 100, 91, 241, 93, 171, 94, 39, 95, 56, 98, 69, 101, 175, 103, 86, 110, 208, 114, 202, 124, 180, 136, 161, 128, 225, 128, 240, 131, 78, 134, 135, 138, 232, 141, 55, 146, 199, 150, 103, 152, 19, 159, 148, 78, 146, 78, 13, 79, 72, 83, 73, 84, 62, 84, 47, 90, 140, 95, 161, 95, 159, 96, 167, 104, 142, 106, 90, 116, 129, 120, 158, 138, 164, 138, 119, 139, 144, 145, 94, 78, 201, 155, 164, 78, 124, 79, 175, 79, 25, 80, 22, 80, 73, 81, 108, 81, 159, 82, 185, 82, 254, 82, 154, 83, 227, 83, 17, 84, 14, 84, 137, 85, 81, 87, 162, 87, 125, 89, 84, 91, 93, 91, 143, 91, 229, 93, 231, 93, 247, 93, 120, 94, 131, 94, 154, 94, 183, 94, 24, 95, 82, 96, 76, 97, 151, 98, 216, 98, 167, 99, 59, 101, 2, 102, 67, 102, 244, 102, 109, 103, 33, 104, 151, 104, 203, 105, 95, 108, 42, 109, 105, 109, 47, 110, 157, 110, 50, 117, 135, 118, 108, 120, 63, 122, 224, 124, 5, 125, 24, 125, 94, 125, 177, 125, 21, 128, 3, 128, 175, 128, 177, 128, 84, 129, 143, 129, 42, 130, 82, 131, 76, 136, 97, 136, 27, 139, 162, 140, 252, 140, 202, 144, 117, 145, 113, 146, 63, 120, 252, 146, 164, 149, 77, 150, 5, 152, 153, 153, 216, 154, 59, 157, 91, 82, 171, 82, 247, 83, 8, 84, 213, 88, 247, 98, 224, 111, 106, 140, 95, 143, 185, 158, 75, 81, 59, 82, 74, 84, 253, 86, 64, 122, 119, 145, 96, 157, 210, 158, 68, 115, 9, 111, 112, 129, 17, 117, 253, 95, 218, 96, 168, 154, 219, 114, 188, 143, 100, 107, 3, 152, 202, 78, 240, 86, 100, 87, 190, 88, 90, 90, 104, 96, 199, 97, 15, 102, 6, 102, 57, 104, 177, 104, 247, 109, 213, 117, 58, 125, 110, 130, 66, 155, 155, 78, 80, 79, 201, 83, 6, 85, 111, 93, 230, 93, 238, 93, 251, 103, 153, 108, 115, 116, 2, 120, 80, 138, 150, 147, 223, 136, 80, 87, 167, 94, 43, 99, 181, 80, 172, 80, 141, 81, 0, 103, 201, 84, 94, 88, 187, 89, 176, 91, 105, 95, 77, 98, 161, 99, 61, 104, 115, 107, 8, 110, 125, 112, 199, 145, 128, 114, 21, 120, 38, 120, 109, 121, 142, 101, 48, 125, 220, 131, 193, 136, 9, 143, 155, 150, 100, 82, 40, 87, 80, 103, 106, 127, 161, 140, 180, 81, 66, 87, 42, 150, 58, 88, 138, 105, 180, 128, 178, 84, 14, 93, 252, 87, 149, 120, 250, 157, 92, 79, 74, 82, 139, 84, 62, 100, 40, 102, 20, 103, 245, 103, 132, 122, 86, 123, 34, 125, 47, 147, 92, 104, 173, 155, 57, 123, 25, 83, 138, 81, 55, 82, 223, 91, 246, 98, 174, 100, 230, 100, 45, 103, 186, 107, 169, 133, 209, 150, 144, 118, 214, 155, 76, 99, 6, 147, 171, 155, 191, 118, 82, 102, 9, 78, 152, 80, 194, 83, 113, 92, 232, 96, 146, 100, 99, 101, 95, 104, 230, 113, 202, 115, 35, 117, 151, 123, 130, 126, 149, 134, 131, 139, 219, 140, 120, 145, 16, 153, 172, 101, 171, 102, 139, 107, 213, 78, 212, 78, 58, 79, 127, 79, 58, 82, 248, 83, 242, 83, 227, 85, 219, 86, 235, 88, 203, 89, 201, 89, 255, 89, 80, 91, 77, 92, 2, 94, 43, 94, 215, 95, 29, 96, 7, 99, 47, 101, 92, 91, 175, 101, 189, 101, 232, 101, 157, 103, 98, 107, 123, 107, 15, 108, 69, 115, 73, 121, 193, 121, 248, 124, 25, 125, 43, 125, 162, 128, 2, 129, 243, 129, 150, 137, 94, 138, 105, 138, 102, 138, 140, 138, 238, 138, 199, 140, 220, 140, 204, 150, 252, 152, 111, 107, 139, 78, 60, 79, 141, 79, 80, 81, 87, 91, 250, 91, 72, 97, 1, 99, 66, 102, 33, 107, 203, 110, 187, 108, 62, 114, 189, 116, 212, 117, 193, 120, 58, 121, 12, 128, 51, 128, 234, 129, 148, 132, 158, 143, 80, 108, 127, 158, 15, 95, 88, 139, 43, 157, 250, 122, 248, 142, 141, 91, 235, 150, 3, 78, 241, 83, 247, 87, 49, 89, 201, 90, 164, 91, 137, 96, 127, 110, 6, 111, 190, 117, 234, 140, 159, 91, 0, 133, 224, 123, 114, 80, 244, 103, 157, 130, 97, 92, 74, 133, 30, 126, 14, 130, 153, 81, 4, 92, 104, 99, 102, 141, 156, 101, 110, 113, 62, 121, 23, 125, 5, 128, 29, 139, 202, 142, 110, 144, 199, 134, 170, 144, 31, 80, 250, 82, 58, 92, 83, 103, 124, 112, 53, 114, 76, 145, 200, 145, 43, 147, 229, 130, 194, 91, 49, 95, 249, 96, 59, 78, 214, 83, 136, 91, 75, 98, 49, 103, 138, 107, 233, 114, 224, 115, 46, 122, 107, 129, 163, 141, 82, 145, 150, 153, 18, 81, 215, 83, 106, 84, 255, 91, 136, 99, 57, 106, 172, 125, 0, 151, 218, 86, 206, 83, 104, 84, 151, 91, 49, 92, 222, 93, 238, 79, 1, 97, 254, 98, 50, 109, 192, 121, 203, 121, 66, 125, 77, 126, 210, 127, 237, 129, 31, 130, 144, 132, 70, 136, 114, 137, 144, 139, 116, 142, 47, 143, 49, 144, 75, 145, 108, 145, 198, 150, 156, 145, 192, 78, 79, 79, 69, 81, 65, 83, 147, 95, 14, 98, 212, 103, 65, 108, 11, 110, 99, 115, 38, 126, 205, 145, 131, 146, 212, 83, 25, 89, 191, 91, 209, 109, 93, 121, 46, 126, 155, 124, 126, 88, 159, 113, 250, 81, 83, 136, 240, 143, 202, 79, 251, 92, 37, 102, 172, 119, 227, 122, 28, 130, 255, 153, 198, 81, 170, 95, 236, 101, 111, 105, 137, 107, 243, 109, 150, 110, 100, 111, 254, 118, 20, 125, 225, 93, 117, 144, 135, 145, 6, 152, 230, 81, 29, 82, 64, 98, 145, 102, 217, 102, 26, 110, 182, 94, 210, 125, 114, 127, 248, 102, 175, 133, 247, 133, 248, 138, 169, 82, 217, 83, 115, 89, 143, 94, 144, 95, 85, 96, 228, 146, 100, 150, 183, 80, 31, 81, 221, 82, 32, 83, 71, 83, 236, 83, 232, 84, 70, 85, 49, 85, 23, 86, 104, 89, 190, 89, 60, 90, 181, 91, 6, 92, 15, 92, 17, 92, 26, 92, 132, 94, 138, 94, 224, 94, 112, 95, 127, 98, 132, 98, 219, 98, 140, 99, 119, 99, 7, 102, 12, 102, 45, 102, 118, 102, 126, 103, 162, 104, 31, 106, 53, 106, 188, 108, 136, 109, 9, 110, 88, 110, 60, 113, 38, 113, 103, 113, 199, 117, 1, 119, 93, 120, 1, 121, 101, 121, 240, 121, 224, 122, 17, 123, 167, 124, 57, 125, 150, 128, 214, 131, 139, 132, 73, 133, 93, 136, 243, 136, 31, 138, 60, 138, 84, 138, 115, 138, 97, 140, 222, 140, 164, 145, 102, 146, 126, 147, 24, 148, 156, 150, 152, 151, 10, 78, 8, 78, 30, 78, 87, 78, 151, 81, 112, 82, 206, 87, 52, 88, 204, 88, 34, 91, 56, 94, 197, 96, 254, 100, 97, 103, 86, 103, 68, 109, 182, 114, 115, 117, 99, 122, 184, 132, 114, 139, 184, 145, 32, 147, 49, 86, 244, 87, 254, 152, 237, 98, 13, 105, 150, 107, 237, 113, 84, 126, 119, 128, 114, 130, 230, 137, 223, 152, 85, 135, 177, 143, 59, 92, 56, 79, 225, 79, 181, 79, 7, 85, 32, 90, 221, 91, 233, 91, 195, 95, 78, 97, 47, 99, 176, 101, 75, 102, 238, 104, 155, 105, 120, 109, 241, 109, 51, 117, 185, 117, 31, 119, 94, 121, 230, 121, 51, 125, 227, 129, 175, 130, 170, 133, 170, 137, 58, 138, 171, 142, 155, 143, 50, 144, 221, 145, 7, 151, 186, 78, 193, 78, 3, 82, 117, 88, 236, 88, 11, 92, 26, 117, 61, 92, 78, 129, 10, 138, 197, 143, 99, 150, 109, 151, 37, 123, 207, 138, 8, 152, 98, 145, 243, 86, 168, 83, 23, 144, 57, 84, 130, 87, 37, 94, 168, 99, 52, 108, 138, 112, 97, 119, 139, 124, 224, 127, 112, 136, 66, 144, 84, 145, 16, 147, 24, 147, 143, 150, 94, 116, 196, 154, 7, 93, 105, 93, 112, 101, 162, 103, 168, 141, 219, 150, 110, 99, 73, 103, 25, 105, 197, 131, 23, 152, 192, 150, 254, 136, 132, 111, 122, 100, 248, 91, 22, 78, 44, 112, 93, 117, 47, 102, 196, 81, 54, 82, 226, 82, 211, 89, 129, 95, 39, 96, 16, 98, 63, 101, 116, 101, 31, 102, 116, 102, 242, 104, 22, 104, 99, 107, 5, 110, 114, 114, 31, 117, 219, 118, 190, 124, 86, 128, 240, 88, 253, 136, 127, 137, 160, 138, 147, 138, 203, 138, 29, 144, 146, 145, 82, 151, 89, 151, 137, 101, 14, 122, 6, 129, 187, 150, 45, 94, 220, 96, 26, 98, 165, 101, 20, 102, 144, 103, 243, 119, 77, 122, 77, 124, 62, 126, 10, 129, 172, 140, 100, 141, 225, 141, 95, 142, 169, 120, 7, 82, 217, 98, 165, 99, 66, 100, 152, 98, 45, 138, 131, 122, 192, 123, 172, 138, 234, 150, 118, 125, 12, 130, 73, 135, 217, 78, 72, 81, 67, 83, 96, 83, 163, 91, 2, 92, 22, 92, 221, 93, 38, 98, 71, 98, 176, 100, 19, 104, 52, 104, 201, 108, 69, 109, 23, 109, 211, 103, 92, 111, 78, 113, 125, 113, 203, 101, 127, 122, 173, 123, 218, 125, 74, 126, 168, 127, 122, 129, 27, 130, 57, 130, 166, 133, 110, 138, 206, 140, 245, 141, 120, 144, 119, 144, 173, 146, 145, 146, 131, 149, 174, 155, 77, 82, 132, 85, 56, 111, 54, 113, 104, 81, 133, 121, 85, 126, 179, 129, 206, 124, 76, 86, 81, 88, 168, 92, 170, 99, 254, 102, 253, 102, 90, 105, 217, 114, 143, 117, 142, 117, 14, 121, 86, 121, 223, 121, 151, 124, 32, 125, 68, 125, 7, 134, 52, 138, 59, 150, 97, 144, 32, 159, 231, 80, 117, 82, 204, 83, 226, 83, 9, 80, 170, 85, 238, 88, 79, 89, 61, 114, 139, 91, 100, 92, 29, 83, 227, 96, 243, 96, 92, 99, 131, 99, 63, 99, 187, 99, 205, 100, 233, 101, 249, 102, 227, 93, 205, 105, 253, 105, 21, 111, 229, 113, 137, 78, 233, 117, 248, 118, 147, 122, 223, 124, 207, 125, 156, 125, 97, 128, 73, 131, 88, 131, 108, 132, 188, 132, 251, 133, 197, 136, 112, 141, 1, 144, 109, 144, 151, 147, 28, 151, 18, 154, 207, 80, 151, 88, 142, 97, 211, 129, 53, 133, 8, 141, 32, 144, 195, 79, 116, 80, 71, 82, 115, 83, 111, 96, 73, 99, 95, 103, 44, 110, 179, 141, 31, 144, 215, 79, 94, 92, 202, 140, 207, 101, 154, 125, 82, 83, 150, 136, 118, 81, 195, 99, 88, 91, 107, 91, 10, 92, 13, 100, 81, 103, 92, 144, 214, 78, 26, 89, 42, 89, 112, 108, 81, 138, 62, 85, 21, 88, 165, 89, 240, 96, 83, 98, 193, 103, 53, 130, 85, 105, 64, 150, 196, 153, 40, 154, 83, 79, 6, 88, 254, 91, 16, 128, 177, 92, 47, 94, 133, 95, 32, 96, 75, 97, 52, 98, 255, 102, 240, 108, 222, 110, 206, 128, 127, 129, 212, 130, 139, 136, 184, 140, 0, 144, 46, 144, 138, 150, 219, 158, 219, 155, 227, 78, 240, 83, 39, 89, 44, 123, 141, 145, 76, 152, 249, 157, 221, 110, 39, 112, 83, 83, 68, 85, 133, 91, 88, 98, 158, 98, 211, 98, 162, 108, 239, 111, 34, 116, 23, 138, 56, 148, 193, 111, 254, 138, 56, 131, 231, 81, 248, 134, 234, 83, 233, 83, 70, 79, 84, 144, 176, 143, 106, 89, 49, 129, 253, 93, 234, 122, 191, 143, 218, 104, 55, 140, 248, 114, 72, 156, 61, 106, 176, 138, 57, 78, 88, 83, 6, 86, 102, 87, 197, 98, 162, 99, 230, 101, 78, 107, 225, 109, 91, 110, 173, 112, 237, 119, 239, 122, 170, 123, 187, 125, 61, 128, 198, 128, 203, 134, 149, 138, 91, 147, 227, 86, 199, 88, 62, 95, 173, 101, 150, 102, 128, 106, 181, 107, 55, 117, 199, 138, 36, 80, 229, 119, 48, 87, 27, 95, 101, 96, 122, 102, 96, 108, 244, 117, 26, 122, 110, 127, 244, 129, 24, 135, 69, 144, 179, 153, 201, 123, 92, 117, 249, 122, 81, 123, 196, 132, 16, 144, 233, 121, 146, 122, 54, 131, 225, 90, 64, 119, 45, 78, 242, 78, 153, 91, 224, 95, 189, 98, 60, 102, 241, 103, 232, 108, 107, 134, 119, 136, 59, 138, 78, 145, 243, 146, 208, 153, 23, 106, 38, 112, 42, 115, 231, 130, 87, 132, 175, 140, 1, 78, 70, 81, 203, 81, 139, 85, 245, 91, 22, 94, 51, 94, 129, 94, 20, 95, 53, 95, 107, 95, 180, 95, 242, 97, 17, 99, 162, 102, 29, 103, 110, 111, 82, 114, 58, 117, 58, 119, 116, 128, 57, 129, 120, 129, 118, 135, 191, 138, 220, 138, 133, 141, 243, 141, 154, 146, 119, 149, 2, 152, 229, 156, 197, 82, 87, 99, 244, 118, 21, 103, 136, 108, 205, 115, 195, 140, 174, 147, 115, 150, 37, 109, 156, 88, 14, 105, 204, 105, 253, 143, 154, 147, 219, 117, 26, 144, 90, 88, 2, 104, 180, 99, 251, 105, 67, 79, 44, 111, 216, 103, 187, 143, 38, 133, 180, 125, 84, 147, 63, 105, 112, 111, 106, 87, 247, 88, 44, 91, 44, 125, 42, 114, 10, 84, 227, 145, 180, 157, 173, 78, 78, 79, 92, 80, 117, 80, 67, 82, 158, 140, 72, 84, 36, 88, 154, 91, 29, 94, 149, 94, 173, 94, 247, 94, 31, 95, 140, 96, 181, 98, 58, 99, 208, 99, 175, 104, 64, 108, 135, 120, 142, 121, 11, 122, 224, 125, 71, 130, 2, 138, 230, 138, 68, 142, 19, 144, 184, 144, 45, 145, 216, 145, 14, 159, 229, 108, 88, 100, 226, 100, 117, 101, 244, 110, 132, 118, 27, 123, 105, 144, 209, 147, 186, 110, 242, 84, 185, 95, 164, 100, 77, 143, 237, 143, 68, 146, 120, 81, 107, 88, 41, 89, 85, 92, 151, 94, 251, 109, 143, 126, 28, 117, 188, 140, 226, 142, 91, 152, 185, 112, 29, 79, 191, 107, 177, 111, 48, 117, 251, 150, 78, 81, 16, 84, 53, 88, 87, 88, 172, 89, 96, 92, 146, 95, 151, 101, 92, 103, 33, 110, 123, 118, 223, 131, 237, 140, 20, 144, 253, 144, 77, 147, 37, 120, 58, 120, 170, 82, 166, 94, 31, 87, 116, 89, 18, 96, 18, 80, 90, 81, 172, 81, 205, 81, 0, 82, 16, 85, 84, 88, 88, 88, 87, 89, 149, 91, 246, 92, 139, 93, 188, 96, 149, 98, 45, 100, 113, 103, 67, 104, 188, 104, 223, 104, 215, 118, 216, 109, 111, 110, 155, 109, 111, 112, 200, 113, 83, 95, 216, 117, 119, 121, 73, 123, 84, 123, 82, 123, 214, 124, 113, 125, 48, 82, 99, 132, 105, 133, 228, 133, 14, 138, 4, 139, 70, 140, 15, 142, 3, 144, 15, 144, 25, 148, 118, 150, 45, 152, 48, 154, 216, 149, 205, 80, 213, 82, 12, 84, 2, 88, 14, 92, 167, 97, 158, 100, 30, 109, 179, 119, 229, 122, 244, 128, 4, 132, 83, 144, 133, 146, 224, 92, 7, 157, 63, 83, 151, 95, 179, 95, 156, 109, 121, 114, 99, 119, 191, 121, 228, 123, 210, 107, 236, 114, 173, 138, 3, 104, 97, 106, 248, 81, 129, 122, 52, 105, 74, 92, 246, 156, 235, 130, 197, 91, 73, 145, 30, 112, 120, 86, 111, 92, 199, 96, 102, 101, 140, 108, 90, 140, 65, 144, 19, 152, 81, 84, 199, 102, 13, 146, 72, 89, 163, 144, 133, 81, 77, 78, 234, 81, 153, 133, 14, 139, 88, 112, 122, 99, 75, 147, 98, 105, 180, 153, 4, 126, 119, 117, 87, 83, 96, 105, 223, 142, 227, 150, 93, 108, 140, 78, 60, 92, 16, 95, 233, 143, 2, 83, 209, 140, 137, 128, 121, 134, 255, 94, 229, 101, 115, 78, 101, 81, 130, 89, 63, 92, 238, 151, 251, 78, 138, 89, 205, 95, 141, 138, 225, 111, 176, 121, 98, 121, 231, 91, 113, 132, 43, 115, 177, 113, 116, 94, 245, 95, 123, 99, 154, 100, 195, 113, 152, 124, 67, 78, 252, 94, 75, 78, 220, 87, 162, 86, 169, 96, 195, 111, 13, 125, 253, 128, 51, 129, 191, 129, 178, 143, 151, 137, 164, 134, 244, 93, 138, 98, 173, 100, 135, 137, 119, 103, 226, 108, 62, 109, 54, 116, 52, 120, 70, 90, 117, 127, 173, 130, 172, 153, 243, 79, 195, 94, 221, 98, 146, 99, 87, 101, 111, 103, 195, 118, 76, 114, 204, 128, 186, 128, 41, 143, 77, 145, 13, 80, 249, 87, 146, 90, 133, 104, 115, 105, 100, 113, 253, 114, 183, 140, 242, 88, 224, 140, 106, 150, 25, 144, 127, 135, 228, 121, 231, 119, 41, 132, 47, 79, 101, 82, 90, 83, 205, 98, 207, 103, 202, 108, 125, 118, 148, 123, 149, 124, 54, 130, 132, 133, 235, 143, 221, 102, 32, 111, 6, 114, 27, 126, 171, 131, 193, 153, 166, 158, 253, 81, 177, 123, 114, 120, 184, 123, 135, 128, 72, 123, 232, 106, 97, 94, 140, 128, 81, 117, 96, 117, 107, 81, 98, 146, 140, 110, 122, 118, 151, 145, 234, 154, 16, 79, 112, 127, 156, 98, 79, 123, 165, 149, 233, 156, 122, 86, 89, 88, 228, 134, 188, 150, 52, 79, 36, 82, 74, 83, 205, 83, 219, 83, 6, 94, 44, 100, 145, 101, 127, 103, 62, 108, 78, 108, 72, 114, 175, 114, 237, 115, 84, 117, 65, 126, 44, 130, 233, 133, 169, 140, 196, 123, 198, 145, 105, 113, 18, 152, 239, 152, 61, 99, 105, 102, 106, 117, 228, 118, 208, 120, 67, 133, 238, 134, 42, 83, 81, 83, 38, 84, 131, 89, 135, 94, 124, 95, 178, 96, 73, 98, 121, 98, 171, 98, 144, 101, 212, 107, 204, 108, 178, 117, 174, 118, 145, 120, 216, 121, 203, 125, 119, 127, 165, 128, 171, 136, 185, 138, 187, 140, 127, 144, 94, 151, 219, 152, 11, 106, 56, 124, 153, 80, 62, 92, 174, 95, 135, 103, 216, 107, 53, 116, 9, 119, 142, 127, 59, 159, 202, 103, 23, 122, 57, 83, 139, 117, 237, 154, 102, 95, 157, 129, 241, 131, 152, 128, 60, 95, 197, 95, 98, 117, 70, 123, 60, 144, 103, 104, 235, 89, 155, 90, 16, 125, 126, 118, 44, 139, 245, 79, 106, 95, 25, 106, 55, 108, 2, 111, 226, 116, 104, 121, 104, 136, 85, 138, 121, 140, 223, 94, 207, 99, 197, 117, 210, 121, 215, 130, 40, 147, 242, 146, 156, 132, 237, 134, 45, 156, 193, 84, 108, 95, 140, 101, 92, 109, 21, 112, 167, 140, 211, 140, 59, 152, 79, 101, 246, 116, 13, 78, 216, 78, 224, 87, 43, 89, 102, 90, 204, 91, 168, 81, 3, 94, 156, 94, 22, 96, 118, 98, 119, 101, 167, 101, 110, 102, 110, 109, 54, 114, 38, 123, 80, 129, 154, 129, 153, 130, 92, 139, 160, 140, 230, 140, 116, 141, 28, 150, 68, 150, 174, 79, 171, 100, 102, 107, 30, 130, 97, 132, 106, 133, 232, 144, 1, 92, 83, 105, 168, 152, 122, 132, 87, 133, 15, 79, 111, 82, 169, 95, 69, 94, 13, 103, 143, 121, 121, 129, 7, 137, 134, 137, 245, 109, 23, 95, 85, 98, 184, 108, 207, 78, 105, 114, 146, 155, 6, 82, 59, 84, 116, 86, 179, 88, 164, 97, 110, 98, 26, 113, 110, 89, 137, 124, 222, 124, 27, 125, 240, 150, 135, 101, 94, 128, 25, 78, 117, 79, 117, 81, 64, 88, 99, 94, 115, 94, 10, 95, 196, 103, 38, 78, 61, 133, 137, 149, 91, 150, 115, 124, 1, 152, 251, 80, 193, 88, 86, 118, 167, 120, 37, 82, 165, 119, 17, 133, 134, 123, 79, 80, 9, 89, 71, 114, 199, 123, 232, 125, 186, 143, 212, 143, 77, 144, 191, 79, 201, 82, 41, 90, 1, 95, 173, 151, 221, 79, 23, 130, 234, 146, 3, 87, 85, 99, 105, 107, 43, 117, 220, 136, 20, 143, 66, 122, 223, 82, 147, 88, 85, 97, 10, 98, 174, 102, 205, 107, 63, 124, 233, 131, 35, 80, 248, 79, 5, 83, 70, 84, 49, 88, 73, 89, 157, 91, 240, 92, 239, 92, 41, 93, 150, 94, 177, 98, 103, 99, 62, 101, 185, 101, 11, 103, 213, 108, 225, 108, 249, 112, 50, 120, 43, 126, 222, 128, 179, 130, 12, 132, 236, 132, 2, 135, 18, 137, 42, 138, 74, 140, 166, 144, 210, 146, 253, 152, 243, 156, 108, 157, 79, 78, 161, 78, 141, 80, 86, 82, 74, 87, 168, 89, 61, 94, 216, 95, 217, 95, 63, 98, 180, 102, 27, 103, 208, 103, 210, 104, 146, 81, 33, 125, 170, 128, 168, 129, 0, 139, 140, 140, 191, 140, 126, 146, 50, 150, 32, 84, 44, 152, 23, 83, 213, 80, 92, 83, 168, 88, 178, 100, 52, 103, 103, 114, 102, 119, 70, 122, 230, 145, 195, 82, 161, 108, 134, 107, 0, 88, 76, 94, 84, 89, 44, 103, 251, 127, 225, 81, 198, 118, 105, 100, 232, 120, 84, 155, 187, 158, 203, 87, 185, 89, 39, 102, 154, 103, 206, 107, 233, 84, 217, 105, 85, 94, 156, 129, 149, 103, 170, 155, 254, 103, 82, 156, 93, 104, 166, 78, 227, 79, 200, 83, 185, 98, 43, 103, 171, 108, 196, 143, 173, 79, 109, 126, 191, 158, 7, 78, 98, 97, 128, 110, 43, 111, 19, 133, 115, 84, 42, 103, 69, 155, 243, 93, 149, 123, 172, 92, 198, 91, 28, 135, 74, 110, 209, 132, 20, 122, 8, 129, 153, 89, 141, 124, 17, 108, 32, 119, 217, 82, 34, 89, 33, 113, 95, 114, 219, 119, 39, 151, 97, 157, 11, 105, 127, 90, 24, 90, 165, 81, 13, 84, 125, 84, 14, 102, 223, 118, 247, 143, 152, 146, 244, 156, 234, 89, 93, 114, 197, 110, 77, 81, 201, 104, 191, 125, 236, 125, 98, 151, 186, 158, 120, 100, 33, 106, 2, 131, 132, 89, 95, 91, 219, 107, 27, 115, 242, 118, 178, 125, 23, 128, 153, 132, 50, 81, 40, 103, 217, 158, 238, 118, 98, 103, 255, 82, 5, 153, 36, 92, 59, 98, 126, 124, 176, 140, 79, 85, 182, 96, 11, 125, 128, 149, 1, 83, 95, 78, 182, 81, 28, 89, 58, 114, 54, 128, 206, 145, 37, 95, 226, 119, 132, 83, 121, 95, 4, 125, 172, 133, 51, 138, 141, 142, 86, 151, 243, 103, 174, 133, 83, 148, 9, 97, 8, 97, 185, 108, 82, 118, 237, 138, 56, 143, 47, 85, 81, 79, 42, 81, 199, 82, 203, 83, 165, 91, 125, 94, 160, 96, 130, 97, 214, 99, 9, 103, 218, 103, 103, 110, 140, 109, 54, 115, 55, 115, 49, 117, 80, 121, 213, 136, 152, 138, 74, 144, 145, 144, 245, 144, 196, 150, 141, 135, 21, 89, 136, 78, 89, 79, 14, 78, 137, 138, 63, 143, 16, 152, 173, 80, 124, 94, 150, 89, 185, 91, 184, 94, 218, 99, 250, 99, 193, 100, 220, 102, 74, 105, 216, 105, 11, 109, 182, 110, 148, 113, 40, 117, 175, 122, 138, 127, 0, 128, 73, 132, 201, 132, 129, 137, 33, 139, 10, 142, 101, 144, 125, 150, 10, 153, 126, 97, 145, 98, 50, 107, 131, 108, 116, 109, 204, 127, 252, 127, 192, 109, 133, 127, 186, 135, 248, 136, 101, 103, 177, 131, 60, 152, 247, 150, 27, 109, 97, 125, 61, 132, 106, 145, 113, 78, 117, 83, 80, 93, 4, 107, 235, 111, 205, 133, 45, 134, 167, 137, 41, 82, 15, 84, 101, 92, 78, 103, 168, 104, 6, 116, 131, 116, 226, 117, 207, 136, 225, 136, 204, 145, 226, 150, 120, 150, 139, 95, 135, 115, 203, 122, 78, 132, 160, 99, 101, 117, 137, 82, 65, 109, 156, 110, 9, 116, 89, 117, 107, 120, 146, 124, 134, 150, 220, 122, 141, 159, 182, 79, 110, 97, 197, 101, 92, 134, 134, 78, 174, 78, 218, 80, 33, 78, 204, 81, 238, 91, 153, 101, 129, 104, 188, 109, 31, 115, 66, 118, 173, 119, 28, 122, 231, 124, 111, 130, 210, 138, 124, 144, 207, 145, 117, 150, 24, 152, 155, 82, 209, 125, 43, 80, 152, 83, 151, 103, 203, 109, 208, 113, 51, 116, 232, 129, 42, 143, 163, 150, 87, 156, 159, 158, 96, 116, 65, 88, 153, 109, 47, 125, 94, 152, 228, 78, 54, 79, 139, 79, 183, 81, 177, 82, 186, 93, 28, 96, 178, 115, 60, 121, 211, 130, 52, 146, 183, 150, 246, 150, 10, 151, 151, 158, 98, 159, 166, 102, 116, 107, 23, 82, 163, 82, 200, 112, 194, 136, 201, 94, 75, 96, 144, 97, 35, 111, 73, 113, 62, 124, 244, 125, 111, 128, 238, 132, 35, 144, 44, 147, 66, 84, 111, 155, 211, 106, 137, 112, 194, 140, 239, 141, 50, 151, 180, 82, 65, 90, 202, 94, 4, 95, 23, 103, 124, 105, 148, 105, 106, 109, 15, 111, 98, 114, 252, 114, 237, 123, 1, 128, 126, 128, 75, 135, 206, 144, 109, 81, 147, 158, 132, 121, 139, 128, 50, 147, 214, 138, 45, 80, 140, 84, 113, 138, 106, 107, 196, 140, 7, 129, 209, 96, 160, 103, 242, 157, 153, 78, 152, 78, 16, 156, 107, 138, 193, 133, 104, 133, 0, 105, 126, 110, 151, 120, 85, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 95, 16, 78, 21, 78, 42, 78, 49, 78, 54, 78, 60, 78, 63, 78, 66, 78, 86, 78, 88, 78, 130, 78, 133, 78, 107, 140, 138, 78, 18, 130, 13, 95, 142, 78, 158, 78, 159, 78, 160, 78, 162, 78, 176, 78, 179, 78, 182, 78, 206, 78, 205, 78, 196, 78, 198, 78, 194, 78, 215, 78, 222, 78, 237, 78, 223, 78, 247, 78, 9, 79, 90, 79, 48, 79, 91, 79, 93, 79, 87, 79, 71, 79, 118, 79, 136, 79, 143, 79, 152, 79, 123, 79, 105, 79, 112, 79, 145, 79, 111, 79, 134, 79, 150, 79, 24, 81, 212, 79, 223, 79, 206, 79, 216, 79, 219, 79, 209, 79, 218, 79, 208, 79, 228, 79, 229, 79, 26, 80, 40, 80, 20, 80, 42, 80, 37, 80, 5, 80, 28, 79, 246, 79, 33, 80, 41, 80, 44, 80, 254, 79, 239, 79, 17, 80, 6, 80, 67, 80, 71, 80, 3, 103, 85, 80, 80, 80, 72, 80, 90, 80, 86, 80, 108, 80, 120, 80, 128, 80, 154, 80, 133, 80, 180, 80, 178, 80, 201, 80, 202, 80, 179, 80, 194, 80, 214, 80, 222, 80, 229, 80, 237, 80, 227, 80, 238, 80, 249, 80, 245, 80, 9, 81, 1, 81, 2, 81, 22, 81, 21, 81, 20, 81, 26, 81, 33, 81, 58, 81, 55, 81, 60, 81, 59, 81, 63, 81, 64, 81, 82, 81, 76, 81, 84, 81, 98, 81, 248, 122, 105, 81, 106, 81, 110, 81, 128, 81, 130, 81, 216, 86, 140, 81, 137, 81, 143, 81, 145, 81, 147, 81, 149, 81, 150, 81, 164, 81, 166, 81, 162, 81, 169, 81, 170, 81, 171, 81, 179, 81, 177, 81, 178, 81, 176, 81, 181, 81, 189, 81, 197, 81, 201, 81, 219, 81, 224, 81, 85, 134, 233, 81, 237, 81, 240, 81, 245, 81, 254, 81, 4, 82, 11, 82, 20, 82, 14, 82, 39, 82, 42, 82, 46, 82, 51, 82, 57, 82, 79, 82, 68, 82, 75, 82, 76, 82, 94, 82, 84, 82, 106, 82, 116, 82, 105, 82, 115, 82, 127, 82, 125, 82, 141, 82, 148, 82, 146, 82, 113, 82, 136, 82, 145, 82, 168, 143, 167, 143, 172, 82, 173, 82, 188, 82, 181, 82, 193, 82, 205, 82, 215, 82, 222, 82, 227, 82, 230, 82, 237, 152, 224, 82, 243, 82, 245, 82, 248, 82, 249, 82, 6, 83, 8, 83, 56, 117, 13, 83, 16, 83, 15, 83, 21, 83, 26, 83, 35, 83, 47, 83, 49, 83, 51, 83, 56, 83, 64, 83, 70, 83, 69, 83, 23, 78, 73, 83, 77, 83, 214, 81, 94, 83, 105, 83, 110, 83, 24, 89, 123, 83, 119, 83, 130, 83, 150, 83, 160, 83, 166, 83, 165, 83, 174, 83, 176, 83, 182, 83, 195, 83, 18, 124, 217, 150, 223, 83, 252, 102, 238, 113, 238, 83, 232, 83, 237, 83, 250, 83, 1, 84, 61, 84, 64, 84, 44, 84, 45, 84, 60, 84, 46, 84, 54, 84, 41, 84, 29, 84, 78, 84, 143, 84, 117, 84, 142, 84, 95, 84, 113, 84, 119, 84, 112, 84, 146, 84, 123, 84, 128, 84, 118, 84, 132, 84, 144, 84, 134, 84, 199, 84, 162, 84, 184, 84, 165, 84, 172, 84, 196, 84, 200, 84, 168, 84, 171, 84, 194, 84, 164, 84, 190, 84, 188, 84, 216, 84, 229, 84, 230, 84, 15, 85, 20, 85, 253, 84, 238, 84, 237, 84, 250, 84, 226, 84, 57, 85, 64, 85, 99, 85, 76, 85, 46, 85, 92, 85, 69, 85, 86, 85, 87, 85, 56, 85, 51, 85, 93, 85, 153, 85, 128, 85, 175, 84, 138, 85, 159, 85, 123, 85, 126, 85, 152, 85, 158, 85, 174, 85, 124, 85, 131, 85, 169, 85, 135, 85, 168, 85, 218, 85, 197, 85, 223, 85, 196, 85, 220, 85, 228, 85, 212, 85, 20, 86, 247, 85, 22, 86, 254, 85, 253, 85, 27, 86, 249, 85, 78, 86, 80, 86, 223, 113, 52, 86, 54, 86, 50, 86, 56, 86, 107, 86, 100, 86, 47, 86, 108, 86, 106, 86, 134, 86, 128, 86, 138, 86, 160, 86, 148, 86, 143, 86, 165, 86, 174, 86, 182, 86, 180, 86, 194, 86, 188, 86, 193, 86, 195, 86, 192, 86, 200, 86, 206, 86, 209, 86, 211, 86, 215, 86, 238, 86, 249, 86, 0, 87, 255, 86, 4, 87, 9, 87, 8, 87, 11, 87, 13, 87, 19, 87, 24, 87, 22, 87, 199, 85, 28, 87, 38, 87, 55, 87, 56, 87, 78, 87, 59, 87, 64, 87, 79, 87, 105, 87, 192, 87, 136, 87, 97, 87, 127, 87, 137, 87, 147, 87, 160, 87, 179, 87, 164, 87, 170, 87, 176, 87, 195, 87, 198, 87, 212, 87, 210, 87, 211, 87, 10, 88, 214, 87, 227, 87, 11, 88, 25, 88, 29, 88, 114, 88, 33, 88, 98, 88, 75, 88, 112, 88, 192, 107, 82, 88, 61, 88, 121, 88, 133, 88, 185, 88, 159, 88, 171, 88, 186, 88, 222, 88, 187, 88, 184, 88, 174, 88, 197, 88, 211, 88, 209, 88, 215, 88, 217, 88, 216, 88, 229, 88, 220, 88, 228, 88, 223, 88, 239, 88, 250, 88, 249, 88, 251, 88, 252, 88, 253, 88, 2, 89, 10, 89, 16, 89, 27, 89, 166, 104, 37, 89, 44, 89, 45, 89, 50, 89, 56, 89, 62, 89, 210, 122, 85, 89, 80, 89, 78, 89, 90, 89, 88, 89, 98, 89, 96, 89, 103, 89, 108, 89, 105, 89, 120, 89, 129, 89, 157, 89, 94, 79, 171, 79, 163, 89, 178, 89, 198, 89, 232, 89, 220, 89, 141, 89, 217, 89, 218, 89, 37, 90, 31, 90, 17, 90, 28, 90, 9, 90, 26, 90, 64, 90, 108, 90, 73, 90, 53, 90, 54, 90, 98, 90, 106, 90, 154, 90, 188, 90, 190, 90, 203, 90, 194, 90, 189, 90, 227, 90, 215, 90, 230, 90, 233, 90, 214, 90, 250, 90, 251, 90, 12, 91, 11, 91, 22, 91, 50, 91, 208, 90, 42, 91, 54, 91, 62, 91, 67, 91, 69, 91, 64, 91, 81, 91, 85, 91, 90, 91, 91, 91, 101, 91, 105, 91, 112, 91, 115, 91, 117, 91, 120, 91, 136, 101, 122, 91, 128, 91, 131, 91, 166, 91, 184, 91, 195, 91, 199, 91, 201, 91, 212, 91, 208, 91, 228, 91, 230, 91, 226, 91, 222, 91, 229, 91, 235, 91, 240, 91, 246, 91, 243, 91, 5, 92, 7, 92, 8, 92, 13, 92, 19, 92, 32, 92, 34, 92, 40, 92, 56, 92, 57, 92, 65, 92, 70, 92, 78, 92, 83, 92, 80, 92, 79, 92, 113, 91, 108, 92, 110, 92, 98, 78, 118, 92, 121, 92, 140, 92, 145, 92, 148, 92, 155, 89, 171, 92, 187, 92, 182, 92, 188, 92, 183, 92, 197, 92, 190, 92, 199, 92, 217, 92, 233, 92, 253, 92, 250, 92, 237, 92, 140, 93, 234, 92, 11, 93, 21, 93, 23, 93, 92, 93, 31, 93, 27, 93, 17, 93, 20, 93, 34, 93, 26, 93, 25, 93, 24, 93, 76, 93, 82, 93, 78, 93, 75, 93, 108, 93, 115, 93, 118, 93, 135, 93, 132, 93, 130, 93, 162, 93, 157, 93, 172, 93, 174, 93, 189, 93, 144, 93, 183, 93, 188, 93, 201, 93, 205, 93, 211, 93, 210, 93, 214, 93, 219, 93, 235, 93, 242, 93, 245, 93, 11, 94, 26, 94, 25, 94, 17, 94, 27, 94, 54, 94, 55, 94, 68, 94, 67, 94, 64, 94, 78, 94, 87, 94, 84, 94, 95, 94, 98, 94, 100, 94, 71, 94, 117, 94, 118, 94, 122, 94, 188, 158, 127, 94, 160, 94, 193, 94, 194, 94, 200, 94, 208, 94, 207, 94, 214, 94, 227, 94, 221, 94, 218, 94, 219, 94, 226, 94, 225, 94, 232, 94, 233, 94, 236, 94, 241, 94, 243, 94, 240, 94, 244, 94, 248, 94, 254, 94, 3, 95, 9, 95, 93, 95, 92, 95, 11, 95, 17, 95, 22, 95, 41, 95, 45, 95, 56, 95, 65, 95, 72, 95, 76, 95, 78, 95, 47, 95, 81, 95, 86, 95, 87, 95, 89, 95, 97, 95, 109, 95, 115, 95, 119, 95, 131, 95, 130, 95, 127, 95, 138, 95, 136, 95, 145, 95, 135, 95, 158, 95, 153, 95, 152, 95, 160, 95, 168, 95, 173, 95, 188, 95, 214, 95, 251, 95, 228, 95, 248, 95, 241, 95, 221, 95, 179, 96, 255, 95, 33, 96, 96, 96, 25, 96, 16, 96, 41, 96, 14, 96, 49, 96, 27, 96, 21, 96, 43, 96, 38, 96, 15, 96, 58, 96, 90, 96, 65, 96, 106, 96, 119, 96, 95, 96, 74, 96, 70, 96, 77, 96, 99, 96, 67, 96, 100, 96, 66, 96, 108, 96, 107, 96, 89, 96, 129, 96, 141, 96, 231, 96, 131, 96, 154, 96, 132, 96, 155, 96, 150, 96, 151, 96, 146, 96, 167, 96, 139, 96, 225, 96, 184, 96, 224, 96, 211, 96, 180, 96, 240, 95, 189, 96, 198, 96, 181, 96, 216, 96, 77, 97, 21, 97, 6, 97, 246, 96, 247, 96, 0, 97, 244, 96, 250, 96, 3, 97, 33, 97, 251, 96, 241, 96, 13, 97, 14, 97, 71, 97, 62, 97, 40, 97, 39, 97, 74, 97, 63, 97, 60, 97, 44, 97, 52, 97, 61, 97, 66, 97, 68, 97, 115, 97, 119, 97, 88, 97, 89, 97, 90, 97, 107, 97, 116, 97, 111, 97, 101, 97, 113, 97, 95, 97, 93, 97, 83, 97, 117, 97, 153, 97, 150, 97, 135, 97, 172, 97, 148, 97, 154, 97, 138, 97, 145, 97, 171, 97, 174, 97, 204, 97, 202, 97, 201, 97, 247, 97, 200, 97, 195, 97, 198, 97, 186, 97, 203, 97, 121, 127, 205, 97, 230, 97, 227, 97, 246, 97, 250, 97, 244, 97, 255, 97, 253, 97, 252, 97, 254, 97, 0, 98, 8, 98, 9, 98, 13, 98, 12, 98, 20, 98, 27, 98, 30, 98, 33, 98, 42, 98, 46, 98, 48, 98, 50, 98, 51, 98, 65, 98, 78, 98, 94, 98, 99, 98, 91, 98, 96, 98, 104, 98, 124, 98, 130, 98, 137, 98, 126, 98, 146, 98, 147, 98, 150, 98, 212, 98, 131, 98, 148, 98, 215, 98, 209, 98, 187, 98, 207, 98, 255, 98, 198, 98, 212, 100, 200, 98, 220, 98, 204, 98, 202, 98, 194, 98, 199, 98, 155, 98, 201, 98, 12, 99, 238, 98, 241, 98, 39, 99, 2, 99, 8, 99, 239, 98, 245, 98, 80, 99, 62, 99, 77, 99, 28, 100, 79, 99, 150, 99, 142, 99, 128, 99, 171, 99, 118, 99, 163, 99, 143, 99, 137, 99, 159, 99, 181, 99, 107, 99, 105, 99, 190, 99, 233, 99, 192, 99, 198, 99, 227, 99, 201, 99, 210, 99, 246, 99, 196, 99, 22, 100, 52, 100, 6, 100, 19, 100, 38, 100, 54, 100, 29, 101, 23, 100, 40, 100, 15, 100, 103, 100, 111, 100, 118, 100, 78, 100, 42, 101, 149, 100, 147, 100, 165, 100, 169, 100, 136, 100, 188, 100, 218, 100, 210, 100, 197, 100, 199, 100, 187, 100, 216, 100, 194, 100, 241, 100, 231, 100, 9, 130, 224, 100, 225, 100, 172, 98, 227, 100, 239, 100, 44, 101, 246, 100, 244, 100, 242, 100, 250, 100, 0, 101, 253, 100, 24, 101, 28, 101, 5, 101, 36, 101, 35, 101, 43, 101, 52, 101, 53, 101, 55, 101, 54, 101, 56, 101, 75, 117, 72, 101, 86, 101, 85, 101, 77, 101, 88, 101, 94, 101, 93, 101, 114, 101, 120, 101, 130, 101, 131, 101, 138, 139, 155, 101, 159, 101, 171, 101, 183, 101, 195, 101, 198, 101, 193, 101, 196, 101, 204, 101, 210, 101, 219, 101, 217, 101, 224, 101, 225, 101, 241, 101, 114, 103, 10, 102, 3, 102, 251, 101, 115, 103, 53, 102, 54, 102, 52, 102, 28, 102, 79, 102, 68, 102, 73, 102, 65, 102, 94, 102, 93, 102, 100, 102, 103, 102, 104, 102, 95, 102, 98, 102, 112, 102, 131, 102, 136, 102, 142, 102, 137, 102, 132, 102, 152, 102, 157, 102, 193, 102, 185, 102, 201, 102, 190, 102, 188, 102, 196, 102, 184, 102, 214, 102, 218, 102, 224, 102, 63, 102, 230, 102, 233, 102, 240, 102, 245, 102, 247, 102, 15, 103, 22, 103, 30, 103, 38, 103, 39, 103, 56, 151, 46, 103, 63, 103, 54, 103, 65, 103, 56, 103, 55, 103, 70, 103, 94, 103, 96, 103, 89, 103, 99, 103, 100, 103, 137, 103, 112, 103, 169, 103, 124, 103, 106, 103, 140, 103, 139, 103, 166, 103, 161, 103, 133, 103, 183, 103, 239, 103, 180, 103, 236, 103, 179, 103, 233, 103, 184, 103, 228, 103, 222, 103, 221, 103, 226, 103, 238, 103, 185, 103, 206, 103, 198, 103, 231, 103, 156, 106, 30, 104, 70, 104, 41, 104, 64, 104, 77, 104, 50, 104, 78, 104, 179, 104, 43, 104, 89, 104, 99, 104, 119, 104, 127, 104, 159, 104, 143, 104, 173, 104, 148, 104, 157, 104, 155, 104, 131, 104, 174, 106, 185, 104, 116, 104, 181, 104, 160, 104, 186, 104, 15, 105, 141, 104, 126, 104, 1, 105, 202, 104, 8, 105, 216, 104, 34, 105, 38, 105, 225, 104, 12, 105, 205, 104, 212, 104, 231, 104, 213, 104, 54, 105, 18, 105, 4, 105, 215, 104, 227, 104, 37, 105, 249, 104, 224, 104, 239, 104, 40, 105, 42, 105, 26, 105, 35, 105, 33, 105, 198, 104, 121, 105, 119, 105, 92, 105, 120, 105, 107, 105, 84, 105, 126, 105, 110, 105, 57, 105, 116, 105, 61, 105, 89, 105, 48, 105, 97, 105, 94, 105, 93, 105, 129, 105, 106, 105, 178, 105, 174, 105, 208, 105, 191, 105, 193, 105, 211, 105, 190, 105, 206, 105, 232, 91, 202, 105, 221, 105, 187, 105, 195, 105, 167, 105, 46, 106, 145, 105, 160, 105, 156, 105, 149, 105, 180, 105, 222, 105, 232, 105, 2, 106, 27, 106, 255, 105, 10, 107, 249, 105, 242, 105, 231, 105, 5, 106, 177, 105, 30, 106, 237, 105, 20, 106, 235, 105, 10, 106, 18, 106, 193, 106, 35, 106, 19, 106, 68, 106, 12, 106, 114, 106, 54, 106, 120, 106, 71, 106, 98, 106, 89, 106, 102, 106, 72, 106, 56, 106, 34, 106, 144, 106, 141, 106, 160, 106, 132, 106, 162, 106, 163, 106, 151, 106, 23, 134, 187, 106, 195, 106, 194, 106, 184, 106, 179, 106, 172, 106, 222, 106, 209, 106, 223, 106, 170, 106, 218, 106, 234, 106, 251, 106, 5, 107, 22, 134, 250, 106, 18, 107, 22, 107, 49, 155, 31, 107, 56, 107, 55, 107, 220, 118, 57, 107, 238, 152, 71, 107, 67, 107, 73, 107, 80, 107, 89, 107, 84, 107, 91, 107, 95, 107, 97, 107, 120, 107, 121, 107, 127, 107, 128, 107, 132, 107, 131, 107, 141, 107, 152, 107, 149, 107, 158, 107, 164, 107, 170, 107, 171, 107, 175, 107, 178, 107, 177, 107, 179, 107, 183, 107, 188, 107, 198, 107, 203, 107, 211, 107, 223, 107, 236, 107, 235, 107, 243, 107, 239, 107, 190, 158, 8, 108, 19, 108, 20, 108, 27, 108, 36, 108, 35, 108, 94, 108, 85, 108, 98, 108, 106, 108, 130, 108, 141, 108, 154, 108, 129, 108, 155, 108, 126, 108, 104, 108, 115, 108, 146, 108, 144, 108, 196, 108, 241, 108, 211, 108, 189, 108, 215, 108, 197, 108, 221, 108, 174, 108, 177, 108, 190, 108, 186, 108, 219, 108, 239, 108, 217, 108, 234, 108, 31, 109, 77, 136, 54, 109, 43, 109, 61, 109, 56, 109, 25, 109, 53, 109, 51, 109, 18, 109, 12, 109, 99, 109, 147, 109, 100, 109, 90, 109, 121, 109, 89, 109, 142, 109, 149, 109, 228, 111, 133, 109, 249, 109, 21, 110, 10, 110, 181, 109, 199, 109, 230, 109, 184, 109, 198, 109, 236, 109, 222, 109, 204, 109, 232, 109, 210, 109, 197, 109, 250, 109, 217, 109, 228, 109, 213, 109, 234, 109, 238, 109, 45, 110, 110, 110, 46, 110, 25, 110, 114, 110, 95, 110, 62, 110, 35, 110, 107, 110, 43, 110, 118, 110, 77, 110, 31, 110, 67, 110, 58, 110, 78, 110, 36, 110, 255, 110, 29, 110, 56, 110, 130, 110, 170, 110, 152, 110, 201, 110, 183, 110, 211, 110, 189, 110, 175, 110, 196, 110, 178, 110, 212, 110, 213, 110, 143, 110, 165, 110, 194, 110, 159, 110, 65, 111, 17, 111, 76, 112, 236, 110, 248, 110, 254, 110, 63, 111, 242, 110, 49, 111, 239, 110, 50, 111, 204, 110, 62, 111, 19, 111, 247, 110, 134, 111, 122, 111, 120, 111, 129, 111, 128, 111, 111, 111, 91, 111, 243, 111, 109, 111, 130, 111, 124, 111, 88, 111, 142, 111, 145, 111, 194, 111, 102, 111, 179, 111, 163, 111, 161, 111, 164, 111, 185, 111, 198, 111, 170, 111, 223, 111, 213, 111, 236, 111, 212, 111, 216, 111, 241, 111, 238, 111, 219, 111, 9, 112, 11, 112, 250, 111, 17, 112, 1, 112, 15, 112, 254, 111, 27, 112, 26, 112, 116, 111, 29, 112, 24, 112, 31, 112, 48, 112, 62, 112, 50, 112, 81, 112, 99, 112, 153, 112, 146, 112, 175, 112, 241, 112, 172, 112, 184, 112, 179, 112, 174, 112, 223, 112, 203, 112, 221, 112, 217, 112, 9, 113, 253, 112, 28, 113, 25, 113, 101, 113, 85, 113, 136, 113, 102, 113, 98, 113, 76, 113, 86, 113, 108, 113, 143, 113, 251, 113, 132, 113, 149, 113, 168, 113, 172, 113, 215, 113, 185, 113, 190, 113, 210, 113, 201, 113, 212, 113, 206, 113, 224, 113, 236, 113, 231, 113, 245, 113, 252, 113, 249, 113, 255, 113, 13, 114, 16, 114, 27, 114, 40, 114, 45, 114, 44, 114, 48, 114, 50, 114, 59, 114, 60, 114, 63, 114, 64, 114, 70, 114, 75, 114, 88, 114, 116, 114, 126, 114, 130, 114, 129, 114, 135, 114, 146, 114, 150, 114, 162, 114, 167, 114, 185, 114, 178, 114, 195, 114, 198, 114, 196, 114, 206, 114, 210, 114, 226, 114, 224, 114, 225, 114, 249, 114, 247, 114, 15, 80, 23, 115, 10, 115, 28, 115, 22, 115, 29, 115, 52, 115, 47, 115, 41, 115, 37, 115, 62, 115, 78, 115, 79, 115, 216, 158, 87, 115, 106, 115, 104, 115, 112, 115, 120, 115, 117, 115, 123, 115, 122, 115, 200, 115, 179, 115, 206, 115, 187, 115, 192, 115, 229, 115, 238, 115, 222, 115, 162, 116, 5, 116, 111, 116, 37, 116, 248, 115, 50, 116, 58, 116, 85, 116, 63, 116, 95, 116, 89, 116, 65, 116, 92, 116, 105, 116, 112, 116, 99, 116, 106, 116, 118, 116, 126, 116, 139, 116, 158, 116, 167, 116, 202, 116, 207, 116, 212, 116, 241, 115, 224, 116, 227, 116, 231, 116, 233, 116, 238, 116, 242, 116, 240, 116, 241, 116, 248, 116, 247, 116, 4, 117, 3, 117, 5, 117, 12, 117, 14, 117, 13, 117, 21, 117, 19, 117, 30, 117, 38, 117, 44, 117, 60, 117, 68, 117, 77, 117, 74, 117, 73, 117, 91, 117, 70, 117, 90, 117, 105, 117, 100, 117, 103, 117, 107, 117, 109, 117, 120, 117, 118, 117, 134, 117, 135, 117, 116, 117, 138, 117, 137, 117, 130, 117, 148, 117, 154, 117, 157, 117, 165, 117, 163, 117, 194, 117, 179, 117, 195, 117, 181, 117, 189, 117, 184, 117, 188, 117, 177, 117, 205, 117, 202, 117, 210, 117, 217, 117, 227, 117, 222, 117, 254, 117, 255, 117, 252, 117, 1, 118, 240, 117, 250, 117, 242, 117, 243, 117, 11, 118, 13, 118, 9, 118, 31, 118, 39, 118, 32, 118, 33, 118, 34, 118, 36, 118, 52, 118, 48, 118, 59, 118, 71, 118, 72, 118, 70, 118, 92, 118, 88, 118, 97, 118, 98, 118, 104, 118, 105, 118, 106, 118, 103, 118, 108, 118, 112, 118, 114, 118, 118, 118, 120, 118, 124, 118, 128, 118, 131, 118, 136, 118, 139, 118, 142, 118, 150, 118, 147, 118, 153, 118, 154, 118, 176, 118, 180, 118, 184, 118, 185, 118, 186, 118, 194, 118, 205, 118, 214, 118, 210, 118, 222, 118, 225, 118, 229, 118, 231, 118, 234, 118, 47, 134, 251, 118, 8, 119, 7, 119, 4, 119, 41, 119, 36, 119, 30, 119, 37, 119, 38, 119, 27, 119, 55, 119, 56, 119, 71, 119, 90, 119, 104, 119, 107, 119, 91, 119, 101, 119, 127, 119, 126, 119, 121, 119, 142, 119, 139, 119, 145, 119, 160, 119, 158, 119, 176, 119, 182, 119, 185, 119, 191, 119, 188, 119, 189, 119, 187, 119, 199, 119, 205, 119, 215, 119, 218, 119, 220, 119, 227, 119, 238, 119, 252, 119, 12, 120, 18, 120, 38, 121, 32, 120, 42, 121, 69, 120, 142, 120, 116, 120, 134, 120, 124, 120, 154, 120, 140, 120, 163, 120, 181, 120, 170, 120, 175, 120, 209, 120, 198, 120, 203, 120, 212, 120, 190, 120, 188, 120, 197, 120, 202, 120, 236, 120, 231, 120, 218, 120, 253, 120, 244, 120, 7, 121, 18, 121, 17, 121, 25, 121, 44, 121, 43, 121, 64, 121, 96, 121, 87, 121, 95, 121, 90, 121, 85, 121, 83, 121, 122, 121, 127, 121, 138, 121, 157, 121, 167, 121, 75, 159, 170, 121, 174, 121, 179, 121, 185, 121, 186, 121, 201, 121, 213, 121, 231, 121, 236, 121, 225, 121, 227, 121, 8, 122, 13, 122, 24, 122, 25, 122, 32, 122, 31, 122, 128, 121, 49, 122, 59, 122, 62, 122, 55, 122, 67, 122, 87, 122, 73, 122, 97, 122, 98, 122, 105, 122, 157, 159, 112, 122, 121, 122, 125, 122, 136, 122, 151, 122, 149, 122, 152, 122, 150, 122, 169, 122, 200, 122, 176, 122, 182, 122, 197, 122, 196, 122, 191, 122, 131, 144, 199, 122, 202, 122, 205, 122, 207, 122, 213, 122, 211, 122, 217, 122, 218, 122, 221, 122, 225, 122, 226, 122, 230, 122, 237, 122, 240, 122, 2, 123, 15, 123, 10, 123, 6, 123, 51, 123, 24, 123, 25, 123, 30, 123, 53, 123, 40, 123, 54, 123, 80, 123, 122, 123, 4, 123, 77, 123, 11, 123, 76, 123, 69, 123, 117, 123, 101, 123, 116, 123, 103, 123, 112, 123, 113, 123, 108, 123, 110, 123, 157, 123, 152, 123, 159, 123, 141, 123, 156, 123, 154, 123, 139, 123, 146, 123, 143, 123, 93, 123, 153, 123, 203, 123, 193, 123, 204, 123, 207, 123, 180, 123, 198, 123, 221, 123, 233, 123, 17, 124, 20, 124, 230, 123, 229, 123, 96, 124, 0, 124, 7, 124, 19, 124, 243, 123, 247, 123, 23, 124, 13, 124, 246, 123, 35, 124, 39, 124, 42, 124, 31, 124, 55, 124, 43, 124, 61, 124, 76, 124, 67, 124, 84, 124, 79, 124, 64, 124, 80, 124, 88, 124, 95, 124, 100, 124, 86, 124, 101, 124, 108, 124, 117, 124, 131, 124, 144, 124, 164, 124, 173, 124, 162, 124, 171, 124, 161, 124, 168, 124, 179, 124, 178, 124, 177, 124, 174, 124, 185, 124, 189, 124, 192, 124, 197, 124, 194, 124, 216, 124, 210, 124, 220, 124, 226, 124, 59, 155, 239, 124, 242, 124, 244, 124, 246, 124, 250, 124, 6, 125, 2, 125, 28, 125, 21, 125, 10, 125, 69, 125, 75, 125, 46, 125, 50, 125, 63, 125, 53, 125, 70, 125, 115, 125, 86, 125, 78, 125, 114, 125, 104, 125, 110, 125, 79, 125, 99, 125, 147, 125, 137, 125, 91, 125, 143, 125, 125, 125, 155, 125, 186, 125, 174, 125, 163, 125, 181, 125, 199, 125, 189, 125, 171, 125, 61, 126, 162, 125, 175, 125, 220, 125, 184, 125, 159, 125, 176, 125, 216, 125, 221, 125, 228, 125, 222, 125, 251, 125, 242, 125, 225, 125, 5, 126, 10, 126, 35, 126, 33, 126, 18, 126, 49, 126, 31, 126, 9, 126, 11, 126, 34, 126, 70, 126, 102, 126, 59, 126, 53, 126, 57, 126, 67, 126, 55, 126, 50, 126, 58, 126, 103, 126, 93, 126, 86, 126, 94, 126, 89, 126, 90, 126, 121, 126, 106, 126, 105, 126, 124, 126, 123, 126, 131, 126, 213, 125, 125, 126, 174, 143, 127, 126, 136, 126, 137, 126, 140, 126, 146, 126, 144, 126, 147, 126, 148, 126, 150, 126, 142, 126, 155, 126, 156, 126, 56, 127, 58, 127, 69, 127, 76, 127, 77, 127, 78, 127, 80, 127, 81, 127, 85, 127, 84, 127, 88, 127, 95, 127, 96, 127, 104, 127, 105, 127, 103, 127, 120, 127, 130, 127, 134, 127, 131, 127, 136, 127, 135, 127, 140, 127, 148, 127, 158, 127, 157, 127, 154, 127, 163, 127, 175, 127, 178, 127, 185, 127, 174, 127, 182, 127, 184, 127, 113, 139, 197, 127, 198, 127, 202, 127, 213, 127, 212, 127, 225, 127, 230, 127, 233, 127, 243, 127, 249, 127, 220, 152], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 15092);
    allocate([6, 128, 4, 128, 11, 128, 18, 128, 24, 128, 25, 128, 28, 128, 33, 128, 40, 128, 63, 128, 59, 128, 74, 128, 70, 128, 82, 128, 88, 128, 90, 128, 95, 128, 98, 128, 104, 128, 115, 128, 114, 128, 112, 128, 118, 128, 121, 128, 125, 128, 127, 128, 132, 128, 134, 128, 133, 128, 155, 128, 147, 128, 154, 128, 173, 128, 144, 81, 172, 128, 219, 128, 229, 128, 217, 128, 221, 128, 196, 128, 218, 128, 214, 128, 9, 129, 239, 128, 241, 128, 27, 129, 41, 129, 35, 129, 47, 129, 75, 129, 139, 150, 70, 129, 62, 129, 83, 129, 81, 129, 252, 128, 113, 129, 110, 129, 101, 129, 102, 129, 116, 129, 131, 129, 136, 129, 138, 129, 128, 129, 130, 129, 160, 129, 149, 129, 164, 129, 163, 129, 95, 129, 147, 129, 169, 129, 176, 129, 181, 129, 190, 129, 184, 129, 189, 129, 192, 129, 194, 129, 186, 129, 201, 129, 205, 129, 209, 129, 217, 129, 216, 129, 200, 129, 218, 129, 223, 129, 224, 129, 231, 129, 250, 129, 251, 129, 254, 129, 1, 130, 2, 130, 5, 130, 7, 130, 10, 130, 13, 130, 16, 130, 22, 130, 41, 130, 43, 130, 56, 130, 51, 130, 64, 130, 89, 130, 88, 130, 93, 130, 90, 130, 95, 130, 100, 130, 98, 130, 104, 130, 106, 130, 107, 130, 46, 130, 113, 130, 119, 130, 120, 130, 126, 130, 141, 130, 146, 130, 171, 130, 159, 130, 187, 130, 172, 130, 225, 130, 227, 130, 223, 130, 210, 130, 244, 130, 243, 130, 250, 130, 147, 131, 3, 131, 251, 130, 249, 130, 222, 130, 6, 131, 220, 130, 9, 131, 217, 130, 53, 131, 52, 131, 22, 131, 50, 131, 49, 131, 64, 131, 57, 131, 80, 131, 69, 131, 47, 131, 43, 131, 23, 131, 24, 131, 133, 131, 154, 131, 170, 131, 159, 131, 162, 131, 150, 131, 35, 131, 142, 131, 135, 131, 138, 131, 124, 131, 181, 131, 115, 131, 117, 131, 160, 131, 137, 131, 168, 131, 244, 131, 19, 132, 235, 131, 206, 131, 253, 131, 3, 132, 216, 131, 11, 132, 193, 131, 247, 131, 7, 132, 224, 131, 242, 131, 13, 132, 34, 132, 32, 132, 189, 131, 56, 132, 6, 133, 251, 131, 109, 132, 42, 132, 60, 132, 90, 133, 132, 132, 119, 132, 107, 132, 173, 132, 110, 132, 130, 132, 105, 132, 70, 132, 44, 132, 111, 132, 121, 132, 53, 132, 202, 132, 98, 132, 185, 132, 191, 132, 159, 132, 217, 132, 205, 132, 187, 132, 218, 132, 208, 132, 193, 132, 198, 132, 214, 132, 161, 132, 33, 133, 255, 132, 244, 132, 23, 133, 24, 133, 44, 133, 31, 133, 21, 133, 20, 133, 252, 132, 64, 133, 99, 133, 88, 133, 72, 133, 65, 133, 2, 134, 75, 133, 85, 133, 128, 133, 164, 133, 136, 133, 145, 133, 138, 133, 168, 133, 109, 133, 148, 133, 155, 133, 234, 133, 135, 133, 156, 133, 119, 133, 126, 133, 144, 133, 201, 133, 186, 133, 207, 133, 185, 133, 208, 133, 213, 133, 221, 133, 229, 133, 220, 133, 249, 133, 10, 134, 19, 134, 11, 134, 254, 133, 250, 133, 6, 134, 34, 134, 26, 134, 48, 134, 63, 134, 77, 134, 85, 78, 84, 134, 95, 134, 103, 134, 113, 134, 147, 134, 163, 134, 169, 134, 170, 134, 139, 134, 140, 134, 182, 134, 175, 134, 196, 134, 198, 134, 176, 134, 201, 134, 35, 136, 171, 134, 212, 134, 222, 134, 233, 134, 236, 134, 223, 134, 219, 134, 239, 134, 18, 135, 6, 135, 8, 135, 0, 135, 3, 135, 251, 134, 17, 135, 9, 135, 13, 135, 249, 134, 10, 135, 52, 135, 63, 135, 55, 135, 59, 135, 37, 135, 41, 135, 26, 135, 96, 135, 95, 135, 120, 135, 76, 135, 78, 135, 116, 135, 87, 135, 104, 135, 110, 135, 89, 135, 83, 135, 99, 135, 106, 135, 5, 136, 162, 135, 159, 135, 130, 135, 175, 135, 203, 135, 189, 135, 192, 135, 208, 135, 214, 150, 171, 135, 196, 135, 179, 135, 199, 135, 198, 135, 187, 135, 239, 135, 242, 135, 224, 135, 15, 136, 13, 136, 254, 135, 246, 135, 247, 135, 14, 136, 210, 135, 17, 136, 22, 136, 21, 136, 34, 136, 33, 136, 49, 136, 54, 136, 57, 136, 39, 136, 59, 136, 68, 136, 66, 136, 82, 136, 89, 136, 94, 136, 98, 136, 107, 136, 129, 136, 126, 136, 158, 136, 117, 136, 125, 136, 181, 136, 114, 136, 130, 136, 151, 136, 146, 136, 174, 136, 153, 136, 162, 136, 141, 136, 164, 136, 176, 136, 191, 136, 177, 136, 195, 136, 196, 136, 212, 136, 216, 136, 217, 136, 221, 136, 249, 136, 2, 137, 252, 136, 244, 136, 232, 136, 242, 136, 4, 137, 12, 137, 10, 137, 19, 137, 67, 137, 30, 137, 37, 137, 42, 137, 43, 137, 65, 137, 68, 137, 59, 137, 54, 137, 56, 137, 76, 137, 29, 137, 96, 137, 94, 137, 102, 137, 100, 137, 109, 137, 106, 137, 111, 137, 116, 137, 119, 137, 126, 137, 131, 137, 136, 137, 138, 137, 147, 137, 152, 137, 161, 137, 169, 137, 166, 137, 172, 137, 175, 137, 178, 137, 186, 137, 189, 137, 191, 137, 192, 137, 218, 137, 220, 137, 221, 137, 231, 137, 244, 137, 248, 137, 3, 138, 22, 138, 16, 138, 12, 138, 27, 138, 29, 138, 37, 138, 54, 138, 65, 138, 91, 138, 82, 138, 70, 138, 72, 138, 124, 138, 109, 138, 108, 138, 98, 138, 133, 138, 130, 138, 132, 138, 168, 138, 161, 138, 145, 138, 165, 138, 166, 138, 154, 138, 163, 138, 196, 138, 205, 138, 194, 138, 218, 138, 235, 138, 243, 138, 231, 138, 228, 138, 241, 138, 20, 139, 224, 138, 226, 138, 247, 138, 222, 138, 219, 138, 12, 139, 7, 139, 26, 139, 225, 138, 22, 139, 16, 139, 23, 139, 32, 139, 51, 139, 171, 151, 38, 139, 43, 139, 62, 139, 40, 139, 65, 139, 76, 139, 79, 139, 78, 139, 73, 139, 86, 139, 91, 139, 90, 139, 107, 139, 95, 139, 108, 139, 111, 139, 116, 139, 125, 139, 128, 139, 140, 139, 142, 139, 146, 139, 147, 139, 150, 139, 153, 139, 154, 139, 58, 140, 65, 140, 63, 140, 72, 140, 76, 140, 78, 140, 80, 140, 85, 140, 98, 140, 108, 140, 120, 140, 122, 140, 130, 140, 137, 140, 133, 140, 138, 140, 141, 140, 142, 140, 148, 140, 124, 140, 152, 140, 29, 98, 173, 140, 170, 140, 189, 140, 178, 140, 179, 140, 174, 140, 182, 140, 200, 140, 193, 140, 228, 140, 227, 140, 218, 140, 253, 140, 250, 140, 251, 140, 4, 141, 5, 141, 10, 141, 7, 141, 15, 141, 13, 141, 16, 141, 78, 159, 19, 141, 205, 140, 20, 141, 22, 141, 103, 141, 109, 141, 113, 141, 115, 141, 129, 141, 153, 141, 194, 141, 190, 141, 186, 141, 207, 141, 218, 141, 214, 141, 204, 141, 219, 141, 203, 141, 234, 141, 235, 141, 223, 141, 227, 141, 252, 141, 8, 142, 9, 142, 255, 141, 29, 142, 30, 142, 16, 142, 31, 142, 66, 142, 53, 142, 48, 142, 52, 142, 74, 142, 71, 142, 73, 142, 76, 142, 80, 142, 72, 142, 89, 142, 100, 142, 96, 142, 42, 142, 99, 142, 85, 142, 118, 142, 114, 142, 124, 142, 129, 142, 135, 142, 133, 142, 132, 142, 139, 142, 138, 142, 147, 142, 145, 142, 148, 142, 153, 142, 170, 142, 161, 142, 172, 142, 176, 142, 198, 142, 177, 142, 190, 142, 197, 142, 200, 142, 203, 142, 219, 142, 227, 142, 252, 142, 251, 142, 235, 142, 254, 142, 10, 143, 5, 143, 21, 143, 18, 143, 25, 143, 19, 143, 28, 143, 31, 143, 27, 143, 12, 143, 38, 143, 51, 143, 59, 143, 57, 143, 69, 143, 66, 143, 62, 143, 76, 143, 73, 143, 70, 143, 78, 143, 87, 143, 92, 143, 98, 143, 99, 143, 100, 143, 156, 143, 159, 143, 163, 143, 173, 143, 175, 143, 183, 143, 218, 143, 229, 143, 226, 143, 234, 143, 239, 143, 135, 144, 244, 143, 5, 144, 249, 143, 250, 143, 17, 144, 21, 144, 33, 144, 13, 144, 30, 144, 22, 144, 11, 144, 39, 144, 54, 144, 53, 144, 57, 144, 248, 143, 79, 144, 80, 144, 81, 144, 82, 144, 14, 144, 73, 144, 62, 144, 86, 144, 88, 144, 94, 144, 104, 144, 111, 144, 118, 144, 168, 150, 114, 144, 130, 144, 125, 144, 129, 144, 128, 144, 138, 144, 137, 144, 143, 144, 168, 144, 175, 144, 177, 144, 181, 144, 226, 144, 228, 144, 72, 98, 219, 144, 2, 145, 18, 145, 25, 145, 50, 145, 48, 145, 74, 145, 86, 145, 88, 145, 99, 145, 101, 145, 105, 145, 115, 145, 114, 145, 139, 145, 137, 145, 130, 145, 162, 145, 171, 145, 175, 145, 170, 145, 181, 145, 180, 145, 186, 145, 192, 145, 193, 145, 201, 145, 203, 145, 208, 145, 214, 145, 223, 145, 225, 145, 219, 145, 252, 145, 245, 145, 246, 145, 30, 146, 255, 145, 20, 146, 44, 146, 21, 146, 17, 146, 94, 146, 87, 146, 69, 146, 73, 146, 100, 146, 72, 146, 149, 146, 63, 146, 75, 146, 80, 146, 156, 146, 150, 146, 147, 146, 155, 146, 90, 146, 207, 146, 185, 146, 183, 146, 233, 146, 15, 147, 250, 146, 68, 147, 46, 147, 25, 147, 34, 147, 26, 147, 35, 147, 58, 147, 53, 147, 59, 147, 92, 147, 96, 147, 124, 147, 110, 147, 86, 147, 176, 147, 172, 147, 173, 147, 148, 147, 185, 147, 214, 147, 215, 147, 232, 147, 229, 147, 216, 147, 195, 147, 221, 147, 208, 147, 200, 147, 228, 147, 26, 148, 20, 148, 19, 148, 3, 148, 7, 148, 16, 148, 54, 148, 43, 148, 53, 148, 33, 148, 58, 148, 65, 148, 82, 148, 68, 148, 91, 148, 96, 148, 98, 148, 94, 148, 106, 148, 41, 146, 112, 148, 117, 148, 119, 148, 125, 148, 90, 148, 124, 148, 126, 148, 129, 148, 127, 148, 130, 149, 135, 149, 138, 149, 148, 149, 150, 149, 152, 149, 153, 149, 160, 149, 168, 149, 167, 149, 173, 149, 188, 149, 187, 149, 185, 149, 190, 149, 202, 149, 246, 111, 195, 149, 205, 149, 204, 149, 213, 149, 212, 149, 214, 149, 220, 149, 225, 149, 229, 149, 226, 149, 33, 150, 40, 150, 46, 150, 47, 150, 66, 150, 76, 150, 79, 150, 75, 150, 119, 150, 92, 150, 94, 150, 93, 150, 95, 150, 102, 150, 114, 150, 108, 150, 141, 150, 152, 150, 149, 150, 151, 150, 170, 150, 167, 150, 177, 150, 178, 150, 176, 150, 180, 150, 182, 150, 184, 150, 185, 150, 206, 150, 203, 150, 201, 150, 205, 150, 77, 137, 220, 150, 13, 151, 213, 150, 249, 150, 4, 151, 6, 151, 8, 151, 19, 151, 14, 151, 17, 151, 15, 151, 22, 151, 25, 151, 36, 151, 42, 151, 48, 151, 57, 151, 61, 151, 62, 151, 68, 151, 70, 151, 72, 151, 66, 151, 73, 151, 92, 151, 96, 151, 100, 151, 102, 151, 104, 151, 210, 82, 107, 151, 113, 151, 121, 151, 133, 151, 124, 151, 129, 151, 122, 151, 134, 151, 139, 151, 143, 151, 144, 151, 156, 151, 168, 151, 166, 151, 163, 151, 179, 151, 180, 151, 195, 151, 198, 151, 200, 151, 203, 151, 220, 151, 237, 151, 79, 159, 242, 151, 223, 122, 246, 151, 245, 151, 15, 152, 12, 152, 56, 152, 36, 152, 33, 152, 55, 152, 61, 152, 70, 152, 79, 152, 75, 152, 107, 152, 111, 152, 112, 152, 113, 152, 116, 152, 115, 152, 170, 152, 175, 152, 177, 152, 182, 152, 196, 152, 195, 152, 198, 152, 233, 152, 235, 152, 3, 153, 9, 153, 18, 153, 20, 153, 24, 153, 33, 153, 29, 153, 30, 153, 36, 153, 32, 153, 44, 153, 46, 153, 61, 153, 62, 153, 66, 153, 73, 153, 69, 153, 80, 153, 75, 153, 81, 153, 82, 153, 76, 153, 85, 153, 151, 153, 152, 153, 165, 153, 173, 153, 174, 153, 188, 153, 223, 153, 219, 153, 221, 153, 216, 153, 209, 153, 237, 153, 238, 153, 241, 153, 242, 153, 251, 153, 248, 153, 1, 154, 15, 154, 5, 154, 226, 153, 25, 154, 43, 154, 55, 154, 69, 154, 66, 154, 64, 154, 67, 154, 62, 154, 85, 154, 77, 154, 91, 154, 87, 154, 95, 154, 98, 154, 101, 154, 100, 154, 105, 154, 107, 154, 106, 154, 173, 154, 176, 154, 188, 154, 192, 154, 207, 154, 209, 154, 211, 154, 212, 154, 222, 154, 223, 154, 226, 154, 227, 154, 230, 154, 239, 154, 235, 154, 238, 154, 244, 154, 241, 154, 247, 154, 251, 154, 6, 155, 24, 155, 26, 155, 31, 155, 34, 155, 35, 155, 37, 155, 39, 155, 40, 155, 41, 155, 42, 155, 46, 155, 47, 155, 50, 155, 68, 155, 67, 155, 79, 155, 77, 155, 78, 155, 81, 155, 88, 155, 116, 155, 147, 155, 131, 155, 145, 155, 150, 155, 151, 155, 159, 155, 160, 155, 168, 155, 180, 155, 192, 155, 202, 155, 185, 155, 198, 155, 207, 155, 209, 155, 210, 155, 227, 155, 226, 155, 228, 155, 212, 155, 225, 155, 58, 156, 242, 155, 241, 155, 240, 155, 21, 156, 20, 156, 9, 156, 19, 156, 12, 156, 6, 156, 8, 156, 18, 156, 10, 156, 4, 156, 46, 156, 27, 156, 37, 156, 36, 156, 33, 156, 48, 156, 71, 156, 50, 156, 70, 156, 62, 156, 90, 156, 96, 156, 103, 156, 118, 156, 120, 156, 231, 156, 236, 156, 240, 156, 9, 157, 8, 157, 235, 156, 3, 157, 6, 157, 42, 157, 38, 157, 175, 157, 35, 157, 31, 157, 68, 157, 21, 157, 18, 157, 65, 157, 63, 157, 62, 157, 70, 157, 72, 157, 93, 157, 94, 157, 100, 157, 81, 157, 80, 157, 89, 157, 114, 157, 137, 157, 135, 157, 171, 157, 111, 157, 122, 157, 154, 157, 164, 157, 169, 157, 178, 157, 196, 157, 193, 157, 187, 157, 184, 157, 186, 157, 198, 157, 207, 157, 194, 157, 217, 157, 211, 157, 248, 157, 230, 157, 237, 157, 239, 157, 253, 157, 26, 158, 27, 158, 30, 158, 117, 158, 121, 158, 125, 158, 129, 158, 136, 158, 139, 158, 140, 158, 146, 158, 149, 158, 145, 158, 157, 158, 165, 158, 169, 158, 184, 158, 170, 158, 173, 158, 97, 151, 204, 158, 206, 158, 207, 158, 208, 158, 212, 158, 220, 158, 222, 158, 221, 158, 224, 158, 229, 158, 232, 158, 239, 158, 244, 158, 246, 158, 247, 158, 249, 158, 251, 158, 252, 158, 253, 158, 7, 159, 8, 159, 183, 118, 21, 159, 33, 159, 44, 159, 62, 159, 74, 159, 82, 159, 84, 159, 99, 159, 95, 159, 96, 159, 97, 159, 102, 159, 103, 159, 108, 159, 106, 159, 119, 159, 114, 159, 118, 159, 149, 159, 156, 159, 160, 159, 47, 88, 199, 105, 89, 144, 100, 116, 220, 81, 153, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 78, 4, 78, 5, 78, 6, 78, 15, 78, 18, 78, 23, 78, 31, 78, 32, 78, 33, 78, 35, 78, 38, 78, 41, 78, 46, 78, 47, 78, 49, 78, 51, 78, 53, 78, 55, 78, 60, 78, 64, 78, 65, 78, 66, 78, 68, 78, 70, 78, 74, 78, 81, 78, 85, 78, 87, 78, 90, 78, 91, 78, 98, 78, 99, 78, 100, 78, 101, 78, 103, 78, 104, 78, 106, 78, 107, 78, 108, 78, 109, 78, 110, 78, 111, 78, 114, 78, 116, 78, 117, 78, 118, 78, 119, 78, 120, 78, 121, 78, 122, 78, 123, 78, 124, 78, 125, 78, 127, 78, 128, 78, 129, 78, 130, 78, 131, 78, 132, 78, 133, 78, 135, 78, 138, 78, 144, 78, 150, 78, 151, 78, 153, 78, 156, 78, 157, 78, 158, 78, 163, 78, 170, 78, 175, 78, 176, 78, 177, 78, 180, 78, 182, 78, 183, 78, 184, 78, 185, 78, 188, 78, 189, 78, 190, 78, 200, 78, 204, 78, 207, 78, 208, 78, 210, 78, 218, 78, 219, 78, 220, 78, 224, 78, 226, 78, 230, 78, 231, 78, 233, 78, 237, 78, 238, 78, 239, 78, 241, 78, 244, 78, 248, 78, 249, 78, 250, 78, 252, 78, 254, 78, 0, 79, 2, 79, 3, 79, 4, 79, 5, 79, 6, 79, 7, 79, 8, 79, 11, 79, 12, 79, 18, 79, 19, 79, 20, 79, 21, 79, 22, 79, 28, 79, 29, 79, 33, 79, 35, 79, 40, 79, 41, 79, 44, 79, 45, 79, 46, 79, 49, 79, 51, 79, 53, 79, 55, 79, 57, 79, 59, 79, 62, 79, 63, 79, 64, 79, 65, 79, 66, 79, 68, 79, 69, 79, 71, 79, 72, 79, 73, 79, 74, 79, 75, 79, 76, 79, 82, 79, 84, 79, 86, 79, 97, 79, 98, 79, 102, 79, 104, 79, 106, 79, 107, 79, 109, 79, 110, 79, 113, 79, 114, 79, 117, 79, 119, 79, 120, 79, 121, 79, 122, 79, 125, 79, 128, 79, 129, 79, 130, 79, 133, 79, 134, 79, 135, 79, 138, 79, 140, 79, 142, 79, 144, 79, 146, 79, 147, 79, 149, 79, 150, 79, 152, 79, 153, 79, 154, 79, 156, 79, 158, 79, 159, 79, 161, 79, 162, 79, 164, 79, 171, 79, 173, 79, 176, 79, 177, 79, 178, 79, 179, 79, 180, 79, 182, 79, 183, 79, 184, 79, 185, 79, 186, 79, 187, 79, 188, 79, 189, 79, 190, 79, 192, 79, 193, 79, 194, 79, 198, 79, 199, 79, 200, 79, 201, 79, 203, 79, 204, 79, 205, 79, 210, 79, 211, 79, 212, 79, 213, 79, 214, 79, 217, 79, 219, 79, 224, 79, 226, 79, 228, 79, 229, 79, 231, 79, 235, 79, 236, 79, 240, 79, 242, 79, 244, 79, 245, 79, 246, 79, 247, 79, 249, 79, 251, 79, 252, 79, 253, 79, 255, 79, 0, 80, 1, 80, 2, 80, 3, 80, 4, 80, 5, 80, 6, 80, 7, 80, 8, 80, 9, 80, 10, 80, 11, 80, 14, 80, 16, 80, 17, 80, 19, 80, 21, 80, 22, 80, 23, 80, 27, 80, 29, 80, 30, 80, 32, 80, 34, 80, 35, 80, 36, 80, 39, 80, 43, 80, 47, 80, 48, 80, 49, 80, 50, 80, 51, 80, 52, 80, 53, 80, 54, 80, 55, 80, 56, 80, 57, 80, 59, 80, 61, 80, 63, 80, 64, 80, 65, 80, 66, 80, 68, 80, 69, 80, 70, 80, 73, 80, 74, 80, 75, 80, 77, 80, 80, 80, 81, 80, 82, 80, 83, 80, 84, 80, 86, 80, 87, 80, 88, 80, 89, 80, 91, 80, 93, 80, 94, 80, 95, 80, 96, 80, 97, 80, 98, 80, 99, 80, 100, 80, 102, 80, 103, 80, 104, 80, 105, 80, 106, 80, 107, 80, 109, 80, 110, 80, 111, 80, 112, 80, 113, 80, 114, 80, 115, 80, 116, 80, 117, 80, 120, 80, 121, 80, 122, 80, 124, 80, 125, 80, 129, 80, 130, 80, 131, 80, 132, 80, 134, 80, 135, 80, 137, 80, 138, 80, 139, 80, 140, 80, 142, 80, 143, 80, 144, 80, 145, 80, 146, 80, 147, 80, 148, 80, 149, 80, 150, 80, 151, 80, 152, 80, 153, 80, 154, 80, 155, 80, 156, 80, 157, 80, 158, 80, 159, 80, 160, 80, 161, 80, 162, 80, 164, 80, 166, 80, 170, 80, 171, 80, 173, 80, 174, 80, 175, 80, 176, 80, 177, 80, 179, 80, 180, 80, 181, 80, 182, 80, 183, 80, 184, 80, 185, 80, 188, 80, 189, 80, 190, 80, 191, 80, 192, 80, 193, 80, 194, 80, 195, 80, 196, 80, 197, 80, 198, 80, 199, 80, 200, 80, 201, 80, 202, 80, 203, 80, 204, 80, 205, 80, 206, 80, 208, 80, 209, 80, 210, 80, 211, 80, 212, 80, 213, 80, 215, 80, 216, 80, 217, 80, 219, 80, 220, 80, 221, 80, 222, 80, 223, 80, 224, 80, 225, 80, 226, 80, 227, 80, 228, 80, 229, 80, 232, 80, 233, 80, 234, 80, 235, 80, 239, 80, 240, 80, 241, 80, 242, 80, 244, 80, 246, 80, 247, 80, 248, 80, 249, 80, 250, 80, 252, 80, 253, 80, 254, 80, 255, 80, 0, 81, 1, 81, 2, 81, 3, 81, 4, 81, 5, 81, 8, 81, 9, 81, 10, 81, 12, 81, 13, 81, 14, 81, 15, 81, 16, 81, 17, 81, 19, 81, 20, 81, 21, 81, 22, 81, 23, 81, 24, 81, 25, 81, 26, 81, 27, 81, 28, 81, 29, 81, 30, 81, 31, 81, 32, 81, 34, 81, 35, 81, 36, 81, 37, 81, 38, 81, 39, 81, 40, 81, 41, 81, 42, 81, 43, 81, 44, 81, 45, 81, 46, 81, 47, 81, 48, 81, 49, 81, 50, 81, 51, 81, 52, 81, 53, 81, 54, 81, 55, 81, 56, 81, 57, 81, 58, 81, 59, 81, 60, 81, 61, 81, 62, 81, 66, 81, 71, 81, 74, 81, 76, 81, 78, 81, 79, 81, 80, 81, 82, 81, 83, 81, 87, 81, 88, 81, 89, 81, 91, 81, 93, 81, 94, 81, 95, 81, 96, 81, 97, 81, 99, 81, 100, 81, 102, 81, 103, 81, 105, 81, 106, 81, 111, 81, 114, 81, 122, 81, 126, 81, 127, 81, 131, 81, 132, 81, 134, 81, 135, 81, 138, 81, 139, 81, 142, 81, 143, 81, 144, 81, 145, 81, 147, 81, 148, 81, 152, 81, 154, 81, 157, 81, 158, 81, 159, 81, 161, 81, 163, 81, 166, 81, 167, 81, 168, 81, 169, 81, 170, 81, 173, 81, 174, 81, 180, 81, 184, 81, 185, 81, 186, 81, 190, 81, 191, 81, 193, 81, 194, 81, 195, 81, 197, 81, 200, 81, 202, 81, 205, 81, 206, 81, 208, 81, 210, 81, 211, 81, 212, 81, 213, 81, 214, 81, 215, 81, 216, 81, 217, 81, 218, 81, 220, 81, 222, 81, 223, 81, 226, 81, 227, 81, 229, 81, 230, 81, 231, 81, 232, 81, 233, 81, 234, 81, 236, 81, 238, 81, 241, 81, 242, 81, 244, 81, 247, 81, 254, 81, 4, 82, 5, 82, 9, 82, 11, 82, 12, 82, 15, 82, 16, 82, 19, 82, 20, 82, 21, 82, 28, 82, 30, 82, 31, 82, 33, 82, 34, 82, 35, 82, 37, 82, 38, 82, 39, 82, 42, 82, 44, 82, 47, 82, 49, 82, 50, 82, 52, 82, 53, 82, 60, 82, 62, 82, 68, 82, 69, 82, 70, 82, 71, 82, 72, 82, 73, 82, 75, 82, 78, 82, 79, 82, 82, 82, 83, 82, 85, 82, 87, 82, 88, 82, 89, 82, 90, 82, 91, 82, 93, 82, 95, 82, 96, 82, 98, 82, 99, 82, 100, 82, 102, 82, 104, 82, 107, 82, 108, 82, 109, 82, 110, 82, 112, 82, 113, 82, 115, 82, 116, 82, 117, 82, 118, 82, 119, 82, 120, 82, 121, 82, 122, 82, 123, 82, 124, 82, 126, 82, 128, 82, 131, 82, 132, 82, 133, 82, 134, 82, 135, 82, 137, 82, 138, 82, 139, 82, 140, 82, 141, 82, 142, 82, 143, 82, 145, 82, 146, 82, 148, 82, 149, 82, 150, 82, 151, 82, 152, 82, 153, 82, 154, 82, 156, 82, 164, 82, 165, 82, 166, 82, 167, 82, 174, 82, 175, 82, 176, 82, 180, 82, 181, 82, 182, 82, 183, 82, 184, 82, 185, 82, 186, 82, 187, 82, 188, 82, 189, 82, 192, 82, 193, 82, 194, 82, 196, 82, 197, 82, 198, 82, 200, 82, 202, 82, 204, 82, 205, 82, 206, 82, 207, 82, 209, 82, 211, 82, 212, 82, 213, 82, 215, 82, 217, 82, 218, 82, 219, 82, 220, 82, 221, 82, 222, 82, 224, 82, 225, 82, 226, 82, 227, 82, 229, 82, 230, 82, 231, 82, 232, 82, 233, 82, 234, 82, 235, 82, 236, 82, 237, 82, 238, 82, 239, 82, 241, 82, 242, 82, 243, 82, 244, 82, 245, 82, 246, 82, 247, 82, 248, 82, 251, 82, 252, 82, 253, 82, 1, 83, 2, 83, 3, 83, 4, 83, 7, 83, 9, 83, 10, 83, 11, 83, 12, 83, 14, 83, 17, 83, 18, 83, 19, 83, 20, 83, 24, 83, 27, 83, 28, 83, 30, 83, 31, 83, 34, 83, 36, 83, 37, 83, 39, 83, 40, 83, 41, 83, 43, 83, 44, 83, 45, 83, 47, 83, 48, 83, 49, 83, 50, 83, 51, 83, 52, 83, 53, 83, 54, 83, 55, 83, 56, 83, 60, 83, 61, 83, 64, 83, 66, 83, 68, 83, 70, 83, 75, 83, 76, 83, 77, 83, 80, 83, 84, 83, 88, 83, 89, 83, 91, 83, 93, 83, 101, 83, 104, 83, 106, 83, 108, 83, 109, 83, 114, 83, 118, 83, 121, 83, 123, 83, 124, 83, 125, 83, 126, 83, 128, 83, 129, 83, 131, 83, 135, 83, 136, 83, 138, 83, 142, 83, 143, 83, 144, 83, 145, 83, 146, 83, 147, 83, 148, 83, 150, 83, 151, 83, 153, 83, 155, 83, 156, 83, 158, 83, 160, 83, 161, 83, 164, 83, 167, 83, 170, 83, 171, 83, 172, 83, 173, 83, 175, 83, 176, 83, 177, 83, 178, 83, 179, 83, 180, 83, 181, 83, 183, 83, 184, 83, 185, 83, 186, 83, 188, 83, 189, 83, 190, 83, 192, 83, 195, 83, 196, 83, 197, 83, 198, 83, 199, 83, 206, 83, 207, 83, 208, 83, 210, 83, 211, 83, 213, 83, 218, 83, 220, 83, 221, 83, 222, 83, 225, 83, 226, 83, 231, 83, 244, 83, 250, 83, 254, 83, 255, 83, 0, 84, 2, 84, 5, 84, 7, 84, 11, 84, 20, 84, 24, 84, 25, 84, 26, 84, 28, 84, 34, 84, 36, 84, 37, 84, 42, 84, 48, 84, 51, 84, 54, 84, 55, 84, 58, 84, 61, 84, 63, 84, 65, 84, 66, 84, 68, 84, 69, 84, 71, 84, 73, 84, 76, 84, 77, 84, 78, 84, 79, 84, 81, 84, 90, 84, 93, 84, 94, 84, 95, 84, 96, 84, 97, 84, 99, 84, 101, 84, 103, 84, 105, 84, 106, 84, 107, 84, 108, 84, 109, 84, 110, 84, 111, 84, 112, 84, 116, 84, 121, 84, 122, 84, 126, 84, 127, 84, 129, 84, 131, 84, 133, 84, 135, 84, 136, 84, 137, 84, 138, 84, 141, 84, 145, 84, 147, 84, 151, 84, 152, 84, 156, 84, 158, 84, 159, 84, 160, 84, 161, 84, 162, 84, 165, 84, 174, 84, 176, 84, 178, 84, 181, 84, 182, 84, 183, 84, 185, 84, 186, 84, 188, 84, 190, 84, 195, 84, 197, 84, 202, 84, 203, 84, 214, 84, 216, 84, 219, 84, 224, 84, 225, 84, 226, 84, 227, 84, 228, 84, 235, 84, 236, 84, 239, 84, 240, 84, 241, 84, 244, 84, 245, 84, 246, 84, 247, 84, 248, 84, 249, 84, 251, 84, 254, 84, 0, 85, 2, 85, 3, 85, 4, 85, 5, 85, 8, 85, 10, 85, 11, 85, 12, 85, 13, 85, 14, 85, 18, 85, 19, 85, 21, 85, 22, 85, 23, 85, 24, 85, 25, 85, 26, 85, 28, 85, 29, 85, 30, 85, 31, 85, 33, 85, 37, 85, 38, 85, 40, 85, 41, 85, 43, 85, 45, 85, 50, 85, 52, 85, 53, 85, 54, 85, 56, 85, 57, 85, 58, 85, 59, 85, 61, 85, 64, 85, 66, 85, 69, 85, 71, 85, 72, 85, 75, 85, 76, 85, 77, 85, 78, 85, 79, 85, 81, 85, 82, 85, 83, 85, 84, 85, 87, 85, 88, 85, 89, 85, 90, 85, 91, 85, 93, 85, 94, 85, 95, 85, 96, 85, 98, 85, 99, 85, 104, 85, 105, 85, 107, 85, 111, 85, 112, 85, 113, 85, 114, 85, 115, 85, 116, 85, 121, 85, 122, 85, 125, 85, 127, 85, 133, 85, 134, 85, 140, 85, 141, 85, 142, 85, 144, 85, 146, 85, 147, 85, 149, 85, 150, 85, 151, 85, 154, 85, 155, 85, 158, 85, 160, 85, 161, 85, 162, 85, 163, 85, 164, 85, 165, 85, 166, 85, 168, 85, 169, 85, 170, 85, 171, 85, 172, 85, 173, 85, 174, 85, 175, 85, 176, 85, 178, 85, 180, 85, 182, 85, 184, 85, 186, 85, 188, 85, 191, 85, 192, 85, 193, 85, 194, 85, 195, 85, 198, 85, 199, 85, 200, 85, 202, 85, 203, 85, 206, 85, 207, 85, 208, 85, 213, 85, 215, 85, 216, 85, 217, 85, 218, 85, 219, 85, 222, 85, 224, 85, 226, 85, 231, 85, 233, 85, 237, 85, 238, 85, 240, 85, 241, 85, 244, 85, 246, 85, 248, 85, 249, 85, 250, 85, 251, 85, 252, 85, 255, 85, 2, 86, 3, 86, 4, 86, 5, 86, 6, 86, 7, 86, 10, 86, 11, 86, 13, 86, 16, 86, 17, 86, 18, 86, 19, 86, 20, 86, 21, 86, 22, 86, 23, 86, 25, 86, 26, 86, 28, 86, 29, 86, 32, 86, 33, 86, 34, 86, 37, 86, 38, 86, 40, 86, 41, 86, 42, 86, 43, 86, 46, 86, 47, 86, 48, 86, 51, 86, 53, 86, 55, 86, 56, 86, 58, 86, 60, 86, 61, 86, 62, 86, 64, 86, 65, 86, 66, 86, 67, 86, 68, 86, 69, 86, 70, 86, 71, 86, 72, 86, 73, 86, 74, 86, 75, 86, 79, 86, 80, 86, 81, 86, 82, 86, 83, 86, 85, 86, 86, 86, 90, 86, 91, 86, 93, 86, 94, 86, 95, 86, 96, 86, 97, 86, 99, 86, 101, 86, 102, 86, 103, 86, 109, 86, 110, 86, 111, 86, 112, 86, 114, 86, 115, 86, 116, 86, 117, 86, 119, 86, 120, 86, 121, 86, 122, 86, 125, 86, 126, 86, 127, 86, 128, 86, 129, 86, 130, 86, 131, 86, 132, 86, 135, 86, 136, 86, 137, 86, 138, 86, 139, 86, 140, 86, 141, 86, 144, 86, 145, 86, 146, 86, 148, 86, 149, 86, 150, 86, 151, 86, 152, 86, 153, 86, 154, 86, 155, 86, 156, 86, 157, 86, 158, 86, 159, 86, 160, 86, 161, 86, 162, 86, 164, 86, 165, 86, 166, 86, 167, 86, 168, 86, 169, 86, 170, 86, 171, 86, 172, 86, 173, 86, 174, 86, 176, 86, 177, 86, 178, 86, 179, 86, 180, 86, 181, 86, 182, 86, 184, 86, 185, 86, 186, 86, 187, 86, 189, 86, 190, 86, 191, 86, 192, 86, 193, 86, 194, 86, 195, 86, 196, 86, 197, 86, 198, 86, 199, 86, 200, 86, 201, 86, 203, 86, 204, 86, 205, 86, 206, 86, 207, 86, 208, 86, 209, 86, 210, 86, 211, 86, 213, 86, 214, 86, 216, 86, 217, 86, 220, 86, 227, 86, 229, 86, 230, 86, 231, 86, 232, 86, 233, 86, 234, 86, 236, 86, 238, 86, 239, 86, 242, 86, 243, 86, 246, 86, 247, 86, 248, 86, 251, 86, 252, 86, 0, 87, 1, 87, 2, 87, 5, 87, 7, 87, 11, 87, 12, 87, 13, 87, 14, 87, 15, 87, 16, 87, 17, 87, 18, 87, 19, 87, 20, 87, 21, 87, 22, 87, 23, 87, 24, 87, 25, 87, 26, 87, 27, 87, 29, 87, 30, 87, 32, 87, 33, 87, 34, 87, 36, 87, 37, 87, 38, 87, 39, 87, 43, 87, 49, 87, 50, 87, 52, 87, 53, 87, 54, 87, 55, 87, 56, 87, 60, 87, 61, 87, 63, 87, 65, 87, 67, 87, 68, 87, 69, 87, 70, 87, 72, 87, 73, 87, 75, 87, 82, 87, 83, 87, 84, 87, 85, 87, 86, 87, 88, 87, 89, 87, 98, 87, 99, 87, 101, 87, 103, 87, 108, 87, 110, 87, 112, 87, 113, 87, 114, 87, 116, 87, 117, 87, 120, 87, 121, 87, 122, 87, 125, 87, 126, 87, 127, 87, 128, 87, 129, 87, 135, 87, 136, 87, 137, 87, 138, 87, 141, 87, 142, 87, 143, 87, 144, 87, 145, 87, 148, 87, 149, 87, 150, 87, 151, 87, 152, 87, 153, 87, 154, 87, 156, 87, 157, 87, 158, 87, 159, 87, 165, 87, 168, 87, 170, 87, 172, 87, 175, 87, 176, 87, 177, 87, 179, 87, 181, 87, 182, 87, 183, 87, 185, 87, 186, 87, 187, 87, 188, 87, 189, 87, 190, 87, 191, 87, 192, 87, 193, 87, 196, 87, 197, 87, 198, 87, 199, 87, 200, 87, 201, 87, 202, 87, 204, 87, 205, 87, 208, 87, 209, 87, 211, 87, 214, 87, 215, 87, 219, 87, 220, 87, 222, 87, 225, 87, 226, 87, 227, 87, 229, 87, 230, 87, 231, 87, 232, 87, 233, 87, 234, 87, 235, 87, 236, 87, 238, 87, 240, 87, 241, 87, 242, 87, 243, 87, 245, 87, 246, 87, 247, 87, 251, 87, 252, 87, 254, 87, 255, 87, 1, 88, 3, 88, 4, 88, 5, 88, 8, 88, 9, 88, 10, 88, 12, 88, 14, 88, 15, 88, 16, 88, 18, 88, 19, 88, 20, 88, 22, 88, 23, 88, 24, 88, 26, 88, 27, 88, 28, 88, 29, 88, 31, 88, 34, 88, 35, 88, 37, 88, 38, 88, 39, 88, 40, 88, 41, 88, 43, 88, 44, 88, 45, 88, 46, 88, 47, 88, 49, 88, 50, 88, 51, 88, 52, 88, 54, 88, 55, 88, 56, 88, 57, 88, 58, 88, 59, 88, 60, 88, 61, 88, 62, 88, 63, 88, 64, 88, 65, 88, 66, 88, 67, 88, 69, 88, 70, 88, 71, 88, 72, 88, 73, 88, 74, 88, 75, 88, 78, 88, 79, 88, 80, 88, 82, 88, 83, 88, 85, 88, 86, 88, 87, 88, 89, 88, 90, 88, 91, 88, 92, 88, 93, 88, 95, 88, 96, 88, 97, 88, 98, 88, 99, 88, 100, 88, 102, 88, 103, 88, 104, 88, 105, 88, 106, 88, 109, 88, 110, 88, 111, 88, 112, 88, 113, 88, 114, 88, 115, 88, 116, 88, 117, 88, 118, 88, 119, 88, 120, 88, 121, 88, 122, 88, 123, 88, 124, 88, 125, 88, 127, 88, 130, 88, 132, 88, 134, 88, 135, 88, 136, 88, 138, 88, 139, 88, 140, 88, 141, 88, 142, 88, 143, 88, 144, 88, 145, 88, 148, 88, 149, 88, 150, 88, 151, 88, 152, 88, 155, 88, 156, 88, 157, 88, 160, 88, 161, 88, 162, 88, 163, 88, 164, 88, 165, 88, 166, 88, 167, 88, 170, 88, 171, 88, 172, 88, 173, 88, 174, 88, 175, 88, 176, 88, 177, 88, 178, 88, 179, 88, 180, 88, 181, 88, 182, 88, 183, 88, 184, 88, 185, 88, 186, 88, 187, 88, 189, 88, 190, 88, 191, 88, 192, 88, 194, 88, 195, 88, 196, 88, 198, 88, 199, 88, 200, 88, 201, 88, 202, 88, 203, 88, 204, 88, 205, 88, 206, 88, 207, 88, 208, 88, 210, 88, 211, 88, 212, 88, 214, 88, 215, 88, 216, 88, 217, 88, 218, 88, 219, 88, 220, 88, 221, 88, 222, 88, 223, 88, 224, 88, 225, 88, 226, 88, 227, 88, 229, 88, 230, 88, 231, 88, 232, 88, 233, 88, 234, 88, 237, 88, 239, 88, 241, 88, 242, 88, 244, 88, 245, 88, 247, 88, 248, 88, 250, 88, 251, 88, 252, 88, 253, 88, 254, 88, 255, 88, 0, 89, 1, 89, 3, 89, 5, 89, 6, 89, 8, 89, 9, 89, 10, 89, 11, 89, 12, 89, 14, 89, 16, 89, 17, 89, 18, 89, 19, 89, 23, 89, 24, 89, 27, 89, 29, 89, 30, 89, 32, 89, 33, 89, 34, 89, 35, 89, 38, 89, 40, 89, 44, 89, 48, 89, 50, 89, 51, 89, 53, 89, 54, 89, 59, 89, 61, 89, 62, 89, 63, 89, 64, 89, 67, 89, 69, 89, 70, 89, 74, 89, 76, 89, 77, 89, 80, 89, 82, 89, 83, 89, 89, 89, 91, 89, 92, 89, 93, 89, 94, 89, 95, 89, 97, 89, 99, 89, 100, 89, 102, 89, 103, 89, 104, 89, 105, 89, 106, 89, 107, 89, 108, 89, 109, 89, 110, 89, 111, 89, 112, 89, 113, 89, 114, 89, 117, 89, 119, 89, 122, 89, 123, 89, 124, 89, 126, 89, 127, 89, 128, 89, 133, 89, 137, 89, 139, 89, 140, 89, 142, 89, 143, 89, 144, 89, 145, 89, 148, 89, 149, 89, 152, 89, 154, 89, 155, 89, 156, 89, 157, 89, 159, 89, 160, 89, 161, 89, 162, 89, 166, 89, 167, 89, 172, 89, 173, 89, 176, 89, 177, 89, 179, 89, 180, 89, 181, 89, 182, 89, 183, 89, 184, 89, 186, 89, 188, 89, 189, 89, 191, 89, 192, 89, 193, 89, 194, 89, 195, 89, 196, 89, 197, 89, 199, 89, 200, 89, 201, 89, 204, 89, 205, 89, 206, 89, 207, 89, 213, 89, 214, 89, 217, 89, 219, 89, 222, 89, 223, 89, 224, 89, 225, 89, 226, 89, 228, 89, 230, 89, 231, 89, 233, 89, 234, 89, 235, 89, 237, 89, 238, 89, 239, 89, 240, 89, 241, 89, 242, 89, 243, 89, 244, 89, 245, 89, 246, 89, 247, 89, 248, 89, 250, 89, 252, 89, 253, 89, 254, 89, 0, 90, 2, 90, 10, 90, 11, 90, 13, 90, 14, 90, 15, 90, 16, 90, 18, 90, 20, 90, 21, 90, 22, 90, 23, 90, 25, 90, 26, 90, 27, 90, 29, 90, 30, 90, 33, 90, 34, 90, 36, 90, 38, 90, 39, 90, 40, 90, 42, 90, 43, 90, 44, 90, 45, 90, 46, 90, 47, 90, 48, 90, 51, 90, 53, 90, 55, 90, 56, 90, 57, 90, 58, 90, 59, 90, 61, 90, 62, 90, 63, 90, 65, 90, 66, 90, 67, 90, 68, 90, 69, 90, 71, 90, 72, 90, 75, 90, 76, 90, 77, 90, 78, 90, 79, 90, 80, 90, 81, 90, 82, 90, 83, 90, 84, 90, 86, 90, 87, 90, 88, 90, 89, 90, 91, 90, 92, 90, 93, 90, 94, 90, 95, 90, 96, 90, 97, 90, 99, 90, 100, 90, 101, 90, 102, 90, 104, 90, 105, 90, 107, 90, 108, 90, 109, 90, 110, 90, 111, 90, 112, 90, 113, 90, 114, 90, 115, 90, 120, 90, 121, 90, 123, 90, 124, 90, 125, 90, 126, 90, 128, 90, 129, 90, 130, 90, 131, 90, 132, 90, 133, 90, 134, 90, 135, 90, 136, 90, 137, 90, 138, 90, 139, 90, 140, 90, 141, 90, 142, 90, 143, 90, 144, 90, 145, 90, 147, 90, 148, 90, 149, 90, 150, 90, 151, 90, 152, 90, 153, 90, 156, 90, 157, 90, 158, 90, 159, 90, 160, 90, 161, 90, 162, 90, 163, 90, 164, 90, 165, 90, 166, 90, 167, 90, 168, 90, 169, 90, 171, 90, 172, 90, 173, 90, 174, 90, 175, 90, 176, 90, 177, 90, 180, 90, 182, 90, 183, 90, 185, 90, 186, 90, 187, 90, 188, 90, 189, 90, 191, 90, 192, 90, 195, 90, 196, 90, 197, 90, 198, 90, 199, 90, 200, 90, 202, 90, 203, 90, 205, 90, 206, 90, 207, 90, 208, 90, 209, 90, 211, 90, 213, 90, 215, 90, 217, 90, 218, 90, 219, 90, 221, 90, 222, 90, 223, 90, 226, 90, 228, 90, 229, 90, 231, 90, 232, 90, 234, 90, 236, 90, 237, 90, 238, 90, 239, 90, 240, 90, 242, 90, 243, 90, 244, 90, 245, 90, 246, 90, 247, 90, 248, 90, 249, 90, 250, 90, 251, 90, 252, 90, 253, 90, 254, 90, 255, 90, 0, 91, 1, 91, 2, 91, 3, 91, 4, 91, 5, 91, 6, 91, 7, 91, 8, 91, 10, 91, 11, 91, 12, 91, 13, 91, 14, 91, 15, 91, 16, 91, 17, 91, 18, 91, 19, 91, 20, 91, 21, 91, 24, 91, 25, 91, 26, 91, 27, 91, 28, 91, 29, 91, 30, 91, 31, 91, 32, 91, 33, 91, 34, 91, 35, 91, 36, 91, 37, 91, 38, 91, 39, 91, 40, 91, 41, 91, 42, 91, 43, 91, 44, 91, 45, 91, 46, 91, 47, 91, 48, 91, 49, 91, 51, 91, 53, 91, 54, 91, 56, 91, 57, 91, 58, 91, 59, 91, 60, 91, 61, 91, 62, 91, 63, 91, 65, 91, 66, 91, 67, 91, 68, 91, 69, 91, 70, 91, 71, 91, 72, 91, 73, 91, 74, 91, 75, 91, 76, 91, 77, 91, 78, 91, 79, 91, 82, 91, 86, 91, 94, 91, 96, 91, 97, 91, 103, 91, 104, 91, 107, 91, 109, 91, 110, 91, 111, 91, 114, 91, 116, 91, 118, 91, 119, 91, 120, 91, 121, 91, 123, 91, 124, 91, 126, 91, 127, 91, 130, 91, 134, 91, 138, 91, 141, 91, 142, 91, 144, 91, 145, 91, 146, 91, 148, 91, 150, 91, 159, 91, 167, 91, 168, 91, 169, 91, 172, 91, 173, 91, 174, 91, 175, 91, 177, 91, 178, 91, 183, 91, 186, 91, 187, 91, 188, 91, 192, 91, 193, 91, 195, 91, 200, 91, 201, 91, 202, 91, 203, 91, 205, 91, 206, 91, 207, 91, 209, 91, 212, 91, 213, 91, 214, 91, 215, 91, 216, 91, 217, 91, 218, 91, 219, 91, 220, 91, 224, 91, 226, 91, 227, 91, 230, 91, 231, 91, 233, 91, 234, 91, 235, 91, 236, 91, 237, 91, 239, 91, 241, 91, 242, 91, 243, 91, 244, 91, 245, 91, 246, 91, 247, 91, 253, 91, 254, 91, 0, 92, 2, 92, 3, 92, 5, 92, 7, 92, 8, 92, 11, 92, 12, 92, 13, 92, 14, 92, 16, 92, 18, 92, 19, 92, 23, 92, 25, 92, 27, 92, 30, 92, 31, 92, 32, 92, 33, 92, 35, 92, 38, 92, 40, 92, 41, 92, 42, 92, 43, 92, 45, 92, 46, 92, 47, 92, 48, 92, 50, 92, 51, 92, 53, 92, 54, 92, 55, 92, 67, 92, 68, 92, 70, 92, 71, 92, 76, 92, 77, 92, 82, 92, 83, 92, 84, 92, 86, 92, 87, 92, 88, 92, 90, 92, 91, 92, 92, 92, 93, 92, 95, 92, 98, 92, 100, 92, 103, 92, 104, 92, 105, 92, 106, 92, 107, 92, 108, 92, 109, 92, 112, 92, 114, 92, 115, 92, 116, 92, 117, 92, 118, 92, 119, 92, 120, 92, 123, 92, 124, 92, 125, 92, 126, 92, 128, 92, 131, 92, 132, 92, 133, 92, 134, 92, 135, 92, 137, 92, 138, 92, 139, 92, 142, 92, 143, 92, 146, 92, 147, 92, 149, 92, 157, 92, 158, 92, 159, 92, 160, 92, 161, 92, 164, 92, 165, 92, 166, 92, 167, 92, 168, 92, 170, 92, 174, 92, 175, 92, 176, 92, 178, 92, 180, 92, 182, 92, 185, 92, 186, 92, 187, 92, 188, 92, 190, 92, 192, 92, 194, 92, 195, 92, 197, 92, 198, 92, 199, 92, 200, 92, 201, 92, 202, 92, 204, 92, 205, 92, 206, 92, 207, 92, 208, 92, 209, 92, 211, 92, 212, 92, 213, 92, 214, 92, 215, 92, 216, 92, 218, 92, 219, 92, 220, 92, 221, 92, 222, 92, 223, 92, 224, 92, 226, 92, 227, 92, 231, 92, 233, 92, 235, 92, 236, 92, 238, 92, 239, 92, 241, 92, 242, 92, 243, 92, 244, 92, 245, 92, 246, 92, 247, 92, 248, 92, 249, 92, 250, 92, 252, 92, 253, 92, 254, 92, 255, 92, 0, 93, 1, 93, 4, 93, 5, 93, 8, 93, 9, 93, 10, 93, 11, 93, 12, 93, 13, 93, 15, 93, 16, 93, 17, 93, 18, 93, 19, 93, 21, 93, 23, 93, 24, 93, 25, 93, 26, 93, 28, 93, 29, 93, 31, 93, 32, 93, 33, 93, 34, 93, 35, 93, 37, 93, 40, 93, 42, 93, 43, 93, 44, 93, 47, 93, 48, 93, 49, 93, 50, 93, 51, 93, 53, 93, 54, 93, 55, 93, 56, 93, 57, 93, 58, 93, 59, 93, 60, 93, 63, 93, 64, 93, 65, 93, 66, 93, 67, 93, 68, 93, 69, 93, 70, 93, 72, 93, 73, 93, 77, 93, 78, 93, 79, 93, 80, 93, 81, 93, 82, 93, 83, 93, 84, 93, 85, 93, 86, 93, 87, 93, 89, 93, 90, 93, 92, 93, 94, 93, 95, 93, 96, 93, 97, 93, 98, 93, 99, 93, 100, 93, 101, 93, 102, 93, 103, 93, 104, 93, 106, 93, 109, 93, 110, 93, 112, 93, 113, 93, 114, 93, 115, 93, 117, 93, 118, 93, 119, 93, 120, 93, 121, 93, 122, 93, 123, 93, 124, 93, 125, 93, 126, 93, 127, 93, 128, 93, 129, 93, 131, 93, 132, 93, 133, 93, 134, 93, 135, 93, 136, 93, 137, 93, 138, 93, 139, 93, 140, 93, 141, 93, 142, 93, 143, 93, 144, 93, 145, 93, 146, 93, 147, 93, 148, 93, 149, 93, 150, 93, 151, 93, 152, 93, 154, 93, 155, 93, 156, 93, 158, 93, 159, 93, 160, 93, 161, 93, 162, 93, 163, 93, 164, 93, 165, 93, 166, 93, 167, 93, 168, 93, 169, 93, 170, 93, 171, 93, 172, 93, 173, 93, 174, 93, 175, 93, 176, 93, 177, 93, 178, 93, 179, 93, 180, 93, 181, 93, 182, 93, 184, 93, 185, 93, 186, 93, 187, 93, 188, 93, 189, 93, 190, 93, 191, 93, 192, 93, 193, 93, 194, 93, 195, 93, 196, 93, 198, 93, 199, 93, 200, 93, 201, 93, 202, 93, 203, 93, 204, 93, 206, 93, 207, 93, 208, 93, 209, 93, 210, 93, 211, 93, 212, 93, 213, 93, 214, 93, 215, 93, 216, 93, 217, 93, 218, 93, 220, 93, 223, 93, 224, 93, 227, 93, 228, 93, 234, 93, 236, 93, 237, 93, 240, 93, 245, 93, 246, 93, 248, 93, 249, 93, 250, 93, 251, 93, 252, 93, 255, 93, 0, 94, 4, 94, 7, 94, 9, 94, 10, 94, 11, 94, 13, 94, 14, 94, 18, 94, 19, 94, 23, 94, 30, 94, 31, 94, 32, 94, 33, 94, 34, 94, 35, 94, 36, 94, 37, 94, 40, 94, 41, 94, 42, 94, 43, 94, 44, 94, 47, 94, 48, 94, 50, 94, 51, 94, 52, 94, 53, 94, 54, 94, 57, 94, 58, 94, 62, 94, 63, 94, 64, 94, 65, 94, 67, 94, 70, 94, 71, 94, 72, 94, 73, 94, 74, 94, 75, 94, 77, 94, 78, 94, 79, 94, 80, 94, 81, 94, 82, 94, 83, 94, 86, 94, 87, 94, 88, 94, 89, 94, 90, 94, 92, 94, 93, 94, 95, 94, 96, 94, 99, 94, 100, 94, 101, 94, 102, 94, 103, 94, 104, 94, 105, 94, 106, 94, 107, 94, 108, 94, 109, 94, 110, 94, 111, 94, 112, 94, 113, 94, 117, 94, 119, 94, 121, 94, 126, 94, 129, 94, 130, 94, 131, 94, 133, 94, 136, 94, 137, 94, 140, 94, 141, 94, 142, 94, 146, 94, 152, 94, 155, 94, 157, 94, 161, 94, 162, 94, 163, 94, 164, 94, 168, 94, 169, 94, 170, 94, 171, 94, 172, 94, 174, 94, 175, 94, 176, 94, 177, 94, 178, 94, 180, 94, 186, 94, 187, 94, 188, 94, 189, 94, 191, 94, 192, 94, 193, 94, 194, 94, 195, 94, 196, 94, 197, 94, 198, 94, 199, 94, 200, 94, 203, 94, 204, 94, 205, 94, 206, 94, 207, 94, 208, 94, 212, 94, 213, 94, 215, 94, 216, 94, 217, 94, 218, 94, 220, 94, 221, 94, 222, 94, 223, 94, 224, 94, 225, 94, 226, 94, 227, 94, 228, 94, 229, 94, 230, 94, 231, 94, 233, 94, 235, 94, 236, 94, 237, 94, 238, 94, 239, 94, 240, 94, 241, 94, 242, 94, 243, 94, 245, 94, 248, 94, 249, 94, 251, 94, 252, 94, 253, 94, 5, 95, 6, 95, 7, 95, 9, 95, 12, 95, 13, 95, 14, 95, 16, 95, 18, 95, 20, 95, 22, 95, 25, 95, 26, 95, 28, 95, 29, 95, 30, 95, 33, 95, 34, 95, 35, 95, 36, 95, 40, 95, 43, 95, 44, 95, 46, 95, 48, 95, 50, 95, 51, 95, 52, 95, 53, 95, 54, 95, 55, 95, 56, 95, 59, 95, 61, 95, 62, 95, 63, 95, 65, 95, 66, 95, 67, 95, 68, 95, 69, 95, 70, 95, 71, 95, 72, 95, 73, 95, 74, 95, 75, 95, 76, 95, 77, 95, 78, 95, 79, 95, 81, 95, 84, 95, 89, 95, 90, 95, 91, 95, 92, 95, 94, 95, 95, 95, 96, 95, 99, 95, 101, 95, 103, 95, 104, 95, 107, 95, 110, 95, 111, 95, 114, 95, 116, 95, 117, 95, 118, 95, 120, 95, 122, 95, 125, 95, 126, 95, 127, 95, 131, 95, 134, 95, 141, 95, 142, 95, 143, 95, 145, 95, 147, 95, 148, 95, 150, 95, 154, 95, 155, 95, 157, 95, 158, 95, 159, 95, 160, 95, 162, 95, 163, 95, 164, 95, 165, 95, 166, 95, 167, 95, 169, 95, 171, 95, 172, 95, 175, 95, 176, 95, 177, 95, 178, 95, 179, 95, 180, 95, 182, 95, 184, 95, 185, 95, 186, 95, 187, 95, 190, 95, 191, 95, 192, 95, 193, 95, 194, 95, 199, 95, 200, 95, 202, 95, 203, 95, 206, 95, 211, 95, 212, 95, 213, 95, 218, 95, 219, 95, 220, 95, 222, 95, 223, 95, 226, 95, 227, 95, 229, 95, 230, 95, 232, 95, 233, 95, 236, 95, 239, 95, 240, 95, 242, 95, 243, 95, 244, 95, 246, 95, 247, 95, 249, 95, 250, 95, 252, 95, 7, 96, 8, 96, 9, 96, 11, 96, 12, 96, 16, 96, 17, 96, 19, 96, 23, 96, 24, 96, 26, 96, 30, 96, 31, 96, 34, 96, 35, 96, 36, 96, 44, 96, 45, 96, 46, 96, 48, 96, 49, 96, 50, 96, 51, 96, 52, 96, 54, 96, 55, 96, 56, 96, 57, 96, 58, 96, 61, 96, 62, 96, 64, 96, 68, 96, 69, 96, 70, 96, 71, 96, 72, 96, 73, 96, 74, 96, 76, 96, 78, 96, 79, 96, 81, 96, 83, 96, 84, 96, 86, 96, 87, 96, 88, 96, 91, 96, 92, 96, 94, 96, 95, 96, 96, 96, 97, 96, 101, 96, 102, 96, 110, 96, 113, 96, 114, 96, 116, 96, 117, 96, 119, 96, 126, 96, 128, 96, 129, 96, 130, 96, 133, 96, 134, 96, 135, 96, 136, 96, 138, 96, 139, 96, 142, 96, 143, 96, 144, 96, 145, 96, 147, 96, 149, 96, 151, 96, 152, 96, 153, 96, 156, 96, 158, 96, 161, 96, 162, 96, 164, 96, 165, 96, 167, 96, 169, 96, 170, 96, 174, 96, 176, 96, 179, 96, 181, 96, 182, 96, 183, 96, 185, 96, 186, 96, 189, 96, 190, 96, 191, 96, 192, 96, 193, 96, 194, 96, 195, 96, 196, 96, 199, 96, 200, 96, 201, 96, 204, 96, 205, 96, 206, 96, 207, 96, 208, 96, 210, 96, 211, 96, 212, 96, 214, 96, 215, 96, 217, 96, 219, 96, 222, 96, 225, 96, 226, 96, 227, 96, 228, 96, 229, 96, 234, 96, 241, 96, 242, 96, 245, 96, 247, 96, 248, 96, 251, 96, 252, 96, 253, 96, 254, 96, 255, 96, 2, 97, 3, 97, 4, 97, 5, 97, 7, 97, 10, 97, 11, 97, 12, 97, 16, 97, 17, 97, 18, 97, 19, 97, 20, 97, 22, 97, 23, 97, 24, 97, 25, 97, 27, 97, 28, 97, 29, 97, 30, 97, 33, 97, 34, 97, 37, 97, 40, 97, 41, 97, 42, 97, 44, 97, 45, 97, 46, 97, 47, 97, 48, 97, 49, 97, 50, 97, 51, 97, 52, 97, 53, 97, 54, 97, 55, 97, 56, 97, 57, 97, 58, 97, 59, 97, 60, 97, 61, 97, 62, 97, 64, 97, 65, 97, 66, 97, 67, 97, 68, 97, 69, 97, 70, 97, 71, 97, 73, 97, 75, 97, 77, 97, 79, 97, 80, 97, 82, 97, 83, 97, 84, 97, 86, 97, 87, 97, 88, 97, 89, 97, 90, 97, 91, 97, 92, 97, 94, 97, 95, 97, 96, 97, 97, 97, 99, 97, 100, 97, 101, 97, 102, 97, 105, 97, 106, 97, 107, 97, 108, 97, 109, 97, 110, 97, 111, 97, 113, 97, 114, 97, 115, 97, 116, 97, 118, 97, 120, 97, 121, 97, 122, 97, 123, 97, 124, 97, 125, 97, 126, 97, 127, 97, 128, 97, 129, 97, 130, 97, 131, 97, 132, 97, 133, 97, 134, 97, 135, 97, 136, 97, 137, 97, 138, 97, 140, 97, 141, 97, 143, 97, 144, 97, 145, 97, 146, 97, 147, 97, 149, 97, 150, 97, 151, 97, 152, 97, 153, 97, 154, 97, 155, 97, 156, 97, 158, 97, 159, 97, 160, 97, 161, 97, 162, 97, 163, 97, 164, 97, 165, 97, 166, 97, 170, 97, 171, 97, 173, 97, 174, 97, 175, 97, 176, 97, 177, 97, 178, 97, 179, 97, 180, 97, 181, 97, 182, 97, 184, 97, 185, 97, 186, 97, 187, 97, 188, 97, 189, 97, 191, 97, 192, 97, 193, 97, 195, 97, 196, 97, 197, 97, 198, 97, 199, 97, 201, 97, 204, 97, 205, 97, 206, 97, 207, 97, 208, 97, 211, 97, 213, 97, 214, 97, 215, 97, 216, 97, 217, 97, 218, 97, 219, 97, 220, 97, 221, 97, 222, 97, 223, 97, 224, 97, 225, 97, 226, 97, 227, 97, 228, 97, 229, 97, 231, 97, 232, 97, 233, 97, 234, 97, 235, 97, 236, 97, 237, 97, 238, 97, 239, 97, 240, 97, 241, 97, 242, 97, 243, 97, 244, 97, 246, 97, 247, 97, 248, 97, 249, 97, 250, 97, 251, 97, 252, 97, 253, 97, 254, 97, 0, 98, 1, 98, 2, 98, 3, 98, 4, 98, 5, 98, 7, 98, 9, 98, 19, 98, 20, 98, 25, 98, 28, 98, 29, 98, 30, 98, 32, 98, 35, 98, 38, 98, 39, 98, 40, 98, 41, 98, 43, 98, 45, 98, 47, 98, 48, 98, 49, 98, 50, 98, 53, 98, 54, 98, 56, 98, 57, 98, 58, 98, 59, 98, 60, 98, 66, 98, 68, 98, 69, 98, 70, 98, 74, 98, 79, 98, 80, 98, 85, 98, 86, 98, 87, 98, 89, 98, 90, 98, 92, 98, 93, 98, 94, 98, 95, 98, 96, 98, 97, 98, 98, 98, 100, 98, 101, 98, 104, 98, 113, 98, 114, 98, 116, 98, 117, 98, 119, 98, 120, 98, 122, 98, 123, 98, 125, 98, 129, 98, 130, 98, 131, 98, 133, 98, 134, 98, 135, 98, 136, 98, 139, 98, 140, 98, 141, 98, 142, 98, 143, 98, 144, 98, 148, 98, 153, 98, 156, 98, 157, 98, 158, 98, 163, 98, 166, 98, 167, 98, 169, 98, 170, 98, 173, 98, 174, 98, 175, 98, 176, 98, 178, 98, 179, 98, 180, 98, 182, 98, 183, 98, 184, 98, 186, 98, 190, 98, 192, 98, 193, 98, 195, 98, 203, 98, 207, 98, 209, 98, 213, 98, 221, 98, 222, 98, 224, 98, 225, 98, 228, 98, 234, 98, 235, 98, 240, 98, 242, 98, 245, 98, 248, 98, 249, 98, 250, 98, 251, 98, 0, 99, 3, 99, 4, 99, 5, 99, 6, 99, 10, 99, 11, 99, 12, 99, 13, 99, 15, 99, 16, 99, 18, 99, 19, 99, 20, 99, 21, 99, 23, 99, 24, 99, 25, 99, 28, 99, 38, 99, 39, 99, 41, 99, 44, 99, 45, 99, 46, 99, 48, 99, 49, 99, 51, 99, 52, 99, 53, 99, 54, 99, 55, 99, 56, 99, 59, 99, 60, 99, 62, 99, 63, 99, 64, 99, 65, 99, 68, 99, 71, 99, 72, 99, 74, 99, 81, 99, 82, 99, 83, 99, 84, 99, 86, 99, 87, 99, 88, 99, 89, 99, 90, 99, 91, 99, 92, 99, 93, 99, 96, 99, 100, 99, 101, 99, 102, 99, 104, 99, 106, 99, 107, 99, 108, 99, 111, 99, 112, 99, 114, 99, 115, 99, 116, 99, 117, 99, 120, 99, 121, 99, 124, 99, 125, 99, 126, 99, 127, 99, 129, 99, 131, 99, 132, 99, 133, 99, 134, 99, 139, 99, 141, 99, 145, 99, 147, 99, 148, 99, 149, 99, 151, 99, 153, 99, 154, 99, 155, 99, 156, 99, 157, 99, 158, 99, 159, 99, 161, 99, 164, 99, 166, 99, 171, 99, 175, 99, 177, 99, 178, 99, 181, 99, 182, 99, 185, 99, 187, 99, 189, 99, 191, 99, 192, 99, 193, 99, 194, 99, 195, 99, 197, 99, 199, 99, 200, 99, 202, 99, 203, 99, 204, 99, 209, 99, 211, 99, 212, 99, 213, 99, 215, 99, 216, 99, 217, 99, 218, 99, 219, 99, 220, 99, 221, 99, 223, 99, 226, 99, 228, 99, 229, 99, 230, 99, 231, 99, 232, 99, 235, 99, 236, 99, 238, 99, 239, 99, 240, 99, 241, 99, 243, 99, 245, 99, 247, 99, 249, 99, 250, 99, 251, 99, 252, 99, 254, 99, 3, 100, 4, 100, 6, 100, 7, 100, 8, 100, 9, 100, 10, 100, 13, 100, 14, 100, 17, 100, 18, 100, 21, 100, 22, 100, 23, 100, 24, 100, 25, 100, 26, 100, 29, 100, 31, 100, 34, 100, 35, 100, 36, 100, 37, 100, 39, 100, 40, 100, 41, 100, 43, 100, 46, 100, 47, 100, 48, 100, 49, 100, 50, 100, 51, 100, 53, 100, 54, 100, 55, 100, 56, 100, 57, 100, 59, 100, 60, 100, 62, 100, 64, 100, 66, 100, 67, 100, 73, 100, 75, 100, 76, 100, 77, 100, 78, 100, 79, 100, 80, 100, 81, 100, 83, 100, 85, 100, 86, 100, 87, 100, 89, 100, 90, 100, 91, 100, 92, 100, 93, 100, 95, 100, 96, 100, 97, 100, 98, 100, 99, 100, 100, 100, 101, 100, 102, 100, 104, 100, 106, 100, 107, 100, 108, 100, 110, 100, 111, 100, 112, 100, 113, 100, 114, 100, 115, 100, 116, 100, 117, 100, 118, 100, 119, 100, 123, 100, 124, 100, 125, 100, 126, 100, 127, 100, 128, 100, 129, 100, 131, 100, 134, 100, 136, 100, 137, 100, 138, 100, 139, 100, 140, 100, 141, 100, 142, 100, 143, 100, 144, 100, 147, 100, 148, 100, 151, 100, 152, 100, 154, 100, 155, 100, 156, 100, 157, 100, 159, 100, 160, 100, 161, 100, 162, 100, 163, 100, 165, 100, 166, 100, 167, 100, 168, 100, 170, 100, 171, 100, 175, 100, 177, 100, 178, 100, 179, 100, 180, 100, 182, 100, 185, 100, 187, 100, 189, 100, 190, 100, 191, 100, 193, 100, 195, 100, 196, 100, 198, 100, 199, 100, 200, 100, 201, 100, 202, 100, 203, 100, 204, 100, 207, 100, 209, 100, 211, 100, 212, 100, 213, 100, 214, 100, 217, 100, 218, 100, 219, 100, 220, 100, 221, 100, 223, 100, 224, 100, 225, 100, 227, 100, 229, 100, 231, 100, 232, 100, 233, 100, 234, 100, 235, 100, 236, 100, 237, 100, 238, 100, 239, 100, 240, 100, 241, 100, 242, 100, 243, 100, 244, 100, 245, 100, 246, 100, 247, 100, 248, 100, 249, 100, 250, 100, 251, 100, 252, 100, 253, 100, 254, 100, 255, 100, 1, 101, 2, 101, 3, 101, 4, 101, 5, 101, 6, 101, 7, 101, 8, 101, 10, 101, 11, 101, 12, 101, 13, 101, 14, 101, 15, 101, 16, 101, 17, 101, 19, 101, 20, 101, 21, 101, 22, 101, 23, 101, 25, 101, 26, 101, 27, 101, 28, 101, 29, 101, 30, 101, 31, 101, 32, 101, 33, 101, 34, 101, 35, 101, 36, 101, 38, 101, 39, 101, 40, 101, 41, 101, 42, 101, 44, 101, 45, 101, 48, 101, 49, 101, 50, 101, 51, 101, 55, 101, 58, 101, 60, 101, 61, 101, 64, 101, 65, 101, 66, 101, 67, 101, 68, 101, 70, 101, 71, 101, 74, 101, 75, 101, 77, 101, 78, 101, 80, 101, 82, 101, 83, 101, 84, 101, 87, 101, 88, 101, 90, 101, 92, 101, 95, 101, 96, 101, 97, 101, 100, 101, 101, 101, 103, 101, 104, 101, 105, 101, 106, 101, 109, 101, 110, 101, 111, 101, 113, 101, 115, 101, 117, 101, 118, 101, 120, 101, 121, 101, 122, 101, 123, 101, 124, 101, 125, 101, 126, 101, 127, 101, 128, 101, 129, 101, 130, 101, 131, 101, 132, 101, 133, 101, 134, 101, 136, 101, 137, 101, 138, 101, 141, 101, 142, 101, 143, 101, 146, 101, 148, 101, 149, 101, 150, 101, 152, 101, 154, 101, 157, 101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 25332);
    allocate([158, 101, 160, 101, 162, 101, 163, 101, 166, 101, 168, 101, 170, 101, 172, 101, 174, 101, 177, 101, 178, 101, 179, 101, 180, 101, 181, 101, 182, 101, 183, 101, 184, 101, 186, 101, 187, 101, 190, 101, 191, 101, 192, 101, 194, 101, 199, 101, 200, 101, 201, 101, 202, 101, 205, 101, 208, 101, 209, 101, 211, 101, 212, 101, 213, 101, 216, 101, 217, 101, 218, 101, 219, 101, 220, 101, 221, 101, 222, 101, 223, 101, 225, 101, 227, 101, 228, 101, 234, 101, 235, 101, 242, 101, 243, 101, 244, 101, 245, 101, 248, 101, 249, 101, 251, 101, 252, 101, 253, 101, 254, 101, 255, 101, 1, 102, 4, 102, 5, 102, 7, 102, 8, 102, 9, 102, 11, 102, 13, 102, 16, 102, 17, 102, 18, 102, 22, 102, 23, 102, 24, 102, 26, 102, 27, 102, 28, 102, 30, 102, 33, 102, 34, 102, 35, 102, 36, 102, 38, 102, 41, 102, 42, 102, 43, 102, 44, 102, 46, 102, 48, 102, 50, 102, 51, 102, 55, 102, 56, 102, 57, 102, 58, 102, 59, 102, 61, 102, 63, 102, 64, 102, 66, 102, 68, 102, 69, 102, 70, 102, 71, 102, 72, 102, 73, 102, 74, 102, 77, 102, 78, 102, 80, 102, 81, 102, 88, 102, 89, 102, 91, 102, 92, 102, 93, 102, 94, 102, 96, 102, 98, 102, 99, 102, 101, 102, 103, 102, 105, 102, 106, 102, 107, 102, 108, 102, 109, 102, 113, 102, 114, 102, 115, 102, 117, 102, 120, 102, 121, 102, 123, 102, 124, 102, 125, 102, 127, 102, 128, 102, 129, 102, 131, 102, 133, 102, 134, 102, 136, 102, 137, 102, 138, 102, 139, 102, 141, 102, 142, 102, 143, 102, 144, 102, 146, 102, 147, 102, 148, 102, 149, 102, 152, 102, 153, 102, 154, 102, 155, 102, 156, 102, 158, 102, 159, 102, 160, 102, 161, 102, 162, 102, 163, 102, 164, 102, 165, 102, 166, 102, 169, 102, 170, 102, 171, 102, 172, 102, 173, 102, 175, 102, 176, 102, 177, 102, 178, 102, 179, 102, 181, 102, 182, 102, 183, 102, 184, 102, 186, 102, 187, 102, 188, 102, 189, 102, 191, 102, 192, 102, 193, 102, 194, 102, 195, 102, 196, 102, 197, 102, 198, 102, 199, 102, 200, 102, 201, 102, 202, 102, 203, 102, 204, 102, 205, 102, 206, 102, 207, 102, 208, 102, 209, 102, 210, 102, 211, 102, 212, 102, 213, 102, 214, 102, 215, 102, 216, 102, 218, 102, 222, 102, 223, 102, 224, 102, 225, 102, 226, 102, 227, 102, 228, 102, 229, 102, 231, 102, 232, 102, 234, 102, 235, 102, 236, 102, 237, 102, 238, 102, 239, 102, 241, 102, 245, 102, 246, 102, 248, 102, 250, 102, 251, 102, 253, 102, 1, 103, 2, 103, 3, 103, 4, 103, 5, 103, 6, 103, 7, 103, 12, 103, 14, 103, 15, 103, 17, 103, 18, 103, 19, 103, 22, 103, 24, 103, 25, 103, 26, 103, 28, 103, 30, 103, 32, 103, 33, 103, 34, 103, 35, 103, 36, 103, 37, 103, 39, 103, 41, 103, 46, 103, 48, 103, 50, 103, 51, 103, 54, 103, 55, 103, 56, 103, 57, 103, 59, 103, 60, 103, 62, 103, 63, 103, 65, 103, 68, 103, 69, 103, 71, 103, 74, 103, 75, 103, 77, 103, 82, 103, 84, 103, 85, 103, 87, 103, 88, 103, 89, 103, 90, 103, 91, 103, 93, 103, 98, 103, 99, 103, 100, 103, 102, 103, 103, 103, 107, 103, 108, 103, 110, 103, 113, 103, 116, 103, 118, 103, 120, 103, 121, 103, 122, 103, 123, 103, 125, 103, 128, 103, 130, 103, 131, 103, 133, 103, 134, 103, 136, 103, 138, 103, 140, 103, 141, 103, 142, 103, 143, 103, 145, 103, 146, 103, 147, 103, 148, 103, 150, 103, 153, 103, 155, 103, 159, 103, 160, 103, 161, 103, 164, 103, 166, 103, 169, 103, 172, 103, 174, 103, 177, 103, 178, 103, 180, 103, 185, 103, 186, 103, 187, 103, 188, 103, 189, 103, 190, 103, 191, 103, 192, 103, 194, 103, 197, 103, 198, 103, 199, 103, 200, 103, 201, 103, 202, 103, 203, 103, 204, 103, 205, 103, 206, 103, 213, 103, 214, 103, 215, 103, 219, 103, 223, 103, 225, 103, 227, 103, 228, 103, 230, 103, 231, 103, 232, 103, 234, 103, 235, 103, 237, 103, 238, 103, 242, 103, 245, 103, 246, 103, 247, 103, 248, 103, 249, 103, 250, 103, 251, 103, 252, 103, 254, 103, 1, 104, 2, 104, 3, 104, 4, 104, 6, 104, 13, 104, 16, 104, 18, 104, 20, 104, 21, 104, 24, 104, 25, 104, 26, 104, 27, 104, 28, 104, 30, 104, 31, 104, 32, 104, 34, 104, 35, 104, 36, 104, 37, 104, 38, 104, 39, 104, 40, 104, 43, 104, 44, 104, 45, 104, 46, 104, 47, 104, 48, 104, 49, 104, 52, 104, 53, 104, 54, 104, 58, 104, 59, 104, 63, 104, 71, 104, 75, 104, 77, 104, 79, 104, 82, 104, 86, 104, 87, 104, 88, 104, 89, 104, 90, 104, 91, 104, 92, 104, 93, 104, 94, 104, 95, 104, 106, 104, 108, 104, 109, 104, 110, 104, 111, 104, 112, 104, 113, 104, 114, 104, 115, 104, 117, 104, 120, 104, 121, 104, 122, 104, 123, 104, 124, 104, 125, 104, 126, 104, 127, 104, 128, 104, 130, 104, 132, 104, 135, 104, 136, 104, 137, 104, 138, 104, 139, 104, 140, 104, 141, 104, 142, 104, 144, 104, 145, 104, 146, 104, 148, 104, 149, 104, 150, 104, 152, 104, 153, 104, 154, 104, 155, 104, 156, 104, 157, 104, 158, 104, 159, 104, 160, 104, 161, 104, 163, 104, 164, 104, 165, 104, 169, 104, 170, 104, 171, 104, 172, 104, 174, 104, 177, 104, 178, 104, 180, 104, 182, 104, 183, 104, 184, 104, 185, 104, 186, 104, 187, 104, 188, 104, 189, 104, 190, 104, 191, 104, 193, 104, 195, 104, 196, 104, 197, 104, 198, 104, 199, 104, 200, 104, 202, 104, 204, 104, 206, 104, 207, 104, 208, 104, 209, 104, 211, 104, 212, 104, 214, 104, 215, 104, 217, 104, 219, 104, 220, 104, 221, 104, 222, 104, 223, 104, 225, 104, 226, 104, 228, 104, 229, 104, 230, 104, 231, 104, 232, 104, 233, 104, 234, 104, 235, 104, 236, 104, 237, 104, 239, 104, 242, 104, 243, 104, 244, 104, 246, 104, 247, 104, 248, 104, 251, 104, 253, 104, 254, 104, 255, 104, 0, 105, 2, 105, 3, 105, 4, 105, 6, 105, 7, 105, 8, 105, 9, 105, 10, 105, 12, 105, 15, 105, 17, 105, 19, 105, 20, 105, 21, 105, 22, 105, 23, 105, 24, 105, 25, 105, 26, 105, 27, 105, 28, 105, 29, 105, 30, 105, 33, 105, 34, 105, 35, 105, 37, 105, 38, 105, 39, 105, 40, 105, 41, 105, 42, 105, 43, 105, 44, 105, 46, 105, 47, 105, 49, 105, 50, 105, 51, 105, 53, 105, 54, 105, 55, 105, 56, 105, 58, 105, 59, 105, 60, 105, 62, 105, 64, 105, 65, 105, 67, 105, 68, 105, 69, 105, 70, 105, 71, 105, 72, 105, 73, 105, 74, 105, 75, 105, 76, 105, 77, 105, 78, 105, 79, 105, 80, 105, 81, 105, 82, 105, 83, 105, 85, 105, 86, 105, 88, 105, 89, 105, 91, 105, 92, 105, 95, 105, 97, 105, 98, 105, 100, 105, 101, 105, 103, 105, 104, 105, 105, 105, 106, 105, 108, 105, 109, 105, 111, 105, 112, 105, 114, 105, 115, 105, 116, 105, 117, 105, 118, 105, 122, 105, 123, 105, 125, 105, 126, 105, 127, 105, 129, 105, 131, 105, 133, 105, 138, 105, 139, 105, 140, 105, 142, 105, 143, 105, 144, 105, 145, 105, 146, 105, 147, 105, 150, 105, 151, 105, 153, 105, 154, 105, 157, 105, 158, 105, 159, 105, 160, 105, 161, 105, 162, 105, 163, 105, 164, 105, 165, 105, 166, 105, 169, 105, 170, 105, 172, 105, 174, 105, 175, 105, 176, 105, 178, 105, 179, 105, 181, 105, 182, 105, 184, 105, 185, 105, 186, 105, 188, 105, 189, 105, 190, 105, 191, 105, 192, 105, 194, 105, 195, 105, 196, 105, 197, 105, 198, 105, 199, 105, 200, 105, 201, 105, 203, 105, 205, 105, 207, 105, 209, 105, 210, 105, 211, 105, 213, 105, 214, 105, 215, 105, 216, 105, 217, 105, 218, 105, 220, 105, 221, 105, 222, 105, 225, 105, 226, 105, 227, 105, 228, 105, 229, 105, 230, 105, 231, 105, 232, 105, 233, 105, 234, 105, 235, 105, 236, 105, 238, 105, 239, 105, 240, 105, 241, 105, 243, 105, 244, 105, 245, 105, 246, 105, 247, 105, 248, 105, 249, 105, 250, 105, 251, 105, 252, 105, 254, 105, 0, 106, 1, 106, 2, 106, 3, 106, 4, 106, 5, 106, 6, 106, 7, 106, 8, 106, 9, 106, 11, 106, 12, 106, 13, 106, 14, 106, 15, 106, 16, 106, 17, 106, 18, 106, 19, 106, 20, 106, 21, 106, 22, 106, 25, 106, 26, 106, 27, 106, 28, 106, 29, 106, 30, 106, 32, 106, 34, 106, 35, 106, 36, 106, 37, 106, 38, 106, 39, 106, 41, 106, 43, 106, 44, 106, 45, 106, 46, 106, 48, 106, 50, 106, 51, 106, 52, 106, 54, 106, 55, 106, 56, 106, 57, 106, 58, 106, 59, 106, 60, 106, 63, 106, 64, 106, 65, 106, 66, 106, 67, 106, 69, 106, 70, 106, 72, 106, 73, 106, 74, 106, 75, 106, 76, 106, 77, 106, 78, 106, 79, 106, 81, 106, 82, 106, 83, 106, 84, 106, 85, 106, 86, 106, 87, 106, 90, 106, 92, 106, 93, 106, 94, 106, 95, 106, 96, 106, 98, 106, 99, 106, 100, 106, 102, 106, 103, 106, 104, 106, 105, 106, 106, 106, 107, 106, 108, 106, 109, 106, 110, 106, 111, 106, 112, 106, 114, 106, 115, 106, 116, 106, 117, 106, 118, 106, 119, 106, 120, 106, 122, 106, 123, 106, 125, 106, 126, 106, 127, 106, 129, 106, 130, 106, 131, 106, 133, 106, 134, 106, 135, 106, 136, 106, 137, 106, 138, 106, 139, 106, 140, 106, 141, 106, 143, 106, 146, 106, 147, 106, 148, 106, 149, 106, 150, 106, 152, 106, 153, 106, 154, 106, 155, 106, 156, 106, 157, 106, 158, 106, 159, 106, 161, 106, 162, 106, 163, 106, 164, 106, 165, 106, 166, 106, 167, 106, 168, 106, 170, 106, 173, 106, 174, 106, 175, 106, 176, 106, 177, 106, 178, 106, 179, 106, 180, 106, 181, 106, 182, 106, 183, 106, 184, 106, 185, 106, 186, 106, 187, 106, 188, 106, 189, 106, 190, 106, 191, 106, 192, 106, 193, 106, 194, 106, 195, 106, 196, 106, 197, 106, 198, 106, 199, 106, 200, 106, 201, 106, 202, 106, 203, 106, 204, 106, 205, 106, 206, 106, 207, 106, 208, 106, 209, 106, 210, 106, 211, 106, 212, 106, 213, 106, 214, 106, 215, 106, 216, 106, 217, 106, 218, 106, 219, 106, 220, 106, 221, 106, 222, 106, 223, 106, 224, 106, 225, 106, 226, 106, 227, 106, 228, 106, 229, 106, 230, 106, 231, 106, 232, 106, 233, 106, 234, 106, 235, 106, 236, 106, 237, 106, 238, 106, 239, 106, 240, 106, 241, 106, 242, 106, 243, 106, 244, 106, 245, 106, 246, 106, 247, 106, 248, 106, 249, 106, 250, 106, 251, 106, 252, 106, 253, 106, 254, 106, 255, 106, 0, 107, 1, 107, 2, 107, 3, 107, 4, 107, 5, 107, 6, 107, 7, 107, 8, 107, 9, 107, 10, 107, 11, 107, 12, 107, 13, 107, 14, 107, 15, 107, 16, 107, 17, 107, 18, 107, 19, 107, 20, 107, 21, 107, 22, 107, 23, 107, 24, 107, 25, 107, 26, 107, 27, 107, 28, 107, 29, 107, 30, 107, 31, 107, 37, 107, 38, 107, 40, 107, 41, 107, 42, 107, 43, 107, 44, 107, 45, 107, 46, 107, 47, 107, 48, 107, 49, 107, 51, 107, 52, 107, 53, 107, 54, 107, 56, 107, 59, 107, 60, 107, 61, 107, 63, 107, 64, 107, 65, 107, 66, 107, 68, 107, 69, 107, 72, 107, 74, 107, 75, 107, 77, 107, 78, 107, 79, 107, 80, 107, 81, 107, 82, 107, 83, 107, 84, 107, 85, 107, 86, 107, 87, 107, 88, 107, 90, 107, 91, 107, 92, 107, 93, 107, 94, 107, 95, 107, 96, 107, 97, 107, 104, 107, 105, 107, 107, 107, 108, 107, 109, 107, 110, 107, 111, 107, 112, 107, 113, 107, 114, 107, 115, 107, 116, 107, 117, 107, 118, 107, 119, 107, 120, 107, 122, 107, 125, 107, 126, 107, 127, 107, 128, 107, 133, 107, 136, 107, 140, 107, 142, 107, 143, 107, 144, 107, 145, 107, 148, 107, 149, 107, 151, 107, 152, 107, 153, 107, 156, 107, 157, 107, 158, 107, 159, 107, 160, 107, 162, 107, 163, 107, 164, 107, 165, 107, 166, 107, 167, 107, 168, 107, 169, 107, 171, 107, 172, 107, 173, 107, 174, 107, 175, 107, 176, 107, 177, 107, 178, 107, 182, 107, 184, 107, 185, 107, 186, 107, 187, 107, 188, 107, 189, 107, 190, 107, 192, 107, 195, 107, 196, 107, 198, 107, 199, 107, 200, 107, 201, 107, 202, 107, 204, 107, 206, 107, 208, 107, 209, 107, 216, 107, 218, 107, 220, 107, 221, 107, 222, 107, 223, 107, 224, 107, 226, 107, 227, 107, 228, 107, 229, 107, 230, 107, 231, 107, 232, 107, 233, 107, 236, 107, 237, 107, 238, 107, 240, 107, 241, 107, 242, 107, 244, 107, 246, 107, 247, 107, 248, 107, 250, 107, 251, 107, 252, 107, 254, 107, 255, 107, 0, 108, 1, 108, 2, 108, 3, 108, 4, 108, 8, 108, 9, 108, 10, 108, 11, 108, 12, 108, 14, 108, 18, 108, 23, 108, 28, 108, 29, 108, 30, 108, 32, 108, 35, 108, 37, 108, 43, 108, 44, 108, 45, 108, 49, 108, 51, 108, 54, 108, 55, 108, 57, 108, 58, 108, 59, 108, 60, 108, 62, 108, 63, 108, 67, 108, 68, 108, 69, 108, 72, 108, 75, 108, 76, 108, 77, 108, 78, 108, 79, 108, 81, 108, 82, 108, 83, 108, 86, 108, 88, 108, 89, 108, 90, 108, 98, 108, 99, 108, 101, 108, 102, 108, 103, 108, 107, 108, 108, 108, 109, 108, 110, 108, 111, 108, 113, 108, 115, 108, 117, 108, 119, 108, 120, 108, 122, 108, 123, 108, 124, 108, 127, 108, 128, 108, 132, 108, 135, 108, 138, 108, 139, 108, 141, 108, 142, 108, 145, 108, 146, 108, 149, 108, 150, 108, 151, 108, 152, 108, 154, 108, 156, 108, 157, 108, 158, 108, 160, 108, 162, 108, 168, 108, 172, 108, 175, 108, 176, 108, 180, 108, 181, 108, 182, 108, 183, 108, 186, 108, 192, 108, 193, 108, 194, 108, 195, 108, 198, 108, 199, 108, 200, 108, 203, 108, 205, 108, 206, 108, 207, 108, 209, 108, 210, 108, 216, 108, 217, 108, 218, 108, 220, 108, 221, 108, 223, 108, 228, 108, 230, 108, 231, 108, 233, 108, 236, 108, 237, 108, 242, 108, 244, 108, 249, 108, 255, 108, 0, 109, 2, 109, 3, 109, 5, 109, 6, 109, 8, 109, 9, 109, 10, 109, 13, 109, 15, 109, 16, 109, 17, 109, 19, 109, 20, 109, 21, 109, 22, 109, 24, 109, 28, 109, 29, 109, 31, 109, 32, 109, 33, 109, 34, 109, 35, 109, 36, 109, 38, 109, 40, 109, 41, 109, 44, 109, 45, 109, 47, 109, 48, 109, 52, 109, 54, 109, 55, 109, 56, 109, 58, 109, 63, 109, 64, 109, 66, 109, 68, 109, 73, 109, 76, 109, 80, 109, 85, 109, 86, 109, 87, 109, 88, 109, 91, 109, 93, 109, 95, 109, 97, 109, 98, 109, 100, 109, 101, 109, 103, 109, 104, 109, 107, 109, 108, 109, 109, 109, 112, 109, 113, 109, 114, 109, 115, 109, 117, 109, 118, 109, 121, 109, 122, 109, 123, 109, 125, 109, 126, 109, 127, 109, 128, 109, 129, 109, 131, 109, 132, 109, 134, 109, 135, 109, 138, 109, 139, 109, 141, 109, 143, 109, 144, 109, 146, 109, 150, 109, 151, 109, 152, 109, 153, 109, 154, 109, 156, 109, 162, 109, 165, 109, 172, 109, 173, 109, 176, 109, 177, 109, 179, 109, 180, 109, 182, 109, 183, 109, 185, 109, 186, 109, 187, 109, 188, 109, 189, 109, 190, 109, 193, 109, 194, 109, 195, 109, 200, 109, 201, 109, 202, 109, 205, 109, 206, 109, 207, 109, 208, 109, 210, 109, 211, 109, 212, 109, 213, 109, 215, 109, 218, 109, 219, 109, 220, 109, 223, 109, 226, 109, 227, 109, 229, 109, 231, 109, 232, 109, 233, 109, 234, 109, 237, 109, 239, 109, 240, 109, 242, 109, 244, 109, 245, 109, 246, 109, 248, 109, 250, 109, 253, 109, 254, 109, 255, 109, 0, 110, 1, 110, 2, 110, 3, 110, 4, 110, 6, 110, 7, 110, 8, 110, 9, 110, 11, 110, 15, 110, 18, 110, 19, 110, 21, 110, 24, 110, 25, 110, 27, 110, 28, 110, 30, 110, 31, 110, 34, 110, 38, 110, 39, 110, 40, 110, 42, 110, 44, 110, 46, 110, 48, 110, 49, 110, 51, 110, 53, 110, 54, 110, 55, 110, 57, 110, 59, 110, 60, 110, 61, 110, 62, 110, 63, 110, 64, 110, 65, 110, 66, 110, 69, 110, 70, 110, 71, 110, 72, 110, 73, 110, 74, 110, 75, 110, 76, 110, 79, 110, 80, 110, 81, 110, 82, 110, 85, 110, 87, 110, 89, 110, 90, 110, 92, 110, 93, 110, 94, 110, 96, 110, 97, 110, 98, 110, 99, 110, 100, 110, 101, 110, 102, 110, 103, 110, 104, 110, 105, 110, 106, 110, 108, 110, 109, 110, 111, 110, 112, 110, 113, 110, 114, 110, 115, 110, 116, 110, 117, 110, 118, 110, 119, 110, 120, 110, 121, 110, 122, 110, 123, 110, 124, 110, 125, 110, 128, 110, 129, 110, 130, 110, 132, 110, 135, 110, 136, 110, 138, 110, 139, 110, 140, 110, 141, 110, 142, 110, 145, 110, 146, 110, 147, 110, 148, 110, 149, 110, 150, 110, 151, 110, 153, 110, 154, 110, 155, 110, 157, 110, 158, 110, 160, 110, 161, 110, 163, 110, 164, 110, 166, 110, 168, 110, 169, 110, 171, 110, 172, 110, 173, 110, 174, 110, 176, 110, 179, 110, 181, 110, 184, 110, 185, 110, 188, 110, 190, 110, 191, 110, 192, 110, 195, 110, 196, 110, 197, 110, 198, 110, 200, 110, 201, 110, 202, 110, 204, 110, 205, 110, 206, 110, 208, 110, 210, 110, 214, 110, 216, 110, 217, 110, 219, 110, 220, 110, 221, 110, 227, 110, 231, 110, 234, 110, 235, 110, 236, 110, 237, 110, 238, 110, 239, 110, 240, 110, 241, 110, 242, 110, 243, 110, 245, 110, 246, 110, 247, 110, 248, 110, 250, 110, 251, 110, 252, 110, 253, 110, 254, 110, 255, 110, 0, 111, 1, 111, 3, 111, 4, 111, 5, 111, 7, 111, 8, 111, 10, 111, 11, 111, 12, 111, 13, 111, 14, 111, 16, 111, 17, 111, 18, 111, 22, 111, 23, 111, 24, 111, 25, 111, 26, 111, 27, 111, 28, 111, 29, 111, 30, 111, 31, 111, 33, 111, 34, 111, 35, 111, 37, 111, 38, 111, 39, 111, 40, 111, 44, 111, 46, 111, 48, 111, 50, 111, 52, 111, 53, 111, 55, 111, 56, 111, 57, 111, 58, 111, 59, 111, 60, 111, 61, 111, 63, 111, 64, 111, 65, 111, 66, 111, 67, 111, 68, 111, 69, 111, 72, 111, 73, 111, 74, 111, 76, 111, 78, 111, 79, 111, 80, 111, 81, 111, 82, 111, 83, 111, 84, 111, 85, 111, 86, 111, 87, 111, 89, 111, 90, 111, 91, 111, 93, 111, 95, 111, 96, 111, 97, 111, 99, 111, 100, 111, 101, 111, 103, 111, 104, 111, 105, 111, 106, 111, 107, 111, 108, 111, 111, 111, 112, 111, 113, 111, 115, 111, 117, 111, 118, 111, 119, 111, 121, 111, 123, 111, 125, 111, 126, 111, 127, 111, 128, 111, 129, 111, 130, 111, 131, 111, 133, 111, 134, 111, 135, 111, 138, 111, 139, 111, 143, 111, 144, 111, 145, 111, 146, 111, 147, 111, 148, 111, 149, 111, 150, 111, 151, 111, 152, 111, 153, 111, 154, 111, 155, 111, 157, 111, 158, 111, 159, 111, 160, 111, 162, 111, 163, 111, 164, 111, 165, 111, 166, 111, 168, 111, 169, 111, 170, 111, 171, 111, 172, 111, 173, 111, 174, 111, 175, 111, 176, 111, 177, 111, 178, 111, 180, 111, 181, 111, 183, 111, 184, 111, 186, 111, 187, 111, 188, 111, 189, 111, 190, 111, 191, 111, 193, 111, 195, 111, 196, 111, 197, 111, 198, 111, 199, 111, 200, 111, 202, 111, 203, 111, 204, 111, 205, 111, 206, 111, 207, 111, 208, 111, 211, 111, 212, 111, 213, 111, 214, 111, 215, 111, 216, 111, 217, 111, 218, 111, 219, 111, 220, 111, 221, 111, 223, 111, 226, 111, 227, 111, 228, 111, 229, 111, 230, 111, 231, 111, 232, 111, 233, 111, 234, 111, 235, 111, 236, 111, 237, 111, 240, 111, 241, 111, 242, 111, 243, 111, 244, 111, 245, 111, 246, 111, 247, 111, 248, 111, 249, 111, 250, 111, 251, 111, 252, 111, 253, 111, 254, 111, 255, 111, 0, 112, 1, 112, 2, 112, 3, 112, 4, 112, 5, 112, 6, 112, 7, 112, 8, 112, 9, 112, 10, 112, 11, 112, 12, 112, 13, 112, 14, 112, 15, 112, 16, 112, 18, 112, 19, 112, 20, 112, 21, 112, 22, 112, 23, 112, 24, 112, 25, 112, 28, 112, 29, 112, 30, 112, 31, 112, 32, 112, 33, 112, 34, 112, 36, 112, 37, 112, 38, 112, 39, 112, 40, 112, 41, 112, 42, 112, 43, 112, 44, 112, 45, 112, 46, 112, 47, 112, 48, 112, 49, 112, 50, 112, 51, 112, 52, 112, 54, 112, 55, 112, 56, 112, 58, 112, 59, 112, 60, 112, 61, 112, 62, 112, 63, 112, 64, 112, 65, 112, 66, 112, 67, 112, 68, 112, 69, 112, 70, 112, 71, 112, 72, 112, 73, 112, 74, 112, 75, 112, 77, 112, 78, 112, 80, 112, 81, 112, 82, 112, 83, 112, 84, 112, 85, 112, 86, 112, 87, 112, 88, 112, 89, 112, 90, 112, 91, 112, 92, 112, 93, 112, 95, 112, 96, 112, 97, 112, 98, 112, 99, 112, 100, 112, 101, 112, 102, 112, 103, 112, 104, 112, 105, 112, 106, 112, 110, 112, 113, 112, 114, 112, 115, 112, 116, 112, 119, 112, 121, 112, 122, 112, 123, 112, 125, 112, 129, 112, 130, 112, 131, 112, 132, 112, 134, 112, 135, 112, 136, 112, 139, 112, 140, 112, 141, 112, 143, 112, 144, 112, 145, 112, 147, 112, 151, 112, 152, 112, 154, 112, 155, 112, 158, 112, 159, 112, 160, 112, 161, 112, 162, 112, 163, 112, 164, 112, 165, 112, 166, 112, 167, 112, 168, 112, 169, 112, 170, 112, 176, 112, 178, 112, 180, 112, 181, 112, 182, 112, 186, 112, 190, 112, 191, 112, 196, 112, 197, 112, 198, 112, 199, 112, 201, 112, 203, 112, 204, 112, 205, 112, 206, 112, 207, 112, 208, 112, 209, 112, 210, 112, 211, 112, 212, 112, 213, 112, 214, 112, 215, 112, 218, 112, 220, 112, 221, 112, 222, 112, 224, 112, 225, 112, 226, 112, 227, 112, 229, 112, 234, 112, 238, 112, 240, 112, 241, 112, 242, 112, 243, 112, 244, 112, 245, 112, 246, 112, 248, 112, 250, 112, 251, 112, 252, 112, 254, 112, 255, 112, 0, 113, 1, 113, 2, 113, 3, 113, 4, 113, 5, 113, 6, 113, 7, 113, 8, 113, 11, 113, 12, 113, 13, 113, 14, 113, 15, 113, 17, 113, 18, 113, 20, 113, 23, 113, 27, 113, 28, 113, 29, 113, 30, 113, 31, 113, 32, 113, 33, 113, 34, 113, 35, 113, 36, 113, 37, 113, 39, 113, 40, 113, 41, 113, 42, 113, 43, 113, 44, 113, 45, 113, 46, 113, 50, 113, 51, 113, 52, 113, 53, 113, 55, 113, 56, 113, 57, 113, 58, 113, 59, 113, 60, 113, 61, 113, 62, 113, 63, 113, 64, 113, 65, 113, 66, 113, 67, 113, 68, 113, 70, 113, 71, 113, 72, 113, 73, 113, 75, 113, 77, 113, 79, 113, 80, 113, 81, 113, 82, 113, 83, 113, 84, 113, 85, 113, 86, 113, 87, 113, 88, 113, 89, 113, 90, 113, 91, 113, 93, 113, 95, 113, 96, 113, 97, 113, 98, 113, 99, 113, 101, 113, 105, 113, 106, 113, 107, 113, 108, 113, 109, 113, 111, 113, 112, 113, 113, 113, 116, 113, 117, 113, 118, 113, 119, 113, 121, 113, 123, 113, 124, 113, 126, 113, 127, 113, 128, 113, 129, 113, 130, 113, 131, 113, 133, 113, 134, 113, 135, 113, 136, 113, 137, 113, 139, 113, 140, 113, 141, 113, 142, 113, 144, 113, 145, 113, 146, 113, 147, 113, 149, 113, 150, 113, 151, 113, 154, 113, 155, 113, 156, 113, 157, 113, 158, 113, 161, 113, 162, 113, 163, 113, 164, 113, 165, 113, 166, 113, 167, 113, 169, 113, 170, 113, 171, 113, 173, 113, 174, 113, 175, 113, 176, 113, 177, 113, 178, 113, 180, 113, 182, 113, 183, 113, 184, 113, 186, 113, 187, 113, 188, 113, 189, 113, 190, 113, 191, 113, 192, 113, 193, 113, 194, 113, 196, 113, 197, 113, 198, 113, 199, 113, 200, 113, 201, 113, 202, 113, 203, 113, 204, 113, 205, 113, 207, 113, 208, 113, 209, 113, 210, 113, 211, 113, 214, 113, 215, 113, 216, 113, 217, 113, 218, 113, 219, 113, 220, 113, 221, 113, 222, 113, 223, 113, 225, 113, 226, 113, 227, 113, 228, 113, 230, 113, 232, 113, 233, 113, 234, 113, 235, 113, 236, 113, 237, 113, 239, 113, 240, 113, 241, 113, 242, 113, 243, 113, 244, 113, 245, 113, 246, 113, 247, 113, 248, 113, 250, 113, 251, 113, 252, 113, 253, 113, 254, 113, 255, 113, 0, 114, 1, 114, 2, 114, 3, 114, 4, 114, 5, 114, 7, 114, 8, 114, 9, 114, 10, 114, 11, 114, 12, 114, 13, 114, 14, 114, 15, 114, 16, 114, 17, 114, 18, 114, 19, 114, 20, 114, 21, 114, 22, 114, 23, 114, 24, 114, 25, 114, 26, 114, 27, 114, 28, 114, 30, 114, 31, 114, 32, 114, 33, 114, 34, 114, 35, 114, 36, 114, 37, 114, 38, 114, 39, 114, 41, 114, 43, 114, 45, 114, 46, 114, 47, 114, 50, 114, 51, 114, 52, 114, 58, 114, 60, 114, 62, 114, 64, 114, 65, 114, 66, 114, 67, 114, 68, 114, 69, 114, 70, 114, 73, 114, 74, 114, 75, 114, 78, 114, 79, 114, 80, 114, 81, 114, 83, 114, 84, 114, 85, 114, 87, 114, 88, 114, 90, 114, 92, 114, 94, 114, 96, 114, 99, 114, 100, 114, 101, 114, 104, 114, 106, 114, 107, 114, 108, 114, 109, 114, 112, 114, 113, 114, 115, 114, 116, 114, 118, 114, 119, 114, 120, 114, 123, 114, 124, 114, 125, 114, 130, 114, 131, 114, 133, 114, 134, 114, 135, 114, 136, 114, 137, 114, 140, 114, 142, 114, 144, 114, 145, 114, 147, 114, 148, 114, 149, 114, 150, 114, 151, 114, 152, 114, 153, 114, 154, 114, 155, 114, 156, 114, 157, 114, 158, 114, 160, 114, 161, 114, 162, 114, 163, 114, 164, 114, 165, 114, 166, 114, 167, 114, 168, 114, 169, 114, 170, 114, 171, 114, 174, 114, 177, 114, 178, 114, 179, 114, 181, 114, 186, 114, 187, 114, 188, 114, 189, 114, 190, 114, 191, 114, 192, 114, 197, 114, 198, 114, 199, 114, 201, 114, 202, 114, 203, 114, 204, 114, 207, 114, 209, 114, 211, 114, 212, 114, 213, 114, 214, 114, 216, 114, 218, 114, 219, 114, 198, 228, 199, 228, 200, 228, 201, 228, 202, 228, 203, 228, 204, 228, 205, 228, 206, 228, 207, 228, 208, 228, 209, 228, 210, 228, 211, 228, 212, 228, 213, 228, 214, 228, 215, 228, 216, 228, 217, 228, 218, 228, 219, 228, 220, 228, 221, 228, 222, 228, 223, 228, 224, 228, 225, 228, 226, 228, 227, 228, 228, 228, 229, 228, 230, 228, 231, 228, 232, 228, 233, 228, 234, 228, 235, 228, 236, 228, 237, 228, 238, 228, 239, 228, 240, 228, 241, 228, 242, 228, 243, 228, 244, 228, 245, 228, 246, 228, 247, 228, 248, 228, 249, 228, 250, 228, 251, 228, 252, 228, 253, 228, 254, 228, 255, 228, 0, 229, 1, 229, 2, 229, 3, 229, 4, 229, 5, 229, 6, 229, 7, 229, 8, 229, 9, 229, 10, 229, 11, 229, 12, 229, 13, 229, 14, 229, 15, 229, 16, 229, 17, 229, 18, 229, 19, 229, 20, 229, 21, 229, 22, 229, 23, 229, 24, 229, 25, 229, 26, 229, 27, 229, 28, 229, 29, 229, 30, 229, 31, 229, 32, 229, 33, 229, 34, 229, 35, 229, 36, 229, 37, 229, 0, 48, 1, 48, 2, 48, 183, 0, 201, 2, 199, 2, 168, 0, 3, 48, 5, 48, 20, 32, 94, 255, 22, 32, 38, 32, 24, 32, 25, 32, 28, 32, 29, 32, 20, 48, 21, 48, 8, 48, 9, 48, 10, 48, 11, 48, 12, 48, 13, 48, 14, 48, 15, 48, 22, 48, 23, 48, 16, 48, 17, 48, 177, 0, 215, 0, 247, 0, 54, 34, 39, 34, 40, 34, 17, 34, 15, 34, 42, 34, 41, 34, 8, 34, 55, 34, 26, 34, 165, 34, 37, 34, 32, 34, 18, 35, 153, 34, 43, 34, 46, 34, 97, 34, 76, 34, 72, 34, 61, 34, 29, 34, 96, 34, 110, 34, 111, 34, 100, 34, 101, 34, 30, 34, 53, 34, 52, 34, 66, 38, 64, 38, 176, 0, 50, 32, 51, 32, 3, 33, 4, 255, 164, 0, 224, 255, 225, 255, 48, 32, 167, 0, 22, 33, 6, 38, 5, 38, 203, 37, 207, 37, 206, 37, 199, 37, 198, 37, 161, 37, 160, 37, 179, 37, 178, 37, 59, 32, 146, 33, 144, 33, 145, 33, 147, 33, 19, 48, 38, 229, 39, 229, 40, 229, 41, 229, 42, 229, 43, 229, 44, 229, 45, 229, 46, 229, 47, 229, 48, 229, 49, 229, 50, 229, 51, 229, 52, 229, 53, 229, 54, 229, 55, 229, 56, 229, 57, 229, 58, 229, 59, 229, 60, 229, 61, 229, 62, 229, 63, 229, 64, 229, 65, 229, 66, 229, 67, 229, 68, 229, 69, 229, 70, 229, 71, 229, 72, 229, 73, 229, 74, 229, 75, 229, 76, 229, 77, 229, 78, 229, 79, 229, 80, 229, 81, 229, 82, 229, 83, 229, 84, 229, 85, 229, 86, 229, 87, 229, 88, 229, 89, 229, 90, 229, 91, 229, 92, 229, 93, 229, 94, 229, 95, 229, 96, 229, 97, 229, 98, 229, 99, 229, 100, 229, 101, 229, 102, 229, 103, 229, 104, 229, 105, 229, 106, 229, 107, 229, 108, 229, 109, 229, 110, 229, 111, 229, 112, 229, 113, 229, 114, 229, 115, 229, 116, 229, 117, 229, 118, 229, 119, 229, 120, 229, 121, 229, 122, 229, 123, 229, 124, 229, 125, 229, 126, 229, 127, 229, 128, 229, 129, 229, 130, 229, 131, 229, 132, 229, 133, 229, 112, 33, 113, 33, 114, 33, 115, 33, 116, 33, 117, 33, 118, 33, 119, 33, 120, 33, 121, 33, 102, 231, 103, 231, 104, 231, 105, 231, 106, 231, 107, 231, 136, 36, 137, 36, 138, 36, 139, 36, 140, 36, 141, 36, 142, 36, 143, 36, 144, 36, 145, 36, 146, 36, 147, 36, 148, 36, 149, 36, 150, 36, 151, 36, 152, 36, 153, 36, 154, 36, 155, 36, 116, 36, 117, 36, 118, 36, 119, 36, 120, 36, 121, 36, 122, 36, 123, 36, 124, 36, 125, 36, 126, 36, 127, 36, 128, 36, 129, 36, 130, 36, 131, 36, 132, 36, 133, 36, 134, 36, 135, 36, 96, 36, 97, 36, 98, 36, 99, 36, 100, 36, 101, 36, 102, 36, 103, 36, 104, 36, 105, 36, 172, 32, 109, 231, 32, 50, 33, 50, 34, 50, 35, 50, 36, 50, 37, 50, 38, 50, 39, 50, 40, 50, 41, 50, 110, 231, 111, 231, 96, 33, 97, 33, 98, 33, 99, 33, 100, 33, 101, 33, 102, 33, 103, 33, 104, 33, 105, 33, 106, 33, 107, 33, 112, 231, 113, 231, 134, 229, 135, 229, 136, 229, 137, 229, 138, 229, 139, 229, 140, 229, 141, 229, 142, 229, 143, 229, 144, 229, 145, 229, 146, 229, 147, 229, 148, 229, 149, 229, 150, 229, 151, 229, 152, 229, 153, 229, 154, 229, 155, 229, 156, 229, 157, 229, 158, 229, 159, 229, 160, 229, 161, 229, 162, 229, 163, 229, 164, 229, 165, 229, 166, 229, 167, 229, 168, 229, 169, 229, 170, 229, 171, 229, 172, 229, 173, 229, 174, 229, 175, 229, 176, 229, 177, 229, 178, 229, 179, 229, 180, 229, 181, 229, 182, 229, 183, 229, 184, 229, 185, 229, 186, 229, 187, 229, 188, 229, 189, 229, 190, 229, 191, 229, 192, 229, 193, 229, 194, 229, 195, 229, 196, 229, 197, 229, 198, 229, 199, 229, 200, 229, 201, 229, 202, 229, 203, 229, 204, 229, 205, 229, 206, 229, 207, 229, 208, 229, 209, 229, 210, 229, 211, 229, 212, 229, 213, 229, 214, 229, 215, 229, 216, 229, 217, 229, 218, 229, 219, 229, 220, 229, 221, 229, 222, 229, 223, 229, 224, 229, 225, 229, 226, 229, 227, 229, 228, 229, 229, 229, 1, 255, 2, 255, 3, 255, 229, 255, 5, 255, 6, 255, 7, 255, 8, 255, 9, 255, 10, 255, 11, 255, 12, 255, 13, 255, 14, 255, 15, 255, 16, 255, 17, 255, 18, 255, 19, 255, 20, 255, 21, 255, 22, 255, 23, 255, 24, 255, 25, 255, 26, 255, 27, 255, 28, 255, 29, 255, 30, 255, 31, 255, 32, 255, 33, 255, 34, 255, 35, 255, 36, 255, 37, 255, 38, 255, 39, 255, 40, 255, 41, 255, 42, 255, 43, 255, 44, 255, 45, 255, 46, 255, 47, 255, 48, 255, 49, 255, 50, 255, 51, 255, 52, 255, 53, 255, 54, 255, 55, 255, 56, 255, 57, 255, 58, 255, 59, 255, 60, 255, 61, 255, 62, 255, 63, 255, 64, 255, 65, 255, 66, 255, 67, 255, 68, 255, 69, 255, 70, 255, 71, 255, 72, 255, 73, 255, 74, 255, 75, 255, 76, 255, 77, 255, 78, 255, 79, 255, 80, 255, 81, 255, 82, 255, 83, 255, 84, 255, 85, 255, 86, 255, 87, 255, 88, 255, 89, 255, 90, 255, 91, 255, 92, 255, 93, 255, 227, 255, 230, 229, 231, 229, 232, 229, 233, 229, 234, 229, 235, 229, 236, 229, 237, 229, 238, 229, 239, 229, 240, 229, 241, 229, 242, 229, 243, 229, 244, 229, 245, 229, 246, 229, 247, 229, 248, 229, 249, 229, 250, 229, 251, 229, 252, 229, 253, 229, 254, 229, 255, 229, 0, 230, 1, 230, 2, 230, 3, 230, 4, 230, 5, 230, 6, 230, 7, 230, 8, 230, 9, 230, 10, 230, 11, 230, 12, 230, 13, 230, 14, 230, 15, 230, 16, 230, 17, 230, 18, 230, 19, 230, 20, 230, 21, 230, 22, 230, 23, 230, 24, 230, 25, 230, 26, 230, 27, 230, 28, 230, 29, 230, 30, 230, 31, 230, 32, 230, 33, 230, 34, 230, 35, 230, 36, 230, 37, 230, 38, 230, 39, 230, 40, 230, 41, 230, 42, 230, 43, 230, 44, 230, 45, 230, 46, 230, 47, 230, 48, 230, 49, 230, 50, 230, 51, 230, 52, 230, 53, 230, 54, 230, 55, 230, 56, 230, 57, 230, 58, 230, 59, 230, 60, 230, 61, 230, 62, 230, 63, 230, 64, 230, 65, 230, 66, 230, 67, 230, 68, 230, 69, 230, 65, 48, 66, 48, 67, 48, 68, 48, 69, 48, 70, 48, 71, 48, 72, 48, 73, 48, 74, 48, 75, 48, 76, 48, 77, 48, 78, 48, 79, 48, 80, 48, 81, 48, 82, 48, 83, 48, 84, 48, 85, 48, 86, 48, 87, 48, 88, 48, 89, 48, 90, 48, 91, 48, 92, 48, 93, 48, 94, 48, 95, 48, 96, 48, 97, 48, 98, 48, 99, 48, 100, 48, 101, 48, 102, 48, 103, 48, 104, 48, 105, 48, 106, 48, 107, 48, 108, 48, 109, 48, 110, 48, 111, 48, 112, 48, 113, 48, 114, 48, 115, 48, 116, 48, 117, 48, 118, 48, 119, 48, 120, 48, 121, 48, 122, 48, 123, 48, 124, 48, 125, 48, 126, 48, 127, 48, 128, 48, 129, 48, 130, 48, 131, 48, 132, 48, 133, 48, 134, 48, 135, 48, 136, 48, 137, 48, 138, 48, 139, 48, 140, 48, 141, 48, 142, 48, 143, 48, 144, 48, 145, 48, 146, 48, 147, 48, 114, 231, 115, 231, 116, 231, 117, 231, 118, 231, 119, 231, 120, 231, 121, 231, 122, 231, 123, 231, 124, 231, 70, 230, 71, 230, 72, 230, 73, 230, 74, 230, 75, 230, 76, 230, 77, 230, 78, 230, 79, 230, 80, 230, 81, 230, 82, 230, 83, 230, 84, 230, 85, 230, 86, 230, 87, 230, 88, 230, 89, 230, 90, 230, 91, 230, 92, 230, 93, 230, 94, 230, 95, 230, 96, 230, 97, 230, 98, 230, 99, 230, 100, 230, 101, 230, 102, 230, 103, 230, 104, 230, 105, 230, 106, 230, 107, 230, 108, 230, 109, 230, 110, 230, 111, 230, 112, 230, 113, 230, 114, 230, 115, 230, 116, 230, 117, 230, 118, 230, 119, 230, 120, 230, 121, 230, 122, 230, 123, 230, 124, 230, 125, 230, 126, 230, 127, 230, 128, 230, 129, 230, 130, 230, 131, 230, 132, 230, 133, 230, 134, 230, 135, 230, 136, 230, 137, 230, 138, 230, 139, 230, 140, 230, 141, 230, 142, 230, 143, 230, 144, 230, 145, 230, 146, 230, 147, 230, 148, 230, 149, 230, 150, 230, 151, 230, 152, 230, 153, 230, 154, 230, 155, 230, 156, 230, 157, 230, 158, 230, 159, 230, 160, 230, 161, 230, 162, 230, 163, 230, 164, 230, 165, 230, 161, 48, 162, 48, 163, 48, 164, 48, 165, 48, 166, 48, 167, 48, 168, 48, 169, 48, 170, 48, 171, 48, 172, 48, 173, 48, 174, 48, 175, 48, 176, 48, 177, 48, 178, 48, 179, 48, 180, 48, 181, 48, 182, 48, 183, 48, 184, 48, 185, 48, 186, 48, 187, 48, 188, 48, 189, 48, 190, 48, 191, 48, 192, 48, 193, 48, 194, 48, 195, 48, 196, 48, 197, 48, 198, 48, 199, 48, 200, 48, 201, 48, 202, 48, 203, 48, 204, 48, 205, 48, 206, 48, 207, 48, 208, 48, 209, 48, 210, 48, 211, 48, 212, 48, 213, 48, 214, 48, 215, 48, 216, 48, 217, 48, 218, 48, 219, 48, 220, 48, 221, 48, 222, 48, 223, 48, 224, 48, 225, 48, 226, 48, 227, 48, 228, 48, 229, 48, 230, 48, 231, 48, 232, 48, 233, 48, 234, 48, 235, 48, 236, 48, 237, 48, 238, 48, 239, 48, 240, 48, 241, 48, 242, 48, 243, 48, 244, 48, 245, 48, 246, 48, 125, 231, 126, 231, 127, 231, 128, 231, 129, 231, 130, 231, 131, 231, 132, 231, 166, 230, 167, 230, 168, 230, 169, 230, 170, 230, 171, 230, 172, 230, 173, 230, 174, 230, 175, 230, 176, 230, 177, 230, 178, 230, 179, 230, 180, 230, 181, 230, 182, 230, 183, 230, 184, 230, 185, 230, 186, 230, 187, 230, 188, 230, 189, 230, 190, 230, 191, 230, 192, 230, 193, 230, 194, 230, 195, 230, 196, 230, 197, 230, 198, 230, 199, 230, 200, 230, 201, 230, 202, 230, 203, 230, 204, 230, 205, 230, 206, 230, 207, 230, 208, 230, 209, 230, 210, 230, 211, 230, 212, 230, 213, 230, 214, 230, 215, 230, 216, 230, 217, 230, 218, 230, 219, 230, 220, 230, 221, 230, 222, 230, 223, 230, 224, 230, 225, 230, 226, 230, 227, 230, 228, 230, 229, 230, 230, 230, 231, 230, 232, 230, 233, 230, 234, 230, 235, 230, 236, 230, 237, 230, 238, 230, 239, 230, 240, 230, 241, 230, 242, 230, 243, 230, 244, 230, 245, 230, 246, 230, 247, 230, 248, 230, 249, 230, 250, 230, 251, 230, 252, 230, 253, 230, 254, 230, 255, 230, 0, 231, 1, 231, 2, 231, 3, 231, 4, 231, 5, 231, 145, 3, 146, 3, 147, 3, 148, 3, 149, 3, 150, 3, 151, 3, 152, 3, 153, 3, 154, 3, 155, 3, 156, 3, 157, 3, 158, 3, 159, 3, 160, 3, 161, 3, 163, 3, 164, 3, 165, 3, 166, 3, 167, 3, 168, 3, 169, 3, 133, 231, 134, 231, 135, 231, 136, 231, 137, 231, 138, 231, 139, 231, 140, 231, 177, 3, 178, 3, 179, 3, 180, 3, 181, 3, 182, 3, 183, 3, 184, 3, 185, 3, 186, 3, 187, 3, 188, 3, 189, 3, 190, 3, 191, 3, 192, 3, 193, 3, 195, 3, 196, 3, 197, 3, 198, 3, 199, 3, 200, 3, 201, 3, 141, 231, 142, 231, 143, 231, 144, 231, 145, 231, 146, 231, 147, 231, 53, 254, 54, 254, 57, 254, 58, 254, 63, 254, 64, 254, 61, 254, 62, 254, 65, 254, 66, 254, 67, 254, 68, 254, 148, 231, 149, 231, 59, 254, 60, 254, 55, 254, 56, 254, 49, 254, 150, 231, 51, 254, 52, 254, 151, 231, 152, 231, 153, 231, 154, 231, 155, 231, 156, 231, 157, 231, 158, 231, 159, 231, 6, 231, 7, 231, 8, 231, 9, 231, 10, 231, 11, 231, 12, 231, 13, 231, 14, 231, 15, 231, 16, 231, 17, 231, 18, 231, 19, 231, 20, 231, 21, 231, 22, 231, 23, 231, 24, 231, 25, 231, 26, 231, 27, 231, 28, 231, 29, 231, 30, 231, 31, 231, 32, 231, 33, 231, 34, 231, 35, 231, 36, 231, 37, 231, 38, 231, 39, 231, 40, 231, 41, 231, 42, 231, 43, 231, 44, 231, 45, 231, 46, 231, 47, 231, 48, 231, 49, 231, 50, 231, 51, 231, 52, 231, 53, 231, 54, 231, 55, 231, 56, 231, 57, 231, 58, 231, 59, 231, 60, 231, 61, 231, 62, 231, 63, 231, 64, 231, 65, 231, 66, 231, 67, 231, 68, 231, 69, 231, 70, 231, 71, 231, 72, 231, 73, 231, 74, 231, 75, 231, 76, 231, 77, 231, 78, 231, 79, 231, 80, 231, 81, 231, 82, 231, 83, 231, 84, 231, 85, 231, 86, 231, 87, 231, 88, 231, 89, 231, 90, 231, 91, 231, 92, 231, 93, 231, 94, 231, 95, 231, 96, 231, 97, 231, 98, 231, 99, 231, 100, 231, 101, 231, 16, 4, 17, 4, 18, 4, 19, 4, 20, 4, 21, 4, 1, 4, 22, 4, 23, 4, 24, 4, 25, 4, 26, 4, 27, 4, 28, 4, 29, 4, 30, 4, 31, 4, 32, 4, 33, 4, 34, 4, 35, 4, 36, 4, 37, 4, 38, 4, 39, 4, 40, 4, 41, 4, 42, 4, 43, 4, 44, 4, 45, 4, 46, 4, 47, 4, 160, 231, 161, 231, 162, 231, 163, 231, 164, 231, 165, 231, 166, 231, 167, 231, 168, 231, 169, 231, 170, 231, 171, 231, 172, 231, 173, 231, 174, 231, 48, 4, 49, 4, 50, 4, 51, 4, 52, 4, 53, 4, 81, 4, 54, 4, 55, 4, 56, 4, 57, 4, 58, 4, 59, 4, 60, 4, 61, 4, 62, 4, 63, 4, 64, 4, 65, 4, 66, 4, 67, 4, 68, 4, 69, 4, 70, 4, 71, 4, 72, 4, 73, 4, 74, 4, 75, 4, 76, 4, 77, 4, 78, 4, 79, 4, 175, 231, 176, 231, 177, 231, 178, 231, 179, 231, 180, 231, 181, 231, 182, 231, 183, 231, 184, 231, 185, 231, 186, 231, 187, 231, 202, 2, 203, 2, 217, 2, 19, 32, 21, 32, 37, 32, 53, 32, 5, 33, 9, 33, 150, 33, 151, 33, 152, 33, 153, 33, 21, 34, 31, 34, 35, 34, 82, 34, 102, 34, 103, 34, 191, 34, 80, 37, 81, 37, 82, 37, 83, 37, 84, 37, 85, 37, 86, 37, 87, 37, 88, 37, 89, 37, 90, 37, 91, 37, 92, 37, 93, 37, 94, 37, 95, 37, 96, 37, 97, 37, 98, 37, 99, 37, 100, 37, 101, 37, 102, 37, 103, 37, 104, 37, 105, 37, 106, 37, 107, 37, 108, 37, 109, 37, 110, 37, 111, 37, 112, 37, 113, 37, 114, 37, 115, 37, 129, 37, 130, 37, 131, 37, 132, 37, 133, 37, 134, 37, 135, 37, 136, 37, 137, 37, 138, 37, 139, 37, 140, 37, 141, 37, 142, 37, 143, 37, 147, 37, 148, 37, 149, 37, 188, 37, 189, 37, 226, 37, 227, 37, 228, 37, 229, 37, 9, 38, 149, 34, 18, 48, 29, 48, 30, 48, 188, 231, 189, 231, 190, 231, 191, 231, 192, 231, 193, 231, 194, 231, 195, 231, 196, 231, 197, 231, 198, 231, 1, 1, 225, 0, 206, 1, 224, 0, 19, 1, 233, 0, 27, 1, 232, 0, 43, 1, 237, 0, 208, 1, 236, 0, 77, 1, 243, 0, 210, 1, 242, 0, 107, 1, 250, 0, 212, 1, 249, 0, 214, 1, 216, 1, 218, 1, 220, 1, 252, 0, 234, 0, 81, 2, 199, 231, 68, 1, 72, 1, 249, 1, 97, 2, 201, 231, 202, 231, 203, 231, 204, 231, 5, 49, 6, 49, 7, 49, 8, 49, 9, 49, 10, 49, 11, 49, 12, 49, 13, 49, 14, 49, 15, 49, 16, 49, 17, 49, 18, 49, 19, 49, 20, 49, 21, 49, 22, 49, 23, 49, 24, 49, 25, 49, 26, 49, 27, 49, 28, 49, 29, 49, 30, 49, 31, 49, 32, 49, 33, 49, 34, 49, 35, 49, 36, 49, 37, 49, 38, 49, 39, 49, 40, 49, 41, 49, 205, 231, 206, 231, 207, 231, 208, 231, 209, 231, 210, 231, 211, 231, 212, 231, 213, 231, 214, 231, 215, 231, 216, 231, 217, 231, 218, 231, 219, 231, 220, 231, 221, 231, 222, 231, 223, 231, 224, 231, 225, 231, 33, 48, 34, 48, 35, 48, 36, 48, 37, 48, 38, 48, 39, 48, 40, 48, 41, 48, 163, 50, 142, 51, 143, 51, 156, 51, 157, 51, 158, 51, 161, 51, 196, 51, 206, 51, 209, 51, 210, 51, 213, 51, 48, 254, 226, 255, 228, 255, 226, 231, 33, 33, 49, 50, 227, 231, 16, 32, 228, 231, 229, 231, 230, 231, 252, 48, 155, 48, 156, 48, 253, 48, 254, 48, 6, 48, 157, 48, 158, 48, 73, 254, 74, 254, 75, 254, 76, 254, 77, 254, 78, 254, 79, 254, 80, 254, 81, 254, 82, 254, 84, 254, 85, 254, 86, 254, 87, 254, 89, 254, 90, 254, 91, 254, 92, 254, 93, 254, 94, 254, 95, 254, 96, 254, 97, 254, 98, 254, 99, 254, 100, 254, 101, 254, 102, 254, 104, 254, 105, 254, 106, 254, 107, 254, 62, 48, 240, 47, 241, 47, 242, 47, 243, 47, 244, 47, 245, 47, 246, 47, 247, 47, 248, 47, 249, 47, 250, 47, 251, 47, 7, 48, 244, 231, 245, 231, 246, 231, 247, 231, 248, 231, 249, 231, 250, 231, 251, 231, 252, 231, 253, 231, 254, 231, 255, 231, 0, 232, 0, 37, 1, 37, 2, 37, 3, 37, 4, 37, 5, 37, 6, 37, 7, 37, 8, 37, 9, 37, 10, 37, 11, 37, 12, 37, 13, 37, 14, 37, 15, 37, 16, 37, 17, 37, 18, 37, 19, 37, 20, 37, 21, 37, 22, 37, 23, 37, 24, 37, 25, 37, 26, 37, 27, 37, 28, 37, 29, 37, 30, 37, 31, 37, 32, 37, 33, 37, 34, 37, 35, 37, 36, 37, 37, 37, 38, 37, 39, 37, 40, 37, 41, 37, 42, 37, 43, 37, 44, 37, 45, 37, 46, 37, 47, 37, 48, 37, 49, 37, 50, 37, 51, 37, 52, 37, 53, 37, 54, 37, 55, 37, 56, 37, 57, 37, 58, 37, 59, 37, 60, 37, 61, 37, 62, 37, 63, 37, 64, 37, 65, 37, 66, 37, 67, 37, 68, 37, 69, 37, 70, 37, 71, 37, 72, 37, 73, 37, 74, 37, 75, 37, 1, 232, 2, 232, 3, 232, 4, 232, 5, 232, 6, 232, 7, 232, 8, 232, 9, 232, 10, 232, 11, 232, 12, 232, 13, 232, 14, 232, 15, 232, 220, 114, 221, 114, 223, 114, 226, 114, 227, 114, 228, 114, 229, 114, 230, 114, 231, 114, 234, 114, 235, 114, 245, 114, 246, 114, 249, 114, 253, 114, 254, 114, 255, 114, 0, 115, 2, 115, 4, 115, 5, 115, 6, 115, 7, 115, 8, 115, 9, 115, 11, 115, 12, 115, 13, 115, 15, 115, 16, 115, 17, 115, 18, 115, 20, 115, 24, 115, 25, 115, 26, 115, 31, 115, 32, 115, 35, 115, 36, 115, 38, 115, 39, 115, 40, 115, 45, 115, 47, 115, 48, 115, 50, 115, 51, 115, 53, 115, 54, 115, 58, 115, 59, 115, 60, 115, 61, 115, 64, 115, 65, 115, 66, 115, 67, 115, 68, 115, 69, 115, 70, 115, 71, 115, 72, 115, 73, 115, 74, 115, 75, 115, 76, 115, 78, 115, 79, 115, 81, 115, 83, 115, 84, 115, 85, 115, 86, 115, 88, 115, 89, 115, 90, 115, 91, 115, 92, 115, 93, 115, 94, 115, 95, 115, 97, 115, 98, 115, 99, 115, 100, 115, 101, 115, 102, 115, 103, 115, 104, 115, 105, 115, 106, 115, 107, 115, 110, 115, 112, 115, 113, 115, 0, 224, 1, 224, 2, 224, 3, 224, 4, 224, 5, 224, 6, 224, 7, 224, 8, 224, 9, 224, 10, 224, 11, 224, 12, 224, 13, 224, 14, 224, 15, 224, 16, 224, 17, 224, 18, 224, 19, 224, 20, 224, 21, 224, 22, 224, 23, 224, 24, 224, 25, 224, 26, 224, 27, 224, 28, 224, 29, 224, 30, 224, 31, 224, 32, 224, 33, 224, 34, 224, 35, 224, 36, 224, 37, 224, 38, 224, 39, 224, 40, 224, 41, 224, 42, 224, 43, 224, 44, 224, 45, 224, 46, 224, 47, 224, 48, 224, 49, 224, 50, 224, 51, 224, 52, 224, 53, 224, 54, 224, 55, 224, 56, 224, 57, 224, 58, 224, 59, 224, 60, 224, 61, 224, 62, 224, 63, 224, 64, 224, 65, 224, 66, 224, 67, 224, 68, 224, 69, 224, 70, 224, 71, 224, 72, 224, 73, 224, 74, 224, 75, 224, 76, 224, 77, 224, 78, 224, 79, 224, 80, 224, 81, 224, 82, 224, 83, 224, 84, 224, 85, 224, 86, 224, 87, 224, 88, 224, 89, 224, 90, 224, 91, 224, 92, 224, 93, 224, 114, 115, 115, 115, 116, 115, 117, 115, 118, 115, 119, 115, 120, 115, 121, 115, 122, 115, 123, 115, 124, 115, 125, 115, 127, 115, 128, 115, 129, 115, 130, 115, 131, 115, 133, 115, 134, 115, 136, 115, 138, 115, 140, 115, 141, 115, 143, 115, 144, 115, 146, 115, 147, 115, 148, 115, 149, 115, 151, 115, 152, 115, 153, 115, 154, 115, 156, 115, 157, 115, 158, 115, 160, 115, 161, 115, 163, 115, 164, 115, 165, 115, 166, 115, 167, 115, 168, 115, 170, 115, 172, 115, 173, 115, 177, 115, 180, 115, 181, 115, 182, 115, 184, 115, 185, 115, 188, 115, 189, 115, 190, 115, 191, 115, 193, 115, 195, 115, 196, 115, 197, 115, 198, 115, 199, 115, 203, 115, 204, 115, 206, 115, 210, 115, 211, 115, 212, 115, 213, 115, 214, 115, 215, 115, 216, 115, 218, 115, 219, 115, 220, 115, 221, 115, 223, 115, 225, 115, 226, 115, 227, 115, 228, 115, 230, 115, 232, 115, 234, 115, 235, 115, 236, 115, 238, 115, 239, 115, 240, 115, 241, 115, 243, 115, 244, 115, 245, 115, 246, 115, 247, 115, 94, 224, 95, 224, 96, 224, 97, 224, 98, 224, 99, 224, 100, 224, 101, 224, 102, 224, 103, 224, 104, 224, 105, 224, 106, 224, 107, 224, 108, 224, 109, 224, 110, 224, 111, 224, 112, 224, 113, 224, 114, 224, 115, 224, 116, 224, 117, 224, 118, 224, 119, 224, 120, 224, 121, 224, 122, 224, 123, 224, 124, 224, 125, 224, 126, 224, 127, 224, 128, 224, 129, 224, 130, 224, 131, 224, 132, 224, 133, 224, 134, 224, 135, 224, 136, 224, 137, 224, 138, 224, 139, 224, 140, 224, 141, 224, 142, 224, 143, 224, 144, 224, 145, 224, 146, 224, 147, 224, 148, 224, 149, 224, 150, 224, 151, 224, 152, 224, 153, 224, 154, 224, 155, 224, 156, 224, 157, 224, 158, 224, 159, 224, 160, 224, 161, 224, 162, 224, 163, 224, 164, 224, 165, 224, 166, 224, 167, 224, 168, 224, 169, 224, 170, 224, 171, 224, 172, 224, 173, 224, 174, 224, 175, 224, 176, 224, 177, 224, 178, 224, 179, 224, 180, 224, 181, 224, 182, 224, 183, 224, 184, 224, 185, 224, 186, 224, 187, 224, 248, 115, 249, 115, 250, 115, 251, 115, 252, 115, 253, 115, 254, 115, 255, 115, 0, 116, 1, 116, 2, 116, 4, 116, 7, 116, 8, 116, 11, 116, 12, 116, 13, 116, 14, 116, 17, 116, 18, 116, 19, 116, 20, 116, 21, 116, 22, 116, 23, 116, 24, 116, 25, 116, 28, 116, 29, 116, 30, 116, 31, 116, 32, 116, 33, 116, 35, 116, 36, 116, 39, 116, 41, 116, 43, 116, 45, 116, 47, 116, 49, 116, 50, 116, 55, 116, 56, 116, 57, 116, 58, 116, 59, 116, 61, 116, 62, 116, 63, 116, 64, 116, 66, 116, 67, 116, 68, 116, 69, 116, 70, 116, 71, 116, 72, 116, 73, 116, 74, 116, 75, 116, 76, 116, 77, 116, 78, 116, 79, 116, 80, 116, 81, 116, 82, 116, 83, 116, 84, 116, 86, 116, 88, 116, 93, 116, 96, 116, 97, 116, 98, 116, 99, 116, 100, 116, 101, 116, 102, 116, 103, 116, 104, 116, 105, 116, 106, 116, 107, 116, 108, 116, 110, 116, 111, 116, 113, 116, 114, 116, 115, 116, 116, 116, 117, 116, 120, 116, 121, 116, 122, 116, 188, 224, 189, 224, 190, 224, 191, 224, 192, 224, 193, 224, 194, 224, 195, 224, 196, 224, 197, 224, 198, 224, 199, 224, 200, 224, 201, 224, 202, 224, 203, 224, 204, 224, 205, 224, 206, 224, 207, 224, 208, 224, 209, 224, 210, 224, 211, 224, 212, 224, 213, 224, 214, 224, 215, 224, 216, 224, 217, 224, 218, 224, 219, 224, 220, 224, 221, 224, 222, 224, 223, 224, 224, 224, 225, 224, 226, 224, 227, 224, 228, 224, 229, 224, 230, 224, 231, 224, 232, 224, 233, 224, 234, 224, 235, 224, 236, 224, 237, 224, 238, 224, 239, 224, 240, 224, 241, 224, 242, 224, 243, 224, 244, 224, 245, 224, 246, 224, 247, 224, 248, 224, 249, 224, 250, 224, 251, 224, 252, 224, 253, 224, 254, 224, 255, 224, 0, 225, 1, 225, 2, 225, 3, 225, 4, 225, 5, 225, 6, 225, 7, 225, 8, 225, 9, 225, 10, 225, 11, 225, 12, 225, 13, 225, 14, 225, 15, 225, 16, 225, 17, 225, 18, 225, 19, 225, 20, 225, 21, 225, 22, 225, 23, 225, 24, 225, 25, 225, 123, 116, 124, 116, 125, 116, 127, 116, 130, 116, 132, 116, 133, 116, 134, 116, 136, 116, 137, 116, 138, 116, 140, 116, 141, 116, 143, 116, 145, 116, 146, 116, 147, 116, 148, 116, 149, 116, 150, 116, 151, 116, 152, 116, 153, 116, 154, 116, 155, 116, 157, 116, 159, 116, 160, 116, 161, 116, 162, 116, 163, 116, 164, 116, 165, 116, 166, 116, 170, 116, 171, 116, 172, 116, 173, 116, 174, 116, 175, 116, 176, 116, 177, 116, 178, 116, 179, 116, 180, 116, 181, 116, 182, 116, 183, 116, 184, 116, 185, 116, 187, 116, 188, 116, 189, 116, 190, 116, 191, 116, 192, 116, 193, 116, 194, 116, 195, 116, 196, 116, 197, 116, 198, 116, 199, 116, 200, 116, 201, 116, 202, 116, 203, 116, 204, 116, 205, 116, 206, 116, 207, 116, 208, 116, 209, 116, 211, 116, 212, 116, 213, 116, 214, 116, 215, 116, 216, 116, 217, 116, 218, 116, 219, 116, 221, 116, 223, 116, 225, 116, 229, 116, 231, 116, 232, 116, 233, 116, 234, 116, 235, 116, 236, 116, 237, 116, 240, 116, 241, 116, 242, 116, 26, 225, 27, 225, 28, 225, 29, 225, 30, 225, 31, 225, 32, 225, 33, 225, 34, 225, 35, 225, 36, 225, 37, 225, 38, 225, 39, 225, 40, 225, 41, 225, 42, 225, 43, 225, 44, 225, 45, 225, 46, 225, 47, 225, 48, 225, 49, 225, 50, 225, 51, 225, 52, 225, 53, 225, 54, 225, 55, 225, 56, 225, 57, 225, 58, 225, 59, 225, 60, 225, 61, 225, 62, 225, 63, 225, 64, 225, 65, 225, 66, 225, 67, 225, 68, 225, 69, 225, 70, 225, 71, 225, 72, 225, 73, 225, 74, 225, 75, 225, 76, 225, 77, 225, 78, 225, 79, 225, 80, 225, 81, 225, 82, 225, 83, 225, 84, 225, 85, 225, 86, 225, 87, 225, 88, 225, 89, 225, 90, 225, 91, 225, 92, 225, 93, 225, 94, 225, 95, 225, 96, 225, 97, 225, 98, 225, 99, 225, 100, 225, 101, 225, 102, 225, 103, 225, 104, 225, 105, 225, 106, 225, 107, 225, 108, 225, 109, 225, 110, 225, 111, 225, 112, 225, 113, 225, 114, 225, 115, 225, 116, 225, 117, 225, 118, 225, 119, 225, 243, 116, 245, 116, 248, 116, 249, 116, 250, 116, 251, 116, 252, 116, 253, 116, 254, 116, 0, 117, 1, 117, 2, 117, 3, 117, 5, 117, 6, 117, 7, 117, 8, 117, 9, 117, 10, 117, 11, 117, 12, 117, 14, 117, 16, 117, 18, 117, 20, 117, 21, 117, 22, 117, 23, 117, 27, 117, 29, 117, 30, 117, 32, 117, 33, 117, 34, 117, 35, 117, 36, 117, 38, 117, 39, 117, 42, 117, 46, 117, 52, 117, 54, 117, 57, 117, 60, 117, 61, 117, 63, 117, 65, 117, 66, 117, 67, 117, 68, 117, 70, 117, 71, 117, 73, 117, 74, 117, 77, 117, 80, 117, 81, 117, 82, 117, 83, 117, 85, 117, 86, 117, 87, 117, 88, 117, 93, 117, 94, 117, 95, 117, 96, 117, 97, 117, 98, 117, 99, 117, 100, 117, 103, 117, 104, 117, 105, 117, 107, 117, 108, 117, 109, 117, 110, 117, 111, 117, 112, 117, 113, 117, 115, 117, 117, 117, 118, 117, 119, 117, 122, 117, 123, 117, 124, 117, 125, 117, 126, 117, 128, 117, 129, 117, 130, 117, 132, 117, 133, 117, 135, 117, 120, 225, 121, 225, 122, 225, 123, 225, 124, 225, 125, 225, 126, 225, 127, 225, 128, 225, 129, 225, 130, 225, 131, 225, 132, 225, 133, 225, 134, 225, 135, 225, 136, 225, 137, 225, 138, 225, 139, 225, 140, 225, 141, 225, 142, 225, 143, 225, 144, 225, 145, 225, 146, 225, 147, 225, 148, 225, 149, 225, 150, 225, 151, 225, 152, 225, 153, 225, 154, 225, 155, 225, 156, 225, 157, 225, 158, 225, 159, 225, 160, 225, 161, 225, 162, 225, 163, 225, 164, 225, 165, 225, 166, 225, 167, 225, 168, 225, 169, 225, 170, 225, 171, 225, 172, 225, 173, 225, 174, 225, 175, 225, 176, 225, 177, 225, 178, 225, 179, 225, 180, 225, 181, 225, 182, 225, 183, 225, 184, 225, 185, 225, 186, 225, 187, 225, 188, 225, 189, 225, 190, 225, 191, 225, 192, 225, 193, 225, 194, 225, 195, 225, 196, 225, 197, 225, 198, 225, 199, 225, 200, 225, 201, 225, 202, 225, 203, 225, 204, 225, 205, 225, 206, 225, 207, 225, 208, 225, 209, 225, 210, 225, 211, 225, 212, 225, 213, 225, 136, 117, 137, 117, 138, 117, 140, 117, 141, 117, 142, 117, 144, 117, 147, 117, 149, 117, 152, 117, 155, 117, 156, 117, 158, 117, 162, 117, 166, 117, 167, 117, 168, 117, 169, 117, 170, 117, 173, 117, 182, 117, 183, 117, 186, 117, 187, 117, 191, 117, 192, 117, 193, 117, 198, 117, 203, 117, 204, 117, 206, 117, 207, 117, 208, 117, 209, 117, 211, 117, 215, 117, 217, 117, 218, 117, 220, 117, 221, 117, 223, 117, 224, 117, 225, 117, 229, 117, 233, 117, 236, 117, 237, 117, 238, 117, 239, 117, 242, 117, 243, 117, 245, 117, 246, 117, 247, 117, 248, 117, 250, 117, 251, 117, 253, 117, 254, 117, 2, 118, 4, 118, 6, 118, 7, 118, 8, 118, 9, 118, 11, 118, 13, 118, 14, 118, 15, 118, 17, 118, 18, 118, 19, 118, 20, 118, 22, 118, 26, 118, 28, 118, 29, 118, 30, 118, 33, 118, 35, 118, 39, 118, 40, 118, 44, 118, 46, 118, 47, 118, 49, 118, 50, 118, 54, 118, 55, 118, 57, 118, 58, 118, 59, 118, 61, 118, 65, 118, 66, 118, 68, 118, 214, 225, 215, 225, 216, 225, 217, 225, 218, 225, 219, 225, 220, 225, 221, 225, 222, 225, 223, 225, 224, 225, 225, 225, 226, 225, 227, 225, 228, 225, 229, 225, 230, 225, 231, 225, 232, 225, 233, 225, 234, 225, 235, 225, 236, 225, 237, 225, 238, 225, 239, 225, 240, 225, 241, 225, 242, 225, 243, 225, 244, 225, 245, 225, 246, 225, 247, 225, 248, 225, 249, 225, 250, 225, 251, 225], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 35572);
    allocate([252, 225, 253, 225, 254, 225, 255, 225, 0, 226, 1, 226, 2, 226, 3, 226, 4, 226, 5, 226, 6, 226, 7, 226, 8, 226, 9, 226, 10, 226, 11, 226, 12, 226, 13, 226, 14, 226, 15, 226, 16, 226, 17, 226, 18, 226, 19, 226, 20, 226, 21, 226, 22, 226, 23, 226, 24, 226, 25, 226, 26, 226, 27, 226, 28, 226, 29, 226, 30, 226, 31, 226, 32, 226, 33, 226, 34, 226, 35, 226, 36, 226, 37, 226, 38, 226, 39, 226, 40, 226, 41, 226, 42, 226, 43, 226, 44, 226, 45, 226, 46, 226, 47, 226, 48, 226, 49, 226, 50, 226, 51, 226, 69, 118, 70, 118, 71, 118, 72, 118, 73, 118, 74, 118, 75, 118, 78, 118, 79, 118, 80, 118, 81, 118, 82, 118, 83, 118, 85, 118, 87, 118, 88, 118, 89, 118, 90, 118, 91, 118, 93, 118, 95, 118, 96, 118, 97, 118, 98, 118, 100, 118, 101, 118, 102, 118, 103, 118, 104, 118, 105, 118, 106, 118, 108, 118, 109, 118, 110, 118, 112, 118, 113, 118, 114, 118, 115, 118, 116, 118, 117, 118, 118, 118, 119, 118, 121, 118, 122, 118, 124, 118, 127, 118, 128, 118, 129, 118, 131, 118, 133, 118, 137, 118, 138, 118, 140, 118, 141, 118, 143, 118, 144, 118, 146, 118, 148, 118, 149, 118, 151, 118, 152, 118, 154, 118, 155, 118, 156, 118, 157, 118, 158, 118, 159, 118, 160, 118, 161, 118, 162, 118, 163, 118, 165, 118, 166, 118, 167, 118, 168, 118, 169, 118, 170, 118, 171, 118, 172, 118, 173, 118, 175, 118, 176, 118, 179, 118, 181, 118, 182, 118, 183, 118, 184, 118, 185, 118, 186, 118, 187, 118, 188, 118, 189, 118, 190, 118, 192, 118, 193, 118, 195, 118, 74, 85, 63, 150, 195, 87, 40, 99, 206, 84, 9, 85, 192, 84, 145, 118, 76, 118, 60, 133, 238, 119, 126, 130, 141, 120, 49, 114, 152, 150, 141, 151, 40, 108, 137, 91, 250, 79, 9, 99, 151, 102, 184, 92, 250, 128, 72, 104, 174, 128, 2, 102, 206, 118, 249, 81, 86, 101, 172, 113, 241, 127, 132, 136, 178, 80, 101, 89, 202, 97, 179, 111, 173, 130, 76, 99, 82, 98, 237, 83, 39, 84, 6, 123, 107, 81, 164, 117, 244, 93, 212, 98, 203, 141, 118, 151, 138, 98, 25, 128, 93, 87, 56, 151, 98, 127, 56, 114, 125, 118, 207, 103, 126, 118, 70, 100, 112, 79, 37, 141, 220, 98, 23, 122, 145, 101, 237, 115, 44, 100, 115, 98, 44, 130, 129, 152, 127, 103, 72, 114, 110, 98, 204, 98, 52, 79, 227, 116, 74, 83, 158, 82, 202, 126, 166, 144, 46, 94, 134, 104, 156, 105, 128, 129, 209, 126, 210, 104, 197, 120, 140, 134, 81, 149, 141, 80, 36, 140, 222, 130, 222, 128, 5, 83, 18, 137, 101, 82, 196, 118, 199, 118, 201, 118, 203, 118, 204, 118, 211, 118, 213, 118, 217, 118, 218, 118, 220, 118, 221, 118, 222, 118, 224, 118, 225, 118, 226, 118, 227, 118, 228, 118, 230, 118, 231, 118, 232, 118, 233, 118, 234, 118, 235, 118, 236, 118, 237, 118, 240, 118, 243, 118, 245, 118, 246, 118, 247, 118, 250, 118, 251, 118, 253, 118, 255, 118, 0, 119, 2, 119, 3, 119, 5, 119, 6, 119, 10, 119, 12, 119, 14, 119, 15, 119, 16, 119, 17, 119, 18, 119, 19, 119, 20, 119, 21, 119, 22, 119, 23, 119, 24, 119, 27, 119, 28, 119, 29, 119, 30, 119, 33, 119, 35, 119, 36, 119, 37, 119, 39, 119, 42, 119, 43, 119, 44, 119, 46, 119, 48, 119, 49, 119, 50, 119, 51, 119, 52, 119, 57, 119, 59, 119, 61, 119, 62, 119, 63, 119, 66, 119, 68, 119, 69, 119, 70, 119, 72, 119, 73, 119, 74, 119, 75, 119, 76, 119, 77, 119, 78, 119, 79, 119, 82, 119, 83, 119, 84, 119, 85, 119, 86, 119, 87, 119, 88, 119, 89, 119, 92, 119, 132, 133, 249, 150, 221, 79, 33, 88, 113, 153, 157, 91, 177, 98, 165, 98, 180, 102, 121, 140, 141, 156, 6, 114, 111, 103, 145, 120, 178, 96, 81, 83, 23, 83, 136, 143, 204, 128, 29, 141, 161, 148, 13, 80, 200, 114, 7, 89, 235, 96, 25, 113, 171, 136, 84, 89, 239, 130, 44, 103, 40, 123, 41, 93, 247, 126, 45, 117, 245, 108, 102, 142, 248, 143, 60, 144, 59, 159, 212, 107, 25, 145, 20, 123, 124, 95, 167, 120, 214, 132, 61, 133, 213, 107, 217, 107, 214, 107, 1, 94, 135, 94, 249, 117, 237, 149, 93, 101, 10, 95, 197, 95, 159, 143, 193, 88, 194, 129, 127, 144, 91, 150, 173, 151, 185, 143, 22, 127, 44, 141, 65, 98, 191, 79, 216, 83, 94, 83, 168, 143, 169, 143, 171, 143, 77, 144, 7, 104, 106, 95, 152, 129, 104, 136, 214, 156, 139, 97, 43, 82, 42, 118, 108, 95, 140, 101, 210, 111, 232, 110, 190, 91, 72, 100, 117, 81, 176, 81, 196, 103, 25, 78, 201, 121, 124, 153, 179, 112, 93, 119, 94, 119, 95, 119, 96, 119, 100, 119, 103, 119, 105, 119, 106, 119, 109, 119, 110, 119, 111, 119, 112, 119, 113, 119, 114, 119, 115, 119, 116, 119, 117, 119, 118, 119, 119, 119, 120, 119, 122, 119, 123, 119, 124, 119, 129, 119, 130, 119, 131, 119, 134, 119, 135, 119, 136, 119, 137, 119, 138, 119, 139, 119, 143, 119, 144, 119, 147, 119, 148, 119, 149, 119, 150, 119, 151, 119, 152, 119, 153, 119, 154, 119, 155, 119, 156, 119, 157, 119, 158, 119, 161, 119, 163, 119, 164, 119, 166, 119, 168, 119, 171, 119, 173, 119, 174, 119, 175, 119, 177, 119, 178, 119, 180, 119, 182, 119, 183, 119, 184, 119, 185, 119, 186, 119, 188, 119, 190, 119, 192, 119, 193, 119, 194, 119, 195, 119, 196, 119, 197, 119, 198, 119, 199, 119, 200, 119, 201, 119, 202, 119, 203, 119, 204, 119, 206, 119, 207, 119, 208, 119, 209, 119, 210, 119, 211, 119, 212, 119, 213, 119, 214, 119, 216, 119, 217, 119, 218, 119, 221, 119, 222, 119, 223, 119, 224, 119, 225, 119, 228, 119, 197, 117, 118, 94, 187, 115, 224, 131, 173, 100, 232, 98, 181, 148, 226, 108, 90, 83, 195, 82, 15, 100, 194, 148, 148, 123, 47, 79, 27, 94, 54, 130, 22, 129, 138, 129, 36, 110, 202, 108, 115, 154, 85, 99, 92, 83, 250, 84, 101, 136, 224, 87, 13, 78, 3, 94, 101, 107, 63, 124, 232, 144, 22, 96, 230, 100, 28, 115, 193, 136, 80, 103, 77, 98, 34, 141, 108, 119, 41, 142, 199, 145, 105, 95, 220, 131, 33, 133, 16, 153, 194, 83, 149, 134, 139, 107, 237, 96, 232, 96, 127, 112, 205, 130, 49, 130, 211, 78, 167, 108, 207, 133, 205, 100, 217, 124, 253, 105, 249, 102, 73, 131, 149, 83, 86, 123, 167, 79, 140, 81, 75, 109, 66, 92, 109, 142, 210, 99, 201, 83, 44, 131, 54, 131, 229, 103, 180, 120, 61, 100, 223, 91, 148, 92, 238, 93, 231, 139, 198, 98, 244, 103, 122, 140, 0, 100, 186, 99, 73, 135, 139, 153, 23, 140, 32, 127, 242, 148, 167, 78, 16, 150, 164, 152, 12, 102, 22, 115, 230, 119, 232, 119, 234, 119, 239, 119, 240, 119, 241, 119, 242, 119, 244, 119, 245, 119, 247, 119, 249, 119, 250, 119, 251, 119, 252, 119, 3, 120, 4, 120, 5, 120, 6, 120, 7, 120, 8, 120, 10, 120, 11, 120, 14, 120, 15, 120, 16, 120, 19, 120, 21, 120, 25, 120, 27, 120, 30, 120, 32, 120, 33, 120, 34, 120, 36, 120, 40, 120, 42, 120, 43, 120, 46, 120, 47, 120, 49, 120, 50, 120, 51, 120, 53, 120, 54, 120, 61, 120, 63, 120, 65, 120, 66, 120, 67, 120, 68, 120, 70, 120, 72, 120, 73, 120, 74, 120, 75, 120, 77, 120, 79, 120, 81, 120, 83, 120, 84, 120, 88, 120, 89, 120, 90, 120, 91, 120, 92, 120, 94, 120, 95, 120, 96, 120, 97, 120, 98, 120, 99, 120, 100, 120, 101, 120, 102, 120, 103, 120, 104, 120, 105, 120, 111, 120, 112, 120, 113, 120, 114, 120, 115, 120, 116, 120, 117, 120, 118, 120, 120, 120, 121, 120, 122, 120, 123, 120, 125, 120, 126, 120, 127, 120, 128, 120, 129, 120, 130, 120, 131, 120, 58, 87, 29, 92, 56, 94, 127, 149, 127, 80, 160, 128, 130, 83, 94, 101, 69, 117, 49, 85, 33, 80, 133, 141, 132, 98, 158, 148, 29, 103, 50, 86, 110, 111, 226, 93, 53, 84, 146, 112, 102, 143, 111, 98, 164, 100, 163, 99, 123, 95, 136, 111, 244, 144, 227, 129, 176, 143, 24, 92, 104, 102, 241, 95, 137, 108, 72, 150, 129, 141, 108, 136, 145, 100, 240, 121, 206, 87, 89, 106, 16, 98, 72, 84, 88, 78, 11, 122, 233, 96, 132, 111, 218, 139, 127, 98, 30, 144, 139, 154, 228, 121, 3, 84, 244, 117, 1, 99, 25, 83, 96, 108, 223, 143, 27, 95, 112, 154, 59, 128, 127, 159, 136, 79, 58, 92, 100, 141, 197, 127, 165, 101, 189, 112, 69, 81, 178, 81, 107, 134, 7, 93, 160, 91, 189, 98, 108, 145, 116, 117, 12, 142, 32, 122, 1, 97, 121, 123, 199, 78, 248, 126, 133, 119, 17, 78, 237, 129, 29, 82, 250, 81, 113, 106, 168, 83, 135, 142, 4, 149, 207, 150, 193, 110, 100, 150, 90, 105, 132, 120, 133, 120, 134, 120, 136, 120, 138, 120, 139, 120, 143, 120, 144, 120, 146, 120, 148, 120, 149, 120, 150, 120, 153, 120, 157, 120, 158, 120, 160, 120, 162, 120, 164, 120, 166, 120, 168, 120, 169, 120, 170, 120, 171, 120, 172, 120, 173, 120, 174, 120, 175, 120, 181, 120, 182, 120, 183, 120, 184, 120, 186, 120, 187, 120, 188, 120, 189, 120, 191, 120, 192, 120, 194, 120, 195, 120, 196, 120, 198, 120, 199, 120, 200, 120, 204, 120, 205, 120, 206, 120, 207, 120, 209, 120, 210, 120, 211, 120, 214, 120, 215, 120, 216, 120, 218, 120, 219, 120, 220, 120, 221, 120, 222, 120, 223, 120, 224, 120, 225, 120, 226, 120, 227, 120, 228, 120, 229, 120, 230, 120, 231, 120, 233, 120, 234, 120, 235, 120, 237, 120, 238, 120, 239, 120, 240, 120, 241, 120, 243, 120, 245, 120, 246, 120, 248, 120, 249, 120, 251, 120, 252, 120, 253, 120, 254, 120, 255, 120, 0, 121, 2, 121, 3, 121, 4, 121, 6, 121, 7, 121, 8, 121, 9, 121, 10, 121, 11, 121, 12, 121, 64, 120, 168, 80, 215, 119, 16, 100, 230, 137, 4, 89, 227, 99, 221, 93, 127, 122, 61, 105, 32, 79, 57, 130, 152, 85, 50, 78, 174, 117, 151, 122, 98, 94, 138, 94, 239, 149, 27, 82, 57, 84, 138, 112, 118, 99, 36, 149, 130, 87, 37, 102, 63, 105, 135, 145, 7, 85, 243, 109, 175, 126, 34, 136, 51, 98, 240, 126, 181, 117, 40, 131, 193, 120, 204, 150, 158, 143, 72, 97, 247, 116, 205, 139, 100, 107, 58, 82, 80, 141, 33, 107, 106, 128, 113, 132, 241, 86, 6, 83, 206, 78, 27, 78, 209, 81, 151, 124, 139, 145, 7, 124, 195, 79, 127, 142, 225, 123, 156, 122, 103, 100, 20, 93, 172, 80, 6, 129, 1, 118, 185, 124, 236, 109, 224, 127, 81, 103, 88, 91, 248, 91, 203, 120, 174, 100, 19, 100, 170, 99, 43, 99, 25, 149, 45, 100, 190, 143, 84, 123, 41, 118, 83, 98, 39, 89, 70, 84, 121, 107, 163, 80, 52, 98, 38, 94, 134, 107, 227, 78, 55, 141, 139, 136, 133, 95, 46, 144, 13, 121, 14, 121, 15, 121, 16, 121, 17, 121, 18, 121, 20, 121, 21, 121, 22, 121, 23, 121, 24, 121, 25, 121, 26, 121, 27, 121, 28, 121, 29, 121, 31, 121, 32, 121, 33, 121, 34, 121, 35, 121, 37, 121, 38, 121, 39, 121, 40, 121, 41, 121, 42, 121, 43, 121, 44, 121, 45, 121, 46, 121, 47, 121, 48, 121, 49, 121, 50, 121, 51, 121, 53, 121, 54, 121, 55, 121, 56, 121, 57, 121, 61, 121, 63, 121, 66, 121, 67, 121, 68, 121, 69, 121, 71, 121, 74, 121, 75, 121, 76, 121, 77, 121, 78, 121, 79, 121, 80, 121, 81, 121, 82, 121, 84, 121, 85, 121, 88, 121, 89, 121, 97, 121, 99, 121, 100, 121, 102, 121, 105, 121, 106, 121, 107, 121, 108, 121, 110, 121, 112, 121, 113, 121, 114, 121, 115, 121, 116, 121, 117, 121, 118, 121, 121, 121, 123, 121, 124, 121, 125, 121, 126, 121, 127, 121, 130, 121, 131, 121, 134, 121, 135, 121, 136, 121, 137, 121, 139, 121, 140, 121, 141, 121, 142, 121, 144, 121, 145, 121, 146, 121, 32, 96, 61, 128, 197, 98, 57, 78, 85, 83, 248, 144, 184, 99, 198, 128, 230, 101, 46, 108, 70, 79, 238, 96, 225, 109, 222, 139, 57, 95, 203, 134, 83, 95, 33, 99, 90, 81, 97, 131, 99, 104, 0, 82, 99, 99, 72, 142, 18, 80, 155, 92, 119, 121, 252, 91, 48, 82, 59, 122, 188, 96, 83, 144, 215, 118, 183, 95, 151, 95, 132, 118, 108, 142, 111, 112, 123, 118, 73, 123, 170, 119, 243, 81, 147, 144, 36, 88, 78, 79, 244, 110, 234, 143, 76, 101, 27, 123, 196, 114, 164, 109, 223, 127, 225, 90, 181, 98, 149, 94, 48, 87, 130, 132, 44, 123, 29, 94, 31, 95, 18, 144, 20, 127, 160, 152, 130, 99, 199, 110, 152, 120, 185, 112, 120, 81, 91, 151, 171, 87, 53, 117, 67, 79, 56, 117, 151, 94, 230, 96, 96, 89, 192, 109, 191, 107, 137, 120, 252, 83, 213, 150, 203, 81, 1, 82, 137, 99, 10, 84, 147, 148, 3, 140, 204, 141, 57, 114, 159, 120, 118, 135, 237, 143, 13, 140, 224, 83, 147, 121, 148, 121, 149, 121, 150, 121, 151, 121, 152, 121, 153, 121, 155, 121, 156, 121, 157, 121, 158, 121, 159, 121, 160, 121, 161, 121, 162, 121, 163, 121, 164, 121, 165, 121, 166, 121, 168, 121, 169, 121, 170, 121, 171, 121, 172, 121, 173, 121, 174, 121, 175, 121, 176, 121, 177, 121, 178, 121, 180, 121, 181, 121, 182, 121, 183, 121, 184, 121, 188, 121, 191, 121, 194, 121, 196, 121, 197, 121, 199, 121, 200, 121, 202, 121, 204, 121, 206, 121, 207, 121, 208, 121, 211, 121, 212, 121, 214, 121, 215, 121, 217, 121, 218, 121, 219, 121, 220, 121, 221, 121, 222, 121, 224, 121, 225, 121, 226, 121, 229, 121, 232, 121, 234, 121, 236, 121, 238, 121, 241, 121, 242, 121, 243, 121, 244, 121, 245, 121, 246, 121, 247, 121, 249, 121, 250, 121, 252, 121, 254, 121, 255, 121, 1, 122, 4, 122, 5, 122, 7, 122, 8, 122, 9, 122, 10, 122, 12, 122, 15, 122, 16, 122, 17, 122, 18, 122, 19, 122, 21, 122, 22, 122, 24, 122, 25, 122, 27, 122, 28, 122, 1, 78, 239, 118, 238, 83, 137, 148, 118, 152, 14, 159, 45, 149, 154, 91, 162, 139, 34, 78, 28, 78, 172, 81, 99, 132, 194, 97, 168, 82, 11, 104, 151, 79, 107, 96, 187, 81, 30, 109, 92, 81, 150, 98, 151, 101, 97, 150, 70, 140, 23, 144, 216, 117, 253, 144, 99, 119, 210, 107, 138, 114, 236, 114, 251, 139, 53, 88, 121, 119, 76, 141, 92, 103, 64, 149, 154, 128, 166, 94, 33, 110, 146, 89, 239, 122, 237, 119, 59, 149, 181, 107, 173, 101, 14, 127, 6, 88, 81, 81, 31, 150, 249, 91, 169, 88, 40, 84, 114, 142, 102, 101, 127, 152, 228, 86, 157, 148, 254, 118, 65, 144, 135, 99, 198, 84, 26, 89, 58, 89, 155, 87, 178, 142, 53, 103, 250, 141, 53, 130, 65, 82, 240, 96, 21, 88, 254, 134, 232, 92, 69, 158, 196, 79, 157, 152, 185, 139, 37, 90, 118, 96, 132, 83, 124, 98, 79, 144, 2, 145, 127, 153, 105, 96, 12, 128, 63, 81, 51, 128, 20, 92, 117, 153, 49, 109, 140, 78, 29, 122, 31, 122, 33, 122, 34, 122, 36, 122, 37, 122, 38, 122, 39, 122, 40, 122, 41, 122, 42, 122, 43, 122, 44, 122, 45, 122, 46, 122, 47, 122, 48, 122, 49, 122, 50, 122, 52, 122, 53, 122, 54, 122, 56, 122, 58, 122, 62, 122, 64, 122, 65, 122, 66, 122, 67, 122, 68, 122, 69, 122, 71, 122, 72, 122, 73, 122, 74, 122, 75, 122, 76, 122, 77, 122, 78, 122, 79, 122, 80, 122, 82, 122, 83, 122, 84, 122, 85, 122, 86, 122, 88, 122, 89, 122, 90, 122, 91, 122, 92, 122, 93, 122, 94, 122, 95, 122, 96, 122, 97, 122, 98, 122, 99, 122, 100, 122, 101, 122, 102, 122, 103, 122, 104, 122, 105, 122, 106, 122, 107, 122, 108, 122, 109, 122, 110, 122, 111, 122, 113, 122, 114, 122, 115, 122, 117, 122, 123, 122, 124, 122, 125, 122, 126, 122, 130, 122, 133, 122, 135, 122, 137, 122, 138, 122, 139, 122, 140, 122, 142, 122, 143, 122, 144, 122, 147, 122, 148, 122, 153, 122, 154, 122, 155, 122, 158, 122, 161, 122, 162, 122, 48, 141, 209, 83, 90, 127, 79, 123, 16, 79, 79, 78, 0, 150, 213, 108, 208, 115, 233, 133, 6, 94, 106, 117, 251, 127, 10, 106, 254, 119, 146, 148, 65, 126, 225, 81, 230, 112, 205, 83, 212, 143, 3, 131, 41, 141, 175, 114, 109, 153, 219, 108, 74, 87, 179, 130, 185, 101, 170, 128, 63, 98, 50, 150, 168, 89, 255, 78, 191, 139, 186, 126, 62, 101, 242, 131, 94, 151, 97, 85, 222, 152, 165, 128, 42, 83, 253, 139, 32, 84, 186, 128, 159, 94, 184, 108, 57, 141, 172, 130, 90, 145, 41, 84, 27, 108, 6, 82, 183, 126, 95, 87, 26, 113, 126, 108, 137, 124, 75, 89, 253, 78, 255, 95, 36, 97, 170, 124, 48, 78, 1, 92, 171, 103, 2, 135, 240, 92, 11, 149, 206, 152, 175, 117, 253, 112, 34, 144, 175, 81, 29, 127, 189, 139, 73, 89, 228, 81, 91, 79, 38, 84, 43, 89, 119, 101, 164, 128, 117, 91, 118, 98, 194, 98, 144, 143, 69, 94, 31, 108, 38, 123, 15, 79, 216, 79, 13, 103, 163, 122, 164, 122, 167, 122, 169, 122, 170, 122, 171, 122, 174, 122, 175, 122, 176, 122, 177, 122, 178, 122, 180, 122, 181, 122, 182, 122, 183, 122, 184, 122, 185, 122, 186, 122, 187, 122, 188, 122, 189, 122, 190, 122, 192, 122, 193, 122, 194, 122, 195, 122, 196, 122, 197, 122, 198, 122, 199, 122, 200, 122, 201, 122, 202, 122, 204, 122, 205, 122, 206, 122, 207, 122, 208, 122, 209, 122, 210, 122, 211, 122, 212, 122, 213, 122, 215, 122, 216, 122, 218, 122, 219, 122, 220, 122, 221, 122, 225, 122, 226, 122, 228, 122, 231, 122, 232, 122, 233, 122, 234, 122, 235, 122, 236, 122, 238, 122, 240, 122, 241, 122, 242, 122, 243, 122, 244, 122, 245, 122, 246, 122, 247, 122, 248, 122, 251, 122, 252, 122, 254, 122, 0, 123, 1, 123, 2, 123, 5, 123, 7, 123, 9, 123, 12, 123, 13, 123, 14, 123, 16, 123, 18, 123, 19, 123, 22, 123, 23, 123, 24, 123, 26, 123, 28, 123, 29, 123, 31, 123, 33, 123, 34, 123, 35, 123, 39, 123, 41, 123, 45, 123, 110, 109, 170, 109, 143, 121, 177, 136, 23, 95, 43, 117, 154, 98, 133, 143, 239, 79, 220, 145, 167, 101, 47, 129, 81, 129, 156, 94, 80, 129, 116, 141, 111, 82, 134, 137, 75, 141, 13, 89, 133, 80, 216, 78, 28, 150, 54, 114, 121, 129, 31, 141, 204, 91, 163, 139, 68, 150, 135, 89, 26, 127, 144, 84, 118, 86, 14, 86, 229, 139, 57, 101, 130, 105, 153, 148, 214, 118, 137, 110, 114, 94, 24, 117, 70, 103, 209, 103, 255, 122, 157, 128, 118, 141, 31, 97, 198, 121, 98, 101, 99, 141, 136, 81, 26, 82, 162, 148, 56, 127, 155, 128, 178, 126, 151, 92, 47, 110, 96, 103, 217, 123, 139, 118, 216, 154, 143, 129, 148, 127, 213, 124, 30, 100, 80, 149, 63, 122, 74, 84, 229, 84, 76, 107, 1, 100, 8, 98, 61, 158, 243, 128, 153, 117, 114, 82, 105, 151, 91, 132, 60, 104, 228, 134, 1, 150, 148, 150, 236, 148, 42, 78, 4, 84, 217, 126, 57, 104, 223, 141, 21, 128, 244, 102, 154, 94, 185, 127, 47, 123, 48, 123, 50, 123, 52, 123, 53, 123, 54, 123, 55, 123, 57, 123, 59, 123, 61, 123, 63, 123, 64, 123, 65, 123, 66, 123, 67, 123, 68, 123, 70, 123, 72, 123, 74, 123, 77, 123, 78, 123, 83, 123, 85, 123, 87, 123, 89, 123, 92, 123, 94, 123, 95, 123, 97, 123, 99, 123, 100, 123, 101, 123, 102, 123, 103, 123, 104, 123, 105, 123, 106, 123, 107, 123, 108, 123, 109, 123, 111, 123, 112, 123, 115, 123, 116, 123, 118, 123, 120, 123, 122, 123, 124, 123, 125, 123, 127, 123, 129, 123, 130, 123, 131, 123, 132, 123, 134, 123, 135, 123, 136, 123, 137, 123, 138, 123, 139, 123, 140, 123, 142, 123, 143, 123, 145, 123, 146, 123, 147, 123, 150, 123, 152, 123, 153, 123, 154, 123, 155, 123, 158, 123, 159, 123, 160, 123, 163, 123, 164, 123, 165, 123, 174, 123, 175, 123, 176, 123, 178, 123, 179, 123, 181, 123, 182, 123, 183, 123, 185, 123, 186, 123, 187, 123, 188, 123, 189, 123, 190, 123, 191, 123, 192, 123, 194, 123, 195, 123, 196, 123, 194, 87, 63, 128, 151, 104, 229, 93, 59, 101, 159, 82, 109, 96, 154, 159, 155, 79, 172, 142, 108, 81, 171, 91, 19, 95, 233, 93, 94, 108, 241, 98, 33, 141, 113, 81, 169, 148, 254, 82, 159, 108, 223, 130, 215, 114, 162, 87, 132, 103, 45, 141, 31, 89, 156, 143, 199, 131, 149, 84, 141, 123, 48, 79, 189, 108, 100, 91, 209, 89, 19, 159, 228, 83, 202, 134, 168, 154, 55, 140, 161, 128, 69, 101, 126, 152, 250, 86, 199, 150, 46, 82, 220, 116, 80, 82, 225, 91, 2, 99, 2, 137, 86, 78, 208, 98, 42, 96, 250, 104, 115, 81, 152, 91, 160, 81, 194, 137, 161, 123, 134, 153, 80, 127, 239, 96, 76, 112, 47, 141, 73, 81, 127, 94, 27, 144, 112, 116, 196, 137, 45, 87, 69, 120, 82, 95, 159, 159, 250, 149, 104, 143, 60, 155, 225, 139, 120, 118, 66, 104, 220, 103, 234, 141, 53, 141, 61, 82, 138, 143, 218, 110, 205, 104, 5, 149, 237, 144, 253, 86, 156, 103, 249, 136, 199, 143, 200, 84, 197, 123, 200, 123, 201, 123, 202, 123, 203, 123, 205, 123, 206, 123, 207, 123, 208, 123, 210, 123, 212, 123, 213, 123, 214, 123, 215, 123, 216, 123, 219, 123, 220, 123, 222, 123, 223, 123, 224, 123, 226, 123, 227, 123, 228, 123, 231, 123, 232, 123, 233, 123, 235, 123, 236, 123, 237, 123, 239, 123, 240, 123, 242, 123, 243, 123, 244, 123, 245, 123, 246, 123, 248, 123, 249, 123, 250, 123, 251, 123, 253, 123, 255, 123, 0, 124, 1, 124, 2, 124, 3, 124, 4, 124, 5, 124, 6, 124, 8, 124, 9, 124, 10, 124, 13, 124, 14, 124, 16, 124, 17, 124, 18, 124, 19, 124, 20, 124, 21, 124, 23, 124, 24, 124, 25, 124, 26, 124, 27, 124, 28, 124, 29, 124, 30, 124, 32, 124, 33, 124, 34, 124, 35, 124, 36, 124, 37, 124, 40, 124, 41, 124, 43, 124, 44, 124, 45, 124, 46, 124, 47, 124, 48, 124, 49, 124, 50, 124, 51, 124, 52, 124, 53, 124, 54, 124, 55, 124, 57, 124, 58, 124, 59, 124, 60, 124, 61, 124, 62, 124, 66, 124, 184, 154, 105, 91, 119, 109, 38, 108, 165, 78, 179, 91, 135, 154, 99, 145, 168, 97, 175, 144, 233, 151, 43, 84, 181, 109, 210, 91, 253, 81, 138, 85, 85, 127, 240, 127, 188, 100, 77, 99, 241, 101, 190, 97, 141, 96, 10, 113, 87, 108, 73, 108, 47, 89, 109, 103, 42, 130, 213, 88, 142, 86, 106, 140, 235, 107, 221, 144, 125, 89, 23, 128, 247, 83, 105, 109, 117, 84, 157, 85, 119, 131, 207, 131, 56, 104, 190, 121, 140, 84, 85, 79, 8, 84, 210, 118, 137, 140, 2, 150, 179, 108, 184, 109, 107, 141, 16, 137, 100, 158, 58, 141, 63, 86, 209, 158, 213, 117, 136, 95, 224, 114, 104, 96, 252, 84, 168, 78, 42, 106, 97, 136, 82, 96, 112, 143, 196, 84, 216, 112, 121, 134, 63, 158, 42, 109, 143, 91, 24, 95, 162, 126, 137, 85, 175, 79, 52, 115, 60, 84, 154, 83, 25, 80, 14, 84, 124, 84, 78, 78, 253, 95, 90, 116, 246, 88, 107, 132, 225, 128, 116, 135, 208, 114, 202, 124, 86, 110, 67, 124, 68, 124, 69, 124, 70, 124, 71, 124, 72, 124, 73, 124, 74, 124, 75, 124, 76, 124, 78, 124, 79, 124, 80, 124, 81, 124, 82, 124, 83, 124, 84, 124, 85, 124, 86, 124, 87, 124, 88, 124, 89, 124, 90, 124, 91, 124, 92, 124, 93, 124, 94, 124, 95, 124, 96, 124, 97, 124, 98, 124, 99, 124, 100, 124, 101, 124, 102, 124, 103, 124, 104, 124, 105, 124, 106, 124, 107, 124, 108, 124, 109, 124, 110, 124, 111, 124, 112, 124, 113, 124, 114, 124, 117, 124, 118, 124, 119, 124, 120, 124, 121, 124, 122, 124, 126, 124, 127, 124, 128, 124, 129, 124, 130, 124, 131, 124, 132, 124, 133, 124, 134, 124, 135, 124, 136, 124, 138, 124, 139, 124, 140, 124, 141, 124, 142, 124, 143, 124, 144, 124, 147, 124, 148, 124, 150, 124, 153, 124, 154, 124, 155, 124, 160, 124, 161, 124, 163, 124, 166, 124, 167, 124, 168, 124, 169, 124, 171, 124, 172, 124, 173, 124, 175, 124, 176, 124, 180, 124, 181, 124, 182, 124, 183, 124, 184, 124, 186, 124, 187, 124, 39, 95, 78, 134, 44, 85, 164, 98, 146, 78, 170, 108, 55, 98, 177, 130, 215, 84, 78, 83, 62, 115, 209, 110, 59, 117, 18, 82, 22, 83, 221, 139, 208, 105, 138, 95, 0, 96, 238, 109, 79, 87, 34, 107, 175, 115, 83, 104, 216, 143, 19, 127, 98, 99, 163, 96, 36, 85, 234, 117, 98, 140, 21, 113, 163, 109, 166, 91, 123, 94, 82, 131, 76, 97, 196, 158, 250, 120, 87, 135, 39, 124, 135, 118, 240, 81, 246, 96, 76, 113, 67, 102, 76, 94, 77, 96, 14, 140, 112, 112, 37, 99, 137, 143, 189, 95, 98, 96, 212, 134, 222, 86, 193, 107, 148, 96, 103, 97, 73, 83, 224, 96, 102, 102, 63, 141, 253, 121, 26, 79, 233, 112, 71, 108, 179, 139, 242, 139, 216, 126, 100, 131, 15, 102, 90, 90, 66, 155, 81, 109, 247, 109, 65, 140, 59, 109, 25, 79, 107, 112, 183, 131, 22, 98, 209, 96, 13, 151, 39, 141, 120, 121, 251, 81, 62, 87, 250, 87, 58, 103, 120, 117, 61, 122, 239, 121, 149, 123, 191, 124, 192, 124, 194, 124, 195, 124, 196, 124, 198, 124, 201, 124, 203, 124, 206, 124, 207, 124, 208, 124, 209, 124, 210, 124, 211, 124, 212, 124, 216, 124, 218, 124, 219, 124, 221, 124, 222, 124, 225, 124, 226, 124, 227, 124, 228, 124, 229, 124, 230, 124, 231, 124, 233, 124, 234, 124, 235, 124, 236, 124, 237, 124, 238, 124, 240, 124, 241, 124, 242, 124, 243, 124, 244, 124, 245, 124, 246, 124, 247, 124, 249, 124, 250, 124, 252, 124, 253, 124, 254, 124, 255, 124, 0, 125, 1, 125, 2, 125, 3, 125, 4, 125, 5, 125, 6, 125, 7, 125, 8, 125, 9, 125, 11, 125, 12, 125, 13, 125, 14, 125, 15, 125, 16, 125, 17, 125, 18, 125, 19, 125, 20, 125, 21, 125, 22, 125, 23, 125, 24, 125, 25, 125, 26, 125, 27, 125, 28, 125, 29, 125, 30, 125, 31, 125, 33, 125, 35, 125, 36, 125, 37, 125, 38, 125, 40, 125, 41, 125, 42, 125, 44, 125, 45, 125, 46, 125, 48, 125, 49, 125, 50, 125, 51, 125, 52, 125, 53, 125, 54, 125, 140, 128, 101, 153, 249, 143, 192, 111, 165, 139, 33, 158, 236, 89, 233, 126, 9, 127, 9, 84, 129, 103, 216, 104, 145, 143, 77, 124, 198, 150, 202, 83, 37, 96, 190, 117, 114, 108, 115, 83, 201, 90, 167, 126, 36, 99, 224, 81, 10, 129, 241, 93, 223, 132, 128, 98, 128, 81, 99, 91, 14, 79, 109, 121, 66, 82, 184, 96, 78, 109, 196, 91, 194, 91, 161, 139, 176, 139, 226, 101, 204, 95, 69, 150, 147, 89, 231, 126, 170, 126, 9, 86, 183, 103, 57, 89, 115, 79, 182, 91, 160, 82, 90, 131, 138, 152, 62, 141, 50, 117, 190, 148, 71, 80, 60, 122, 247, 78, 182, 103, 126, 154, 193, 90, 124, 107, 209, 118, 90, 87, 22, 92, 58, 123, 244, 149, 78, 113, 124, 81, 169, 128, 112, 130, 120, 89, 4, 127, 39, 131, 192, 104, 236, 103, 177, 120, 119, 120, 227, 98, 97, 99, 128, 123, 237, 79, 106, 82, 207, 81, 80, 131, 219, 105, 116, 146, 245, 141, 49, 141, 193, 137, 46, 149, 173, 123, 246, 78, 55, 125, 56, 125, 57, 125, 58, 125, 59, 125, 60, 125, 61, 125, 62, 125, 63, 125, 64, 125, 65, 125, 66, 125, 67, 125, 68, 125, 69, 125, 70, 125, 71, 125, 72, 125, 73, 125, 74, 125, 75, 125, 76, 125, 77, 125, 78, 125, 79, 125, 80, 125, 81, 125, 82, 125, 83, 125, 84, 125, 85, 125, 86, 125, 87, 125, 88, 125, 89, 125, 90, 125, 91, 125, 92, 125, 93, 125, 94, 125, 95, 125, 96, 125, 97, 125, 98, 125, 99, 125, 100, 125, 101, 125, 102, 125, 103, 125, 104, 125, 105, 125, 106, 125, 107, 125, 108, 125, 109, 125, 111, 125, 112, 125, 113, 125, 114, 125, 115, 125, 116, 125, 117, 125, 118, 125, 120, 125, 121, 125, 122, 125, 123, 125, 124, 125, 125, 125, 126, 125, 127, 125, 128, 125, 129, 125, 130, 125, 131, 125, 132, 125, 133, 125, 134, 125, 135, 125, 136, 125, 137, 125, 138, 125, 139, 125, 140, 125, 141, 125, 142, 125, 143, 125, 144, 125, 145, 125, 146, 125, 147, 125, 148, 125, 149, 125, 150, 125, 151, 125, 152, 125, 101, 80, 48, 130, 81, 82, 111, 153, 16, 110, 133, 110, 167, 109, 250, 94, 245, 80, 220, 89, 6, 92, 70, 109, 95, 108, 134, 117, 139, 132, 104, 104, 86, 89, 178, 139, 32, 83, 113, 145, 77, 150, 73, 133, 18, 105, 1, 121, 38, 113, 246, 128, 164, 78, 202, 144, 71, 109, 132, 154, 7, 90, 188, 86, 5, 100, 240, 148, 235, 119, 165, 79, 26, 129, 225, 114, 210, 137, 122, 153, 52, 127, 222, 126, 127, 82, 89, 101, 117, 145, 127, 143, 131, 143, 235, 83, 150, 122, 237, 99, 165, 99, 134, 118, 248, 121, 87, 136, 54, 150, 42, 98, 171, 82, 130, 130, 84, 104, 112, 103, 119, 99, 107, 119, 237, 122, 1, 109, 211, 126, 227, 137, 208, 89, 18, 98, 201, 133, 165, 130, 76, 117, 31, 80, 203, 78, 165, 117, 235, 139, 74, 92, 254, 93, 75, 123, 164, 101, 209, 145, 202, 78, 37, 109, 95, 137, 39, 125, 38, 149, 197, 78, 40, 140, 219, 143, 115, 151, 75, 102, 129, 121, 209, 143, 236, 112, 120, 109, 153, 125, 154, 125, 155, 125, 156, 125, 157, 125, 158, 125, 159, 125, 160, 125, 161, 125, 162, 125, 163, 125, 164, 125, 165, 125, 167, 125, 168, 125, 169, 125, 170, 125, 171, 125, 172, 125, 173, 125, 175, 125, 176, 125, 177, 125, 178, 125, 179, 125, 180, 125, 181, 125, 182, 125, 183, 125, 184, 125, 185, 125, 186, 125, 187, 125, 188, 125, 189, 125, 190, 125, 191, 125, 192, 125, 193, 125, 194, 125, 195, 125, 196, 125, 197, 125, 198, 125, 199, 125, 200, 125, 201, 125, 202, 125, 203, 125, 204, 125, 205, 125, 206, 125, 207, 125, 208, 125, 209, 125, 210, 125, 211, 125, 212, 125, 213, 125, 214, 125, 215, 125, 216, 125, 217, 125, 218, 125, 219, 125, 220, 125, 221, 125, 222, 125, 223, 125, 224, 125, 225, 125, 226, 125, 227, 125, 228, 125, 229, 125, 230, 125, 231, 125, 232, 125, 233, 125, 234, 125, 235, 125, 236, 125, 237, 125, 238, 125, 239, 125, 240, 125, 241, 125, 242, 125, 243, 125, 244, 125, 245, 125, 246, 125, 247, 125, 248, 125, 249, 125, 250, 125, 61, 92, 178, 82, 70, 131, 98, 81, 14, 131, 91, 119, 118, 102, 184, 156, 172, 78, 202, 96, 190, 124, 179, 124, 207, 126, 149, 78, 102, 139, 111, 102, 136, 152, 89, 151, 131, 88, 108, 101, 92, 149, 132, 95, 201, 117, 86, 151, 223, 122, 222, 122, 192, 81, 175, 112, 152, 122, 234, 99, 118, 122, 160, 126, 150, 115, 237, 151, 69, 78, 120, 112, 93, 78, 82, 145, 169, 83, 81, 101, 231, 101, 252, 129, 5, 130, 142, 84, 49, 92, 154, 117, 160, 151, 216, 98, 217, 114, 189, 117, 69, 92, 121, 154, 202, 131, 64, 92, 128, 84, 233, 119, 62, 78, 174, 108, 90, 128, 210, 98, 110, 99, 232, 93, 119, 81, 221, 141, 30, 142, 47, 149, 241, 79, 229, 83, 231, 96, 172, 112, 103, 82, 80, 99, 67, 158, 31, 90, 38, 80, 55, 119, 119, 83, 226, 126, 133, 100, 43, 101, 137, 98, 152, 99, 20, 80, 53, 114, 201, 137, 179, 81, 192, 139, 221, 126, 71, 87, 204, 131, 167, 148, 155, 81, 27, 84, 251, 92, 251, 125, 252, 125, 253, 125, 254, 125, 255, 125, 0, 126, 1, 126, 2, 126, 3, 126, 4, 126, 5, 126, 6, 126, 7, 126, 8, 126, 9, 126, 10, 126, 11, 126, 12, 126, 13, 126, 14, 126, 15, 126, 16, 126, 17, 126, 18, 126, 19, 126, 20, 126, 21, 126, 22, 126, 23, 126, 24, 126, 25, 126, 26, 126, 27, 126, 28, 126, 29, 126, 30, 126, 31, 126, 32, 126, 33, 126, 34, 126, 35, 126, 36, 126, 37, 126, 38, 126, 39, 126, 40, 126, 41, 126, 42, 126, 43, 126, 44, 126, 45, 126, 46, 126, 47, 126, 48, 126, 49, 126, 50, 126, 51, 126, 52, 126, 53, 126, 54, 126, 55, 126, 56, 126, 57, 126, 58, 126, 60, 126, 61, 126, 62, 126, 63, 126, 64, 126, 66, 126, 67, 126, 68, 126, 69, 126, 70, 126, 72, 126, 73, 126, 74, 126, 75, 126, 76, 126, 77, 126, 78, 126, 79, 126, 80, 126, 81, 126, 82, 126, 83, 126, 84, 126, 85, 126, 86, 126, 87, 126, 88, 126, 89, 126, 90, 126, 91, 126, 92, 126, 93, 126, 202, 79, 227, 122, 90, 109, 225, 144, 143, 154, 128, 85, 150, 84, 97, 83, 175, 84, 0, 95, 233, 99, 119, 105, 239, 81, 104, 97, 10, 82, 42, 88, 216, 82, 78, 87, 13, 120, 11, 119, 183, 94, 119, 97, 224, 124, 91, 98, 151, 98, 162, 78, 149, 112, 3, 128, 247, 98, 228, 112, 96, 151, 119, 87, 219, 130, 239, 103, 245, 104, 213, 120, 151, 152, 209, 121, 243, 88, 179, 84, 239, 83, 52, 110, 75, 81, 59, 82, 162, 91, 254, 139, 175, 128, 67, 85, 166, 87, 115, 96, 81, 87, 45, 84, 122, 122, 80, 96, 84, 91, 167, 99, 160, 98, 227, 83, 99, 98, 199, 91, 175, 103, 237, 84, 159, 122, 230, 130, 119, 145, 147, 94, 228, 136, 56, 89, 174, 87, 14, 99, 232, 141, 239, 128, 87, 87, 119, 123, 169, 79, 235, 95, 189, 91, 62, 107, 33, 83, 80, 123, 194, 114, 70, 104, 255, 119, 54, 119, 247, 101, 181, 81, 143, 78, 212, 118, 191, 92, 165, 122, 117, 132, 78, 89, 65, 155, 128, 80, 94, 126, 95, 126, 96, 126, 97, 126, 98, 126, 99, 126, 100, 126, 101, 126, 102, 126, 103, 126, 104, 126, 105, 126, 106, 126, 107, 126, 108, 126, 109, 126, 110, 126, 111, 126, 112, 126, 113, 126, 114, 126, 115, 126, 116, 126, 117, 126, 118, 126, 119, 126, 120, 126, 121, 126, 122, 126, 123, 126, 124, 126, 125, 126, 126, 126, 127, 126, 128, 126, 129, 126, 131, 126, 132, 126, 133, 126, 134, 126, 135, 126, 136, 126, 137, 126, 138, 126, 139, 126, 140, 126, 141, 126, 142, 126, 143, 126, 144, 126, 145, 126, 146, 126, 147, 126, 148, 126, 149, 126, 150, 126, 151, 126, 152, 126, 153, 126, 154, 126, 156, 126, 157, 126, 158, 126, 174, 126, 180, 126, 187, 126, 188, 126, 214, 126, 228, 126, 236, 126, 249, 126, 10, 127, 16, 127, 30, 127, 55, 127, 57, 127, 59, 127, 60, 127, 61, 127, 62, 127, 63, 127, 64, 127, 65, 127, 67, 127, 70, 127, 71, 127, 72, 127, 73, 127, 74, 127, 75, 127, 76, 127, 77, 127, 78, 127, 79, 127, 82, 127, 83, 127, 136, 153, 39, 97, 131, 110, 100, 87, 6, 102, 70, 99, 240, 86, 236, 98, 105, 98, 211, 94, 20, 150, 131, 87, 201, 98, 135, 85, 33, 135, 74, 129, 163, 143, 102, 85, 177, 131, 101, 103, 86, 141, 221, 132, 106, 90, 15, 104, 230, 98, 238, 123, 17, 150, 112, 81, 156, 111, 48, 140, 253, 99, 200, 137, 210, 97, 6, 127, 194, 112, 229, 110, 5, 116, 148, 105, 252, 114, 202, 94, 206, 144, 23, 103, 106, 109, 94, 99, 179, 82, 98, 114, 1, 128, 108, 79, 229, 89, 106, 145, 217, 112, 157, 109, 210, 82, 80, 78, 247, 150, 109, 149, 126, 133, 202, 120, 47, 125, 33, 81, 146, 87, 194, 100, 139, 128, 123, 124, 234, 108, 241, 104, 94, 105, 183, 81, 152, 83, 168, 104, 129, 114, 206, 158, 241, 123, 248, 114, 187, 121, 19, 111, 6, 116, 78, 103, 204, 145, 164, 156, 60, 121, 137, 131, 84, 131, 15, 84, 23, 104, 61, 78, 137, 83, 177, 82, 62, 120, 134, 83, 41, 82, 136, 80, 139, 79, 208, 79, 86, 127, 89, 127, 91, 127, 92, 127, 93, 127, 94, 127, 96, 127, 99, 127, 100, 127, 101, 127, 102, 127, 103, 127, 107, 127, 108, 127, 109, 127, 111, 127, 112, 127, 115, 127, 117, 127, 118, 127, 119, 127, 120, 127, 122, 127, 123, 127, 124, 127, 125, 127, 127, 127, 128, 127, 130, 127, 131, 127, 132, 127, 133, 127, 134, 127, 135, 127, 136, 127, 137, 127, 139, 127, 141, 127, 143, 127, 144, 127, 145, 127, 146, 127, 147, 127, 149, 127, 150, 127, 151, 127, 152, 127, 153, 127, 155, 127, 156, 127, 160, 127, 162, 127, 163, 127, 165, 127, 166, 127, 168, 127, 169, 127, 170, 127, 171, 127, 172, 127, 173, 127, 174, 127, 177, 127, 179, 127, 180, 127, 181, 127, 182, 127, 183, 127, 186, 127, 187, 127, 190, 127, 192, 127, 194, 127, 195, 127, 196, 127, 198, 127, 199, 127, 200, 127, 201, 127, 203, 127, 205, 127, 207, 127, 208, 127, 209, 127, 210, 127, 211, 127, 214, 127, 215, 127, 217, 127, 218, 127, 219, 127, 220, 127, 221, 127, 222, 127, 226, 127, 227, 127, 226, 117, 203, 122, 146, 124, 165, 108, 182, 150, 155, 82, 131, 116, 233, 84, 233, 79, 84, 128, 178, 131, 222, 143, 112, 149, 201, 94, 28, 96, 159, 109, 24, 94, 91, 101, 56, 129, 254, 148, 75, 96, 188, 112, 195, 126, 174, 124, 201, 81, 129, 104, 177, 124, 111, 130, 36, 78, 134, 143, 207, 145, 126, 102, 174, 78, 5, 140, 169, 100, 74, 128, 218, 80, 151, 117, 206, 113, 229, 91, 189, 143, 102, 111, 134, 78, 130, 100, 99, 149, 214, 94, 153, 101, 23, 82, 194, 136, 200, 112, 163, 82, 14, 115, 51, 116, 151, 103, 247, 120, 22, 151, 52, 78, 187, 144, 222, 156, 203, 109, 219, 81, 65, 141, 29, 84, 206, 98, 178, 115, 241, 131, 246, 150, 132, 159, 195, 148, 54, 79, 154, 127, 204, 81, 117, 112, 117, 150, 173, 92, 134, 152, 230, 83, 228, 78, 156, 110, 9, 116, 180, 105, 107, 120, 143, 153, 89, 117, 24, 82, 36, 118, 65, 109, 243, 103, 109, 81, 153, 159, 75, 128, 153, 84, 60, 123, 191, 122, 228, 127, 231, 127, 232, 127, 234, 127, 235, 127, 236, 127, 237, 127, 239, 127, 242, 127, 244, 127, 245, 127, 246, 127, 247, 127, 248, 127, 249, 127, 250, 127, 253, 127, 254, 127, 255, 127, 2, 128, 7, 128, 8, 128, 9, 128, 10, 128, 14, 128, 15, 128, 17, 128, 19, 128, 26, 128, 27, 128, 29, 128, 30, 128, 31, 128, 33, 128, 35, 128, 36, 128, 43, 128, 44, 128, 45, 128, 46, 128, 47, 128, 48, 128, 50, 128, 52, 128, 57, 128, 58, 128, 60, 128, 62, 128, 64, 128, 65, 128, 68, 128, 69, 128, 71, 128, 72, 128, 73, 128, 78, 128, 79, 128, 80, 128, 81, 128, 83, 128, 85, 128, 86, 128, 87, 128, 89, 128, 91, 128, 92, 128, 93, 128, 94, 128, 95, 128, 96, 128, 97, 128, 98, 128, 99, 128, 100, 128, 101, 128, 102, 128, 103, 128, 104, 128, 107, 128, 108, 128, 109, 128, 110, 128, 111, 128, 112, 128, 114, 128, 115, 128, 116, 128, 117, 128, 118, 128, 119, 128, 120, 128, 121, 128, 122, 128, 123, 128, 124, 128, 125, 128, 134, 150, 132, 87, 226, 98, 71, 150, 124, 105, 4, 90, 2, 100, 211, 123, 15, 111, 75, 150, 166, 130, 98, 83, 133, 152, 144, 94, 137, 112, 179, 99, 100, 83, 79, 134, 129, 156, 147, 158, 140, 120, 50, 151, 239, 141, 66, 141, 127, 158, 94, 111, 132, 121, 85, 95, 70, 150, 46, 98, 116, 154, 21, 84, 221, 148, 163, 79, 197, 101, 101, 92, 97, 92, 21, 127, 81, 134, 47, 108, 139, 95, 135, 115, 228, 110, 255, 126, 230, 92, 27, 99, 106, 91, 230, 110, 117, 83, 113, 78, 160, 99, 101, 117, 161, 98, 110, 143, 38, 79, 209, 78, 166, 108, 182, 126, 186, 139, 29, 132, 186, 135, 87, 127, 59, 144, 35, 149, 169, 123, 161, 154, 248, 136, 61, 132, 27, 109, 134, 154, 220, 126, 136, 89, 187, 158, 155, 115, 1, 120, 130, 134, 108, 154, 130, 154, 27, 86, 23, 84, 203, 87, 112, 78, 166, 158, 86, 83, 200, 143, 9, 129, 146, 119, 146, 153, 238, 134, 225, 110, 19, 133, 252, 102, 98, 97, 43, 111, 126, 128, 129, 128, 130, 128, 133, 128, 136, 128, 138, 128, 141, 128, 142, 128, 143, 128, 144, 128, 145, 128, 146, 128, 148, 128, 149, 128, 151, 128, 153, 128, 158, 128, 163, 128, 166, 128, 167, 128, 168, 128, 172, 128, 176, 128, 179, 128, 181, 128, 182, 128, 184, 128, 185, 128, 187, 128, 197, 128, 199, 128, 200, 128, 201, 128, 202, 128, 203, 128, 207, 128, 208, 128, 209, 128, 210, 128, 211, 128, 212, 128, 213, 128, 216, 128, 223, 128, 224, 128, 226, 128, 227, 128, 230, 128, 238, 128, 245, 128, 247, 128, 249, 128, 251, 128, 254, 128, 255, 128, 0, 129, 1, 129, 3, 129, 4, 129, 5, 129, 7, 129, 8, 129, 11, 129, 12, 129, 21, 129, 23, 129, 25, 129, 27, 129, 28, 129, 29, 129, 31, 129, 32, 129, 33, 129, 34, 129, 35, 129, 36, 129, 37, 129, 38, 129, 39, 129, 40, 129, 41, 129, 42, 129, 43, 129, 45, 129, 46, 129, 48, 129, 51, 129, 52, 129, 53, 129, 55, 129, 57, 129, 58, 129, 59, 129, 60, 129, 61, 129, 63, 129, 41, 140, 146, 130, 43, 131, 242, 118, 19, 108, 217, 95, 189, 131, 43, 115, 5, 131, 26, 149, 219, 107, 219, 119, 198, 148, 111, 83, 2, 131, 146, 81, 61, 94, 140, 140, 56, 141, 72, 78, 171, 115, 154, 103, 133, 104, 118, 145, 9, 151, 100, 113, 161, 108, 9, 119, 146, 90, 65, 149, 207, 107, 142, 127, 39, 102, 208, 91, 185, 89, 154, 90, 232, 149, 247, 149, 236, 78, 12, 132, 153, 132, 172, 106, 223, 118, 48, 149, 27, 115, 166, 104, 95, 91, 47, 119, 154, 145, 97, 151, 220, 124, 247, 143, 28, 140, 37, 95, 115, 124, 216, 121, 197, 137, 204, 108, 28, 135, 198, 91, 66, 94, 201, 104, 32, 119, 245, 126, 149, 81, 77, 81, 201, 82, 41, 90, 5, 127, 98, 151, 215, 130, 207, 99, 132, 119, 208, 133, 210, 121, 58, 110, 153, 94, 153, 89, 17, 133, 109, 112, 17, 108, 191, 98, 191, 118, 79, 101, 175, 96, 253, 149, 14, 102, 159, 135, 35, 158, 237, 148, 13, 84, 125, 84, 44, 140, 120, 100, 64, 129, 65, 129, 66, 129, 67, 129, 68, 129, 69, 129, 71, 129, 73, 129, 77, 129, 78, 129, 79, 129, 82, 129, 86, 129, 87, 129, 88, 129, 91, 129, 92, 129, 93, 129, 94, 129, 95, 129, 97, 129, 98, 129, 99, 129, 100, 129, 102, 129, 104, 129, 106, 129, 107, 129, 108, 129, 111, 129, 114, 129, 115, 129, 117, 129, 118, 129, 119, 129, 120, 129, 129, 129, 131, 129, 132, 129, 133, 129, 134, 129, 135, 129, 137, 129, 139, 129, 140, 129, 141, 129, 142, 129, 144, 129, 146, 129, 147, 129, 148, 129, 149, 129, 150, 129, 151, 129, 153, 129, 154, 129, 158, 129, 159, 129, 160, 129, 161, 129, 162, 129, 164, 129, 165, 129, 167, 129, 169, 129, 171, 129, 172, 129, 173, 129, 174, 129, 175, 129, 176, 129, 177, 129, 178, 129, 180, 129, 181, 129, 182, 129, 183, 129, 184, 129, 185, 129, 188, 129, 189, 129, 190, 129, 191, 129, 196, 129, 197, 129, 199, 129, 200, 129, 201, 129, 203, 129, 205, 129, 206, 129, 207, 129, 208, 129, 209, 129, 210, 129, 211, 129, 121, 100, 17, 134, 33, 106, 156, 129, 232, 120, 105, 100, 84, 155, 185, 98, 43, 103, 171, 131, 168, 88, 216, 158, 171, 108, 32, 111, 222, 91, 76, 150, 11, 140, 95, 114, 208, 103, 199, 98, 97, 114, 169, 78, 198, 89, 205, 107, 147, 88, 174, 102, 85, 94, 223, 82, 85, 97, 40, 103, 238, 118, 102, 119, 103, 114, 70, 122, 255, 98, 234, 84, 80, 84, 160, 148, 163, 144, 28, 90, 179, 126, 22, 108, 67, 78, 118, 89, 16, 128, 72, 89, 87, 83, 55, 117, 190, 150, 202, 86, 32, 99, 17, 129, 124, 96, 249, 149, 214, 109, 98, 84, 129, 153, 133, 81, 233, 90, 253, 128, 174, 89, 19, 151, 42, 80, 229, 108, 60, 92, 223, 98, 96, 79, 63, 83, 123, 129, 6, 144, 186, 110, 43, 133, 200, 98, 116, 94, 190, 120, 181, 100, 123, 99, 245, 95, 24, 90, 127, 145, 31, 158, 63, 92, 79, 99, 66, 128, 125, 91, 110, 85, 74, 149, 77, 149, 133, 109, 168, 96, 224, 103, 222, 114, 221, 81, 129, 91, 212, 129, 213, 129, 214, 129, 215, 129, 216, 129, 217, 129, 218, 129, 219, 129, 220, 129, 221, 129, 222, 129, 223, 129, 224, 129, 225, 129, 226, 129, 228, 129, 229, 129, 230, 129, 232, 129, 233, 129, 235, 129, 238, 129, 239, 129, 240, 129, 241, 129, 242, 129, 245, 129, 246, 129, 247, 129, 248, 129, 249, 129, 250, 129, 253, 129, 255, 129, 3, 130, 7, 130, 8, 130, 9, 130, 10, 130, 11, 130, 14, 130, 15, 130, 17, 130, 19, 130, 21, 130, 22, 130, 23, 130, 24, 130, 25, 130, 26, 130, 29, 130, 32, 130, 36, 130, 37, 130, 38, 130, 39, 130, 41, 130, 46, 130, 50, 130, 58, 130, 60, 130, 61, 130, 63, 130, 64, 130, 65, 130, 66, 130, 67, 130, 69, 130, 70, 130, 72, 130, 74, 130, 76, 130, 77, 130, 78, 130, 80, 130, 81, 130, 82, 130, 83, 130, 84, 130, 85, 130, 86, 130, 87, 130, 89, 130, 91, 130, 92, 130, 93, 130, 94, 130, 96, 130, 97, 130, 98, 130, 99, 130, 100, 130, 101, 130, 102, 130, 103, 130, 105, 130, 231, 98, 222, 108, 91, 114, 109, 98, 174, 148, 189, 126, 19, 129, 83, 109, 156, 81, 4, 95, 116, 89, 170, 82, 18, 96, 115, 89, 150, 102, 80, 134, 159, 117, 42, 99, 230, 97, 239, 124, 250, 139, 230, 84, 39, 107, 37, 158, 180, 107, 213, 133, 85, 84, 118, 80, 164, 108, 106, 85, 180, 141, 44, 114, 21, 94, 21, 96, 54, 116, 205, 98, 146, 99, 76, 114, 152, 95, 67, 110, 62, 109, 0, 101, 88, 111, 216, 118, 208, 120, 252, 118, 84, 117, 36, 82, 219, 83, 83, 78, 158, 94, 193, 101, 42, 128, 214, 128, 155, 98, 134, 84, 40, 82, 174, 112, 141, 136, 209, 141, 225, 108, 120, 84, 218, 128, 249, 87, 244, 136, 84, 141, 106, 150, 77, 145, 105, 79, 155, 108, 183, 85, 198, 118, 48, 120, 168, 98, 249, 112, 142, 111, 109, 95, 236, 132, 218, 104, 124, 120, 247, 123, 168, 129, 11, 103, 79, 158, 103, 99, 176, 120, 111, 87, 18, 120, 57, 151, 121, 98, 171, 98, 136, 82, 53, 116, 215, 107, 106, 130, 107, 130, 108, 130, 109, 130, 113, 130, 117, 130, 118, 130, 119, 130, 120, 130, 123, 130, 124, 130, 128, 130, 129, 130, 131, 130, 133, 130, 134, 130, 135, 130, 137, 130, 140, 130, 144, 130, 147, 130, 148, 130, 149, 130, 150, 130, 154, 130, 155, 130, 158, 130, 160, 130, 162, 130, 163, 130, 167, 130, 178, 130, 181, 130, 182, 130, 186, 130, 187, 130, 188, 130, 191, 130, 192, 130, 194, 130, 195, 130, 197, 130, 198, 130, 201, 130, 208, 130, 214, 130, 217, 130, 218, 130, 221, 130, 226, 130, 231, 130, 232, 130, 233, 130, 234, 130, 236, 130, 237, 130, 238, 130, 240, 130, 242, 130, 243, 130, 245, 130, 246, 130, 248, 130, 250, 130, 252, 130, 253, 130, 254, 130, 255, 130, 0, 131, 10, 131, 11, 131, 13, 131, 16, 131, 18, 131, 19, 131, 22, 131, 24, 131, 25, 131, 29, 131, 30, 131, 31, 131, 32, 131, 33, 131, 34, 131, 35, 131, 36, 131, 37, 131, 38, 131, 41, 131, 42, 131, 46, 131, 48, 131, 50, 131, 55, 131, 59, 131, 61, 131, 100, 85, 62, 129, 178, 117, 174, 118, 57, 83, 222, 117, 251, 80, 65, 92, 108, 139, 199, 123, 79, 80, 71, 114, 151, 154, 216, 152, 2, 111, 226, 116, 104, 121, 135, 100, 165, 119, 252, 98, 145, 152, 43, 141, 193, 84, 88, 128, 82, 78, 106, 87, 249, 130, 13, 132, 115, 94, 237, 81, 246, 116, 196, 139, 79, 92, 97, 87, 252, 108, 135, 152, 70, 90, 52, 120, 68, 155, 235, 143, 149, 124, 86, 82, 81, 98, 250, 148, 198, 78, 134, 131, 97, 132, 233, 131, 178, 132, 212, 87, 52, 103, 3, 87, 110, 102, 102, 109, 49, 140, 221, 102, 17, 112, 31, 103, 58, 107, 22, 104, 26, 98, 187, 89, 3, 78, 196, 81, 6, 111, 210, 103, 143, 108, 118, 81, 203, 104, 71, 89, 103, 107, 102, 117, 14, 93, 16, 129, 80, 159, 215, 101, 72, 121, 65, 121, 145, 154, 119, 141, 130, 92, 94, 78, 1, 79, 47, 84, 81, 89, 12, 120, 104, 86, 20, 108, 196, 143, 3, 95, 125, 108, 227, 108, 171, 139, 144, 99, 62, 131, 63, 131, 65, 131, 66, 131, 68, 131, 69, 131, 72, 131, 74, 131, 75, 131, 76, 131, 77, 131, 78, 131, 83, 131, 85, 131, 86, 131, 87, 131, 88, 131, 89, 131, 93, 131, 98, 131, 112, 131, 113, 131, 114, 131, 115, 131, 116, 131, 117, 131, 118, 131, 121, 131, 122, 131, 126, 131, 127, 131, 128, 131, 129, 131, 130, 131, 131, 131, 132, 131, 135, 131, 136, 131, 138, 131, 139, 131, 140, 131, 141, 131, 143, 131, 144, 131, 145, 131, 148, 131, 149, 131, 150, 131, 151, 131, 153, 131, 154, 131, 157, 131, 159, 131, 161, 131, 162, 131, 163, 131, 164, 131, 165, 131, 166, 131, 167, 131, 172, 131, 173, 131, 174, 131, 175, 131, 181, 131, 187, 131, 190, 131, 191, 131, 194, 131, 195, 131, 196, 131, 198, 131, 200, 131, 201, 131, 203, 131, 205, 131, 206, 131, 208, 131, 209, 131, 210, 131, 211, 131, 213, 131, 215, 131, 217, 131, 218, 131, 219, 131, 222, 131, 226, 131, 227, 131, 228, 131, 230, 131, 231, 131, 232, 131, 235, 131, 236, 131, 237, 131, 112, 96, 61, 109, 117, 114, 102, 98, 142, 148, 197, 148, 67, 83, 193, 143, 126, 123, 223, 78, 38, 140, 126, 78, 212, 158, 177, 148, 179, 148, 77, 82, 92, 111, 99, 144, 69, 109, 52, 140, 17, 88, 76, 93, 32, 107, 73, 107, 170, 103, 91, 84, 84, 129, 140, 127, 153, 88, 55, 133, 58, 95, 162, 98, 71, 106, 57, 149, 114, 101, 132, 96, 101, 104, 167, 119, 84, 78, 168, 79, 231, 93, 152, 151, 172, 100, 216, 127, 237, 92, 207, 79, 141, 122, 7, 82, 4, 131, 20, 78, 47, 96, 131, 122, 166, 148, 181, 79, 178, 78, 230, 121, 52, 116, 228, 82, 185, 130, 210, 100, 189, 121, 221, 91, 129, 108, 82, 151, 123, 143, 34, 108, 62, 80, 127, 83, 5, 110, 206, 100, 116, 102, 48, 108, 197, 96, 119, 152, 247, 139, 134, 94, 60, 116, 119, 122, 203, 121, 24, 78, 177, 144, 3, 116, 66, 108, 218, 86, 75, 145, 197, 108, 139, 141, 58, 83, 198, 134, 242, 102, 175, 142, 72, 92, 113, 154, 32, 110, 238, 131, 239, 131, 243, 131, 244, 131, 245, 131, 246, 131, 247, 131, 250, 131, 251, 131, 252, 131, 254, 131, 255, 131, 0, 132, 2, 132, 5, 132, 7, 132, 8, 132, 9, 132, 10, 132, 16, 132, 18, 132, 19, 132, 20, 132, 21, 132, 22, 132, 23, 132, 25, 132, 26, 132, 27, 132, 30, 132, 31, 132, 32, 132, 33, 132, 34, 132, 35, 132, 41, 132, 42, 132, 43, 132, 44, 132, 45, 132, 46, 132, 47, 132, 48, 132, 50, 132, 51, 132, 52, 132, 53, 132, 54, 132, 55, 132, 57, 132, 58, 132, 59, 132, 62, 132, 63, 132, 64, 132, 65, 132, 66, 132, 67, 132, 68, 132, 69, 132, 71, 132, 72, 132, 73, 132, 74, 132, 75, 132, 76, 132, 77, 132, 78, 132, 79, 132, 80, 132, 82, 132, 83, 132, 84, 132, 85, 132, 86, 132, 88, 132, 93, 132, 94, 132, 95, 132, 96, 132, 98, 132, 100, 132, 101, 132, 102, 132, 103, 132, 104, 132, 106, 132, 110, 132, 111, 132, 112, 132, 114, 132, 116, 132, 119, 132, 121, 132, 123, 132, 124, 132, 214, 83, 54, 90, 139, 159, 163, 141, 187, 83, 8, 87, 167, 152, 67, 103, 155, 145, 201, 108, 104, 81, 202, 117, 243, 98, 172, 114, 56, 82, 157, 82, 58, 127, 148, 112, 56, 118, 116, 83, 74, 158, 183, 105, 110, 120, 192, 150, 217, 136, 164, 127, 54, 113, 195, 113, 137, 81, 211, 103, 228, 116, 228, 88, 24, 101, 183, 86, 169, 139, 118, 153, 112, 98, 213, 126, 249, 96, 237, 112, 236, 88, 193, 78, 186, 78, 205, 95, 231, 151, 251, 78, 164, 139, 3, 82, 138, 89, 171, 126, 84, 98, 205, 78, 229, 101, 14, 98, 56, 131, 201, 132, 99, 131, 141, 135, 148, 113, 182, 110, 185, 91, 210, 126, 151, 81, 201, 99, 212, 103, 137, 128, 57, 131, 21, 136, 18, 81, 122, 91, 130, 89, 177, 143, 115, 78, 93, 108, 101, 81, 37, 137, 111, 143, 46, 150, 74, 133, 94, 116, 16, 149, 240, 149, 166, 109, 229, 130, 49, 95, 146, 100, 18, 109, 40, 132, 110, 129, 195, 156, 94, 88, 91, 141, 9, 78, 193, 83, 125, 132, 126, 132, 127, 132, 128, 132, 129, 132, 131, 132, 132, 132, 133, 132, 134, 132, 138, 132, 141, 132, 143, 132, 144, 132, 145, 132, 146, 132, 147, 132, 148, 132, 149, 132, 150, 132, 152, 132, 154, 132, 155, 132, 157, 132, 158, 132, 159, 132, 160, 132, 162, 132, 163, 132, 164, 132, 165, 132, 166, 132, 167, 132, 168, 132, 169, 132, 170, 132, 171, 132, 172, 132, 173, 132, 174, 132, 176, 132, 177, 132, 179, 132, 181, 132, 182, 132, 183, 132, 187, 132, 188, 132, 190, 132, 192, 132, 194, 132, 195, 132, 197, 132, 198, 132, 199, 132, 200, 132, 203, 132, 204, 132, 206, 132, 207, 132, 210, 132, 212, 132, 213, 132, 215, 132, 216, 132, 217, 132, 218, 132, 219, 132, 220, 132, 222, 132, 225, 132, 226, 132, 228, 132, 231, 132, 232, 132, 233, 132, 234, 132, 235, 132, 237, 132, 238, 132, 239, 132, 241, 132, 242, 132, 243, 132, 244, 132, 245, 132, 246, 132, 247, 132, 248, 132, 249, 132, 250, 132, 251, 132, 253, 132, 254, 132, 0, 133, 1, 133, 2, 133, 30, 79, 99, 101, 81, 104, 211, 85, 39, 78, 20, 100, 154, 154, 107, 98, 194, 90, 95, 116, 114, 130, 169, 109, 238, 104, 231, 80, 142, 131, 2, 120, 64, 103, 57, 82, 153, 108, 177, 126, 187, 80, 101, 85, 94, 113, 91, 123, 82, 102, 202, 115, 235, 130, 73, 103, 113, 92, 32, 82, 125, 113, 107, 136, 234, 149, 85, 150, 197, 100, 97, 141, 179, 129, 132, 85, 85, 108, 71, 98, 46, 127, 146, 88, 36, 79, 70, 85, 79, 141, 76, 102, 10, 78, 26, 92, 243, 136, 162, 104, 78, 99, 13, 122, 231, 112, 141, 130, 250, 82, 246, 151, 17, 92, 232, 84, 181, 144, 205, 126, 98, 89, 74, 141, 199, 134, 12, 130, 13, 130, 102, 141, 68, 100, 4, 92, 81, 97, 137, 109, 62, 121, 190, 139, 55, 120, 51, 117, 123, 84, 56, 79, 171, 142, 241, 109, 32, 90, 197, 126, 94, 121, 136, 108, 161, 91, 118, 90, 26, 117, 190, 128, 78, 97, 23, 110, 240, 88, 31, 117, 37, 117, 114, 114, 71, 83, 243, 126, 3, 133, 4, 133, 5, 133, 6, 133, 7, 133, 8, 133, 9, 133, 10, 133, 11, 133, 13, 133, 14, 133, 15, 133, 16, 133, 18, 133, 20, 133, 21, 133, 22, 133, 24, 133, 25, 133, 27, 133, 28, 133, 29, 133, 30, 133, 32, 133, 34, 133, 35, 133, 36, 133, 37, 133, 38, 133, 39, 133, 40, 133, 41, 133, 42, 133, 45, 133, 46, 133, 47, 133, 48, 133, 49, 133, 50, 133, 51, 133, 52, 133, 53, 133, 54, 133, 62, 133, 63, 133, 64, 133, 65, 133, 66, 133, 68, 133, 69, 133, 70, 133, 71, 133, 75, 133, 76, 133, 77, 133, 78, 133, 79, 133, 80, 133, 81, 133, 82, 133, 83, 133, 84, 133, 85, 133, 87, 133, 88, 133, 90, 133, 91, 133, 92, 133, 93, 133, 95, 133, 96, 133, 97, 133, 98, 133, 99, 133, 101, 133, 102, 133, 103, 133, 105, 133, 106, 133, 107, 133, 108, 133, 109, 133, 110, 133, 111, 133, 112, 133, 113, 133, 115, 133, 117, 133, 118, 133, 119, 133, 120, 133, 124, 133, 125, 133, 127, 133, 128, 133, 129, 133, 1, 119, 219, 118, 105, 82, 220, 128, 35, 87, 8, 94, 49, 89, 238, 114, 189, 101, 127, 110, 215, 139, 56, 92, 113, 134, 65, 83, 243, 119, 254, 98, 246, 101, 192, 78, 223, 152, 128, 134, 158, 91, 198, 139, 242, 83, 226, 119, 127, 79, 78, 92, 118, 154, 203, 89], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 45812);
    allocate([15, 95, 58, 121, 235, 88, 22, 78, 255, 103, 139, 78, 237, 98, 147, 138, 29, 144, 191, 82, 47, 102, 220, 85, 108, 86, 2, 144, 213, 78, 141, 79, 202, 145, 112, 153, 15, 108, 2, 94, 67, 96, 164, 91, 198, 137, 213, 139, 54, 101, 75, 98, 150, 153, 136, 91, 255, 91, 136, 99, 46, 85, 215, 83, 38, 118, 125, 81, 44, 133, 162, 103, 179, 104, 138, 107, 146, 98, 147, 143, 212, 83, 18, 130, 209, 109, 143, 117, 102, 78, 78, 141, 112, 91, 159, 113, 175, 133, 145, 102, 217, 102, 114, 127, 0, 135, 205, 158, 32, 159, 94, 92, 47, 103, 240, 143, 17, 104, 95, 103, 13, 98, 214, 122, 133, 88, 182, 94, 112, 101, 49, 111, 130, 133, 131, 133, 134, 133, 136, 133, 137, 133, 138, 133, 139, 133, 140, 133, 141, 133, 142, 133, 144, 133, 145, 133, 146, 133, 147, 133, 148, 133, 149, 133, 150, 133, 151, 133, 152, 133, 153, 133, 154, 133, 157, 133, 158, 133, 159, 133, 160, 133, 161, 133, 162, 133, 163, 133, 165, 133, 166, 133, 167, 133, 169, 133, 171, 133, 172, 133, 173, 133, 177, 133, 178, 133, 179, 133, 180, 133, 181, 133, 182, 133, 184, 133, 186, 133, 187, 133, 188, 133, 189, 133, 190, 133, 191, 133, 192, 133, 194, 133, 195, 133, 196, 133, 197, 133, 198, 133, 199, 133, 200, 133, 202, 133, 203, 133, 204, 133, 205, 133, 206, 133, 209, 133, 210, 133, 212, 133, 214, 133, 215, 133, 216, 133, 217, 133, 218, 133, 219, 133, 221, 133, 222, 133, 223, 133, 224, 133, 225, 133, 226, 133, 227, 133, 229, 133, 230, 133, 231, 133, 232, 133, 234, 133, 235, 133, 236, 133, 237, 133, 238, 133, 239, 133, 240, 133, 241, 133, 242, 133, 243, 133, 244, 133, 245, 133, 246, 133, 247, 133, 248, 133, 85, 96, 55, 82, 13, 128, 84, 100, 112, 136, 41, 117, 5, 94, 19, 104, 244, 98, 28, 151, 204, 83, 61, 114, 1, 140, 52, 108, 97, 119, 14, 122, 46, 84, 172, 119, 122, 152, 28, 130, 244, 139, 85, 120, 20, 103, 193, 112, 175, 101, 149, 100, 54, 86, 29, 96, 193, 121, 248, 83, 29, 78, 123, 107, 134, 128, 250, 91, 227, 85, 219, 86, 58, 79, 60, 79, 114, 153, 243, 93, 126, 103, 56, 128, 2, 96, 130, 152, 1, 144, 139, 91, 188, 139, 245, 139, 28, 100, 88, 130, 222, 100, 253, 85, 207, 130, 101, 145, 215, 79, 32, 125, 31, 144, 159, 124, 243, 80, 81, 88, 175, 110, 191, 91, 201, 139, 131, 128, 120, 145, 156, 132, 151, 123, 125, 134, 139, 150, 143, 150, 229, 126, 211, 154, 142, 120, 129, 92, 87, 122, 66, 144, 167, 150, 95, 121, 89, 91, 95, 99, 11, 123, 209, 132, 173, 104, 6, 85, 41, 127, 16, 116, 34, 125, 1, 149, 64, 98, 76, 88, 214, 78, 131, 91, 121, 89, 84, 88, 249, 133, 250, 133, 252, 133, 253, 133, 254, 133, 0, 134, 1, 134, 2, 134, 3, 134, 4, 134, 6, 134, 7, 134, 8, 134, 9, 134, 10, 134, 11, 134, 12, 134, 13, 134, 14, 134, 15, 134, 16, 134, 18, 134, 19, 134, 20, 134, 21, 134, 23, 134, 24, 134, 25, 134, 26, 134, 27, 134, 28, 134, 29, 134, 30, 134, 31, 134, 32, 134, 33, 134, 34, 134, 35, 134, 36, 134, 37, 134, 38, 134, 40, 134, 42, 134, 43, 134, 44, 134, 45, 134, 46, 134, 47, 134, 48, 134, 49, 134, 50, 134, 51, 134, 52, 134, 53, 134, 54, 134, 55, 134, 57, 134, 58, 134, 59, 134, 61, 134, 62, 134, 63, 134, 64, 134, 65, 134, 66, 134, 67, 134, 68, 134, 69, 134, 70, 134, 71, 134, 72, 134, 73, 134, 74, 134, 75, 134, 76, 134, 82, 134, 83, 134, 85, 134, 86, 134, 87, 134, 88, 134, 89, 134, 91, 134, 92, 134, 93, 134, 95, 134, 96, 134, 97, 134, 99, 134, 100, 134, 101, 134, 102, 134, 103, 134, 104, 134, 105, 134, 106, 134, 109, 115, 30, 99, 75, 142, 15, 142, 206, 128, 212, 130, 172, 98, 240, 83, 240, 108, 94, 145, 42, 89, 1, 96, 112, 108, 77, 87, 74, 100, 42, 141, 43, 118, 233, 110, 91, 87, 128, 106, 240, 117, 109, 111, 45, 140, 8, 140, 102, 87, 239, 107, 146, 136, 179, 120, 162, 99, 249, 83, 173, 112, 100, 108, 88, 88, 42, 100, 2, 88, 224, 104, 155, 129, 16, 85, 214, 124, 24, 80, 186, 142, 204, 109, 159, 141, 235, 112, 143, 99, 155, 109, 212, 110, 230, 126, 4, 132, 67, 104, 3, 144, 216, 109, 118, 150, 168, 139, 87, 89, 121, 114, 228, 133, 126, 129, 188, 117, 138, 138, 175, 104, 84, 82, 34, 142, 17, 149, 208, 99, 152, 152, 68, 142, 124, 85, 83, 79, 255, 102, 143, 86, 213, 96, 149, 109, 67, 82, 73, 92, 41, 89, 251, 109, 107, 88, 48, 117, 28, 117, 108, 96, 20, 130, 70, 129, 17, 99, 97, 103, 226, 143, 58, 119, 243, 141, 52, 141, 193, 148, 22, 94, 133, 83, 44, 84, 195, 112, 109, 134, 111, 134, 112, 134, 114, 134, 115, 134, 116, 134, 117, 134, 118, 134, 119, 134, 120, 134, 131, 134, 132, 134, 133, 134, 134, 134, 135, 134, 136, 134, 137, 134, 142, 134, 143, 134, 144, 134, 145, 134, 146, 134, 148, 134, 150, 134, 151, 134, 152, 134, 153, 134, 154, 134, 155, 134, 158, 134, 159, 134, 160, 134, 161, 134, 162, 134, 165, 134, 166, 134, 171, 134, 173, 134, 174, 134, 178, 134, 179, 134, 183, 134, 184, 134, 185, 134, 187, 134, 188, 134, 189, 134, 190, 134, 191, 134, 193, 134, 194, 134, 195, 134, 197, 134, 200, 134, 204, 134, 205, 134, 210, 134, 211, 134, 213, 134, 214, 134, 215, 134, 218, 134, 220, 134, 221, 134, 224, 134, 225, 134, 226, 134, 227, 134, 229, 134, 230, 134, 231, 134, 232, 134, 234, 134, 235, 134, 236, 134, 239, 134, 245, 134, 246, 134, 247, 134, 250, 134, 251, 134, 252, 134, 253, 134, 255, 134, 1, 135, 4, 135, 5, 135, 6, 135, 11, 135, 12, 135, 14, 135, 15, 135, 16, 135, 17, 135, 20, 135, 22, 135, 64, 108, 247, 94, 92, 80, 173, 78, 173, 94, 58, 99, 71, 130, 26, 144, 80, 104, 110, 145, 179, 119, 12, 84, 220, 148, 100, 95, 229, 122, 118, 104, 69, 99, 82, 123, 223, 126, 219, 117, 119, 80, 149, 98, 52, 89, 15, 144, 248, 81, 195, 121, 129, 122, 254, 86, 146, 95, 20, 144, 130, 109, 96, 92, 31, 87, 16, 84, 84, 81, 77, 110, 226, 86, 168, 99, 147, 152, 127, 129, 21, 135, 42, 137, 0, 144, 30, 84, 111, 92, 192, 129, 214, 98, 88, 98, 49, 129, 53, 158, 64, 150, 110, 154, 124, 154, 45, 105, 165, 89, 211, 98, 62, 85, 22, 99, 199, 84, 217, 134, 60, 109, 3, 90, 230, 116, 156, 136, 106, 107, 22, 89, 76, 140, 47, 95, 126, 110, 169, 115, 125, 152, 56, 78, 247, 112, 140, 91, 151, 120, 61, 99, 90, 102, 150, 118, 203, 96, 155, 91, 73, 90, 7, 78, 85, 129, 106, 108, 139, 115, 161, 78, 137, 103, 81, 127, 128, 95, 250, 101, 27, 103, 216, 95, 132, 89, 1, 90, 25, 135, 27, 135, 29, 135, 31, 135, 32, 135, 36, 135, 38, 135, 39, 135, 40, 135, 42, 135, 43, 135, 44, 135, 45, 135, 47, 135, 48, 135, 50, 135, 51, 135, 53, 135, 54, 135, 56, 135, 57, 135, 58, 135, 60, 135, 61, 135, 64, 135, 65, 135, 66, 135, 67, 135, 68, 135, 69, 135, 70, 135, 74, 135, 75, 135, 77, 135, 79, 135, 80, 135, 81, 135, 82, 135, 84, 135, 85, 135, 86, 135, 88, 135, 90, 135, 91, 135, 92, 135, 93, 135, 94, 135, 95, 135, 97, 135, 98, 135, 102, 135, 103, 135, 104, 135, 105, 135, 106, 135, 107, 135, 108, 135, 109, 135, 111, 135, 113, 135, 114, 135, 115, 135, 117, 135, 119, 135, 120, 135, 121, 135, 122, 135, 127, 135, 128, 135, 129, 135, 132, 135, 134, 135, 135, 135, 137, 135, 138, 135, 140, 135, 142, 135, 143, 135, 144, 135, 145, 135, 146, 135, 148, 135, 149, 135, 150, 135, 152, 135, 153, 135, 154, 135, 155, 135, 156, 135, 157, 135, 158, 135, 160, 135, 161, 135, 162, 135, 163, 135, 164, 135, 205, 93, 174, 95, 113, 83, 230, 151, 221, 143, 69, 104, 244, 86, 47, 85, 223, 96, 58, 78, 77, 111, 244, 126, 199, 130, 14, 132, 212, 89, 31, 79, 42, 79, 62, 92, 172, 126, 42, 103, 26, 133, 115, 84, 79, 117, 195, 128, 130, 85, 79, 155, 77, 79, 45, 110, 19, 140, 9, 92, 112, 97, 107, 83, 31, 118, 41, 110, 138, 134, 135, 101, 251, 149, 185, 126, 59, 84, 51, 122, 10, 125, 238, 149, 225, 85, 193, 127, 238, 116, 29, 99, 23, 135, 161, 109, 157, 122, 17, 98, 161, 101, 103, 83, 225, 99, 131, 108, 235, 93, 92, 84, 168, 148, 76, 78, 97, 108, 236, 139, 75, 92, 224, 101, 156, 130, 167, 104, 62, 84, 52, 84, 203, 107, 102, 107, 148, 78, 66, 99, 72, 83, 30, 130, 13, 79, 174, 79, 94, 87, 10, 98, 254, 150, 100, 102, 105, 114, 255, 82, 161, 82, 159, 96, 239, 139, 20, 102, 153, 113, 144, 103, 127, 137, 82, 120, 253, 119, 112, 102, 59, 86, 56, 84, 33, 149, 122, 114, 165, 135, 166, 135, 167, 135, 169, 135, 170, 135, 174, 135, 176, 135, 177, 135, 178, 135, 180, 135, 182, 135, 183, 135, 184, 135, 185, 135, 187, 135, 188, 135, 190, 135, 191, 135, 193, 135, 194, 135, 195, 135, 196, 135, 197, 135, 199, 135, 200, 135, 201, 135, 204, 135, 205, 135, 206, 135, 207, 135, 208, 135, 212, 135, 213, 135, 214, 135, 215, 135, 216, 135, 217, 135, 218, 135, 220, 135, 221, 135, 222, 135, 223, 135, 225, 135, 226, 135, 227, 135, 228, 135, 230, 135, 231, 135, 232, 135, 233, 135, 235, 135, 236, 135, 237, 135, 239, 135, 240, 135, 241, 135, 242, 135, 243, 135, 244, 135, 245, 135, 246, 135, 247, 135, 248, 135, 250, 135, 251, 135, 252, 135, 253, 135, 255, 135, 0, 136, 1, 136, 2, 136, 4, 136, 5, 136, 6, 136, 7, 136, 8, 136, 9, 136, 11, 136, 12, 136, 13, 136, 14, 136, 15, 136, 16, 136, 17, 136, 18, 136, 20, 136, 23, 136, 24, 136, 25, 136, 26, 136, 28, 136, 29, 136, 30, 136, 31, 136, 32, 136, 35, 136, 0, 122, 111, 96, 12, 94, 137, 96, 157, 129, 21, 89, 220, 96, 132, 113, 239, 112, 170, 110, 80, 108, 128, 114, 132, 106, 173, 136, 45, 94, 96, 78, 179, 90, 156, 85, 227, 148, 23, 109, 251, 124, 153, 150, 15, 98, 198, 126, 142, 119, 126, 134, 35, 83, 30, 151, 150, 143, 135, 102, 225, 92, 160, 79, 237, 114, 11, 78, 166, 83, 15, 89, 19, 84, 128, 99, 40, 149, 72, 81, 217, 78, 156, 156, 164, 126, 184, 84, 36, 141, 84, 136, 55, 130, 242, 149, 142, 109, 38, 95, 204, 90, 62, 102, 105, 150, 176, 115, 46, 115, 191, 83, 122, 129, 133, 153, 161, 127, 170, 91, 119, 150, 80, 150, 191, 126, 248, 118, 162, 83, 118, 149, 153, 153, 177, 123, 68, 137, 88, 110, 97, 78, 212, 127, 101, 121, 230, 139, 243, 96, 205, 84, 171, 78, 121, 152, 247, 93, 97, 106, 207, 80, 17, 84, 97, 140, 39, 132, 93, 120, 4, 151, 74, 82, 238, 84, 163, 86, 0, 149, 136, 109, 181, 91, 198, 109, 83, 102, 36, 136, 37, 136, 38, 136, 39, 136, 40, 136, 41, 136, 42, 136, 43, 136, 44, 136, 45, 136, 46, 136, 47, 136, 48, 136, 49, 136, 51, 136, 52, 136, 53, 136, 54, 136, 55, 136, 56, 136, 58, 136, 59, 136, 61, 136, 62, 136, 63, 136, 65, 136, 66, 136, 67, 136, 70, 136, 71, 136, 72, 136, 73, 136, 74, 136, 75, 136, 78, 136, 79, 136, 80, 136, 81, 136, 82, 136, 83, 136, 85, 136, 86, 136, 88, 136, 90, 136, 91, 136, 92, 136, 93, 136, 94, 136, 95, 136, 96, 136, 102, 136, 103, 136, 106, 136, 109, 136, 111, 136, 113, 136, 115, 136, 116, 136, 117, 136, 118, 136, 120, 136, 121, 136, 122, 136, 123, 136, 124, 136, 128, 136, 131, 136, 134, 136, 135, 136, 137, 136, 138, 136, 140, 136, 142, 136, 143, 136, 144, 136, 145, 136, 147, 136, 148, 136, 149, 136, 151, 136, 152, 136, 153, 136, 154, 136, 155, 136, 157, 136, 158, 136, 159, 136, 160, 136, 161, 136, 163, 136, 165, 136, 166, 136, 167, 136, 168, 136, 169, 136, 170, 136, 15, 92, 93, 91, 33, 104, 150, 128, 120, 85, 17, 123, 72, 101, 84, 105, 155, 78, 71, 107, 78, 135, 139, 151, 79, 83, 31, 99, 58, 100, 170, 144, 156, 101, 193, 128, 16, 140, 153, 81, 176, 104, 120, 83, 249, 135, 200, 97, 196, 108, 251, 108, 34, 140, 81, 92, 170, 133, 175, 130, 12, 149, 35, 107, 155, 143, 176, 101, 251, 95, 195, 95, 225, 79, 69, 136, 31, 102, 101, 129, 41, 115, 250, 96, 116, 81, 17, 82, 139, 87, 98, 95, 162, 144, 76, 136, 146, 145, 120, 94, 79, 103, 39, 96, 211, 89, 68, 81, 246, 81, 248, 128, 8, 83, 121, 108, 196, 150, 138, 113, 17, 79, 238, 79, 158, 127, 61, 103, 197, 85, 8, 149, 192, 121, 150, 136, 227, 126, 159, 88, 12, 98, 0, 151, 90, 134, 24, 86, 123, 152, 144, 95, 184, 139, 196, 132, 87, 145, 217, 83, 237, 101, 143, 94, 92, 117, 100, 96, 110, 125, 127, 90, 234, 126, 237, 126, 105, 143, 167, 85, 163, 91, 172, 96, 203, 101, 132, 115, 172, 136, 174, 136, 175, 136, 176, 136, 178, 136, 179, 136, 180, 136, 181, 136, 182, 136, 184, 136, 185, 136, 186, 136, 187, 136, 189, 136, 190, 136, 191, 136, 192, 136, 195, 136, 196, 136, 199, 136, 200, 136, 202, 136, 203, 136, 204, 136, 205, 136, 207, 136, 208, 136, 209, 136, 211, 136, 214, 136, 215, 136, 218, 136, 219, 136, 220, 136, 221, 136, 222, 136, 224, 136, 225, 136, 230, 136, 231, 136, 233, 136, 234, 136, 235, 136, 236, 136, 237, 136, 238, 136, 239, 136, 242, 136, 245, 136, 246, 136, 247, 136, 250, 136, 251, 136, 253, 136, 255, 136, 0, 137, 1, 137, 3, 137, 4, 137, 5, 137, 6, 137, 7, 137, 8, 137, 9, 137, 11, 137, 12, 137, 13, 137, 14, 137, 15, 137, 17, 137, 20, 137, 21, 137, 22, 137, 23, 137, 24, 137, 28, 137, 29, 137, 30, 137, 31, 137, 32, 137, 34, 137, 35, 137, 36, 137, 38, 137, 39, 137, 40, 137, 41, 137, 44, 137, 45, 137, 46, 137, 47, 137, 49, 137, 50, 137, 51, 137, 53, 137, 55, 137, 9, 144, 99, 118, 41, 119, 218, 126, 116, 151, 155, 133, 102, 91, 116, 122, 234, 150, 64, 136, 203, 82, 143, 113, 170, 95, 236, 101, 226, 139, 251, 91, 111, 154, 225, 93, 137, 107, 91, 108, 173, 139, 175, 139, 10, 144, 197, 143, 139, 83, 188, 98, 38, 158, 45, 158, 64, 84, 43, 78, 189, 130, 89, 114, 156, 134, 22, 93, 89, 136, 175, 109, 197, 150, 209, 84, 154, 78, 182, 139, 9, 113, 189, 84, 9, 150, 223, 112, 249, 109, 208, 118, 37, 78, 20, 120, 18, 135, 169, 92, 246, 94, 0, 138, 156, 152, 14, 150, 142, 112, 191, 108, 68, 89, 169, 99, 60, 119, 77, 136, 20, 111, 115, 130, 48, 88, 213, 113, 140, 83, 26, 120, 193, 150, 1, 85, 102, 95, 48, 113, 180, 91, 26, 140, 140, 154, 131, 107, 46, 89, 47, 158, 231, 121, 104, 103, 108, 98, 111, 79, 161, 117, 138, 127, 11, 109, 51, 150, 39, 108, 240, 78, 210, 117, 123, 81, 55, 104, 62, 111, 128, 144, 112, 129, 150, 89, 118, 116, 56, 137, 57, 137, 58, 137, 59, 137, 60, 137, 61, 137, 62, 137, 63, 137, 64, 137, 66, 137, 67, 137, 69, 137, 70, 137, 71, 137, 72, 137, 73, 137, 74, 137, 75, 137, 76, 137, 77, 137, 78, 137, 79, 137, 80, 137, 81, 137, 82, 137, 83, 137, 84, 137, 85, 137, 86, 137, 87, 137, 88, 137, 89, 137, 90, 137, 91, 137, 92, 137, 93, 137, 96, 137, 97, 137, 98, 137, 99, 137, 100, 137, 101, 137, 103, 137, 104, 137, 105, 137, 106, 137, 107, 137, 108, 137, 109, 137, 110, 137, 111, 137, 112, 137, 113, 137, 114, 137, 115, 137, 116, 137, 117, 137, 118, 137, 119, 137, 120, 137, 121, 137, 122, 137, 124, 137, 125, 137, 126, 137, 128, 137, 130, 137, 132, 137, 133, 137, 135, 137, 136, 137, 137, 137, 138, 137, 139, 137, 140, 137, 141, 137, 142, 137, 143, 137, 144, 137, 145, 137, 146, 137, 147, 137, 148, 137, 149, 137, 150, 137, 151, 137, 152, 137, 153, 137, 154, 137, 155, 137, 156, 137, 157, 137, 158, 137, 159, 137, 160, 137, 161, 137, 71, 100, 39, 92, 101, 144, 145, 122, 35, 140, 218, 89, 172, 84, 0, 130, 111, 131, 129, 137, 0, 128, 48, 105, 78, 86, 54, 128, 55, 114, 206, 145, 182, 81, 95, 78, 117, 152, 150, 99, 26, 78, 246, 83, 243, 102, 75, 129, 28, 89, 178, 109, 0, 78, 249, 88, 59, 83, 214, 99, 241, 148, 157, 79, 10, 79, 99, 136, 144, 152, 55, 89, 87, 144, 251, 121, 234, 78, 240, 128, 145, 117, 130, 108, 156, 91, 232, 89, 93, 95, 5, 105, 129, 134, 26, 80, 242, 93, 89, 78, 227, 119, 229, 78, 122, 130, 145, 98, 19, 102, 145, 144, 121, 92, 191, 78, 121, 95, 198, 129, 56, 144, 132, 128, 171, 117, 166, 78, 212, 136, 15, 97, 197, 107, 198, 95, 73, 78, 202, 118, 162, 110, 227, 139, 174, 139, 10, 140, 209, 139, 2, 95, 252, 127, 204, 127, 206, 126, 53, 131, 107, 131, 224, 86, 183, 107, 243, 151, 52, 150, 251, 89, 31, 84, 246, 148, 235, 109, 197, 91, 110, 153, 57, 92, 21, 95, 144, 150, 162, 137, 163, 137, 164, 137, 165, 137, 166, 137, 167, 137, 168, 137, 169, 137, 170, 137, 171, 137, 172, 137, 173, 137, 174, 137, 175, 137, 176, 137, 177, 137, 178, 137, 179, 137, 180, 137, 181, 137, 182, 137, 183, 137, 184, 137, 185, 137, 186, 137, 187, 137, 188, 137, 189, 137, 190, 137, 191, 137, 192, 137, 195, 137, 205, 137, 211, 137, 212, 137, 213, 137, 215, 137, 216, 137, 217, 137, 219, 137, 221, 137, 223, 137, 224, 137, 225, 137, 226, 137, 228, 137, 231, 137, 232, 137, 233, 137, 234, 137, 236, 137, 237, 137, 238, 137, 240, 137, 241, 137, 242, 137, 244, 137, 245, 137, 246, 137, 247, 137, 248, 137, 249, 137, 250, 137, 251, 137, 252, 137, 253, 137, 254, 137, 255, 137, 1, 138, 2, 138, 3, 138, 4, 138, 5, 138, 6, 138, 8, 138, 9, 138, 10, 138, 11, 138, 12, 138, 13, 138, 14, 138, 15, 138, 16, 138, 17, 138, 18, 138, 19, 138, 20, 138, 21, 138, 22, 138, 23, 138, 24, 138, 25, 138, 26, 138, 27, 138, 28, 138, 29, 138, 112, 83, 241, 130, 49, 106, 116, 90, 112, 158, 148, 94, 40, 127, 185, 131, 36, 132, 37, 132, 103, 131, 71, 135, 206, 143, 98, 141, 200, 118, 113, 95, 150, 152, 108, 120, 32, 102, 223, 84, 229, 98, 99, 79, 195, 129, 200, 117, 184, 94, 205, 150, 10, 142, 249, 134, 143, 84, 243, 108, 140, 109, 56, 108, 127, 96, 199, 82, 40, 117, 125, 94, 24, 79, 160, 96, 231, 95, 36, 92, 49, 117, 174, 144, 192, 148, 185, 114, 185, 108, 56, 110, 73, 145, 9, 103, 203, 83, 243, 83, 81, 79, 201, 145, 241, 139, 200, 83, 124, 94, 194, 143, 228, 109, 142, 78, 194, 118, 134, 105, 94, 134, 26, 97, 6, 130, 89, 79, 222, 79, 62, 144, 124, 156, 9, 97, 29, 110, 20, 110, 133, 150, 136, 78, 49, 90, 232, 150, 14, 78, 127, 92, 185, 121, 135, 91, 237, 139, 189, 127, 137, 115, 223, 87, 139, 130, 193, 144, 1, 84, 71, 144, 187, 85, 234, 92, 161, 95, 8, 97, 50, 107, 241, 114, 178, 128, 137, 138, 30, 138, 31, 138, 32, 138, 33, 138, 34, 138, 35, 138, 36, 138, 37, 138, 38, 138, 39, 138, 40, 138, 41, 138, 42, 138, 43, 138, 44, 138, 45, 138, 46, 138, 47, 138, 48, 138, 49, 138, 50, 138, 51, 138, 52, 138, 53, 138, 54, 138, 55, 138, 56, 138, 57, 138, 58, 138, 59, 138, 60, 138, 61, 138, 63, 138, 64, 138, 65, 138, 66, 138, 67, 138, 68, 138, 69, 138, 70, 138, 71, 138, 73, 138, 74, 138, 75, 138, 76, 138, 77, 138, 78, 138, 79, 138, 80, 138, 81, 138, 82, 138, 83, 138, 84, 138, 85, 138, 86, 138, 87, 138, 88, 138, 89, 138, 90, 138, 91, 138, 92, 138, 93, 138, 94, 138, 95, 138, 96, 138, 97, 138, 98, 138, 99, 138, 100, 138, 101, 138, 102, 138, 103, 138, 104, 138, 105, 138, 106, 138, 107, 138, 108, 138, 109, 138, 110, 138, 111, 138, 112, 138, 113, 138, 114, 138, 115, 138, 116, 138, 117, 138, 118, 138, 119, 138, 120, 138, 122, 138, 123, 138, 124, 138, 125, 138, 126, 138, 127, 138, 128, 138, 116, 109, 211, 91, 213, 136, 132, 152, 107, 140, 109, 154, 51, 158, 10, 110, 164, 81, 67, 81, 163, 87, 129, 136, 159, 83, 244, 99, 149, 143, 237, 86, 88, 84, 6, 87, 63, 115, 144, 110, 24, 127, 220, 143, 209, 130, 63, 97, 40, 96, 98, 150, 240, 102, 166, 126, 138, 141, 195, 141, 165, 148, 179, 92, 164, 124, 8, 103, 166, 96, 5, 150, 24, 128, 145, 78, 231, 144, 0, 83, 104, 150, 65, 81, 208, 143, 116, 133, 93, 145, 85, 102, 245, 151, 85, 91, 29, 83, 56, 120, 66, 103, 61, 104, 201, 84, 126, 112, 176, 91, 125, 143, 141, 81, 40, 87, 177, 84, 18, 101, 130, 102, 94, 141, 67, 141, 15, 129, 108, 132, 109, 144, 223, 124, 255, 81, 251, 133, 163, 103, 233, 101, 161, 111, 164, 134, 129, 142, 106, 86, 32, 144, 130, 118, 118, 112, 229, 113, 35, 141, 233, 98, 25, 82, 253, 108, 60, 141, 14, 96, 158, 88, 142, 97, 254, 102, 96, 141, 78, 98, 179, 85, 35, 110, 45, 103, 103, 143, 129, 138, 130, 138, 131, 138, 132, 138, 133, 138, 134, 138, 135, 138, 136, 138, 139, 138, 140, 138, 141, 138, 142, 138, 143, 138, 144, 138, 145, 138, 146, 138, 148, 138, 149, 138, 150, 138, 151, 138, 152, 138, 153, 138, 154, 138, 155, 138, 156, 138, 157, 138, 158, 138, 159, 138, 160, 138, 161, 138, 162, 138, 163, 138, 164, 138, 165, 138, 166, 138, 167, 138, 168, 138, 169, 138, 170, 138, 171, 138, 172, 138, 173, 138, 174, 138, 175, 138, 176, 138, 177, 138, 178, 138, 179, 138, 180, 138, 181, 138, 182, 138, 183, 138, 184, 138, 185, 138, 186, 138, 187, 138, 188, 138, 189, 138, 190, 138, 191, 138, 192, 138, 193, 138, 194, 138, 195, 138, 196, 138, 197, 138, 198, 138, 199, 138, 200, 138, 201, 138, 202, 138, 203, 138, 204, 138, 205, 138, 206, 138, 207, 138, 208, 138, 209, 138, 210, 138, 211, 138, 212, 138, 213, 138, 214, 138, 215, 138, 216, 138, 217, 138, 218, 138, 219, 138, 220, 138, 221, 138, 222, 138, 223, 138, 224, 138, 225, 138, 226, 138, 227, 138, 225, 148, 248, 149, 40, 119, 5, 104, 168, 105, 139, 84, 77, 78, 184, 112, 200, 139, 88, 100, 139, 101, 133, 91, 132, 122, 58, 80, 232, 91, 187, 119, 225, 107, 121, 138, 152, 124, 190, 108, 207, 118, 169, 101, 151, 143, 45, 93, 85, 92, 56, 134, 8, 104, 96, 83, 24, 98, 217, 122, 91, 110, 253, 126, 31, 106, 224, 122, 112, 95, 51, 111, 32, 95, 140, 99, 168, 109, 86, 103, 8, 78, 16, 94, 38, 141, 215, 78, 192, 128, 52, 118, 156, 150, 219, 98, 45, 102, 126, 98, 188, 108, 117, 141, 103, 113, 105, 127, 70, 81, 135, 128, 236, 83, 110, 144, 152, 98, 242, 84, 240, 134, 153, 143, 5, 128, 23, 149, 23, 133, 217, 143, 89, 109, 205, 115, 159, 101, 31, 119, 4, 117, 39, 120, 251, 129, 30, 141, 136, 148, 166, 79, 149, 103, 185, 117, 202, 139, 7, 151, 47, 99, 71, 149, 53, 150, 184, 132, 35, 99, 65, 119, 129, 95, 240, 114, 137, 78, 20, 96, 116, 101, 239, 98, 99, 107, 63, 101, 228, 138, 229, 138, 230, 138, 231, 138, 232, 138, 233, 138, 234, 138, 235, 138, 236, 138, 237, 138, 238, 138, 239, 138, 240, 138, 241, 138, 242, 138, 243, 138, 244, 138, 245, 138, 246, 138, 247, 138, 248, 138, 249, 138, 250, 138, 251, 138, 252, 138, 253, 138, 254, 138, 255, 138, 0, 139, 1, 139, 2, 139, 3, 139, 4, 139, 5, 139, 6, 139, 8, 139, 9, 139, 10, 139, 11, 139, 12, 139, 13, 139, 14, 139, 15, 139, 16, 139, 17, 139, 18, 139, 19, 139, 20, 139, 21, 139, 22, 139, 23, 139, 24, 139, 25, 139, 26, 139, 27, 139, 28, 139, 29, 139, 30, 139, 31, 139, 32, 139, 33, 139, 34, 139, 35, 139, 36, 139, 37, 139, 39, 139, 40, 139, 41, 139, 42, 139, 43, 139, 44, 139, 45, 139, 46, 139, 47, 139, 48, 139, 49, 139, 50, 139, 51, 139, 52, 139, 53, 139, 54, 139, 55, 139, 56, 139, 57, 139, 58, 139, 59, 139, 60, 139, 61, 139, 62, 139, 63, 139, 64, 139, 65, 139, 66, 139, 67, 139, 68, 139, 69, 139, 39, 94, 199, 117, 209, 144, 193, 139, 157, 130, 157, 103, 47, 101, 49, 84, 24, 135, 229, 119, 162, 128, 2, 129, 65, 108, 75, 78, 199, 126, 76, 128, 244, 118, 13, 105, 150, 107, 103, 98, 60, 80, 132, 79, 64, 87, 7, 99, 98, 107, 190, 141, 234, 83, 232, 101, 184, 126, 215, 95, 26, 99, 183, 99, 243, 129, 244, 129, 110, 127, 28, 94, 217, 92, 54, 82, 122, 102, 233, 121, 26, 122, 40, 141, 153, 112, 212, 117, 222, 110, 187, 108, 146, 122, 45, 78, 197, 118, 224, 95, 159, 148, 119, 136, 200, 126, 205, 121, 191, 128, 205, 145, 242, 78, 23, 79, 31, 130, 104, 84, 222, 93, 50, 109, 204, 139, 165, 124, 116, 143, 152, 128, 26, 94, 146, 84, 177, 118, 153, 91, 60, 102, 164, 154, 224, 115, 42, 104, 219, 134, 49, 103, 42, 115, 248, 139, 219, 139, 16, 144, 249, 122, 219, 112, 110, 113, 196, 98, 169, 119, 49, 86, 59, 78, 87, 132, 241, 103, 169, 82, 192, 134, 46, 141, 248, 148, 81, 123, 70, 139, 71, 139, 72, 139, 73, 139, 74, 139, 75, 139, 76, 139, 77, 139, 78, 139, 79, 139, 80, 139, 81, 139, 82, 139, 83, 139, 84, 139, 85, 139, 86, 139, 87, 139, 88, 139, 89, 139, 90, 139, 91, 139, 92, 139, 93, 139, 94, 139, 95, 139, 96, 139, 97, 139, 98, 139, 99, 139, 100, 139, 101, 139, 103, 139, 104, 139, 105, 139, 106, 139, 107, 139, 109, 139, 110, 139, 111, 139, 112, 139, 113, 139, 114, 139, 115, 139, 116, 139, 117, 139, 118, 139, 119, 139, 120, 139, 121, 139, 122, 139, 123, 139, 124, 139, 125, 139, 126, 139, 127, 139, 128, 139, 129, 139, 130, 139, 131, 139, 132, 139, 133, 139, 134, 139, 135, 139, 136, 139, 137, 139, 138, 139, 139, 139, 140, 139, 141, 139, 142, 139, 143, 139, 144, 139, 145, 139, 146, 139, 147, 139, 148, 139, 149, 139, 150, 139, 151, 139, 152, 139, 153, 139, 154, 139, 155, 139, 156, 139, 157, 139, 158, 139, 159, 139, 172, 139, 177, 139, 187, 139, 199, 139, 208, 139, 234, 139, 9, 140, 30, 140, 79, 79, 232, 108, 93, 121, 123, 154, 147, 98, 42, 114, 253, 98, 19, 78, 22, 120, 108, 143, 176, 100, 90, 141, 198, 123, 105, 104, 132, 94, 197, 136, 134, 89, 158, 100, 238, 88, 182, 114, 14, 105, 37, 149, 253, 143, 88, 141, 96, 87, 0, 127, 6, 140, 198, 81, 73, 99, 217, 98, 83, 83, 76, 104, 34, 116, 1, 131, 76, 145, 68, 85, 64, 119, 124, 112, 74, 109, 121, 81, 168, 84, 68, 141, 255, 89, 203, 110, 196, 109, 92, 91, 43, 125, 212, 78, 125, 124, 211, 110, 80, 91, 234, 129, 13, 110, 87, 91, 3, 155, 213, 104, 42, 142, 151, 91, 252, 126, 59, 96, 181, 126, 185, 144, 112, 141, 79, 89, 205, 99, 223, 121, 179, 141, 82, 83, 207, 101, 86, 121, 197, 139, 59, 150, 196, 126, 187, 148, 130, 126, 52, 86, 137, 145, 0, 103, 106, 127, 10, 92, 117, 144, 40, 102, 230, 93, 80, 79, 222, 103, 90, 80, 92, 79, 80, 87, 167, 94, 16, 232, 17, 232, 18, 232, 19, 232, 20, 232, 56, 140, 57, 140, 58, 140, 59, 140, 60, 140, 61, 140, 62, 140, 63, 140, 64, 140, 66, 140, 67, 140, 68, 140, 69, 140, 72, 140, 74, 140, 75, 140, 77, 140, 78, 140, 79, 140, 80, 140, 81, 140, 82, 140, 83, 140, 84, 140, 86, 140, 87, 140, 88, 140, 89, 140, 91, 140, 92, 140, 93, 140, 94, 140, 95, 140, 96, 140, 99, 140, 100, 140, 101, 140, 102, 140, 103, 140, 104, 140, 105, 140, 108, 140, 109, 140, 110, 140, 111, 140, 112, 140, 113, 140, 114, 140, 116, 140, 117, 140, 118, 140, 119, 140, 123, 140, 124, 140, 125, 140, 126, 140, 127, 140, 128, 140, 129, 140, 131, 140, 132, 140, 134, 140, 135, 140, 136, 140, 139, 140, 141, 140, 142, 140, 143, 140, 144, 140, 145, 140, 146, 140, 147, 140, 149, 140, 150, 140, 151, 140, 153, 140, 154, 140, 155, 140, 156, 140, 157, 140, 158, 140, 159, 140, 160, 140, 161, 140, 162, 140, 163, 140, 164, 140, 165, 140, 166, 140, 167, 140, 168, 140, 169, 140, 170, 140, 171, 140, 172, 140, 173, 140, 141, 78, 12, 78, 64, 81, 16, 78, 255, 94, 69, 83, 21, 78, 152, 78, 30, 78, 50, 155, 108, 91, 105, 86, 40, 78, 186, 121, 63, 78, 21, 83, 71, 78, 45, 89, 59, 114, 110, 83, 16, 108, 223, 86, 228, 128, 151, 153, 211, 107, 126, 119, 23, 159, 54, 78, 159, 78, 16, 159, 92, 78, 105, 78, 147, 78, 136, 130, 91, 91, 108, 85, 15, 86, 196, 78, 141, 83, 157, 83, 163, 83, 165, 83, 174, 83, 101, 151, 93, 141, 26, 83, 245, 83, 38, 83, 46, 83, 62, 83, 92, 141, 102, 83, 99, 83, 2, 82, 8, 82, 14, 82, 45, 82, 51, 82, 63, 82, 64, 82, 76, 82, 94, 82, 97, 82, 92, 82, 175, 132, 125, 82, 130, 82, 129, 82, 144, 82, 147, 82, 130, 81, 84, 127, 187, 78, 195, 78, 201, 78, 194, 78, 232, 78, 225, 78, 235, 78, 222, 78, 27, 79, 243, 78, 34, 79, 100, 79, 245, 78, 37, 79, 39, 79, 9, 79, 43, 79, 94, 79, 103, 79, 56, 101, 90, 79, 93, 79, 174, 140, 175, 140, 176, 140, 177, 140, 178, 140, 179, 140, 180, 140, 181, 140, 182, 140, 183, 140, 184, 140, 185, 140, 186, 140, 187, 140, 188, 140, 189, 140, 190, 140, 191, 140, 192, 140, 193, 140, 194, 140, 195, 140, 196, 140, 197, 140, 198, 140, 199, 140, 200, 140, 201, 140, 202, 140, 203, 140, 204, 140, 205, 140, 206, 140, 207, 140, 208, 140, 209, 140, 210, 140, 211, 140, 212, 140, 213, 140, 214, 140, 215, 140, 216, 140, 217, 140, 218, 140, 219, 140, 220, 140, 221, 140, 222, 140, 223, 140, 224, 140, 225, 140, 226, 140, 227, 140, 228, 140, 229, 140, 230, 140, 231, 140, 232, 140, 233, 140, 234, 140, 235, 140, 236, 140, 237, 140, 238, 140, 239, 140, 240, 140, 241, 140, 242, 140, 243, 140, 244, 140, 245, 140, 246, 140, 247, 140, 248, 140, 249, 140, 250, 140, 251, 140, 252, 140, 253, 140, 254, 140, 255, 140, 0, 141, 1, 141, 2, 141, 3, 141, 4, 141, 5, 141, 6, 141, 7, 141, 8, 141, 9, 141, 10, 141, 11, 141, 12, 141, 13, 141, 95, 79, 87, 79, 50, 79, 61, 79, 118, 79, 116, 79, 145, 79, 137, 79, 131, 79, 143, 79, 126, 79, 123, 79, 170, 79, 124, 79, 172, 79, 148, 79, 230, 79, 232, 79, 234, 79, 197, 79, 218, 79, 227, 79, 220, 79, 209, 79, 223, 79, 248, 79, 41, 80, 76, 80, 243, 79, 44, 80, 15, 80, 46, 80, 45, 80, 254, 79, 28, 80, 12, 80, 37, 80, 40, 80, 126, 80, 67, 80, 85, 80, 72, 80, 78, 80, 108, 80, 123, 80, 165, 80, 167, 80, 169, 80, 186, 80, 214, 80, 6, 81, 237, 80, 236, 80, 230, 80, 238, 80, 7, 81, 11, 81, 221, 78, 61, 108, 88, 79, 101, 79, 206, 79, 160, 159, 70, 108, 116, 124, 110, 81, 253, 93, 201, 158, 152, 153, 129, 81, 20, 89, 249, 82, 13, 83, 7, 138, 16, 83, 235, 81, 25, 89, 85, 81, 160, 78, 86, 81, 179, 78, 110, 136, 164, 136, 181, 78, 20, 129, 210, 136, 128, 121, 52, 91, 3, 136, 184, 127, 171, 81, 177, 81, 189, 81, 188, 81, 14, 141, 15, 141, 16, 141, 17, 141, 18, 141, 19, 141, 20, 141, 21, 141, 22, 141, 23, 141, 24, 141, 25, 141, 26, 141, 27, 141, 28, 141, 32, 141, 81, 141, 82, 141, 87, 141, 95, 141, 101, 141, 104, 141, 105, 141, 106, 141, 108, 141, 110, 141, 111, 141, 113, 141, 114, 141, 120, 141, 121, 141, 122, 141, 123, 141, 124, 141, 125, 141, 126, 141, 127, 141, 128, 141, 130, 141, 131, 141, 134, 141, 135, 141, 136, 141, 137, 141, 140, 141, 141, 141, 142, 141, 143, 141, 144, 141, 146, 141, 147, 141, 149, 141, 150, 141, 151, 141, 152, 141, 153, 141, 154, 141, 155, 141, 156, 141, 157, 141, 158, 141, 160, 141, 161, 141, 162, 141, 164, 141, 165, 141, 166, 141, 167, 141, 168, 141, 169, 141, 170, 141, 171, 141, 172, 141, 173, 141, 174, 141, 175, 141, 176, 141, 178, 141, 182, 141, 183, 141, 185, 141, 187, 141, 189, 141, 192, 141, 193, 141, 194, 141, 197, 141, 199, 141, 200, 141, 201, 141, 202, 141, 205, 141, 208, 141, 210, 141, 211, 141, 212, 141, 199, 81, 150, 81, 162, 81, 165, 81, 160, 139, 166, 139, 167, 139, 170, 139, 180, 139, 181, 139, 183, 139, 194, 139, 195, 139, 203, 139, 207, 139, 206, 139, 210, 139, 211, 139, 212, 139, 214, 139, 216, 139, 217, 139, 220, 139, 223, 139, 224, 139, 228, 139, 232, 139, 233, 139, 238, 139, 240, 139, 243, 139, 246, 139, 249, 139, 252, 139, 255, 139, 0, 140, 2, 140, 4, 140, 7, 140, 12, 140, 15, 140, 17, 140, 18, 140, 20, 140, 21, 140, 22, 140, 25, 140, 27, 140, 24, 140, 29, 140, 31, 140, 32, 140, 33, 140, 37, 140, 39, 140, 42, 140, 43, 140, 46, 140, 47, 140, 50, 140, 51, 140, 53, 140, 54, 140, 105, 83, 122, 83, 29, 150, 34, 150, 33, 150, 49, 150, 42, 150, 61, 150, 60, 150, 66, 150, 73, 150, 84, 150, 95, 150, 103, 150, 108, 150, 114, 150, 116, 150, 136, 150, 141, 150, 151, 150, 176, 150, 151, 144, 155, 144, 157, 144, 153, 144, 172, 144, 161, 144, 180, 144, 179, 144, 182, 144, 186, 144, 213, 141, 216, 141, 217, 141, 220, 141, 224, 141, 225, 141, 226, 141, 229, 141, 230, 141, 231, 141, 233, 141, 237, 141, 238, 141, 240, 141, 241, 141, 242, 141, 244, 141, 246, 141, 252, 141, 254, 141, 255, 141, 0, 142, 1, 142, 2, 142, 3, 142, 4, 142, 6, 142, 7, 142, 8, 142, 11, 142, 13, 142, 14, 142, 16, 142, 17, 142, 18, 142, 19, 142, 21, 142, 22, 142, 23, 142, 24, 142, 25, 142, 26, 142, 27, 142, 28, 142, 32, 142, 33, 142, 36, 142, 37, 142, 38, 142, 39, 142, 40, 142, 43, 142, 45, 142, 48, 142, 50, 142, 51, 142, 52, 142, 54, 142, 55, 142, 56, 142, 59, 142, 60, 142, 62, 142, 63, 142, 67, 142, 69, 142, 70, 142, 76, 142, 77, 142, 78, 142, 79, 142, 80, 142, 83, 142, 84, 142, 85, 142, 86, 142, 87, 142, 88, 142, 90, 142, 91, 142, 92, 142, 93, 142, 94, 142, 95, 142, 96, 142, 97, 142, 98, 142, 99, 142, 100, 142, 101, 142, 103, 142, 104, 142, 106, 142, 107, 142, 110, 142, 113, 142, 184, 144, 176, 144, 207, 144, 197, 144, 190, 144, 208, 144, 196, 144, 199, 144, 211, 144, 230, 144, 226, 144, 220, 144, 215, 144, 219, 144, 235, 144, 239, 144, 254, 144, 4, 145, 34, 145, 30, 145, 35, 145, 49, 145, 47, 145, 57, 145, 67, 145, 70, 145, 13, 82, 66, 89, 162, 82, 172, 82, 173, 82, 190, 82, 255, 84, 208, 82, 214, 82, 240, 82, 223, 83, 238, 113, 205, 119, 244, 94, 245, 81, 252, 81, 47, 155, 182, 83, 1, 95, 90, 117, 239, 93, 76, 87, 169, 87, 161, 87, 126, 88, 188, 88, 197, 88, 209, 88, 41, 87, 44, 87, 42, 87, 51, 87, 57, 87, 46, 87, 47, 87, 92, 87, 59, 87, 66, 87, 105, 87, 133, 87, 107, 87, 134, 87, 124, 87, 123, 87, 104, 87, 109, 87, 118, 87, 115, 87, 173, 87, 164, 87, 140, 87, 178, 87, 207, 87, 167, 87, 180, 87, 147, 87, 160, 87, 213, 87, 216, 87, 218, 87, 217, 87, 210, 87, 184, 87, 244, 87, 239, 87, 248, 87, 228, 87, 221, 87, 115, 142, 117, 142, 119, 142, 120, 142, 121, 142, 122, 142, 123, 142, 125, 142, 126, 142, 128, 142, 130, 142, 131, 142, 132, 142, 134, 142, 136, 142, 137, 142, 138, 142, 139, 142, 140, 142, 141, 142, 142, 142, 145, 142, 146, 142, 147, 142, 149, 142, 150, 142, 151, 142, 152, 142, 153, 142, 154, 142, 155, 142, 157, 142, 159, 142, 160, 142, 161, 142, 162, 142, 163, 142, 164, 142, 165, 142, 166, 142, 167, 142, 168, 142, 169, 142, 170, 142, 173, 142, 174, 142, 176, 142, 177, 142, 179, 142, 180, 142, 181, 142, 182, 142, 183, 142, 184, 142, 185, 142, 187, 142, 188, 142, 189, 142, 190, 142, 191, 142, 192, 142, 193, 142, 194, 142, 195, 142, 196, 142, 197, 142, 198, 142, 199, 142, 200, 142, 201, 142, 202, 142, 203, 142, 204, 142, 205, 142, 207, 142, 208, 142, 209, 142, 210, 142, 211, 142, 212, 142, 213, 142, 214, 142, 215, 142, 216, 142, 217, 142, 218, 142, 219, 142, 220, 142, 221, 142, 222, 142, 223, 142, 224, 142, 225, 142, 226, 142, 227, 142, 228, 142, 11, 88, 13, 88, 253, 87, 237, 87, 0, 88, 30, 88, 25, 88, 68, 88, 32, 88, 101, 88, 108, 88, 129, 88, 137, 88, 154, 88, 128, 88, 168, 153, 25, 159, 255, 97, 121, 130, 125, 130, 127, 130, 143, 130, 138, 130, 168, 130, 132, 130, 142, 130, 145, 130, 151, 130, 153, 130, 171, 130, 184, 130, 190, 130, 176, 130, 200, 130, 202, 130, 227, 130, 152, 130, 183, 130, 174, 130, 203, 130, 204, 130, 193, 130, 169, 130, 180, 130, 161, 130, 170, 130, 159, 130, 196, 130, 206, 130, 164, 130, 225, 130, 9, 131, 247, 130, 228, 130, 15, 131, 7, 131, 220, 130, 244, 130, 210, 130, 216, 130, 12, 131, 251, 130, 211, 130, 17, 131, 26, 131, 6, 131, 20, 131, 21, 131, 224, 130, 213, 130, 28, 131, 81, 131, 91, 131, 92, 131, 8, 131, 146, 131, 60, 131, 52, 131, 49, 131, 155, 131, 94, 131, 47, 131, 79, 131, 71, 131, 67, 131, 95, 131, 64, 131, 23, 131, 96, 131, 45, 131, 58, 131, 51, 131, 102, 131, 101, 131, 229, 142, 230, 142, 231, 142, 232, 142, 233, 142, 234, 142, 235, 142, 236, 142, 237, 142, 238, 142, 239, 142, 240, 142, 241, 142, 242, 142, 243, 142, 244, 142, 245, 142, 246, 142, 247, 142, 248, 142, 249, 142, 250, 142, 251, 142, 252, 142, 253, 142, 254, 142, 255, 142, 0, 143, 1, 143, 2, 143, 3, 143, 4, 143, 5, 143, 6, 143, 7, 143, 8, 143, 9, 143, 10, 143, 11, 143, 12, 143, 13, 143, 14, 143, 15, 143, 16, 143, 17, 143, 18, 143, 19, 143, 20, 143, 21, 143, 22, 143, 23, 143, 24, 143, 25, 143, 26, 143, 27, 143, 28, 143, 29, 143, 30, 143, 31, 143, 32, 143, 33, 143, 34, 143, 35, 143, 36, 143, 37, 143, 38, 143, 39, 143, 40, 143, 41, 143, 42, 143, 43, 143, 44, 143, 45, 143, 46, 143, 47, 143, 48, 143, 49, 143, 50, 143, 51, 143, 52, 143, 53, 143, 54, 143, 55, 143, 56, 143, 57, 143, 58, 143, 59, 143, 60, 143, 61, 143, 62, 143, 63, 143, 64, 143, 65, 143, 66, 143, 67, 143, 68, 143, 104, 131, 27, 131, 105, 131, 108, 131, 106, 131, 109, 131, 110, 131, 176, 131, 120, 131, 179, 131, 180, 131, 160, 131, 170, 131, 147, 131, 156, 131, 133, 131, 124, 131, 182, 131, 169, 131, 125, 131, 184, 131, 123, 131, 152, 131, 158, 131, 168, 131, 186, 131, 188, 131, 193, 131, 1, 132, 229, 131, 216, 131, 7, 88, 24, 132, 11, 132, 221, 131, 253, 131, 214, 131, 28, 132, 56, 132, 17, 132, 6, 132, 212, 131, 223, 131, 15, 132, 3, 132, 248, 131, 249, 131, 234, 131, 197, 131, 192, 131, 38, 132, 240, 131, 225, 131, 92, 132, 81, 132, 90, 132, 89, 132, 115, 132, 135, 132, 136, 132, 122, 132, 137, 132, 120, 132, 60, 132, 70, 132, 105, 132, 118, 132, 140, 132, 142, 132, 49, 132, 109, 132, 193, 132, 205, 132, 208, 132, 230, 132, 189, 132, 211, 132, 202, 132, 191, 132, 186, 132, 224, 132, 161, 132, 185, 132, 180, 132, 151, 132, 229, 132, 227, 132, 12, 133, 13, 117, 56, 133, 240, 132, 57, 133, 31, 133, 58, 133, 69, 143, 70, 143, 71, 143, 72, 143, 73, 143, 74, 143, 75, 143, 76, 143, 77, 143, 78, 143, 79, 143, 80, 143, 81, 143, 82, 143, 83, 143, 84, 143, 85, 143, 86, 143, 87, 143, 88, 143, 89, 143, 90, 143, 91, 143, 92, 143, 93, 143, 94, 143, 95, 143, 96, 143, 97, 143, 98, 143, 99, 143, 100, 143, 101, 143, 106, 143, 128, 143, 140, 143, 146, 143, 157, 143, 160, 143, 161, 143, 162, 143, 164, 143, 165, 143, 166, 143, 167, 143, 170, 143, 172, 143, 173, 143, 174, 143, 175, 143, 178, 143, 179, 143, 180, 143, 181, 143, 183, 143, 184, 143, 186, 143, 187, 143, 188, 143, 191, 143, 192, 143, 195, 143, 198, 143, 201, 143, 202, 143, 203, 143, 204, 143, 205, 143, 207, 143, 210, 143, 214, 143, 215, 143, 218, 143, 224, 143, 225, 143, 227, 143, 231, 143, 236, 143, 239, 143, 241, 143, 242, 143, 244, 143, 245, 143, 246, 143, 250, 143, 251, 143, 252, 143, 254, 143, 255, 143, 7, 144, 8, 144, 12, 144, 14, 144, 19, 144, 21, 144, 24, 144, 86, 133, 59, 133, 255, 132, 252, 132, 89, 133, 72, 133, 104, 133, 100, 133, 94, 133, 122, 133, 162, 119, 67, 133, 114, 133, 123, 133, 164, 133, 168, 133, 135, 133, 143, 133, 121, 133, 174, 133, 156, 133, 133, 133, 185, 133, 183, 133, 176, 133, 211, 133, 193, 133, 220, 133, 255, 133, 39, 134, 5, 134, 41, 134, 22, 134, 60, 134, 254, 94, 8, 95, 60, 89, 65, 89, 55, 128, 85, 89, 90, 89, 88, 89, 15, 83, 34, 92, 37, 92, 44, 92, 52, 92, 76, 98, 106, 98, 159, 98, 187, 98, 202, 98, 218, 98, 215, 98, 238, 98, 34, 99, 246, 98, 57, 99, 75, 99, 67, 99, 173, 99, 246, 99, 113, 99, 122, 99, 142, 99, 180, 99, 109, 99, 172, 99, 138, 99, 105, 99, 174, 99, 188, 99, 242, 99, 248, 99, 224, 99, 255, 99, 196, 99, 222, 99, 206, 99, 82, 100, 198, 99, 190, 99, 69, 100, 65, 100, 11, 100, 27, 100, 32, 100, 12, 100, 38, 100, 33, 100, 94, 100, 132, 100, 109, 100, 150, 100, 25, 144, 28, 144, 35, 144, 36, 144, 37, 144, 39, 144, 40, 144, 41, 144, 42, 144, 43, 144, 44, 144, 48, 144, 49, 144, 50, 144, 51, 144, 52, 144, 55, 144, 57, 144, 58, 144, 61, 144, 63, 144, 64, 144, 67, 144, 69, 144, 70, 144, 72, 144, 73, 144, 74, 144, 75, 144, 76, 144, 78, 144, 84, 144, 85, 144, 86, 144, 89, 144, 90, 144, 92, 144, 93, 144, 94, 144, 95, 144, 96, 144, 97, 144, 100, 144, 102, 144, 103, 144, 105, 144, 106, 144, 107, 144, 108, 144, 111, 144, 112, 144, 113, 144, 114, 144, 115, 144, 118, 144, 119, 144, 120, 144, 121, 144, 122, 144, 123, 144, 124, 144, 126, 144, 129, 144, 132, 144, 133, 144, 134, 144, 135, 144, 137, 144, 138, 144, 140, 144, 141, 144, 142, 144, 143, 144, 144, 144, 146, 144, 148, 144, 150, 144, 152, 144, 154, 144, 156, 144, 158, 144, 159, 144, 160, 144, 164, 144, 165, 144, 167, 144, 168, 144, 169, 144, 171, 144, 173, 144, 178, 144, 183, 144, 188, 144, 189, 144, 191, 144, 192, 144, 122, 100, 183, 100, 184, 100, 153, 100, 186, 100, 192, 100, 208, 100, 215, 100, 228, 100, 226, 100, 9, 101, 37, 101, 46, 101, 11, 95, 210, 95, 25, 117, 17, 95, 95, 83, 241, 83, 253, 83, 233, 83, 232, 83, 251, 83, 18, 84, 22, 84, 6, 84, 75, 84, 82, 84, 83, 84, 84, 84, 86, 84, 67, 84, 33, 84, 87, 84, 89, 84, 35, 84, 50, 84, 130, 84, 148, 84, 119, 84, 113, 84, 100, 84, 154, 84, 155, 84, 132, 84, 118, 84, 102, 84, 157, 84, 208, 84, 173, 84, 194, 84, 180, 84, 210, 84, 167, 84, 166, 84, 211, 84, 212, 84, 114, 84, 163, 84, 213, 84, 187, 84, 191, 84, 204, 84, 217, 84, 218, 84, 220, 84, 169, 84, 170, 84, 164, 84, 221, 84, 207, 84, 222, 84, 27, 85, 231, 84, 32, 85, 253, 84, 20, 85, 243, 84, 34, 85, 35, 85, 15, 85, 17, 85, 39, 85, 42, 85, 103, 85, 143, 85, 181, 85, 73, 85, 109, 85, 65, 85, 85, 85, 63, 85, 80, 85, 60, 85, 194, 144, 195, 144, 198, 144, 200, 144, 201, 144, 203, 144, 204, 144, 205, 144, 210, 144, 212, 144, 213, 144, 214, 144, 216, 144, 217, 144, 218, 144, 222, 144, 223, 144, 224, 144, 227, 144, 228, 144, 229, 144, 233, 144, 234, 144, 236, 144, 238, 144, 240, 144, 241, 144, 242, 144, 243, 144, 245, 144, 246, 144, 247, 144, 249, 144, 250, 144, 251, 144, 252, 144, 255, 144, 0, 145, 1, 145, 3, 145, 5, 145, 6, 145, 7, 145, 8, 145, 9, 145, 10, 145, 11, 145, 12, 145, 13, 145, 14, 145, 15, 145, 16, 145, 17, 145, 18, 145, 19, 145, 20, 145, 21, 145, 22, 145, 23, 145, 24, 145, 26, 145, 27, 145, 28, 145, 29, 145, 31, 145, 32, 145, 33, 145, 36, 145, 37, 145, 38, 145, 39, 145, 40, 145, 41, 145, 42, 145, 43, 145, 44, 145, 45, 145, 46, 145, 48, 145, 50, 145, 51, 145, 52, 145, 53, 145, 54, 145, 55, 145, 56, 145, 58, 145, 59, 145, 60, 145, 61, 145, 62, 145, 63, 145, 64, 145, 65, 145, 66, 145, 68, 145, 55, 85, 86, 85, 117, 85, 118, 85, 119, 85, 51, 85, 48, 85, 92, 85, 139, 85, 210, 85, 131, 85, 177, 85, 185, 85, 136, 85, 129, 85, 159, 85, 126, 85, 214, 85, 145, 85, 123, 85, 223, 85, 189, 85, 190, 85, 148, 85, 153, 85, 234, 85, 247, 85, 201, 85, 31, 86, 209, 85, 235, 85, 236, 85, 212, 85, 230, 85, 221, 85, 196, 85, 239, 85, 229, 85, 242, 85, 243, 85, 204, 85, 205, 85, 232, 85, 245, 85, 228, 85, 148, 143, 30, 86, 8, 86, 12, 86, 1, 86, 36, 86, 35, 86, 254, 85, 0, 86, 39, 86, 45, 86, 88, 86, 57, 86, 87, 86, 44, 86, 77, 86, 98, 86, 89, 86, 92, 86, 76, 86, 84, 86, 134, 86, 100, 86, 113, 86, 107, 86, 123, 86, 124, 86, 133, 86, 147, 86, 175, 86, 212, 86, 215, 86, 221, 86, 225, 86, 245, 86, 235, 86, 249, 86, 255, 86, 4, 87, 10, 87, 9, 87, 28, 87, 15, 94, 25, 94, 20, 94, 17, 94, 49, 94, 59, 94, 60, 94, 69, 145, 71, 145, 72, 145, 81, 145, 83, 145, 84, 145, 85, 145, 86, 145, 88, 145, 89, 145, 91, 145, 92, 145, 95, 145, 96, 145, 102, 145, 103, 145, 104, 145, 107, 145, 109, 145, 115, 145, 122, 145, 123, 145, 124, 145, 128, 145, 129, 145, 130, 145, 131, 145, 132, 145, 134, 145, 136, 145, 138, 145, 142, 145, 143, 145, 147, 145, 148, 145, 149, 145, 150, 145, 151, 145, 152, 145, 153, 145, 156, 145, 157, 145, 158, 145, 159, 145, 160, 145, 161, 145, 164, 145, 165, 145, 166, 145, 167, 145, 168, 145, 169, 145, 171, 145, 172, 145, 176, 145, 177, 145, 178, 145, 179, 145, 182, 145, 183, 145, 184, 145, 185, 145, 187, 145, 188, 145, 189, 145, 190, 145, 191, 145, 192, 145, 193, 145, 194, 145, 195, 145, 196, 145, 197, 145, 198, 145, 200, 145, 203, 145, 208, 145, 210, 145, 211, 145, 212, 145, 213, 145, 214, 145, 215, 145, 216, 145, 217, 145, 218, 145, 219, 145, 221, 145, 222, 145, 223, 145, 224, 145, 225, 145, 226, 145, 227, 145, 228, 145, 229, 145, 55, 94, 68, 94, 84, 94, 91, 94, 94, 94, 97, 94, 140, 92, 122, 92, 141, 92, 144, 92, 150, 92, 136, 92, 152, 92, 153, 92, 145, 92, 154, 92, 156, 92, 181, 92, 162, 92, 189, 92, 172, 92, 171, 92, 177, 92, 163, 92, 193, 92, 183, 92, 196, 92, 210, 92, 228, 92, 203, 92, 229, 92, 2, 93, 3, 93, 39, 93, 38, 93, 46, 93, 36, 93, 30, 93, 6, 93, 27, 93, 88, 93, 62, 93, 52, 93, 61, 93, 108, 93, 91, 93, 111, 93, 93, 93, 107, 93, 75, 93, 74, 93, 105, 93, 116, 93, 130, 93, 153, 93, 157, 93, 115, 140, 183, 93, 197, 93, 115, 95, 119, 95, 130, 95, 135, 95, 137, 95, 140, 95, 149, 95, 153, 95, 156, 95, 168, 95, 173, 95, 181, 95, 188, 95, 98, 136, 97, 95, 173, 114, 176, 114, 180, 114, 183, 114, 184, 114, 195, 114, 193, 114, 206, 114, 205, 114, 210, 114, 232, 114, 239, 114, 233, 114, 242, 114, 244, 114, 247, 114, 1, 115, 243, 114, 3, 115, 250, 114, 230, 145, 231, 145, 232, 145, 233, 145, 234, 145, 235, 145, 236, 145, 237, 145, 238, 145, 239, 145, 240, 145, 241, 145, 242, 145, 243, 145, 244, 145, 245, 145, 246, 145, 247, 145, 248, 145, 249, 145, 250, 145, 251, 145, 252, 145, 253, 145, 254, 145, 255, 145, 0, 146, 1, 146, 2, 146, 3, 146, 4, 146, 5, 146, 6, 146, 7, 146, 8, 146, 9, 146, 10, 146, 11, 146, 12, 146, 13, 146, 14, 146, 15, 146, 16, 146, 17, 146, 18, 146, 19, 146, 20, 146, 21, 146, 22, 146, 23, 146, 24, 146, 25, 146, 26, 146, 27, 146, 28, 146, 29, 146, 30, 146, 31, 146, 32, 146, 33, 146, 34, 146, 35, 146, 36, 146, 37, 146, 38, 146, 39, 146, 40, 146, 41, 146, 42, 146, 43, 146, 44, 146, 45, 146, 46, 146, 47, 146, 48, 146, 49, 146, 50, 146, 51, 146, 52, 146, 53, 146, 54, 146, 55, 146, 56, 146, 57, 146, 58, 146, 59, 146, 60, 146, 61, 146, 62, 146, 63, 146, 64, 146, 65, 146, 66, 146, 67, 146, 68, 146, 69, 146, 251, 114, 23, 115, 19, 115, 33, 115, 10, 115, 30, 115, 29, 115, 21, 115, 34, 115, 57, 115, 37, 115, 44, 115, 56, 115, 49, 115, 80, 115, 77, 115, 87, 115, 96, 115, 108, 115, 111, 115, 126, 115, 27, 130, 37, 89, 231, 152, 36, 89, 2, 89, 99, 153, 103, 153, 104, 153, 105, 153, 106, 153, 107, 153, 108, 153, 116, 153, 119, 153, 125, 153, 128, 153, 132, 153, 135, 153, 138, 153, 141, 153, 144, 153, 145, 153, 147, 153, 148, 153, 149, 153, 128, 94, 145, 94, 139, 94, 150, 94, 165, 94, 160, 94, 185, 94, 181, 94, 190, 94, 179, 94, 83, 141, 210, 94, 209, 94, 219, 94, 232, 94, 234, 94, 186, 129, 196, 95, 201, 95, 214, 95, 207, 95, 3, 96, 238, 95, 4, 96, 225, 95, 228, 95, 254, 95, 5, 96, 6, 96, 234, 95, 237, 95, 248, 95, 25, 96, 53, 96, 38, 96, 27, 96, 15, 96, 13, 96, 41, 96, 43, 96, 10, 96, 63, 96, 33, 96, 120, 96, 121, 96, 123, 96, 122, 96, 66, 96, 70, 146, 71, 146, 72, 146, 73, 146, 74, 146, 75, 146, 76, 146, 77, 146, 78, 146, 79, 146, 80, 146, 81, 146, 82, 146, 83, 146, 84, 146, 85, 146, 86, 146, 87, 146, 88, 146, 89, 146, 90, 146, 91, 146, 92, 146, 93, 146, 94, 146, 95, 146, 96, 146, 97, 146, 98, 146, 99, 146, 100, 146, 101, 146, 102, 146, 103, 146, 104, 146, 105, 146, 106, 146, 107, 146, 108, 146, 109, 146, 110, 146, 111, 146, 112, 146, 113, 146, 114, 146, 115, 146, 117, 146, 118, 146, 119, 146, 120, 146, 121, 146, 122, 146, 123, 146, 124, 146, 125, 146, 126, 146, 127, 146, 128, 146, 129, 146, 130, 146, 131, 146, 132, 146, 133, 146, 134, 146, 135, 146, 136, 146, 137, 146, 138, 146, 139, 146, 140, 146, 141, 146, 143, 146, 144, 146, 145, 146, 146, 146, 147, 146, 148, 146, 149, 146, 150, 146, 151, 146, 152, 146, 153, 146, 154, 146, 155, 146, 156, 146, 157, 146, 158, 146, 159, 146, 160, 146, 161, 146, 162, 146, 163, 146, 164, 146, 165, 146, 166, 146, 167, 146, 106, 96, 125, 96, 150, 96, 154, 96, 173, 96, 157, 96, 131, 96, 146, 96, 140, 96, 155, 96, 236, 96, 187, 96, 177, 96, 221, 96, 216, 96, 198, 96, 218, 96, 180, 96, 32, 97, 38, 97, 21, 97, 35, 97, 244, 96, 0, 97, 14, 97, 43, 97, 74, 97, 117, 97, 172, 97, 148, 97, 167, 97, 183, 97, 212, 97, 245, 97, 221, 95, 179, 150, 233, 149, 235, 149, 241, 149, 243, 149, 245, 149, 246, 149, 252, 149, 254, 149, 3, 150, 4, 150, 6, 150, 8, 150, 10, 150, 11, 150, 12, 150, 13, 150, 15, 150, 18, 150, 21, 150, 22, 150, 23, 150, 25, 150, 26, 150, 44, 78, 63, 114, 21, 98, 53, 108, 84, 108, 92, 108, 74, 108, 163, 108, 133, 108, 144, 108, 148, 108, 140, 108, 104, 108, 105, 108, 116, 108, 118, 108, 134, 108, 169, 108, 208, 108, 212, 108, 173, 108, 247, 108, 248, 108, 241, 108, 215, 108, 178, 108, 224, 108, 214, 108, 250, 108, 235, 108, 238, 108, 177, 108, 211, 108, 239, 108, 254, 108, 168, 146, 169, 146, 170, 146, 171, 146, 172, 146, 173, 146, 175, 146, 176, 146, 177, 146, 178, 146, 179, 146, 180, 146, 181, 146, 182, 146, 183, 146, 184, 146, 185, 146, 186, 146, 187, 146, 188, 146, 189, 146, 190, 146, 191, 146, 192, 146, 193, 146, 194, 146, 195, 146, 196, 146, 197, 146, 198, 146, 199, 146, 201, 146, 202, 146, 203, 146, 204, 146, 205, 146, 206, 146, 207, 146, 208, 146, 209, 146, 210, 146, 211, 146, 212, 146, 213, 146, 214, 146, 215, 146, 216, 146, 217, 146, 218, 146, 219, 146, 220, 146, 221, 146, 222, 146, 223, 146, 224, 146, 225, 146, 226, 146, 227, 146, 228, 146, 229, 146, 230, 146, 231, 146, 232, 146, 233, 146, 234, 146, 235, 146, 236, 146, 237, 146, 238, 146, 239, 146, 240, 146, 241, 146, 242, 146, 243, 146, 244, 146, 245, 146, 246, 146, 247, 146, 248, 146, 249, 146, 250, 146, 251, 146, 252, 146, 253, 146, 254, 146, 255, 146, 0, 147, 1, 147, 2, 147, 3, 147, 4, 147, 5, 147, 6, 147, 7, 147, 8, 147, 9, 147, 57, 109, 39, 109, 12, 109, 67, 109, 72, 109, 7, 109, 4, 109, 25, 109, 14, 109, 43, 109, 77, 109, 46, 109, 53, 109, 26, 109, 79, 109, 82, 109, 84, 109, 51, 109, 145, 109, 111, 109, 158, 109, 160, 109, 94, 109, 147, 109, 148, 109, 92, 109, 96, 109, 124, 109, 99, 109, 26, 110, 199, 109, 197, 109, 222, 109, 14, 110, 191, 109, 224, 109, 17, 110, 230, 109, 221, 109, 217, 109, 22, 110, 171, 109, 12, 110, 174, 109, 43, 110, 110, 110, 78, 110, 107, 110, 178, 110, 95, 110, 134, 110, 83, 110, 84, 110, 50, 110, 37, 110, 68, 110, 223, 110, 177, 110, 152, 110, 224, 110, 45, 111, 226, 110, 165, 110, 167, 110, 189, 110, 187, 110, 183, 110, 215, 110, 180, 110, 207, 110, 143, 110, 194, 110, 159, 110, 98, 111, 70, 111, 71, 111, 36, 111, 21, 111, 249, 110, 47, 111, 54, 111, 75, 111, 116, 111, 42, 111, 9, 111, 41, 111, 137, 111, 141, 111, 140, 111, 120, 111, 114, 111, 124, 111, 122, 111, 209, 111, 10, 147, 11, 147, 12, 147, 13, 147, 14, 147, 15, 147, 16, 147, 17, 147, 18, 147, 19, 147, 20, 147, 21, 147, 22, 147, 23, 147, 24, 147, 25, 147, 26, 147, 27, 147, 28, 147, 29, 147, 30, 147, 31, 147, 32, 147, 33, 147, 34, 147, 35, 147, 36, 147, 37, 147, 38, 147, 39, 147, 40, 147, 41, 147, 42, 147, 43, 147, 44, 147, 45, 147, 46, 147, 47, 147, 48, 147, 49, 147, 50, 147, 51, 147, 52, 147, 53, 147, 54, 147, 55, 147, 56, 147, 57, 147, 58, 147, 59, 147, 60, 147, 61, 147, 63, 147, 64, 147, 65, 147, 66, 147, 67, 147, 68, 147, 69, 147, 70, 147, 71, 147, 72, 147, 73, 147, 74, 147, 75, 147, 76, 147, 77, 147, 78, 147, 79, 147, 80, 147, 81, 147, 82, 147, 83, 147, 84, 147, 85, 147, 86, 147, 87, 147, 88, 147, 89, 147, 90, 147, 91, 147, 92, 147, 93, 147, 94, 147, 95, 147, 96, 147, 97, 147, 98, 147, 99, 147, 100, 147, 101, 147, 102, 147, 103, 147, 104, 147, 105, 147, 107, 147, 201, 111, 167, 111, 185, 111, 182, 111, 194, 111, 225, 111, 238, 111, 222, 111, 224, 111, 239, 111, 26, 112, 35, 112, 27, 112, 57, 112, 53, 112, 79, 112, 94, 112, 128, 91], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 56052);
    allocate([132, 91, 149, 91, 147, 91, 165, 91, 184, 91, 47, 117, 158, 154, 52, 100, 228, 91, 238, 91, 48, 137, 240, 91, 71, 142, 7, 139, 182, 143, 211, 143, 213, 143, 229, 143, 238, 143, 228, 143, 233, 143, 230, 143, 243, 143, 232, 143, 5, 144, 4, 144, 11, 144, 38, 144, 17, 144, 13, 144, 22, 144, 33, 144, 53, 144, 54, 144, 45, 144, 47, 144, 68, 144, 81, 144, 82, 144, 80, 144, 104, 144, 88, 144, 98, 144, 91, 144, 185, 102, 116, 144, 125, 144, 130, 144, 136, 144, 131, 144, 139, 144, 80, 95, 87, 95, 86, 95, 88, 95, 59, 92, 171, 84, 80, 92, 89, 92, 113, 91, 99, 92, 102, 92, 188, 127, 42, 95, 41, 95, 45, 95, 116, 130, 60, 95, 59, 155, 110, 92, 129, 89, 131, 89, 141, 89, 169, 89, 170, 89, 163, 89, 108, 147, 109, 147, 110, 147, 111, 147, 112, 147, 113, 147, 114, 147, 115, 147, 116, 147, 117, 147, 118, 147, 119, 147, 120, 147, 121, 147, 122, 147, 123, 147, 124, 147, 125, 147, 126, 147, 127, 147, 128, 147, 129, 147, 130, 147, 131, 147, 132, 147, 133, 147, 134, 147, 135, 147, 136, 147, 137, 147, 138, 147, 139, 147, 140, 147, 141, 147, 142, 147, 144, 147, 145, 147, 146, 147, 147, 147, 148, 147, 149, 147, 150, 147, 151, 147, 152, 147, 153, 147, 154, 147, 155, 147, 156, 147, 157, 147, 158, 147, 159, 147, 160, 147, 161, 147, 162, 147, 163, 147, 164, 147, 165, 147, 166, 147, 167, 147, 168, 147, 169, 147, 170, 147, 171, 147, 172, 147, 173, 147, 174, 147, 175, 147, 176, 147, 177, 147, 178, 147, 179, 147, 180, 147, 181, 147, 182, 147, 183, 147, 184, 147, 185, 147, 186, 147, 187, 147, 188, 147, 189, 147, 190, 147, 191, 147, 192, 147, 193, 147, 194, 147, 195, 147, 196, 147, 197, 147, 198, 147, 199, 147, 200, 147, 201, 147, 203, 147, 204, 147, 205, 147, 151, 89, 202, 89, 171, 89, 158, 89, 164, 89, 210, 89, 178, 89, 175, 89, 215, 89, 190, 89, 5, 90, 6, 90, 221, 89, 8, 90, 227, 89, 216, 89, 249, 89, 12, 90, 9, 90, 50, 90, 52, 90, 17, 90, 35, 90, 19, 90, 64, 90, 103, 90, 74, 90, 85, 90, 60, 90, 98, 90, 117, 90, 236, 128, 170, 90, 155, 90, 119, 90, 122, 90, 190, 90, 235, 90, 178, 90, 210, 90, 212, 90, 184, 90, 224, 90, 227, 90, 241, 90, 214, 90, 230, 90, 216, 90, 220, 90, 9, 91, 23, 91, 22, 91, 50, 91, 55, 91, 64, 91, 21, 92, 28, 92, 90, 91, 101, 91, 115, 91, 81, 91, 83, 91, 98, 91, 117, 154, 119, 154, 120, 154, 122, 154, 127, 154, 125, 154, 128, 154, 129, 154, 133, 154, 136, 154, 138, 154, 144, 154, 146, 154, 147, 154, 150, 154, 152, 154, 155, 154, 156, 154, 157, 154, 159, 154, 160, 154, 162, 154, 163, 154, 165, 154, 167, 154, 159, 126, 161, 126, 163, 126, 165, 126, 168, 126, 169, 126, 206, 147, 207, 147, 208, 147, 209, 147, 210, 147, 211, 147, 212, 147, 213, 147, 215, 147, 216, 147, 217, 147, 218, 147, 219, 147, 220, 147, 221, 147, 222, 147, 223, 147, 224, 147, 225, 147, 226, 147, 227, 147, 228, 147, 229, 147, 230, 147, 231, 147, 232, 147, 233, 147, 234, 147, 235, 147, 236, 147, 237, 147, 238, 147, 239, 147, 240, 147, 241, 147, 242, 147, 243, 147, 244, 147, 245, 147, 246, 147, 247, 147, 248, 147, 249, 147, 250, 147, 251, 147, 252, 147, 253, 147, 254, 147, 255, 147, 0, 148, 1, 148, 2, 148, 3, 148, 4, 148, 5, 148, 6, 148, 7, 148, 8, 148, 9, 148, 10, 148, 11, 148, 12, 148, 13, 148, 14, 148, 15, 148, 16, 148, 17, 148, 18, 148, 19, 148, 20, 148, 21, 148, 22, 148, 23, 148, 24, 148, 25, 148, 26, 148, 27, 148, 28, 148, 29, 148, 30, 148, 31, 148, 32, 148, 33, 148, 34, 148, 35, 148, 36, 148, 37, 148, 38, 148, 39, 148, 40, 148, 41, 148, 42, 148, 43, 148, 44, 148, 45, 148, 46, 148, 173, 126, 176, 126, 190, 126, 192, 126, 193, 126, 194, 126, 201, 126, 203, 126, 204, 126, 208, 126, 212, 126, 215, 126, 219, 126, 224, 126, 225, 126, 232, 126, 235, 126, 238, 126, 239, 126, 241, 126, 242, 126, 13, 127, 246, 126, 250, 126, 251, 126, 254, 126, 1, 127, 2, 127, 3, 127, 7, 127, 8, 127, 11, 127, 12, 127, 15, 127, 17, 127, 18, 127, 23, 127, 25, 127, 28, 127, 27, 127, 31, 127, 33, 127, 34, 127, 35, 127, 36, 127, 37, 127, 38, 127, 39, 127, 42, 127, 43, 127, 44, 127, 45, 127, 47, 127, 48, 127, 49, 127, 50, 127, 51, 127, 53, 127, 122, 94, 127, 117, 219, 93, 62, 117, 149, 144, 142, 115, 145, 115, 174, 115, 162, 115, 159, 115, 207, 115, 194, 115, 209, 115, 183, 115, 179, 115, 192, 115, 201, 115, 200, 115, 229, 115, 217, 115, 124, 152, 10, 116, 233, 115, 231, 115, 222, 115, 186, 115, 242, 115, 15, 116, 42, 116, 91, 116, 38, 116, 37, 116, 40, 116, 48, 116, 46, 116, 44, 116, 47, 148, 48, 148, 49, 148, 50, 148, 51, 148, 52, 148, 53, 148, 54, 148, 55, 148, 56, 148, 57, 148, 58, 148, 59, 148, 60, 148, 61, 148, 63, 148, 64, 148, 65, 148, 66, 148, 67, 148, 68, 148, 69, 148, 70, 148, 71, 148, 72, 148, 73, 148, 74, 148, 75, 148, 76, 148, 77, 148, 78, 148, 79, 148, 80, 148, 81, 148, 82, 148, 83, 148, 84, 148, 85, 148, 86, 148, 87, 148, 88, 148, 89, 148, 90, 148, 91, 148, 92, 148, 93, 148, 94, 148, 95, 148, 96, 148, 97, 148, 98, 148, 99, 148, 100, 148, 101, 148, 102, 148, 103, 148, 104, 148, 105, 148, 106, 148, 108, 148, 109, 148, 110, 148, 111, 148, 112, 148, 113, 148, 114, 148, 115, 148, 116, 148, 117, 148, 118, 148, 119, 148, 120, 148, 121, 148, 122, 148, 123, 148, 124, 148, 125, 148, 126, 148, 127, 148, 128, 148, 129, 148, 130, 148, 131, 148, 132, 148, 145, 148, 150, 148, 152, 148, 199, 148, 207, 148, 211, 148, 212, 148, 218, 148, 230, 148, 251, 148, 28, 149, 32, 149, 27, 116, 26, 116, 65, 116, 92, 116, 87, 116, 85, 116, 89, 116, 119, 116, 109, 116, 126, 116, 156, 116, 142, 116, 128, 116, 129, 116, 135, 116, 139, 116, 158, 116, 168, 116, 169, 116, 144, 116, 167, 116, 210, 116, 186, 116, 234, 151, 235, 151, 236, 151, 76, 103, 83, 103, 94, 103, 72, 103, 105, 103, 165, 103, 135, 103, 106, 103, 115, 103, 152, 103, 167, 103, 117, 103, 168, 103, 158, 103, 173, 103, 139, 103, 119, 103, 124, 103, 240, 103, 9, 104, 216, 103, 10, 104, 233, 103, 176, 103, 12, 104, 217, 103, 181, 103, 218, 103, 179, 103, 221, 103, 0, 104, 195, 103, 184, 103, 226, 103, 14, 104, 193, 103, 253, 103, 50, 104, 51, 104, 96, 104, 97, 104, 78, 104, 98, 104, 68, 104, 100, 104, 131, 104, 29, 104, 85, 104, 102, 104, 65, 104, 103, 104, 64, 104, 62, 104, 74, 104, 73, 104, 41, 104, 181, 104, 143, 104, 116, 104, 119, 104, 147, 104, 107, 104, 194, 104, 110, 105, 252, 104, 31, 105, 32, 105, 249, 104, 39, 149, 51, 149, 61, 149, 67, 149, 72, 149, 75, 149, 85, 149, 90, 149, 96, 149, 110, 149, 116, 149, 117, 149, 119, 149, 120, 149, 121, 149, 122, 149, 123, 149, 124, 149, 125, 149, 126, 149, 128, 149, 129, 149, 130, 149, 131, 149, 132, 149, 133, 149, 134, 149, 135, 149, 136, 149, 137, 149, 138, 149, 139, 149, 140, 149, 141, 149, 142, 149, 143, 149, 144, 149, 145, 149, 146, 149, 147, 149, 148, 149, 149, 149, 150, 149, 151, 149, 152, 149, 153, 149, 154, 149, 155, 149, 156, 149, 157, 149, 158, 149, 159, 149, 160, 149, 161, 149, 162, 149, 163, 149, 164, 149, 165, 149, 166, 149, 167, 149, 168, 149, 169, 149, 170, 149, 171, 149, 172, 149, 173, 149, 174, 149, 175, 149, 176, 149, 177, 149, 178, 149, 179, 149, 180, 149, 181, 149, 182, 149, 183, 149, 184, 149, 185, 149, 186, 149, 187, 149, 188, 149, 189, 149, 190, 149, 191, 149, 192, 149, 193, 149, 194, 149, 195, 149, 196, 149, 197, 149, 198, 149, 199, 149, 200, 149, 201, 149, 202, 149, 203, 149, 36, 105, 240, 104, 11, 105, 1, 105, 87, 105, 227, 104, 16, 105, 113, 105, 57, 105, 96, 105, 66, 105, 93, 105, 132, 105, 107, 105, 128, 105, 152, 105, 120, 105, 52, 105, 204, 105, 135, 105, 136, 105, 206, 105, 137, 105, 102, 105, 99, 105, 121, 105, 155, 105, 167, 105, 187, 105, 171, 105, 173, 105, 212, 105, 177, 105, 193, 105, 202, 105, 223, 105, 149, 105, 224, 105, 141, 105, 255, 105, 47, 106, 237, 105, 23, 106, 24, 106, 101, 106, 242, 105, 68, 106, 62, 106, 160, 106, 80, 106, 91, 106, 53, 106, 142, 106, 121, 106, 61, 106, 40, 106, 88, 106, 124, 106, 145, 106, 144, 106, 169, 106, 151, 106, 171, 106, 55, 115, 82, 115, 129, 107, 130, 107, 135, 107, 132, 107, 146, 107, 147, 107, 141, 107, 154, 107, 155, 107, 161, 107, 170, 107, 107, 143, 109, 143, 113, 143, 114, 143, 115, 143, 117, 143, 118, 143, 120, 143, 119, 143, 121, 143, 122, 143, 124, 143, 126, 143, 129, 143, 130, 143, 132, 143, 135, 143, 139, 143, 204, 149, 205, 149, 206, 149, 207, 149, 208, 149, 209, 149, 210, 149, 211, 149, 212, 149, 213, 149, 214, 149, 215, 149, 216, 149, 217, 149, 218, 149, 219, 149, 220, 149, 221, 149, 222, 149, 223, 149, 224, 149, 225, 149, 226, 149, 227, 149, 228, 149, 229, 149, 230, 149, 231, 149, 236, 149, 255, 149, 7, 150, 19, 150, 24, 150, 27, 150, 30, 150, 32, 150, 35, 150, 36, 150, 37, 150, 38, 150, 39, 150, 40, 150, 41, 150, 43, 150, 44, 150, 45, 150, 47, 150, 48, 150, 55, 150, 56, 150, 57, 150, 58, 150, 62, 150, 65, 150, 67, 150, 74, 150, 78, 150, 79, 150, 81, 150, 82, 150, 83, 150, 86, 150, 87, 150, 88, 150, 89, 150, 90, 150, 92, 150, 93, 150, 94, 150, 96, 150, 99, 150, 101, 150, 102, 150, 107, 150, 109, 150, 110, 150, 111, 150, 112, 150, 113, 150, 115, 150, 120, 150, 121, 150, 122, 150, 123, 150, 124, 150, 125, 150, 126, 150, 127, 150, 128, 150, 129, 150, 130, 150, 131, 150, 132, 150, 135, 150, 137, 150, 138, 150, 141, 143, 142, 143, 143, 143, 152, 143, 154, 143, 206, 142, 11, 98, 23, 98, 27, 98, 31, 98, 34, 98, 33, 98, 37, 98, 36, 98, 44, 98, 231, 129, 239, 116, 244, 116, 255, 116, 15, 117, 17, 117, 19, 117, 52, 101, 238, 101, 239, 101, 240, 101, 10, 102, 25, 102, 114, 103, 3, 102, 21, 102, 0, 102, 133, 112, 247, 102, 29, 102, 52, 102, 49, 102, 54, 102, 53, 102, 6, 128, 95, 102, 84, 102, 65, 102, 79, 102, 86, 102, 97, 102, 87, 102, 119, 102, 132, 102, 140, 102, 167, 102, 157, 102, 190, 102, 219, 102, 220, 102, 230, 102, 233, 102, 50, 141, 51, 141, 54, 141, 59, 141, 61, 141, 64, 141, 69, 141, 70, 141, 72, 141, 73, 141, 71, 141, 77, 141, 85, 141, 89, 141, 199, 137, 202, 137, 203, 137, 204, 137, 206, 137, 207, 137, 208, 137, 209, 137, 110, 114, 159, 114, 93, 114, 102, 114, 111, 114, 126, 114, 127, 114, 132, 114, 139, 114, 141, 114, 143, 114, 146, 114, 8, 99, 50, 99, 176, 99, 140, 150, 142, 150, 145, 150, 146, 150, 147, 150, 149, 150, 150, 150, 154, 150, 155, 150, 157, 150, 158, 150, 159, 150, 160, 150, 161, 150, 162, 150, 163, 150, 164, 150, 165, 150, 166, 150, 168, 150, 169, 150, 170, 150, 171, 150, 172, 150, 173, 150, 174, 150, 175, 150, 177, 150, 178, 150, 180, 150, 181, 150, 183, 150, 184, 150, 186, 150, 187, 150, 191, 150, 194, 150, 195, 150, 200, 150, 202, 150, 203, 150, 208, 150, 209, 150, 211, 150, 212, 150, 214, 150, 215, 150, 216, 150, 217, 150, 218, 150, 219, 150, 220, 150, 221, 150, 222, 150, 223, 150, 225, 150, 226, 150, 227, 150, 228, 150, 229, 150, 230, 150, 231, 150, 235, 150, 236, 150, 237, 150, 238, 150, 240, 150, 241, 150, 242, 150, 244, 150, 245, 150, 248, 150, 250, 150, 251, 150, 252, 150, 253, 150, 255, 150, 2, 151, 3, 151, 5, 151, 10, 151, 11, 151, 12, 151, 16, 151, 17, 151, 18, 151, 20, 151, 21, 151, 23, 151, 24, 151, 25, 151, 26, 151, 27, 151, 29, 151, 31, 151, 32, 151, 63, 100, 216, 100, 4, 128, 234, 107, 243, 107, 253, 107, 245, 107, 249, 107, 5, 108, 7, 108, 6, 108, 13, 108, 21, 108, 24, 108, 25, 108, 26, 108, 33, 108, 41, 108, 36, 108, 42, 108, 50, 108, 53, 101, 85, 101, 107, 101, 77, 114, 82, 114, 86, 114, 48, 114, 98, 134, 22, 82, 159, 128, 156, 128, 147, 128, 188, 128, 10, 103, 189, 128, 177, 128, 171, 128, 173, 128, 180, 128, 183, 128, 231, 128, 232, 128, 233, 128, 234, 128, 219, 128, 194, 128, 196, 128, 217, 128, 205, 128, 215, 128, 16, 103, 221, 128, 235, 128, 241, 128, 244, 128, 237, 128, 13, 129, 14, 129, 242, 128, 252, 128, 21, 103, 18, 129, 90, 140, 54, 129, 30, 129, 44, 129, 24, 129, 50, 129, 72, 129, 76, 129, 83, 129, 116, 129, 89, 129, 90, 129, 113, 129, 96, 129, 105, 129, 124, 129, 125, 129, 109, 129, 103, 129, 77, 88, 181, 90, 136, 129, 130, 129, 145, 129, 213, 110, 163, 129, 170, 129, 204, 129, 38, 103, 202, 129, 187, 129, 33, 151, 34, 151, 35, 151, 36, 151, 37, 151, 38, 151, 39, 151, 40, 151, 41, 151, 43, 151, 44, 151, 46, 151, 47, 151, 49, 151, 51, 151, 52, 151, 53, 151, 54, 151, 55, 151, 58, 151, 59, 151, 60, 151, 61, 151, 63, 151, 64, 151, 65, 151, 66, 151, 67, 151, 68, 151, 69, 151, 70, 151, 71, 151, 72, 151, 73, 151, 74, 151, 75, 151, 76, 151, 77, 151, 78, 151, 79, 151, 80, 151, 81, 151, 84, 151, 85, 151, 87, 151, 88, 151, 90, 151, 92, 151, 93, 151, 95, 151, 99, 151, 100, 151, 102, 151, 103, 151, 104, 151, 106, 151, 107, 151, 108, 151, 109, 151, 110, 151, 111, 151, 112, 151, 113, 151, 114, 151, 117, 151, 119, 151, 120, 151, 121, 151, 122, 151, 123, 151, 125, 151, 126, 151, 127, 151, 128, 151, 129, 151, 130, 151, 131, 151, 132, 151, 134, 151, 135, 151, 136, 151, 137, 151, 138, 151, 140, 151, 142, 151, 143, 151, 144, 151, 147, 151, 149, 151, 150, 151, 151, 151, 153, 151, 154, 151, 155, 151, 156, 151, 157, 151, 193, 129, 166, 129, 36, 107, 55, 107, 57, 107, 67, 107, 70, 107, 89, 107, 209, 152, 210, 152, 211, 152, 213, 152, 217, 152, 218, 152, 179, 107, 64, 95, 194, 107, 243, 137, 144, 101, 81, 159, 147, 101, 188, 101, 198, 101, 196, 101, 195, 101, 204, 101, 206, 101, 210, 101, 214, 101, 128, 112, 156, 112, 150, 112, 157, 112, 187, 112, 192, 112, 183, 112, 171, 112, 177, 112, 232, 112, 202, 112, 16, 113, 19, 113, 22, 113, 47, 113, 49, 113, 115, 113, 92, 113, 104, 113, 69, 113, 114, 113, 74, 113, 120, 113, 122, 113, 152, 113, 179, 113, 181, 113, 168, 113, 160, 113, 224, 113, 212, 113, 231, 113, 249, 113, 29, 114, 40, 114, 108, 112, 24, 113, 102, 113, 185, 113, 62, 98, 61, 98, 67, 98, 72, 98, 73, 98, 59, 121, 64, 121, 70, 121, 73, 121, 91, 121, 92, 121, 83, 121, 90, 121, 98, 121, 87, 121, 96, 121, 111, 121, 103, 121, 122, 121, 133, 121, 138, 121, 154, 121, 167, 121, 179, 121, 209, 95, 208, 95, 158, 151, 159, 151, 161, 151, 162, 151, 164, 151, 165, 151, 166, 151, 167, 151, 168, 151, 169, 151, 170, 151, 172, 151, 174, 151, 176, 151, 177, 151, 179, 151, 181, 151, 182, 151, 183, 151, 184, 151, 185, 151, 186, 151, 187, 151, 188, 151, 189, 151, 190, 151, 191, 151, 192, 151, 193, 151, 194, 151, 195, 151, 196, 151, 197, 151, 198, 151, 199, 151, 200, 151, 201, 151, 202, 151, 203, 151, 204, 151, 205, 151, 206, 151, 207, 151, 208, 151, 209, 151, 210, 151, 211, 151, 212, 151, 213, 151, 214, 151, 215, 151, 216, 151, 217, 151, 218, 151, 219, 151, 220, 151, 221, 151, 222, 151, 223, 151, 224, 151, 225, 151, 226, 151, 227, 151, 228, 151, 229, 151, 232, 151, 238, 151, 239, 151, 240, 151, 241, 151, 242, 151, 244, 151, 247, 151, 248, 151, 249, 151, 250, 151, 251, 151, 252, 151, 253, 151, 254, 151, 255, 151, 0, 152, 1, 152, 2, 152, 3, 152, 4, 152, 5, 152, 6, 152, 7, 152, 8, 152, 9, 152, 10, 152, 11, 152, 12, 152, 13, 152, 14, 152, 60, 96, 93, 96, 90, 96, 103, 96, 65, 96, 89, 96, 99, 96, 171, 96, 6, 97, 13, 97, 93, 97, 169, 97, 157, 97, 203, 97, 209, 97, 6, 98, 128, 128, 127, 128, 147, 108, 246, 108, 252, 109, 246, 119, 248, 119, 0, 120, 9, 120, 23, 120, 24, 120, 17, 120, 171, 101, 45, 120, 28, 120, 29, 120, 57, 120, 58, 120, 59, 120, 31, 120, 60, 120, 37, 120, 44, 120, 35, 120, 41, 120, 78, 120, 109, 120, 86, 120, 87, 120, 38, 120, 80, 120, 71, 120, 76, 120, 106, 120, 155, 120, 147, 120, 154, 120, 135, 120, 156, 120, 161, 120, 163, 120, 178, 120, 185, 120, 165, 120, 212, 120, 217, 120, 201, 120, 236, 120, 242, 120, 5, 121, 244, 120, 19, 121, 36, 121, 30, 121, 52, 121, 155, 159, 249, 158, 251, 158, 252, 158, 241, 118, 4, 119, 13, 119, 249, 118, 7, 119, 8, 119, 26, 119, 34, 119, 25, 119, 45, 119, 38, 119, 53, 119, 56, 119, 80, 119, 81, 119, 71, 119, 67, 119, 90, 119, 104, 119, 15, 152, 16, 152, 17, 152, 18, 152, 19, 152, 20, 152, 21, 152, 22, 152, 23, 152, 24, 152, 25, 152, 26, 152, 27, 152, 28, 152, 29, 152, 30, 152, 31, 152, 32, 152, 33, 152, 34, 152, 35, 152, 36, 152, 37, 152, 38, 152, 39, 152, 40, 152, 41, 152, 42, 152, 43, 152, 44, 152, 45, 152, 46, 152, 47, 152, 48, 152, 49, 152, 50, 152, 51, 152, 52, 152, 53, 152, 54, 152, 55, 152, 56, 152, 57, 152, 58, 152, 59, 152, 60, 152, 61, 152, 62, 152, 63, 152, 64, 152, 65, 152, 66, 152, 67, 152, 68, 152, 69, 152, 70, 152, 71, 152, 72, 152, 73, 152, 74, 152, 75, 152, 76, 152, 77, 152, 78, 152, 79, 152, 80, 152, 81, 152, 82, 152, 83, 152, 84, 152, 85, 152, 86, 152, 87, 152, 88, 152, 89, 152, 90, 152, 91, 152, 92, 152, 93, 152, 94, 152, 95, 152, 96, 152, 97, 152, 98, 152, 99, 152, 100, 152, 101, 152, 102, 152, 103, 152, 104, 152, 105, 152, 106, 152, 107, 152, 108, 152, 109, 152, 110, 152, 98, 119, 101, 119, 127, 119, 141, 119, 125, 119, 128, 119, 140, 119, 145, 119, 159, 119, 160, 119, 176, 119, 181, 119, 189, 119, 58, 117, 64, 117, 78, 117, 75, 117, 72, 117, 91, 117, 114, 117, 121, 117, 131, 117, 88, 127, 97, 127, 95, 127, 72, 138, 104, 127, 116, 127, 113, 127, 121, 127, 129, 127, 126, 127, 205, 118, 229, 118, 50, 136, 133, 148, 134, 148, 135, 148, 139, 148, 138, 148, 140, 148, 141, 148, 143, 148, 144, 148, 148, 148, 151, 148, 149, 148, 154, 148, 155, 148, 156, 148, 163, 148, 164, 148, 171, 148, 170, 148, 173, 148, 172, 148, 175, 148, 176, 148, 178, 148, 180, 148, 182, 148, 183, 148, 184, 148, 185, 148, 186, 148, 188, 148, 189, 148, 191, 148, 196, 148, 200, 148, 201, 148, 202, 148, 203, 148, 204, 148, 205, 148, 206, 148, 208, 148, 209, 148, 210, 148, 213, 148, 214, 148, 215, 148, 217, 148, 216, 148, 219, 148, 222, 148, 223, 148, 224, 148, 226, 148, 228, 148, 229, 148, 231, 148, 232, 148, 234, 148, 111, 152, 112, 152, 113, 152, 114, 152, 115, 152, 116, 152, 139, 152, 142, 152, 146, 152, 149, 152, 153, 152, 163, 152, 168, 152, 169, 152, 170, 152, 171, 152, 172, 152, 173, 152, 174, 152, 175, 152, 176, 152, 177, 152, 178, 152, 179, 152, 180, 152, 181, 152, 182, 152, 183, 152, 184, 152, 185, 152, 186, 152, 187, 152, 188, 152, 189, 152, 190, 152, 191, 152, 192, 152, 193, 152, 194, 152, 195, 152, 196, 152, 197, 152, 198, 152, 199, 152, 200, 152, 201, 152, 202, 152, 203, 152, 204, 152, 205, 152, 207, 152, 208, 152, 212, 152, 214, 152, 215, 152, 219, 152, 220, 152, 221, 152, 224, 152, 225, 152, 226, 152, 227, 152, 228, 152, 229, 152, 230, 152, 233, 152, 234, 152, 235, 152, 236, 152, 237, 152, 238, 152, 239, 152, 240, 152, 241, 152, 242, 152, 243, 152, 244, 152, 245, 152, 246, 152, 247, 152, 248, 152, 249, 152, 250, 152, 251, 152, 252, 152, 253, 152, 254, 152, 255, 152, 0, 153, 1, 153, 2, 153, 3, 153, 4, 153, 5, 153, 6, 153, 7, 153, 233, 148, 235, 148, 238, 148, 239, 148, 243, 148, 244, 148, 245, 148, 247, 148, 249, 148, 252, 148, 253, 148, 255, 148, 3, 149, 2, 149, 6, 149, 7, 149, 9, 149, 10, 149, 13, 149, 14, 149, 15, 149, 18, 149, 19, 149, 20, 149, 21, 149, 22, 149, 24, 149, 27, 149, 29, 149, 30, 149, 31, 149, 34, 149, 42, 149, 43, 149, 41, 149, 44, 149, 49, 149, 50, 149, 52, 149, 54, 149, 55, 149, 56, 149, 60, 149, 62, 149, 63, 149, 66, 149, 53, 149, 68, 149, 69, 149, 70, 149, 73, 149, 76, 149, 78, 149, 79, 149, 82, 149, 83, 149, 84, 149, 86, 149, 87, 149, 88, 149, 89, 149, 91, 149, 94, 149, 95, 149, 93, 149, 97, 149, 98, 149, 100, 149, 101, 149, 102, 149, 103, 149, 104, 149, 105, 149, 106, 149, 107, 149, 108, 149, 111, 149, 113, 149, 114, 149, 115, 149, 58, 149, 231, 119, 236, 119, 201, 150, 213, 121, 237, 121, 227, 121, 235, 121, 6, 122, 71, 93, 3, 122, 2, 122, 30, 122, 20, 122, 8, 153, 9, 153, 10, 153, 11, 153, 12, 153, 14, 153, 15, 153, 17, 153, 18, 153, 19, 153, 20, 153, 21, 153, 22, 153, 23, 153, 24, 153, 25, 153, 26, 153, 27, 153, 28, 153, 29, 153, 30, 153, 31, 153, 32, 153, 33, 153, 34, 153, 35, 153, 36, 153, 37, 153, 38, 153, 39, 153, 40, 153, 41, 153, 42, 153, 43, 153, 44, 153, 45, 153, 47, 153, 48, 153, 49, 153, 50, 153, 51, 153, 52, 153, 53, 153, 54, 153, 55, 153, 56, 153, 57, 153, 58, 153, 59, 153, 60, 153, 61, 153, 62, 153, 63, 153, 64, 153, 65, 153, 66, 153, 67, 153, 68, 153, 69, 153, 70, 153, 71, 153, 72, 153, 73, 153, 74, 153, 75, 153, 76, 153, 77, 153, 78, 153, 79, 153, 80, 153, 81, 153, 82, 153, 83, 153, 86, 153, 87, 153, 88, 153, 89, 153, 90, 153, 91, 153, 92, 153, 93, 153, 94, 153, 95, 153, 96, 153, 97, 153, 98, 153, 100, 153, 102, 153, 115, 153, 120, 153, 121, 153, 123, 153, 126, 153, 130, 153, 131, 153, 137, 153, 57, 122, 55, 122, 81, 122, 207, 158, 165, 153, 112, 122, 136, 118, 142, 118, 147, 118, 153, 118, 164, 118, 222, 116, 224, 116, 44, 117, 32, 158, 34, 158, 40, 158, 41, 158, 42, 158, 43, 158, 44, 158, 50, 158, 49, 158, 54, 158, 56, 158, 55, 158, 57, 158, 58, 158, 62, 158, 65, 158, 66, 158, 68, 158, 70, 158, 71, 158, 72, 158, 73, 158, 75, 158, 76, 158, 78, 158, 81, 158, 85, 158, 87, 158, 90, 158, 91, 158, 92, 158, 94, 158, 99, 158, 102, 158, 103, 158, 104, 158, 105, 158, 106, 158, 107, 158, 108, 158, 113, 158, 109, 158, 115, 158, 146, 117, 148, 117, 150, 117, 160, 117, 157, 117, 172, 117, 163, 117, 179, 117, 180, 117, 184, 117, 196, 117, 177, 117, 176, 117, 195, 117, 194, 117, 214, 117, 205, 117, 227, 117, 232, 117, 230, 117, 228, 117, 235, 117, 231, 117, 3, 118, 241, 117, 252, 117, 255, 117, 16, 118, 0, 118, 5, 118, 12, 118, 23, 118, 10, 118, 37, 118, 24, 118, 21, 118, 25, 118, 140, 153, 142, 153, 154, 153, 155, 153, 156, 153, 157, 153, 158, 153, 159, 153, 160, 153, 161, 153, 162, 153, 163, 153, 164, 153, 166, 153, 167, 153, 169, 153, 170, 153, 171, 153, 172, 153, 173, 153, 174, 153, 175, 153, 176, 153, 177, 153, 178, 153, 179, 153, 180, 153, 181, 153, 182, 153, 183, 153, 184, 153, 185, 153, 186, 153, 187, 153, 188, 153, 189, 153, 190, 153, 191, 153, 192, 153, 193, 153, 194, 153, 195, 153, 196, 153, 197, 153, 198, 153, 199, 153, 200, 153, 201, 153, 202, 153, 203, 153, 204, 153, 205, 153, 206, 153, 207, 153, 208, 153, 209, 153, 210, 153, 211, 153, 212, 153, 213, 153, 214, 153, 215, 153, 216, 153, 217, 153, 218, 153, 219, 153, 220, 153, 221, 153, 222, 153, 223, 153, 224, 153, 225, 153, 226, 153, 227, 153, 228, 153, 229, 153, 230, 153, 231, 153, 232, 153, 233, 153, 234, 153, 235, 153, 236, 153, 237, 153, 238, 153, 239, 153, 240, 153, 241, 153, 242, 153, 243, 153, 244, 153, 245, 153, 246, 153, 247, 153, 248, 153, 249, 153, 27, 118, 60, 118, 34, 118, 32, 118, 64, 118, 45, 118, 48, 118, 63, 118, 53, 118, 67, 118, 62, 118, 51, 118, 77, 118, 94, 118, 84, 118, 92, 118, 86, 118, 107, 118, 111, 118, 202, 127, 230, 122, 120, 122, 121, 122, 128, 122, 134, 122, 136, 122, 149, 122, 166, 122, 160, 122, 172, 122, 168, 122, 173, 122, 179, 122, 100, 136, 105, 136, 114, 136, 125, 136, 127, 136, 130, 136, 162, 136, 198, 136, 183, 136, 188, 136, 201, 136, 226, 136, 206, 136, 227, 136, 229, 136, 241, 136, 26, 137, 252, 136, 232, 136, 254, 136, 240, 136, 33, 137, 25, 137, 19, 137, 27, 137, 10, 137, 52, 137, 43, 137, 54, 137, 65, 137, 102, 137, 123, 137, 139, 117, 229, 128, 178, 118, 180, 118, 220, 119, 18, 128, 20, 128, 22, 128, 28, 128, 32, 128, 34, 128, 37, 128, 38, 128, 39, 128, 41, 128, 40, 128, 49, 128, 11, 128, 53, 128, 67, 128, 70, 128, 77, 128, 82, 128, 105, 128, 113, 128, 131, 137, 120, 152, 128, 152, 131, 152, 250, 153, 251, 153, 252, 153, 253, 153, 254, 153, 255, 153, 0, 154, 1, 154, 2, 154, 3, 154, 4, 154, 5, 154, 6, 154, 7, 154, 8, 154, 9, 154, 10, 154, 11, 154, 12, 154, 13, 154, 14, 154, 15, 154, 16, 154, 17, 154, 18, 154, 19, 154, 20, 154, 21, 154, 22, 154, 23, 154, 24, 154, 25, 154, 26, 154, 27, 154, 28, 154, 29, 154, 30, 154, 31, 154, 32, 154, 33, 154, 34, 154, 35, 154, 36, 154, 37, 154, 38, 154, 39, 154, 40, 154, 41, 154, 42, 154, 43, 154, 44, 154, 45, 154, 46, 154, 47, 154, 48, 154, 49, 154, 50, 154, 51, 154, 52, 154, 53, 154, 54, 154, 55, 154, 56, 154, 57, 154, 58, 154, 59, 154, 60, 154, 61, 154, 62, 154, 63, 154, 64, 154, 65, 154, 66, 154, 67, 154, 68, 154, 69, 154, 70, 154, 71, 154, 72, 154, 73, 154, 74, 154, 75, 154, 76, 154, 77, 154, 78, 154, 79, 154, 80, 154, 81, 154, 82, 154, 83, 154, 84, 154, 85, 154, 86, 154, 87, 154, 88, 154, 89, 154, 137, 152, 140, 152, 141, 152, 143, 152, 148, 152, 154, 152, 155, 152, 158, 152, 159, 152, 161, 152, 162, 152, 165, 152, 166, 152, 77, 134, 84, 134, 108, 134, 110, 134, 127, 134, 122, 134, 124, 134, 123, 134, 168, 134, 141, 134, 139, 134, 172, 134, 157, 134, 167, 134, 163, 134, 170, 134, 147, 134, 169, 134, 182, 134, 196, 134, 181, 134, 206, 134, 176, 134, 186, 134, 177, 134, 175, 134, 201, 134, 207, 134, 180, 134, 233, 134, 241, 134, 242, 134, 237, 134, 243, 134, 208, 134, 19, 135, 222, 134, 244, 134, 223, 134, 216, 134, 209, 134, 3, 135, 7, 135, 248, 134, 8, 135, 10, 135, 13, 135, 9, 135, 35, 135, 59, 135, 30, 135, 37, 135, 46, 135, 26, 135, 62, 135, 72, 135, 52, 135, 49, 135, 41, 135, 55, 135, 63, 135, 130, 135, 34, 135, 125, 135, 126, 135, 123, 135, 96, 135, 112, 135, 76, 135, 110, 135, 139, 135, 83, 135, 99, 135, 124, 135, 100, 135, 89, 135, 101, 135, 147, 135, 175, 135, 168, 135, 210, 135, 90, 154, 91, 154, 92, 154, 93, 154, 94, 154, 95, 154, 96, 154, 97, 154, 98, 154, 99, 154, 100, 154, 101, 154, 102, 154, 103, 154, 104, 154, 105, 154, 106, 154, 107, 154, 114, 154, 131, 154, 137, 154, 141, 154, 142, 154, 148, 154, 149, 154, 153, 154, 166, 154, 169, 154, 170, 154, 171, 154, 172, 154, 173, 154, 174, 154, 175, 154, 178, 154, 179, 154, 180, 154, 181, 154, 185, 154, 187, 154, 189, 154, 190, 154, 191, 154, 195, 154, 196, 154, 198, 154, 199, 154, 200, 154, 201, 154, 202, 154, 205, 154, 206, 154, 207, 154, 208, 154, 210, 154, 212, 154, 213, 154, 214, 154, 215, 154, 217, 154, 218, 154, 219, 154, 220, 154, 221, 154, 222, 154, 224, 154, 226, 154, 227, 154, 228, 154, 229, 154, 231, 154, 232, 154, 233, 154, 234, 154, 236, 154, 238, 154, 240, 154, 241, 154, 242, 154, 243, 154, 244, 154, 245, 154, 246, 154, 247, 154, 248, 154, 250, 154, 252, 154, 253, 154, 254, 154, 255, 154, 0, 155, 1, 155, 2, 155, 4, 155, 5, 155, 6, 155, 198, 135, 136, 135, 133, 135, 173, 135, 151, 135, 131, 135, 171, 135, 229, 135, 172, 135, 181, 135, 179, 135, 203, 135, 211, 135, 189, 135, 209, 135, 192, 135, 202, 135, 219, 135, 234, 135, 224, 135, 238, 135, 22, 136, 19, 136, 254, 135, 10, 136, 27, 136, 33, 136, 57, 136, 60, 136, 54, 127, 66, 127, 68, 127, 69, 127, 16, 130, 250, 122, 253, 122, 8, 123, 3, 123, 4, 123, 21, 123, 10, 123, 43, 123, 15, 123, 71, 123, 56, 123, 42, 123, 25, 123, 46, 123, 49, 123, 32, 123, 37, 123, 36, 123, 51, 123, 62, 123, 30, 123, 88, 123, 90, 123, 69, 123, 117, 123, 76, 123, 93, 123, 96, 123, 110, 123, 123, 123, 98, 123, 114, 123, 113, 123, 144, 123, 166, 123, 167, 123, 184, 123, 172, 123, 157, 123, 168, 123, 133, 123, 170, 123, 156, 123, 162, 123, 171, 123, 180, 123, 209, 123, 193, 123, 204, 123, 221, 123, 218, 123, 229, 123, 230, 123, 234, 123, 12, 124, 254, 123, 252, 123, 15, 124, 22, 124, 11, 124, 7, 155, 9, 155, 10, 155, 11, 155, 12, 155, 13, 155, 14, 155, 16, 155, 17, 155, 18, 155, 20, 155, 21, 155, 22, 155, 23, 155, 24, 155, 25, 155, 26, 155, 27, 155, 28, 155, 29, 155, 30, 155, 32, 155, 33, 155, 34, 155, 36, 155, 37, 155, 38, 155, 39, 155, 40, 155, 41, 155, 42, 155, 43, 155, 44, 155, 45, 155, 46, 155, 48, 155, 49, 155, 51, 155, 52, 155, 53, 155, 54, 155, 55, 155, 56, 155, 57, 155, 58, 155, 61, 155, 62, 155, 63, 155, 64, 155, 70, 155, 74, 155, 75, 155, 76, 155, 78, 155, 80, 155, 82, 155, 83, 155, 85, 155, 86, 155, 87, 155, 88, 155, 89, 155, 90, 155, 91, 155, 92, 155, 93, 155, 94, 155, 95, 155, 96, 155, 97, 155, 98, 155, 99, 155, 100, 155, 101, 155, 102, 155, 103, 155, 104, 155, 105, 155, 106, 155, 107, 155, 108, 155, 109, 155, 110, 155, 111, 155, 112, 155, 113, 155, 114, 155, 115, 155, 116, 155, 117, 155, 118, 155, 119, 155, 120, 155, 121, 155, 122, 155, 123, 155, 31, 124, 42, 124, 38, 124, 56, 124, 65, 124, 64, 124, 254, 129, 1, 130, 2, 130, 4, 130, 236, 129, 68, 136, 33, 130, 34, 130, 35, 130, 45, 130, 47, 130, 40, 130, 43, 130, 56, 130, 59, 130, 51, 130, 52, 130, 62, 130, 68, 130, 73, 130, 75, 130, 79, 130, 90, 130, 95, 130, 104, 130, 126, 136, 133, 136, 136, 136, 216, 136, 223, 136, 94, 137, 157, 127, 159, 127, 167, 127, 175, 127, 176, 127, 178, 127, 124, 124, 73, 101, 145, 124, 157, 124, 156, 124, 158, 124, 162, 124, 178, 124, 188, 124, 189, 124, 193, 124, 199, 124, 204, 124, 205, 124, 200, 124, 197, 124, 215, 124, 232, 124, 110, 130, 168, 102, 191, 127, 206, 127, 213, 127, 229, 127, 225, 127, 230, 127, 233, 127, 238, 127, 243, 127, 248, 124, 119, 125, 166, 125, 174, 125, 71, 126, 155, 126, 184, 158, 180, 158, 115, 141, 132, 141, 148, 141, 145, 141, 177, 141, 103, 141, 109, 141, 71, 140, 73, 140, 74, 145, 80, 145, 78, 145, 79, 145, 100, 145, 124, 155, 125, 155, 126, 155, 127, 155, 128, 155, 129, 155, 130, 155, 131, 155, 132, 155, 133, 155, 134, 155, 135, 155, 136, 155, 137, 155, 138, 155, 139, 155, 140, 155, 141, 155, 142, 155, 143, 155, 144, 155, 145, 155, 146, 155, 147, 155, 148, 155, 149, 155, 150, 155, 151, 155, 152, 155, 153, 155, 154, 155, 155, 155, 156, 155, 157, 155, 158, 155, 159, 155, 160, 155, 161, 155, 162, 155, 163, 155, 164, 155, 165, 155, 166, 155, 167, 155, 168, 155, 169, 155, 170, 155, 171, 155, 172, 155, 173, 155, 174, 155, 175, 155, 176, 155, 177, 155, 178, 155, 179, 155, 180, 155, 181, 155, 182, 155, 183, 155, 184, 155, 185, 155, 186, 155, 187, 155, 188, 155, 189, 155, 190, 155, 191, 155, 192, 155, 193, 155, 194, 155, 195, 155, 196, 155, 197, 155, 198, 155, 199, 155, 200, 155, 201, 155, 202, 155, 203, 155, 204, 155, 205, 155, 206, 155, 207, 155, 208, 155, 209, 155, 210, 155, 211, 155, 212, 155, 213, 155, 214, 155, 215, 155, 216, 155, 217, 155, 218, 155, 219, 155, 98, 145, 97, 145, 112, 145, 105, 145, 111, 145, 125, 145, 126, 145, 114, 145, 116, 145, 121, 145, 140, 145, 133, 145, 144, 145, 141, 145, 145, 145, 162, 145, 163, 145, 170, 145, 173, 145, 174, 145, 175, 145, 181, 145, 180, 145, 186, 145, 85, 140, 126, 158, 184, 141, 235, 141, 5, 142, 89, 142, 105, 142, 181, 141, 191, 141, 188, 141, 186, 141, 196, 141, 214, 141, 215, 141, 218, 141, 222, 141, 206, 141, 207, 141, 219, 141, 198, 141, 236, 141, 247, 141, 248, 141, 227, 141, 249, 141, 251, 141, 228, 141, 9, 142, 253, 141, 20, 142, 29, 142, 31, 142, 44, 142, 46, 142, 35, 142, 47, 142, 58, 142, 64, 142, 57, 142, 53, 142, 61, 142, 49, 142, 73, 142, 65, 142, 66, 142, 81, 142, 82, 142, 74, 142, 112, 142, 118, 142, 124, 142, 111, 142, 116, 142, 133, 142, 143, 142, 148, 142, 144, 142, 156, 142, 158, 142, 120, 140, 130, 140, 138, 140, 133, 140, 152, 140, 148, 140, 155, 101, 214, 137, 222, 137, 218, 137, 220, 137, 220, 155, 221, 155, 222, 155, 223, 155, 224, 155, 225, 155, 226, 155, 227, 155, 228, 155, 229, 155, 230, 155, 231, 155, 232, 155, 233, 155, 234, 155, 235, 155, 236, 155, 237, 155, 238, 155, 239, 155, 240, 155, 241, 155, 242, 155, 243, 155, 244, 155, 245, 155, 246, 155, 247, 155, 248, 155, 249, 155, 250, 155, 251, 155, 252, 155, 253, 155, 254, 155, 255, 155, 0, 156, 1, 156, 2, 156, 3, 156, 4, 156, 5, 156, 6, 156, 7, 156, 8, 156, 9, 156, 10, 156, 11, 156, 12, 156, 13, 156, 14, 156, 15, 156, 16, 156, 17, 156, 18, 156, 19, 156, 20, 156, 21, 156, 22, 156, 23, 156, 24, 156, 25, 156, 26, 156, 27, 156, 28, 156, 29, 156, 30, 156, 31, 156, 32, 156, 33, 156, 34, 156, 35, 156, 36, 156, 37, 156, 38, 156, 39, 156, 40, 156, 41, 156, 42, 156, 43, 156, 44, 156, 45, 156, 46, 156, 47, 156, 48, 156, 49, 156, 50, 156, 51, 156, 52, 156, 53, 156, 54, 156, 55, 156, 56, 156, 57, 156, 58, 156, 59, 156, 229, 137, 235, 137, 239, 137, 62, 138, 38, 139, 83, 151, 233, 150, 243, 150, 239, 150, 6, 151, 1, 151, 8, 151, 15, 151, 14, 151, 42, 151, 45, 151, 48, 151, 62, 151, 128, 159, 131, 159, 133, 159, 134, 159, 135, 159, 136, 159, 137, 159, 138, 159, 140, 159, 254, 158, 11, 159, 13, 159, 185, 150, 188, 150, 189, 150, 206, 150, 210, 150, 191, 119, 224, 150, 142, 146, 174, 146, 200, 146, 62, 147, 106, 147, 202, 147, 143, 147, 62, 148, 107, 148, 127, 156, 130, 156, 133, 156, 134, 156, 135, 156, 136, 156, 35, 122, 139, 156, 142, 156, 144, 156, 145, 156, 146, 156, 148, 156, 149, 156, 154, 156, 155, 156, 158, 156, 159, 156, 160, 156, 161, 156, 162, 156, 163, 156, 165, 156, 166, 156, 167, 156, 168, 156, 169, 156, 171, 156, 173, 156, 174, 156, 176, 156, 177, 156, 178, 156, 179, 156, 180, 156, 181, 156, 182, 156, 183, 156, 186, 156, 187, 156, 188, 156, 189, 156, 196, 156, 197, 156, 198, 156, 199, 156, 202, 156, 203, 156, 60, 156, 61, 156, 62, 156, 63, 156, 64, 156, 65, 156, 66, 156, 67, 156, 68, 156, 69, 156, 70, 156, 71, 156, 72, 156, 73, 156, 74, 156, 75, 156, 76, 156, 77, 156, 78, 156, 79, 156, 80, 156, 81, 156, 82, 156, 83, 156, 84, 156, 85, 156, 86, 156, 87, 156, 88, 156, 89, 156, 90, 156, 91, 156, 92, 156, 93, 156, 94, 156, 95, 156, 96, 156, 97, 156, 98, 156, 99, 156, 100, 156, 101, 156, 102, 156, 103, 156, 104, 156, 105, 156, 106, 156, 107, 156, 108, 156, 109, 156, 110, 156, 111, 156, 112, 156, 113, 156, 114, 156, 115, 156, 116, 156, 117, 156, 118, 156, 119, 156, 120, 156, 121, 156, 122, 156, 123, 156, 125, 156, 126, 156, 128, 156, 131, 156, 132, 156, 137, 156, 138, 156, 140, 156, 143, 156, 147, 156, 150, 156, 151, 156, 152, 156, 153, 156, 157, 156, 170, 156, 172, 156, 175, 156, 185, 156, 190, 156, 191, 156, 192, 156, 193, 156, 194, 156, 200, 156, 201, 156, 209, 156, 210, 156, 218, 156, 219, 156, 224, 156, 225, 156, 204, 156, 205, 156, 206, 156, 207, 156, 208, 156, 211, 156, 212, 156, 213, 156, 215, 156, 216, 156, 217, 156, 220, 156, 221, 156, 223, 156, 226, 156, 124, 151, 133, 151, 145, 151, 146, 151, 148, 151, 175, 151, 171, 151, 163, 151, 178, 151, 180, 151, 177, 154, 176, 154, 183, 154, 88, 158, 182, 154, 186, 154, 188, 154, 193, 154, 192, 154, 197, 154, 194, 154, 203, 154, 204, 154, 209, 154, 69, 155, 67, 155, 71, 155, 73, 155, 72, 155, 77, 155, 81, 155, 232, 152, 13, 153, 46, 153, 85, 153, 84, 153, 223, 154, 225, 154, 230, 154, 239, 154, 235, 154, 251, 154, 237, 154, 249, 154, 8, 155, 15, 155, 19, 155, 31, 155, 35, 155, 189, 158, 190, 158, 59, 126, 130, 158, 135, 158, 136, 158, 139, 158, 146, 158, 214, 147, 157, 158, 159, 158, 219, 158, 220, 158, 221, 158, 224, 158, 223, 158, 226, 158, 233, 158, 231, 158, 229, 158, 234, 158, 239, 158, 34, 159, 44, 159, 47, 159, 57, 159, 55, 159, 61, 159, 62, 159, 68, 159, 227, 156, 228, 156, 229, 156, 230, 156, 231, 156, 232, 156, 233, 156, 234, 156, 235, 156, 236, 156, 237, 156, 238, 156, 239, 156, 240, 156, 241, 156, 242, 156, 243, 156, 244, 156, 245, 156, 246, 156, 247, 156, 248, 156, 249, 156, 250, 156, 251, 156, 252, 156, 253, 156, 254, 156, 255, 156, 0, 157, 1, 157, 2, 157, 3, 157, 4, 157, 5, 157, 6, 157, 7, 157, 8, 157, 9, 157, 10, 157, 11, 157, 12, 157, 13, 157, 14, 157, 15, 157, 16, 157, 17, 157, 18, 157, 19, 157, 20, 157, 21, 157, 22, 157, 23, 157, 24, 157, 25, 157, 26, 157, 27, 157, 28, 157, 29, 157, 30, 157, 31, 157, 32, 157, 33, 157, 34, 157, 35, 157, 36, 157, 37, 157, 38, 157, 39, 157, 40, 157, 41, 157, 42, 157, 43, 157, 44, 157, 45, 157, 46, 157, 47, 157, 48, 157, 49, 157, 50, 157, 51, 157, 52, 157, 53, 157, 54, 157, 55, 157, 56, 157, 57, 157, 58, 157, 59, 157, 60, 157, 61, 157, 62, 157, 63, 157, 64, 157, 65, 157, 66, 157, 52, 226, 53, 226, 54, 226, 55, 226, 56, 226, 57, 226, 58, 226, 59, 226, 60, 226, 61, 226, 62, 226, 63, 226, 64, 226, 65, 226, 66, 226, 67, 226, 68, 226, 69, 226, 70, 226, 71, 226, 72, 226, 73, 226, 74, 226, 75, 226, 76, 226, 77, 226, 78, 226, 79, 226, 80, 226, 81, 226, 82, 226, 83, 226, 84, 226, 85, 226, 86, 226, 87, 226, 88, 226, 89, 226, 90, 226, 91, 226, 92, 226, 93, 226, 94, 226, 95, 226, 96, 226, 97, 226, 98, 226, 99, 226, 100, 226, 101, 226, 102, 226, 103, 226, 104, 226, 105, 226, 106, 226, 107, 226, 108, 226, 109, 226, 110, 226, 111, 226, 112, 226, 113, 226, 114, 226, 115, 226, 116, 226, 117, 226, 118, 226, 119, 226, 120, 226, 121, 226, 122, 226, 123, 226, 124, 226, 125, 226, 126, 226, 127, 226, 128, 226, 129, 226, 130, 226, 131, 226, 132, 226, 133, 226, 134, 226, 135, 226, 136, 226, 137, 226, 138, 226, 139, 226, 140, 226, 141, 226, 142, 226, 143, 226, 144, 226, 145, 226, 67, 157, 68, 157, 69, 157, 70, 157, 71, 157, 72, 157, 73, 157, 74, 157, 75, 157, 76, 157, 77, 157, 78, 157, 79, 157, 80, 157, 81, 157, 82, 157, 83, 157, 84, 157, 85, 157, 86, 157, 87, 157, 88, 157, 89, 157, 90, 157, 91, 157, 92, 157, 93, 157, 94, 157, 95, 157, 96, 157, 97, 157, 98, 157, 99, 157, 100, 157, 101, 157, 102, 157, 103, 157, 104, 157, 105, 157, 106, 157, 107, 157, 108, 157, 109, 157, 110, 157, 111, 157, 112, 157, 113, 157, 114, 157, 115, 157, 116, 157, 117, 157, 118, 157, 119, 157, 120, 157, 121, 157, 122, 157, 123, 157, 124, 157, 125, 157, 126, 157, 127, 157, 128, 157, 129, 157, 130, 157, 131, 157, 132, 157, 133, 157, 134, 157, 135, 157, 136, 157, 137, 157, 138, 157, 139, 157, 140, 157, 141, 157, 142, 157, 143, 157, 144, 157, 145, 157, 146, 157, 147, 157, 148, 157, 149, 157, 150, 157, 151, 157, 152, 157, 153, 157, 154, 157, 155, 157, 156, 157, 157, 157, 158, 157, 159, 157, 160, 157, 161, 157, 162, 157, 146, 226, 147, 226, 148, 226, 149, 226, 150, 226, 151, 226, 152, 226, 153, 226, 154, 226, 155, 226, 156, 226, 157, 226, 158, 226, 159, 226, 160, 226, 161, 226, 162, 226, 163, 226, 164, 226, 165, 226, 166, 226, 167, 226, 168, 226, 169, 226, 170, 226, 171, 226, 172, 226, 173, 226, 174, 226, 175, 226, 176, 226, 177, 226, 178, 226, 179, 226, 180, 226, 181, 226, 182, 226, 183, 226, 184, 226, 185, 226, 186, 226, 187, 226, 188, 226, 189, 226, 190, 226, 191, 226, 192, 226, 193, 226, 194, 226, 195, 226, 196, 226, 197, 226, 198, 226, 199, 226, 200, 226, 201, 226, 202, 226, 203, 226, 204, 226, 205, 226, 206, 226, 207, 226, 208, 226, 209, 226, 210, 226, 211, 226, 212, 226, 213, 226, 214, 226, 215, 226, 216, 226, 217, 226, 218, 226, 219, 226, 220, 226, 221, 226, 222, 226, 223, 226, 224, 226, 225, 226, 226, 226, 227, 226, 228, 226, 229, 226, 230, 226, 231, 226, 232, 226, 233, 226, 234, 226, 235, 226, 236, 226, 237, 226, 238, 226, 239, 226, 163, 157, 164, 157, 165, 157, 166, 157, 167, 157, 168, 157, 169, 157, 170, 157, 171, 157, 172, 157, 173, 157, 174, 157, 175, 157, 176, 157, 177, 157, 178, 157, 179, 157, 180, 157, 181, 157, 182, 157, 183, 157, 184, 157, 185, 157, 186, 157, 187, 157, 188, 157, 189, 157, 190, 157, 191, 157, 192, 157, 193, 157, 194, 157, 195, 157, 196, 157, 197, 157, 198, 157, 199, 157, 200, 157, 201, 157, 202, 157, 203, 157, 204, 157, 205, 157, 206, 157, 207, 157, 208, 157, 209, 157, 210, 157, 211, 157, 212, 157, 213, 157, 214, 157, 215, 157, 216, 157, 217, 157, 218, 157, 219, 157, 220, 157, 221, 157, 222, 157, 223, 157, 224, 157, 225, 157, 226, 157, 227, 157, 228, 157, 229, 157, 230, 157, 231, 157, 232, 157, 233, 157, 234, 157, 235, 157, 236, 157, 237, 157, 238, 157, 239, 157, 240, 157, 241, 157, 242, 157, 243, 157, 244, 157, 245, 157, 246, 157, 247, 157, 248, 157, 249, 157, 250, 157, 251, 157, 252, 157, 253, 157, 254, 157, 255, 157, 0, 158, 1, 158, 2, 158, 240, 226, 241, 226, 242, 226, 243, 226, 244, 226, 245, 226, 246, 226, 247, 226, 248, 226, 249, 226, 250, 226, 251, 226, 252, 226, 253, 226, 254, 226, 255, 226, 0, 227, 1, 227, 2, 227, 3, 227, 4, 227, 5, 227, 6, 227, 7, 227, 8, 227, 9, 227, 10, 227, 11, 227, 12, 227, 13, 227, 14, 227, 15, 227, 16, 227, 17, 227, 18, 227, 19, 227, 20, 227, 21, 227, 22, 227, 23, 227, 24, 227, 25, 227, 26, 227, 27, 227, 28, 227, 29, 227, 30, 227, 31, 227, 32, 227, 33, 227, 34, 227, 35, 227, 36, 227, 37, 227, 38, 227, 39, 227, 40, 227, 41, 227, 42, 227, 43, 227, 44, 227, 45, 227, 46, 227, 47, 227, 48, 227, 49, 227, 50, 227, 51, 227, 52, 227, 53, 227, 54, 227, 55, 227, 56, 227, 57, 227, 58, 227, 59, 227, 60, 227, 61, 227, 62, 227, 63, 227, 64, 227, 65, 227, 66, 227, 67, 227, 68, 227, 69, 227, 70, 227, 71, 227, 72, 227, 73, 227, 74, 227, 75, 227, 76, 227, 77, 227, 3, 158, 4, 158, 5, 158, 6, 158, 7, 158, 8, 158, 9, 158, 10, 158, 11, 158, 12, 158, 13, 158, 14, 158, 15, 158, 16, 158, 17, 158, 18, 158, 19, 158, 20, 158, 21, 158, 22, 158, 23, 158, 24, 158, 25, 158, 26, 158, 27, 158, 28, 158, 29, 158, 30, 158, 36, 158, 39, 158, 46, 158, 48, 158, 52, 158, 59, 158, 60, 158, 64, 158, 77, 158, 80, 158, 82, 158, 83, 158, 84, 158, 86, 158, 89, 158, 93, 158, 95, 158, 96, 158, 97, 158, 98, 158, 101, 158, 110, 158, 111, 158, 114, 158, 116, 158, 117, 158, 118, 158, 119, 158, 120, 158, 121, 158, 122, 158, 123, 158, 124, 158, 125, 158, 128, 158, 129, 158, 131, 158, 132, 158, 133, 158, 134, 158, 137, 158, 138, 158, 140, 158, 141, 158, 142, 158, 143, 158, 144, 158, 145, 158, 148, 158, 149, 158, 150, 158, 151, 158, 152, 158, 153, 158, 154, 158, 155, 158, 156, 158, 158, 158, 160, 158, 161, 158, 162, 158, 163, 158, 164, 158, 165, 158, 167, 158, 168, 158, 169, 158, 170, 158, 78, 227, 79, 227, 80, 227, 81, 227, 82, 227, 83, 227, 84, 227, 85, 227, 86, 227, 87, 227, 88, 227, 89, 227, 90, 227, 91, 227, 92, 227, 93, 227, 94, 227, 95, 227, 96, 227, 97, 227, 98, 227, 99, 227, 100, 227, 101, 227, 102, 227, 103, 227, 104, 227, 105, 227, 106, 227, 107, 227, 108, 227, 109, 227, 110, 227, 111, 227, 112, 227, 113, 227, 114, 227, 115, 227, 116, 227, 117, 227, 118, 227, 119, 227, 120, 227, 121, 227, 122, 227, 123, 227, 124, 227, 125, 227, 126, 227, 127, 227, 128, 227, 129, 227, 130, 227, 131, 227, 132, 227, 133, 227, 134, 227, 135, 227, 136, 227, 137, 227, 138, 227, 139, 227, 140, 227, 141, 227, 142, 227, 143, 227, 144, 227, 145, 227, 146, 227, 147, 227, 148, 227, 149, 227, 150, 227, 151, 227, 152, 227, 153, 227, 154, 227, 155, 227, 156, 227, 157, 227, 158, 227, 159, 227, 160, 227, 161, 227, 162, 227, 163, 227, 164, 227, 165, 227, 166, 227, 167, 227, 168, 227, 169, 227, 170, 227, 171, 227, 171, 158, 172, 158, 173, 158, 174, 158, 175, 158, 176, 158, 177, 158, 178, 158, 179, 158, 181, 158, 182, 158, 183, 158, 185, 158, 186, 158, 188, 158, 191, 158, 192, 158, 193, 158, 194, 158, 195, 158, 197, 158, 198, 158, 199, 158, 200, 158, 202, 158, 203, 158, 204, 158, 208, 158, 210, 158, 211, 158, 213, 158, 214, 158, 215, 158, 217, 158, 218, 158, 222, 158, 225, 158, 227, 158, 228, 158, 230, 158, 232, 158, 235, 158, 236, 158, 237, 158, 238, 158, 240, 158, 241, 158, 242, 158, 243, 158, 244, 158, 245, 158, 246, 158, 247, 158, 248, 158, 250, 158, 253, 158, 255, 158, 0, 159, 1, 159, 2, 159, 3, 159, 4, 159, 5, 159, 6, 159, 7, 159, 8, 159, 9, 159, 10, 159, 12, 159, 15, 159, 17, 159, 18, 159, 20, 159, 21, 159, 22, 159, 24, 159, 26, 159, 27, 159, 28, 159, 29, 159, 30, 159, 31, 159, 33, 159, 35, 159, 36, 159, 37, 159, 38, 159, 39, 159, 40, 159, 41, 159, 42, 159, 43, 159, 45, 159, 46, 159, 48, 159, 49, 159, 172, 227, 173, 227, 174, 227, 175, 227, 176, 227, 177, 227, 178, 227, 179, 227, 180, 227, 181, 227, 182, 227, 183, 227, 184, 227, 185, 227, 186, 227, 187, 227, 188, 227, 189, 227, 190, 227, 191, 227, 192, 227, 193, 227, 194, 227, 195, 227, 196, 227, 197, 227, 198, 227, 199, 227, 200, 227, 201, 227, 202, 227, 203, 227, 204, 227, 205, 227, 206, 227, 207, 227, 208, 227, 209, 227, 210, 227, 211, 227, 212, 227, 213, 227, 214, 227, 215, 227, 216, 227, 217, 227, 218, 227, 219, 227, 220, 227, 221, 227, 222, 227, 223, 227, 224, 227, 225, 227, 226, 227, 227, 227, 228, 227, 229, 227, 230, 227, 231, 227, 232, 227, 233, 227, 234, 227, 235, 227, 236, 227, 237, 227, 238, 227, 239, 227, 240, 227, 241, 227, 242, 227, 243, 227, 244, 227, 245, 227, 246, 227, 247, 227, 248, 227, 249, 227, 250, 227, 251, 227, 252, 227, 253, 227, 254, 227, 255, 227, 0, 228, 1, 228, 2, 228, 3, 228, 4, 228, 5, 228, 6, 228, 7, 228, 8, 228, 9, 228, 50, 159, 51, 159, 52, 159, 53, 159, 54, 159, 56, 159, 58, 159, 60, 159, 63, 159, 64, 159, 65, 159, 66, 159, 67, 159, 69, 159, 70, 159, 71, 159, 72, 159, 73, 159, 74, 159, 75, 159, 76, 159, 77, 159, 78, 159, 79, 159, 82, 159, 83, 159, 84, 159, 85, 159, 86, 159, 87, 159, 88, 159, 89, 159, 90, 159, 91, 159, 92, 159, 93, 159, 94, 159, 95, 159, 96, 159, 97, 159, 98, 159, 99, 159, 100, 159, 101, 159, 102, 159, 103, 159, 104, 159, 105, 159, 106, 159, 107, 159, 108, 159, 109, 159, 110, 159, 111, 159, 112, 159, 113, 159, 114, 159, 115, 159, 116, 159, 117, 159, 118, 159, 119, 159, 120, 159, 121, 159, 122, 159, 123, 159, 124, 159, 125, 159, 126, 159, 129, 159, 130, 159, 141, 159, 142, 159, 143, 159, 144, 159, 145, 159, 146, 159, 147, 159, 148, 159, 149, 159, 150, 159, 151, 159, 152, 159, 156, 159, 157, 159, 158, 159, 161, 159, 162, 159, 163, 159, 164, 159, 165, 159, 44, 249, 121, 249, 149, 249, 231, 249, 241, 249, 10, 228, 11, 228, 12, 228, 13, 228, 14, 228, 15, 228, 16, 228, 17, 228, 18, 228, 19, 228, 20, 228, 21, 228, 22, 228, 23, 228, 24, 228, 25, 228, 26, 228, 27, 228, 28, 228, 29, 228, 30, 228, 31, 228, 32, 228, 33, 228, 34, 228, 35, 228, 36, 228, 37, 228, 38, 228, 39, 228, 40, 228, 41, 228, 42, 228, 43, 228, 44, 228, 45, 228, 46, 228, 47, 228, 48, 228, 49, 228, 50, 228, 51, 228, 52, 228, 53, 228, 54, 228, 55, 228, 56, 228, 57, 228, 58, 228, 59, 228, 60, 228, 61, 228, 62, 228, 63, 228, 64, 228, 65, 228, 66, 228, 67, 228, 68, 228, 69, 228, 70, 228, 71, 228, 72, 228, 73, 228, 74, 228, 75, 228, 76, 228, 77, 228, 78, 228, 79, 228, 80, 228, 81, 228, 82, 228, 83, 228, 84, 228, 85, 228, 86, 228, 87, 228, 88, 228, 89, 228, 90, 228, 91, 228, 92, 228, 93, 228, 94, 228, 95, 228, 96, 228, 97, 228, 98, 228, 99, 228, 100, 228, 101, 228, 102, 228, 103, 228, 12, 250, 13, 250, 14, 250, 15, 250, 17, 250, 19, 250, 20, 250, 24, 250, 31, 250, 32, 250, 33, 250, 35, 250, 36, 250, 39, 250, 40, 250, 41, 250, 129, 46, 22, 232, 23, 232, 24, 232, 132, 46, 115, 52, 71, 52, 136, 46, 139, 46, 30, 232, 158, 53, 26, 54, 14, 54, 140, 46, 151, 46, 110, 57, 24, 57, 38, 232, 207, 57, 223, 57, 115, 58, 208, 57, 43, 232, 44, 232, 78, 59, 110, 60, 224, 60, 167, 46, 49, 232, 50, 232, 170, 46, 86, 64, 95, 65, 174, 46, 55, 67, 179, 46, 182, 46, 183, 46, 59, 232, 177, 67, 172, 67, 187, 46, 221, 67, 214, 68, 97, 70, 76, 70, 67, 232, 35, 71, 41, 71, 124, 71, 141, 71, 202, 46, 71, 73, 122, 73, 125, 73, 130, 73, 131, 73, 133, 73, 134, 73, 159, 73, 155, 73, 183, 73, 182, 73, 84, 232, 85, 232, 163, 76, 159, 76, 160, 76, 161, 76, 119, 76, 162, 76, 19, 77, 20, 77, 21, 77, 22, 77, 23, 77, 24, 77, 25, 77, 174, 77, 100, 232, 104, 228, 105, 228, 106, 228, 107, 228, 108, 228, 109, 228, 110, 228, 111, 228, 112, 228, 113, 228, 114, 228, 115, 228, 116, 228, 117, 228, 118, 228, 119, 228, 120, 228, 121, 228, 122, 228, 123, 228, 124, 228, 125, 228, 126, 228, 127, 228, 128, 228, 129, 228, 130, 228, 131, 228, 132, 228, 133, 228, 134, 228, 135, 228, 136, 228, 137, 228, 138, 228, 139, 228, 140, 228, 141, 228, 142, 228, 143, 228, 144, 228, 145, 228, 146, 228, 147, 228, 148, 228, 149, 228, 150, 228, 151, 228, 152, 228, 153, 228, 154, 228, 155, 228, 156, 228, 157, 228, 158, 228, 159, 228, 160, 228, 161, 228, 162, 228, 163, 228, 164, 228, 165, 228, 166, 228, 167, 228, 168, 228, 169, 228, 170, 228, 171, 228, 172, 228, 173, 228, 174, 228, 175, 228, 176, 228, 177, 228, 178, 228, 179, 228, 180, 228, 181, 228, 182, 228, 183, 228, 184, 228, 185, 228, 186, 228, 187, 228, 188, 228, 189, 228, 190, 228, 191, 228, 192, 228, 193, 228, 194, 228, 195, 228, 196, 228, 197, 228, 240, 67, 50, 76, 3, 70, 166, 69, 120, 69, 103, 114, 119, 77, 179, 69, 177, 124, 226, 76, 197, 124, 149, 59, 54, 71, 68, 71, 71, 76, 64, 76, 191, 66, 23, 54, 82, 115, 139, 110, 210, 112, 87, 76, 81, 163, 79, 71, 218, 69, 133, 76, 108, 124, 7, 77, 164, 74, 161, 70, 35, 107, 37, 114, 84, 90, 99, 26, 6, 62, 97, 63, 77, 102, 251, 86, 0, 0, 149, 125, 29, 89, 185, 139, 244, 61, 52, 151, 239, 123, 219, 91, 94, 29, 164, 90, 37, 54, 176, 158, 209, 90, 183, 91, 252, 92, 110, 103, 147, 133, 69, 153, 97, 116, 157, 116, 117, 56, 83, 29, 158, 54, 33, 96, 236, 62, 222, 88, 245, 58, 252, 122, 151, 159, 97, 65, 13, 137, 234, 49, 138, 10, 94, 50, 10, 67, 132, 132, 150, 159, 47, 148, 48, 73, 19, 134, 150, 88, 74, 151, 24, 146, 208, 121, 50, 122, 96, 102, 41, 106, 157, 136, 76, 116, 197, 123, 130, 103, 44, 122, 79, 82, 70, 144, 230, 52, 196, 115, 185, 93, 198, 116, 199, 159, 179, 87, 47, 73, 76, 84, 49, 65, 142, 54, 24, 88, 114, 122, 101, 123, 143, 139, 174, 70, 136, 110, 129, 65, 153, 93, 174, 123, 188, 36, 200, 159, 193, 36, 201, 36, 204, 36, 201, 159, 4, 133, 187, 53, 180, 64, 202, 159, 225, 68, 255, 173, 193, 98, 110, 112, 203, 159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 49, 193, 49, 194, 49, 195, 49, 196, 49, 12, 1, 197, 49, 209, 0, 205, 0, 198, 49, 199, 49, 203, 0, 232, 31, 200, 49, 202, 0, 201, 49, 202, 49, 203, 49, 204, 49, 14, 1, 205, 49, 206, 49, 0, 1, 193, 0, 205, 1, 192, 0, 18, 1, 201, 0, 26, 1, 200, 0, 76, 1, 211, 0, 209, 1, 210, 0, 0, 220, 190, 30, 4, 220, 192, 30, 202, 0, 1, 1, 225, 0, 206, 1, 224, 0, 81, 2, 19, 1, 233, 0, 27, 1, 232, 0, 43, 1, 237, 0, 208, 1, 236, 0, 77, 1, 243, 0, 210, 1, 242, 0, 107, 1, 250, 0, 212, 1, 249, 0, 214, 1, 216, 1, 218, 1, 220, 1, 252, 0, 8, 220, 191, 30, 12, 220, 193, 30, 234, 0, 97, 2, 218, 35, 219, 35], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 66292);
    allocate([169, 163, 69, 17, 0, 0, 10, 101, 0, 0, 0, 0, 61, 78, 221, 110, 78, 157, 223, 145, 0, 0, 0, 0, 53, 119, 145, 100, 26, 79, 40, 79, 168, 79, 86, 81, 116, 81, 156, 81, 228, 81, 161, 82, 168, 82, 59, 83, 78, 83, 209, 83, 216, 83, 226, 86, 240, 88, 4, 89, 7, 89, 50, 89, 52, 89, 102, 91, 158, 91, 159, 91, 154, 92, 134, 94, 59, 96, 137, 101, 254, 103, 4, 104, 101, 104, 78, 109, 188, 112, 53, 117, 164, 126, 172, 126, 186, 126, 199, 126, 207, 126, 223, 126, 6, 127, 55, 127, 122, 130, 207, 130, 111, 131, 198, 137, 190, 139, 226, 139, 102, 143, 103, 143, 110, 143, 17, 116, 252, 124, 205, 125, 70, 105, 201, 122, 39, 82, 0, 0, 0, 0, 0, 0, 0, 0, 140, 145, 184, 120, 94, 145, 188, 128, 0, 0, 11, 141, 246, 128, 231, 9, 0, 0, 0, 0, 159, 128, 199, 158, 205, 76, 201, 157, 12, 158, 62, 76, 246, 157, 14, 112, 10, 158, 51, 161, 193, 53, 0, 0, 154, 110, 62, 130, 25, 117, 0, 0, 17, 73, 108, 154, 143, 154, 153, 159, 135, 121, 108, 132, 202, 29, 208, 5, 230, 42, 36, 78, 129, 78, 128, 78, 135, 78, 191, 78, 235, 78, 55, 79, 76, 52, 189, 79, 72, 62, 3, 80, 136, 80, 125, 52, 147, 52, 165, 52, 134, 81, 5, 89, 219, 81, 252, 81, 5, 82, 137, 78, 121, 82, 144, 82, 39, 83, 199, 53, 169, 83, 81, 53, 176, 83, 83, 53, 194, 83, 35, 84, 109, 53, 114, 53, 129, 54, 147, 84, 163, 84, 180, 84, 185, 84, 208, 84, 239, 84, 24, 85, 35, 85, 40, 85, 152, 53, 63, 85, 165, 53, 191, 53, 215, 85, 197, 53, 132, 125, 37, 85, 0, 0, 66, 12, 21, 13, 43, 81, 144, 85, 198, 44, 236, 57, 65, 3, 70, 142, 184, 77, 229, 148, 83, 64, 190, 128, 122, 119, 56, 44, 52, 58, 213, 71, 93, 129, 242, 105, 234, 77, 221, 100, 124, 13, 180, 15, 213, 12, 244, 16, 141, 100, 126, 142, 150, 14, 11, 12, 100, 15, 169, 44, 86, 130, 211, 68, 0, 0, 70, 13, 77, 154, 233, 128, 244, 71, 167, 78, 194, 44, 178, 154, 103, 58, 244, 149, 237, 63, 6, 53, 199, 82, 212, 151, 200, 120, 68, 45, 110, 157, 21, 152, 0, 0, 217, 67, 165, 96, 180, 100, 227, 84, 76, 45, 202, 43, 119, 16, 251, 57, 111, 16, 218, 102, 22, 103, 160, 121, 234, 100, 82, 80, 67, 12, 104, 142, 161, 33, 76, 139, 49, 7, 0, 0, 11, 72, 169, 1, 250, 63, 115, 88, 141, 45, 0, 0, 200, 69, 252, 4, 151, 96, 76, 15, 150, 13, 121, 85, 187, 64, 186, 67, 0, 0, 180, 74, 102, 42, 157, 16, 170, 129, 245, 152, 156, 13, 121, 99, 254, 57, 117, 39, 192, 141, 161, 86, 124, 100, 67, 62, 0, 0, 1, 166, 9, 14, 207, 42, 201, 44, 0, 0, 200, 16, 194, 57, 146, 57, 6, 58, 155, 130, 120, 53, 73, 94, 199, 32, 82, 86, 49, 15, 178, 44, 32, 151, 188, 52, 61, 108, 59, 78, 0, 0, 0, 0, 116, 117, 139, 46, 8, 34, 91, 166, 205, 140, 122, 14, 52, 12, 28, 104, 147, 127, 207, 16, 3, 40, 57, 41, 251, 53, 227, 81, 140, 14, 141, 15, 170, 14, 147, 63, 48, 15, 71, 13, 79, 17, 76, 14, 0, 0, 171, 14, 169, 11, 72, 13, 192, 16, 61, 17, 249, 63, 150, 38, 50, 100, 173, 15, 244, 51, 57, 118, 206, 43, 126, 13, 127, 13, 81, 44, 85, 44, 24, 58, 152, 14, 199, 16, 46, 15, 50, 166, 80, 107, 210, 140, 153, 141, 202, 140, 170, 149, 204, 84, 196, 130, 185, 85, 0, 0, 195, 158, 38, 156, 182, 154, 94, 119, 238, 45, 64, 113, 109, 129, 236, 128, 28, 92, 114, 101, 52, 129, 151, 55, 95, 83, 189, 128, 182, 145, 250, 14, 15, 14, 119, 14, 251, 14, 221, 53, 235, 77, 9, 54, 214, 12, 175, 86, 181, 39, 201, 16, 16, 14, 120, 14, 120, 16, 72, 17, 7, 130, 85, 20, 121, 14, 80, 78, 164, 45, 84, 90, 29, 16, 30, 16, 245, 16, 246, 16, 156, 87, 17, 14, 148, 118, 205, 130, 181, 15, 123, 14, 126, 81, 3, 55, 182, 15, 128, 17, 216, 82, 189, 162, 218, 73, 58, 24, 119, 65, 124, 130, 153, 88, 104, 82, 26, 54, 61, 87, 178, 123, 104, 91, 0, 72, 44, 75, 39, 159, 231, 73, 31, 156, 141, 155, 116, 91, 61, 49, 251, 85, 242, 53, 137, 86, 40, 78, 2, 89, 193, 27, 120, 248, 81, 151, 134, 0, 91, 78, 187, 78, 62, 53, 35, 92, 81, 95, 196, 95, 250, 56, 76, 98, 53, 101, 122, 107, 53, 108, 58, 108, 108, 112, 43, 114, 44, 78, 173, 114, 233, 72, 82, 127, 59, 121, 249, 124, 83, 127, 106, 98, 193, 52, 0, 0, 75, 99, 2, 128, 128, 128, 18, 102, 81, 105, 93, 83, 100, 136, 193, 137, 178, 120, 160, 139, 29, 141, 133, 148, 120, 149, 127, 149, 232, 149, 15, 142, 230, 151, 117, 152, 206, 152, 222, 152, 99, 153, 16, 152, 124, 156, 31, 158, 196, 158, 111, 107, 7, 249, 55, 78, 135, 0, 29, 150, 55, 98, 162, 148, 0, 0, 59, 80, 254, 109, 115, 156, 166, 159, 201, 61, 143, 136, 78, 65, 119, 112, 245, 92, 32, 75, 205, 81, 89, 53, 48, 93, 34, 97, 50, 138, 167, 143, 246, 145, 145, 113, 25, 103, 186, 115, 129, 50, 7, 161, 139, 60, 128, 25, 16, 75, 228, 120, 2, 116, 174, 81, 15, 135, 9, 64, 99, 106, 186, 162, 35, 66, 15, 134, 111, 10, 42, 122, 71, 153, 234, 138, 85, 151, 77, 112, 36, 83, 126, 32, 244, 147, 217, 118, 227, 137, 167, 159, 221, 119, 163, 78, 240, 79, 188, 80, 47, 78, 23, 79, 168, 159, 52, 84, 139, 125, 146, 88, 208, 88, 182, 29, 146, 94, 153, 94, 194, 95, 18, 39, 139, 101, 249, 51, 25, 105, 67, 106, 99, 60, 255, 108, 0, 0, 0, 114, 5, 69, 140, 115, 219, 62, 19, 74, 21, 91, 185, 116, 131, 139, 164, 92, 149, 86, 147, 122, 236, 123, 195, 124, 108, 126, 248, 130, 151, 133, 169, 159, 144, 136, 170, 159, 185, 142, 171, 159, 207, 143, 95, 133, 224, 153, 33, 146, 172, 159, 185, 141, 63, 20, 113, 64, 162, 66, 26, 90, 0, 0, 0, 0, 0, 0, 104, 152, 107, 103, 118, 66, 61, 87, 0, 0, 214, 133, 123, 73, 191, 130, 13, 113, 129, 76, 116, 109, 123, 93, 21, 107, 190, 111, 173, 159, 174, 159, 150, 91, 175, 159, 231, 102, 91, 126, 87, 110, 202, 121, 136, 61, 195, 68, 86, 50, 150, 39, 154, 67, 54, 69, 0, 0, 213, 92, 26, 59, 249, 138, 120, 92, 18, 61, 81, 53, 120, 93, 178, 159, 87, 113, 88, 69, 236, 64, 35, 30, 119, 76, 120, 57, 74, 52, 164, 1, 65, 108, 204, 138, 180, 79, 57, 2, 191, 89, 108, 129, 86, 152, 250, 152, 59, 95, 159, 11, 0, 0, 193, 33, 109, 137, 2, 65, 187, 70, 121, 144, 7, 63, 179, 159, 181, 161, 248, 64, 214, 55, 247, 70, 70, 108, 124, 65, 178, 134, 255, 115, 109, 69, 212, 56, 154, 84, 97, 69, 27, 69, 137, 77, 123, 76, 118, 77, 234, 69, 200, 63, 15, 75, 97, 54, 222, 68, 189, 68, 237, 65, 62, 93, 72, 93, 86, 93, 252, 61, 15, 56, 164, 93, 185, 93, 32, 56, 56, 56, 66, 94, 189, 94, 37, 95, 131, 95, 8, 57, 20, 57, 63, 57, 77, 57, 215, 96, 61, 97, 229, 92, 137, 57, 183, 97, 185, 97, 207, 97, 184, 57, 44, 98, 144, 98, 229, 98, 24, 99, 248, 57, 177, 86, 3, 58, 226, 99, 251, 99, 7, 100, 90, 100, 75, 58, 192, 100, 21, 93, 33, 86, 159, 159, 151, 58, 134, 101, 189, 58, 255, 101, 83, 102, 242, 58, 146, 102, 34, 59, 22, 103, 66, 59, 164, 103, 0, 104, 88, 59, 74, 104, 132, 104, 114, 59, 113, 59, 123, 59, 9, 105, 67, 105, 92, 114, 100, 105, 159, 105, 133, 105, 188, 59, 214, 105, 221, 59, 101, 106, 116, 106, 113, 106, 130, 106, 236, 59, 153, 106, 242, 59, 171, 106, 181, 106, 212, 106, 246, 106, 129, 107, 193, 107, 234, 107, 117, 108, 170, 108, 203, 60, 2, 109, 6, 109, 38, 109, 129, 109, 239, 60, 164, 109, 177, 109, 21, 110, 24, 110, 41, 110, 134, 110, 192, 137, 187, 110, 226, 110, 218, 110, 127, 159, 232, 110, 233, 110, 36, 111, 52, 111, 70, 61, 65, 63, 129, 111, 190, 111, 106, 61, 117, 61, 183, 113, 153, 92, 138, 61, 44, 112, 145, 61, 80, 112, 84, 112, 111, 112, 127, 112, 137, 112, 37, 3, 193, 67, 241, 53, 216, 14, 215, 62, 190, 87, 211, 110, 62, 113, 224, 87, 78, 54, 162, 105, 233, 139, 116, 91, 73, 122, 225, 88, 217, 148, 101, 122, 125, 122, 172, 89, 187, 122, 176, 122, 194, 122, 195, 122, 209, 113, 141, 100, 202, 65, 218, 122, 221, 122, 234, 122, 239, 65, 178, 84, 1, 92, 11, 123, 85, 123, 41, 123, 14, 83, 254, 92, 162, 123, 111, 123, 156, 131, 180, 91, 127, 108, 208, 123, 33, 132, 146, 123, 0, 0, 32, 93, 173, 61, 101, 92, 146, 132, 250, 123, 0, 0, 53, 124, 193, 92, 68, 124, 131, 124, 130, 72, 166, 124, 125, 102, 120, 69, 201, 124, 199, 124, 230, 124, 116, 124, 243, 124, 245, 124, 0, 0, 103, 126, 29, 69, 68, 110, 93, 125, 214, 110, 141, 116, 137, 125, 171, 125, 53, 113, 179, 125, 0, 0, 87, 64, 41, 96, 228, 125, 19, 61, 245, 125, 249, 23, 229, 125, 109, 131, 0, 0, 33, 97, 90, 97, 110, 126, 146, 126, 43, 67, 108, 148, 39, 126, 64, 127, 65, 127, 71, 127, 54, 121, 208, 98, 225, 153, 151, 127, 81, 99, 163, 127, 97, 22, 104, 0, 92, 69, 102, 55, 3, 69, 58, 131, 250, 127, 137, 100, 0, 0, 8, 128, 29, 128, 0, 0, 47, 128, 135, 160, 195, 108, 59, 128, 60, 128, 97, 128, 20, 39, 137, 73, 38, 102, 227, 61, 232, 102, 37, 103, 167, 128, 72, 138, 7, 129, 26, 129, 176, 88, 246, 38, 127, 108, 152, 100, 184, 79, 231, 100, 138, 20, 24, 130, 94, 24, 83, 106, 101, 74, 149, 74, 122, 68, 41, 130, 13, 11, 82, 106, 126, 61, 249, 79, 253, 20, 226, 132, 98, 131, 10, 107, 167, 73, 48, 53, 115, 23, 248, 61, 170, 130, 27, 105, 148, 249, 219, 65, 75, 133, 208, 130, 26, 131, 22, 14, 180, 23, 193, 54, 125, 49, 90, 53, 123, 130, 226, 130, 24, 131, 139, 62, 163, 109, 5, 107, 151, 107, 206, 53, 191, 61, 29, 131, 236, 85, 133, 131, 11, 69, 165, 109, 172, 131, 0, 0, 211, 131, 126, 52, 212, 110, 87, 106, 90, 133, 150, 52, 66, 110, 239, 46, 88, 132, 228, 91, 113, 132, 211, 61, 228, 68, 167, 106, 74, 132, 181, 60, 88, 121, 0, 0, 150, 107, 119, 110, 67, 110, 222, 132, 0, 0, 145, 131, 160, 68, 147, 132, 228, 132, 145, 92, 64, 66, 192, 92, 67, 69, 52, 133, 242, 90, 153, 110, 39, 69, 115, 133, 22, 69, 191, 103, 22, 134, 37, 134, 59, 134, 193, 133, 136, 112, 2, 134, 130, 21, 205, 112, 178, 249, 106, 69, 40, 134, 72, 54, 162, 24, 247, 83, 154, 115, 126, 134, 113, 135, 248, 160, 238, 135, 39, 44, 177, 135, 218, 135, 15, 136, 97, 86, 108, 134, 86, 104, 15, 70, 69, 136, 70, 136, 224, 117, 185, 61, 228, 117, 94, 136, 156, 136, 91, 70, 180, 136, 181, 136, 193, 99, 197, 136, 119, 119, 15, 119, 135, 137, 138, 137, 0, 0, 0, 0, 167, 137, 188, 137, 37, 138, 231, 137, 36, 121, 189, 122, 156, 138, 147, 119, 254, 145, 144, 138, 89, 122, 233, 122, 58, 123, 143, 63, 19, 71, 56, 123, 124, 113, 12, 139, 31, 139, 48, 84, 101, 85, 63, 139, 76, 139, 77, 139, 169, 138, 122, 74, 144, 139, 155, 139, 175, 138, 223, 22, 21, 70, 79, 136, 155, 140, 84, 125, 143, 125, 212, 249, 37, 55, 83, 125, 214, 140, 152, 125, 189, 125, 18, 141, 3, 141, 16, 25, 219, 140, 92, 112, 17, 141, 201, 76, 208, 62, 0, 0, 169, 141, 2, 128, 20, 16, 138, 73, 124, 59, 188, 129, 12, 113, 231, 122, 173, 142, 182, 142, 195, 142, 212, 146, 25, 143, 45, 143, 101, 131, 18, 132, 165, 143, 3, 147, 159, 162, 80, 10, 179, 143, 42, 73, 222, 137, 61, 133, 187, 61, 248, 94, 98, 50, 249, 143, 20, 160, 188, 134, 1, 133, 37, 35, 128, 57, 215, 110, 55, 144, 60, 133, 190, 122, 97, 144, 108, 133, 11, 134, 168, 144, 19, 135, 196, 144, 230, 134, 174, 144, 0, 0, 103, 145, 240, 58, 169, 145, 196, 145, 172, 124, 51, 137, 137, 30, 14, 146, 159, 108, 65, 146, 98, 146, 185, 85, 0, 0, 198, 138, 155, 60, 12, 139, 219, 85, 49, 13, 44, 147, 107, 147, 225, 138, 235, 139, 143, 112, 195, 90, 226, 138, 229, 138, 101, 73, 68, 146, 236, 139, 57, 140, 255, 139, 115, 147, 91, 148, 188, 142, 133, 149, 166, 149, 38, 148, 160, 149, 246, 111, 185, 66, 122, 38, 216, 134, 124, 18, 46, 62, 223, 73, 28, 108, 123, 150, 150, 150, 108, 65, 163, 150, 213, 110, 218, 97, 182, 150, 245, 120, 224, 138, 189, 150, 204, 83, 161, 73, 184, 108, 116, 2, 16, 100, 175, 144, 229, 144, 209, 74, 21, 25, 10, 51, 49, 151, 66, 134, 54, 151, 15, 74, 61, 69, 133, 69, 233, 74, 117, 112, 65, 91, 27, 151, 0, 0, 213, 145, 87, 151, 74, 91, 235, 145, 95, 151, 37, 148, 208, 80, 183, 48, 188, 48, 137, 151, 159, 151, 177, 151, 190, 151, 192, 151, 210, 151, 224, 151, 108, 84, 238, 151, 28, 116, 51, 148, 0, 0, 245, 151, 29, 148, 122, 121, 209, 74, 52, 152, 51, 152, 75, 152, 102, 152, 14, 59, 117, 113, 81, 61, 48, 6, 92, 65, 6, 87, 202, 152, 183, 152, 200, 152, 199, 152, 255, 74, 39, 109, 211, 22, 176, 85, 225, 152, 230, 152, 236, 152, 120, 147, 57, 153, 41, 74, 114, 75, 87, 152, 5, 153, 245, 153, 12, 154, 59, 154, 16, 154, 88, 154, 37, 87, 196, 54, 177, 144, 213, 155, 224, 154, 226, 154, 5, 155, 244, 154, 14, 76, 20, 155, 45, 155, 0, 134, 52, 80, 52, 155, 168, 105, 195, 56, 125, 48, 80, 155, 64, 155, 62, 157, 69, 90, 99, 24, 142, 155, 75, 66, 2, 156, 255, 155, 12, 156, 104, 158, 212, 157, 183, 159, 146, 161, 171, 161, 225, 160, 35, 161, 223, 161, 126, 157, 131, 157, 52, 161, 14, 158, 136, 104, 196, 157, 91, 33, 147, 161, 32, 162, 59, 25, 51, 162, 57, 157, 185, 160, 180, 162, 144, 158, 149, 158, 158, 158, 162, 158, 52, 77, 170, 158, 175, 158, 100, 67, 193, 158, 96, 59, 229, 57, 29, 61, 50, 79, 190, 55, 43, 140, 2, 159, 8, 159, 150, 75, 36, 148, 162, 109, 23, 159, 0, 0, 57, 159, 159, 86, 138, 86, 69, 159, 184, 153, 139, 144, 242, 151, 127, 132, 98, 159, 105, 159, 220, 122, 142, 159, 22, 114, 190, 75, 117, 73, 187, 73, 119, 113, 248, 73, 72, 67, 81, 74, 158, 115, 218, 139, 250, 24, 159, 121, 126, 137, 54, 142, 105, 147, 243, 147, 68, 138, 236, 146, 129, 147, 203, 147, 108, 137, 185, 68, 23, 114, 235, 62, 114, 119, 67, 122, 208, 112, 115, 68, 248, 67, 126, 113, 239, 23, 163, 112, 190, 24, 153, 53, 199, 62, 133, 24, 47, 84, 248, 23, 34, 55, 251, 22, 57, 24, 225, 54, 116, 23, 209, 24, 75, 95, 35, 55, 192, 22, 91, 87, 37, 74, 254, 19, 168, 18, 198, 19, 182, 20, 3, 133, 166, 54, 0, 0, 85, 132, 148, 73, 101, 113, 49, 62, 92, 85, 251, 62, 82, 112, 244, 68, 238, 54, 157, 153, 38, 111, 249, 103, 51, 55, 21, 60, 231, 61, 108, 88, 34, 25, 16, 104, 87, 64, 63, 55, 225, 64, 139, 64, 15, 65, 33, 108, 203, 84, 158, 86, 177, 102, 146, 86, 223, 15, 168, 11, 13, 14, 198, 147, 19, 139, 156, 147, 248, 78, 43, 81, 25, 56, 54, 68, 188, 78, 101, 4, 127, 3, 75, 79, 138, 79, 81, 86, 104, 90, 171, 1, 203, 3, 153, 57, 10, 3, 20, 4, 53, 52, 41, 79, 192, 2, 179, 142, 117, 2, 218, 138, 12, 2, 152, 78, 205, 80, 13, 81, 162, 79, 3, 79, 14, 74, 138, 62, 66, 79, 46, 80, 108, 80, 129, 80, 204, 79, 229, 79, 88, 80, 252, 80, 0, 0, 0, 0, 0, 0, 0, 0, 118, 110, 149, 53, 57, 62, 191, 62, 114, 109, 132, 24, 137, 62, 168, 81, 195, 81, 224, 5, 221, 68, 163, 4, 146, 4, 145, 4, 122, 141, 156, 138, 14, 7, 89, 82, 164, 82, 115, 8, 225, 82, 0, 0, 122, 70, 140, 113, 140, 67, 32, 12, 172, 73, 228, 16, 209, 105, 29, 14, 0, 0, 222, 62, 153, 116, 20, 116, 86, 116, 152, 115, 142, 75, 188, 74, 141, 64, 208, 83, 132, 53, 15, 114, 201, 64, 180, 85, 69, 3, 205, 84, 198, 11, 29, 87, 93, 146, 244, 150, 102, 147, 221, 87, 141, 87, 127, 87, 62, 54, 203, 88, 153, 90, 70, 138, 250, 22, 111, 23, 16, 23, 44, 90, 184, 89, 143, 146, 126, 90, 207, 90, 18, 90, 70, 89, 243, 25, 97, 24, 149, 66, 245, 54, 5, 109, 67, 116, 33, 90, 131, 94, 129, 90, 215, 139, 19, 4, 224, 147, 140, 116, 3, 19, 5, 113, 114, 73, 8, 148, 251, 137, 189, 147, 160, 55, 30, 92, 158, 92, 94, 94, 72, 94, 150, 25, 124, 25, 238, 58, 205, 94, 79, 91, 3, 25, 4, 25, 1, 55, 160, 24, 221, 54, 254, 22, 211, 54, 42, 129, 71, 138, 186, 29, 114, 52, 168, 137, 12, 95, 14, 95, 39, 25, 171, 23, 107, 90, 59, 23, 68, 91, 20, 134, 253, 117, 96, 136, 126, 96, 96, 40, 43, 38, 219, 95, 184, 62, 175, 37, 190, 37, 136, 144, 115, 111, 192, 97, 62, 0, 70, 0, 27, 38, 153, 97, 152, 97, 117, 96, 155, 44, 7, 45, 212, 70, 77, 145, 113, 100, 101, 70, 106, 43, 41, 58, 34, 43, 80, 52, 234, 152, 120, 46, 55, 99, 91, 164, 182, 100, 49, 99, 209, 99, 227, 73, 103, 45, 164, 98, 161, 44, 59, 100, 107, 101, 114, 105, 244, 59, 142, 48, 173, 50, 137, 73, 171, 50, 13, 85, 224, 50, 217, 24, 63, 148, 206, 102, 137, 50, 179, 49, 224, 58, 144, 65, 132, 85, 34, 139, 143, 85, 252, 22, 91, 85, 37, 84, 238, 120, 3, 49, 42, 24, 52, 50, 100, 52, 15, 50, 130, 49, 201, 66, 142, 102, 36, 109, 107, 102, 147, 75, 48, 102, 112, 120, 235, 29, 99, 102, 210, 50, 225, 50, 30, 102, 114, 88, 209, 56, 58, 56, 188, 55, 153, 59, 162, 55, 254, 51, 208, 116, 150, 59, 143, 103, 42, 70, 182, 104, 30, 104, 196, 59, 190, 106, 99, 56, 213, 55, 135, 68, 51, 106, 82, 106, 201, 106, 5, 107, 18, 25, 17, 101, 152, 104, 76, 106, 215, 59, 122, 106, 87, 107, 192, 63, 154, 60, 160, 147, 242, 146, 234, 139, 203, 138, 137, 146, 30, 128, 220, 137, 103, 148, 165, 109, 11, 111, 236, 73, 0, 0, 127, 63, 143, 61, 4, 110, 60, 64, 61, 90, 10, 110, 71, 88, 36, 109, 66, 120, 59, 113, 26, 67, 118, 66, 241, 112, 80, 114, 135, 114, 148, 114, 143, 71, 37, 71, 121, 81, 164, 74, 235, 5, 122, 116, 248, 62, 95, 54, 74, 74, 23, 73, 225, 95, 6, 63, 177, 62, 223, 74, 35, 140, 53, 63, 167, 96, 243, 62, 204, 116, 60, 116, 135, 147, 55, 116, 159, 68, 234, 109, 81, 69, 131, 117, 99, 63, 217, 76, 6, 77, 88, 63, 85, 117, 115, 118, 198, 165, 25, 59, 104, 116, 204, 138, 171, 73, 142, 73, 251, 58, 205, 61, 78, 74, 255, 62, 197, 73, 243, 72, 250, 145, 50, 87, 66, 147, 227, 138, 100, 24, 223, 80, 33, 82, 231, 81, 120, 119, 50, 50, 14, 119, 15, 119, 123, 119, 151, 70, 129, 55, 94, 58, 240, 72, 56, 116, 155, 116, 191, 62, 186, 74, 199, 74, 200, 64, 150, 74, 174, 97, 7, 147, 129, 85, 30, 120, 141, 120, 136, 120, 210, 120, 208, 115, 89, 121, 65, 119, 227, 86, 14, 65, 0, 0, 150, 132, 165, 121, 45, 106, 250, 62, 58, 122, 244, 121, 110, 65, 230, 22, 50, 65, 53, 146, 241, 121, 76, 13, 140, 73, 153, 2, 186, 61, 110, 23, 151, 53, 107, 85, 112, 53, 170, 54, 212, 1, 13, 12, 226, 122, 89, 90, 245, 38, 175, 90, 156, 90, 13, 90, 91, 2, 240, 120, 42, 90, 198, 91, 254, 122, 249, 65, 93, 124, 109, 124, 17, 66, 179, 91, 188, 94, 166, 94, 205, 124, 249, 73, 176, 23, 142, 124, 124, 124, 174, 124, 178, 106, 220, 125, 7, 126, 211, 125, 78, 127, 97, 98, 92, 97, 72, 123, 151, 125, 130, 94, 106, 66, 117, 107, 22, 9, 214, 103, 78, 0, 207, 53, 196, 87, 18, 100, 248, 99, 98, 73, 221, 127, 39, 123, 44, 8, 233, 90, 67, 93, 12, 123, 14, 94, 230, 153, 69, 134, 99, 154, 28, 106, 63, 52, 226, 57, 247, 73, 173, 101, 31, 154, 160, 101, 128, 132, 39, 113, 209, 108, 234, 68, 55, 129, 2, 68, 198, 128, 9, 129, 66, 129, 180, 103, 195, 152, 66, 106, 98, 130, 101, 130, 81, 106, 83, 132, 167, 109, 16, 134, 27, 114, 134, 90, 127, 65, 64, 24, 43, 91, 161, 24, 228, 90, 216, 24, 160, 134, 188, 249, 143, 61, 45, 136, 34, 116, 2, 90, 110, 136, 69, 79, 135, 136, 191, 136, 230, 136, 101, 137, 77, 137, 131, 86, 84, 137, 133, 119, 132, 119, 245, 139, 217, 139, 156, 139, 249, 137, 173, 62, 163, 132, 245, 70, 207, 70, 242, 55, 61, 138, 28, 138, 72, 148, 77, 95, 43, 146, 132, 66, 212, 101, 41, 113, 196, 112, 69, 24, 109, 157, 159, 140, 233, 140, 220, 125, 154, 89, 195, 119, 240, 89, 110, 67, 212, 54, 42, 142, 167, 142, 9, 76, 48, 143, 74, 143, 244, 66, 88, 108, 187, 111, 33, 35, 155, 72, 121, 111, 139, 110, 218, 23, 233, 155, 181, 54, 47, 73, 187, 144, 0, 0, 113, 85, 6, 73, 187, 145, 4, 148, 75, 138, 98, 64, 252, 138, 39, 148, 29, 140, 59, 140, 229, 132, 43, 138, 153, 149, 167, 149, 151, 149, 150, 149, 52, 141, 69, 116, 194, 62, 255, 72, 66, 74, 234, 67, 231, 62, 37, 50, 143, 150, 231, 142, 102, 142, 101, 142, 204, 62, 237, 73, 120, 74, 238, 63, 18, 116, 107, 116, 252, 62, 65, 151, 176, 144, 71, 104, 29, 74, 147, 144, 223, 87, 0, 0, 104, 147, 137, 137, 38, 140, 47, 139, 190, 99, 186, 146, 17, 91, 105, 139, 60, 73, 249, 115, 27, 66, 155, 151, 113, 151, 56, 153, 38, 15, 193, 93, 197, 139, 178, 74, 31, 152, 218, 148, 246, 146, 215, 149, 229, 145, 192, 68, 80, 139, 103, 74, 100, 139, 220, 152, 69, 138, 0, 63, 42, 146, 37, 73, 20, 132, 59, 153, 77, 153, 6, 123, 253, 61, 155, 153, 111, 75, 170, 153, 92, 154, 101, 139, 200, 88, 143, 106, 33, 154, 254, 90, 47, 154, 241, 152, 144, 75, 72, 153, 188, 153, 189, 75, 151, 75, 125, 147, 114, 88, 2, 19, 34, 88, 184, 73, 232, 20, 68, 120, 31, 39, 184, 61, 197, 104, 125, 61, 88, 148, 39, 57, 80, 97, 129, 39, 107, 41, 7, 97, 79, 156, 83, 156, 123, 156, 53, 156, 16, 156, 127, 155, 207, 155, 45, 158, 159, 155, 245, 161, 254, 160, 33, 157, 174, 76, 4, 65, 24, 158, 176, 76, 12, 157, 180, 161, 237, 160, 243, 160, 47, 153, 165, 157, 189, 132, 18, 110, 223, 111, 130, 107, 252, 133, 51, 69, 164, 109, 132, 110, 240, 109, 32, 132, 238, 133, 0, 110, 215, 55, 100, 96, 226, 121, 156, 53, 64, 54, 45, 73, 222, 73, 98, 61, 219, 147, 190, 146, 72, 147, 191, 2, 185, 120, 119, 146, 77, 148, 228, 79, 64, 52, 100, 144, 93, 85, 61, 120, 84, 120, 182, 120, 75, 120, 87, 23, 201, 49, 65, 73, 154, 54, 114, 79, 218, 111, 217, 111, 0, 0, 30, 112, 20, 84, 181, 65, 187, 87, 243, 88, 138, 87, 22, 157, 215, 87, 52, 113, 175, 52, 172, 65, 235, 113, 64, 108, 151, 79, 0, 0, 181, 23, 73, 138, 12, 97, 206, 90, 11, 90, 188, 66, 136, 68, 44, 55, 123, 75, 252, 137, 187, 147, 184, 147, 214, 24, 29, 15, 114, 132, 192, 108, 19, 20, 250, 66, 38, 44, 193, 67, 148, 89, 183, 61, 65, 103, 168, 125, 91, 97, 164, 96, 185, 73, 139, 73, 250, 137, 229, 146, 226, 115, 233, 62, 180, 116, 99, 139, 159, 24, 225, 62, 179, 74, 216, 106, 243, 115, 251, 115, 214, 62, 62, 74, 148, 74, 217, 23, 102, 74, 167, 3, 36, 20, 229, 73, 72, 116, 22, 73, 165, 112, 118, 73, 132, 146, 230, 115, 95, 147, 254, 4, 49, 147, 206, 138, 22, 138, 134, 147, 231, 139, 213, 85, 53, 73, 130, 138, 107, 113, 67, 73, 255, 12, 164, 86, 26, 6, 235, 11, 184, 12, 2, 85, 196, 121, 250, 23, 254, 125, 194, 22, 80, 74, 82, 24, 46, 69, 1, 148, 10, 55, 192, 138, 173, 73, 176, 89, 191, 24, 131, 24, 132, 116, 161, 90, 226, 54, 91, 61, 176, 54, 95, 146, 121, 90, 129, 138, 98, 24, 116, 147, 205, 60, 180, 10, 150, 74, 138, 57, 244, 80, 105, 61, 76, 61, 156, 19, 117, 113, 251, 66, 24, 130, 15, 110, 228, 144, 235, 68, 87, 109, 79, 126, 103, 112, 175, 108, 214, 60, 237, 63, 45, 62, 2, 110, 12, 111, 111, 61, 245, 3, 81, 117, 188, 54, 200, 52, 128, 70, 218, 62, 113, 72, 196, 89, 110, 146, 62, 73, 65, 143, 28, 140, 192, 107, 18, 88, 200, 87, 214, 54, 82, 20, 254, 112, 98, 67, 113, 74, 227, 47, 176, 18, 189, 35, 185, 104, 103, 105, 152, 19, 229, 52, 244, 123, 223, 54, 131, 138, 214, 55, 250, 51, 159, 76, 26, 106, 173, 54, 183, 108, 62, 132, 223, 68, 206, 68, 38, 109, 81, 109, 130, 108, 222, 111, 23, 111, 9, 113, 61, 131, 58, 23, 237, 131, 128, 108, 83, 112, 219, 23, 137, 89, 130, 90, 179, 23, 97, 90, 113, 90, 5, 25, 252, 65, 45, 55, 239, 89, 60, 23, 199, 54, 142, 113, 144, 147, 154, 102, 165, 66, 110, 90, 43, 90, 147, 66, 43, 106, 249, 62, 54, 119, 91, 68, 202, 66, 29, 113, 89, 66, 225, 137, 176, 79, 40, 109, 194, 92, 206, 68, 77, 126, 189, 67, 12, 106, 86, 66, 4, 19, 166, 112, 51, 113, 233, 67, 165, 61, 223, 108, 37, 248, 79, 74, 101, 126, 235, 89, 47, 93, 243, 61, 92, 95, 93, 74, 223, 23, 164, 125, 38, 132, 133, 84, 250, 58, 0, 51, 20, 2, 126, 87, 213, 8, 25, 6, 229, 63, 158, 31, 182, 162, 3, 112, 91, 145, 112, 93, 143, 115, 211, 124, 89, 138, 32, 148, 200, 79, 231, 127, 205, 114, 16, 115, 244, 122, 56, 115, 57, 115, 246, 86, 65, 115, 72, 115, 169, 62, 24, 123, 108, 144, 245, 113, 242, 72, 225, 115, 246, 129, 202, 62, 12, 119, 209, 62, 162, 108, 253, 86, 25, 116, 30, 116, 31, 116, 226, 62, 240, 62, 244, 62, 250, 62, 211, 116, 14, 63, 83, 63, 66, 117, 109, 117, 114, 117, 141, 117, 124, 63, 200, 117, 220, 117, 192, 63, 77, 118, 215, 63, 116, 118, 220, 63, 122, 118, 92, 79, 136, 113, 35, 86, 128, 137, 105, 88, 29, 64, 67, 119, 57, 64, 97, 103, 69, 64, 219, 53, 152, 119, 106, 64, 111, 64, 94, 92, 190, 119, 203, 119, 242, 88, 24, 120, 185, 112, 28, 120, 168, 64, 57, 120, 71, 120, 81, 120, 102, 120, 72, 132, 53, 85, 51, 121, 3, 104, 50, 121, 3, 65, 9, 65, 145, 121, 153, 121, 187, 143, 6, 122, 188, 143, 103, 65, 145, 122, 178, 65, 188, 122, 121, 130, 196, 65, 207, 122, 219, 122, 207, 65, 33, 78, 98, 123, 108, 123, 123, 123, 18, 124, 27, 124, 96, 66, 122, 66, 123, 124, 156, 124, 140, 66, 184, 124, 148, 66, 237, 124, 147, 143, 192, 112, 207, 12, 207, 125, 212, 125, 208, 125, 253, 125, 174, 127, 180, 127, 159, 114, 151, 67, 32, 128, 37, 128, 57, 123, 46, 128, 49, 128, 84, 128, 204, 61, 180, 87, 160, 112, 183, 128, 233, 128, 237, 67, 12, 129, 42, 115, 14, 129, 18, 129, 96, 117, 20, 129, 1, 68, 57, 59, 86, 129, 89, 129, 90, 129, 19, 68, 58, 88, 124, 129, 132, 129, 37, 68, 147, 129, 45, 68, 165, 129, 239, 87, 193, 129, 228, 129, 84, 130, 143, 68, 166, 130, 118, 130, 202, 130, 216, 130, 255, 130, 176, 68, 87, 131, 105, 150, 138, 105, 5, 132, 245, 112, 100, 132, 227, 96, 136, 132, 4, 69, 190, 132, 225, 132, 248, 132, 16, 133, 56, 133, 82, 133, 59, 69, 111, 133, 112, 133, 224, 133, 119, 69, 114, 134, 146, 134, 178, 134, 239, 134, 69, 150, 139, 135, 6, 70, 23, 70, 174, 136, 255, 136, 36, 137, 71, 137, 145, 137, 103, 121, 41, 138, 56, 138, 148, 138, 180, 138, 81, 140, 212, 140, 242, 140, 28, 141, 152, 71, 95, 88, 195, 141, 237, 71, 238, 78, 58, 142, 216, 85, 84, 87, 113, 142, 245, 85, 176, 142, 55, 72, 206, 142, 226, 142, 228, 142, 237, 142, 242, 142, 183, 143, 193, 143, 202, 143, 204, 143, 51, 144, 196, 153, 173, 72, 224, 152, 19, 146, 30, 73, 40, 146, 88, 146, 107, 146, 177, 146, 174, 146, 191, 146, 227, 146, 235, 146, 243, 146, 244, 146, 253, 146, 67, 147, 132, 147, 173, 147, 69, 73, 81, 73, 191, 158, 23, 148, 1, 83, 29, 148, 45, 148, 62, 148, 106, 73, 84, 148, 121, 148, 45, 149, 162, 149, 167, 73, 244, 149, 51, 150, 229, 73, 160, 103, 36, 74, 64, 151, 53, 74, 178, 151, 194, 151, 84, 86, 228, 74, 232, 96, 185, 152, 25, 75, 241, 152, 68, 88, 14, 153, 25, 153, 180, 81, 28, 153, 55, 153, 66, 153, 93, 153, 98, 153, 112, 75, 197, 153, 157, 75, 60, 154, 15, 155, 131, 122, 105, 155, 129, 155, 221, 155, 241, 155, 244, 155, 109, 76, 32, 156, 111, 55, 194, 27, 73, 157, 58, 156, 254, 158, 80, 86, 147, 157, 189, 157, 192, 157, 252, 157, 246, 148, 182, 143, 123, 158, 172, 158, 177, 158, 189, 158, 198, 158, 220, 148, 226, 158, 241, 158, 248, 158, 200, 122, 68, 159, 148, 0, 183, 2, 160, 3, 26, 105, 195, 148, 172, 89, 215, 4, 64, 88, 193, 148, 185, 55, 213, 5, 21, 6, 118, 6, 186, 22, 87, 87, 115, 113, 194, 10, 205, 10, 191, 11, 106, 84, 59, 248, 203, 11, 158, 84, 251, 11, 59, 12, 83, 12, 101, 12, 124, 12, 231, 96, 141, 12, 122, 86, 181, 12, 221, 12, 237, 12, 111, 13, 178, 13, 200, 13, 85, 105, 47, 156, 165, 135, 4, 14, 14, 14, 215, 14, 144, 15, 45, 15, 115, 14, 32, 92, 188, 15, 11, 94, 92, 16, 79, 16, 118, 16, 30, 103, 123, 16, 136, 16, 150, 16, 71, 54, 191, 16, 211, 16, 47, 17, 59, 17, 100, 83, 173, 132, 227, 18, 117, 19, 54, 19, 129, 139, 119, 21, 25, 22, 195, 23, 199, 23, 120, 78, 187, 112, 45, 24, 106, 25, 45, 26, 69, 26, 42, 28, 112, 28, 172, 28, 200, 30, 195, 98, 213, 30, 21, 31, 152, 113, 85, 104, 69, 32, 233, 105, 200, 54, 124, 34, 215, 35, 250, 35, 42, 39, 113, 40, 79, 41, 253, 130, 103, 41, 147, 41, 213, 42, 165, 137, 232, 42, 160, 143, 14, 43, 184, 151, 63, 43, 71, 152, 189, 154, 76, 44, 0, 0, 136, 44, 183, 44, 232, 91, 8, 45, 18, 45, 183, 45, 149, 45, 66, 46, 116, 47, 204, 47, 51, 48, 102, 48, 31, 51, 222, 51, 177, 95, 72, 102, 191, 102, 121, 122, 103, 53, 243, 53, 0, 0, 186, 73, 0, 0, 26, 54, 22, 55, 0, 0, 70, 3, 181, 88, 14, 103, 24, 105, 167, 58, 87, 118, 226, 95, 17, 62, 185, 62, 254, 117, 154, 32, 208, 72, 184, 74, 25, 65, 154, 138, 238, 66, 13, 67, 59, 64, 52, 67, 150, 67, 69, 74, 202, 5, 210, 81, 17, 6, 159, 89, 168, 30, 190, 59, 255, 60, 4, 68, 214, 68, 136, 87, 116, 70, 155, 57, 47, 71, 232, 133, 201, 153, 98, 55, 195, 33, 94, 139, 78, 139, 0, 0, 18, 72, 251, 72, 21, 74, 9, 114, 192, 74, 120, 12, 101, 89, 165, 78, 134, 79, 121, 7, 218, 142, 44, 80, 143, 82, 63, 87, 113, 113, 153, 82, 25, 84, 74, 63, 167, 74, 188, 85, 70, 84, 110, 84, 82, 107, 0, 0, 115, 52, 63, 85, 50, 118, 94, 85, 24, 71, 98, 85, 102, 85, 199, 87, 63, 73, 93, 88, 102, 80, 251, 52, 204, 51, 0, 0, 3, 89, 124, 71, 72, 137, 174, 90, 137, 91, 6, 92, 144, 29, 161, 87, 81, 113, 0, 0, 2, 97, 18, 124, 86, 144, 178, 97, 154, 79, 98, 139, 2, 100, 74, 100, 91, 93, 247, 107, 0, 0, 132, 100, 28, 25, 234, 138, 246, 73, 136, 100, 239, 63, 18, 101, 192, 75, 191, 101, 181, 102, 27, 39, 101, 148, 225, 87, 149, 97, 39, 90, 205, 248, 0, 0, 185, 86, 33, 69, 252, 102, 106, 78, 52, 73, 86, 150, 143, 109, 189, 108, 24, 54, 119, 137, 153, 103, 110, 104, 17, 100, 94, 104, 0, 0, 199, 104, 66, 123, 192, 144, 17, 10, 38, 105, 0, 0, 57, 105, 69, 122, 0, 0, 250, 105, 38, 154, 45, 106, 95, 54, 105, 100, 33, 0, 131, 121, 52, 106, 91, 107, 44, 93, 25, 53, 0, 0, 157, 107, 208, 70, 164, 108, 59, 117, 101, 136, 174, 109, 182, 88, 28, 55, 141, 37, 75, 112, 205, 113, 84, 60, 128, 114, 133, 114, 129, 146, 122, 33, 139, 114, 48, 147, 230, 114, 208, 73, 57, 108, 159, 148, 80, 116, 248, 14, 39, 136, 245, 136, 38, 41, 115, 132, 177, 23, 184, 110, 42, 74, 32, 24, 164, 57, 185, 54, 0, 0, 0, 0, 63, 69, 182, 102, 173, 156, 164, 152, 67, 137, 204, 119, 88, 120, 214, 86, 223, 64, 10, 22, 161, 57, 47, 55, 232, 128, 197, 19, 173, 113, 102, 131, 221, 121, 168, 145, 0, 0, 183, 76, 175, 112, 171, 137, 253, 121, 10, 122, 11, 123, 102, 125, 122, 65, 67, 123, 126, 121, 9, 128, 181, 111, 223, 162, 3, 106, 24, 131, 162, 83, 7, 110, 191, 147, 54, 104, 93, 151, 111, 129, 35, 128, 181, 105, 237, 19, 47, 50, 72, 128, 133, 93, 48, 140, 131, 128, 21, 87, 35, 152, 73, 137, 171, 93, 136, 73, 190, 101, 213, 105, 210, 83, 165, 74, 129, 63, 17, 60, 54, 103, 144, 128, 244, 128, 46, 129, 161, 31, 79, 129, 137, 129, 175, 129, 26, 130, 6, 131, 47, 131, 138, 131, 202, 53, 104, 132, 170, 134, 250, 72, 230, 99, 86, 137, 8, 120, 85, 146, 184, 137, 242, 67, 231, 137, 223, 67, 232, 137, 70, 139, 212, 139, 248, 89, 9, 140, 0, 0, 197, 143, 236, 144, 0, 0, 16, 145, 60, 145, 247, 61, 94, 145, 202, 74, 208, 143, 143, 114, 139, 86, 231, 148, 233, 149, 176, 149, 184, 149, 50, 151, 209, 152, 73, 153, 106, 153, 195, 153, 40, 154, 14, 155, 90, 157, 155, 157, 159, 126, 248, 158, 35, 159, 164, 76, 71, 149, 147, 162, 162, 113, 255, 162, 145, 77, 18, 144, 203, 165, 156, 77, 156, 12, 190, 143, 193, 85, 186, 143, 176, 36, 185, 143, 147, 74, 9, 69, 127, 126, 86, 111, 177, 106, 234, 78, 228, 52, 44, 139, 157, 120, 58, 55, 128, 142, 245, 23, 36, 128, 108, 139, 153, 139, 62, 122, 175, 102, 235, 61, 85, 118, 183, 60, 53, 86, 86, 89, 154, 78, 129, 94, 88, 98, 191, 86, 109, 14, 14, 142, 109, 91, 136, 62, 158, 76, 222, 99, 0, 0, 246, 23, 123, 24, 48, 101, 45, 86, 74, 92, 26, 84, 17, 83, 198, 61, 152, 157, 125, 76, 34, 86, 30, 86, 73, 127, 216, 94, 117, 89, 64, 61, 112, 135, 28, 78, 234, 15, 73, 13, 186, 54, 23, 129, 94, 157, 24, 141, 59, 118, 69, 156, 78, 118, 185, 119, 69, 147, 50, 84, 72, 129, 247, 130, 37, 86, 50, 129, 24, 132, 189, 128, 234, 85, 98, 121, 67, 86, 22, 84, 157, 14, 206, 53, 5, 86, 241, 85, 241, 102, 226, 130, 45, 54, 52, 117, 240, 85, 186, 85, 151, 84, 114, 85, 65, 12, 150, 12, 208, 94, 72, 81, 118, 14, 98, 44, 162, 14, 171, 158, 90, 125, 222, 85, 117, 16, 157, 98, 109, 151, 148, 84, 205, 140, 246, 113, 118, 145, 252, 99, 185, 99, 254, 99, 105, 85, 67, 43, 114, 156, 179, 46, 154, 81, 223, 52, 167, 13, 167, 81, 77, 84, 30, 85, 19, 85, 102, 118, 45, 142, 138, 104, 177, 117, 182, 128, 4, 136, 134, 135, 199, 136, 182, 129, 28, 132, 193, 16, 236, 68, 4, 115, 6, 71, 144, 91, 11, 131, 147, 104, 123, 86, 244, 38, 47, 125, 163, 65, 115, 125, 208, 110, 182, 114, 112, 145, 217, 17, 8, 146, 252, 60, 169, 166, 172, 14, 249, 14, 102, 114, 162, 28, 78, 71, 194, 79, 249, 127, 235, 15, 250, 64, 93, 156, 31, 101, 160, 45, 243, 72, 224, 71, 124, 157, 236, 15, 10, 14, 0, 0, 163, 117, 237, 15, 0, 0, 72, 96, 135, 17, 163, 113, 142, 126, 80, 157, 26, 78, 4, 78, 119, 53, 13, 91, 178, 108, 103, 83, 172, 54, 220, 57, 125, 83, 165, 54, 24, 70, 154, 88, 110, 75, 45, 130, 75, 84, 170, 87, 149, 90, 121, 9, 0, 0, 82, 58, 101, 36, 116, 115, 172, 158, 9, 77, 237, 155, 254, 60, 48, 159, 91, 76, 169, 79, 158, 149, 222, 159, 92, 132, 182, 61, 178, 114, 179, 103, 32, 55, 46, 99, 37, 125, 247, 62, 44, 62, 42, 58, 8, 144, 204, 82, 116, 62, 122, 54, 233, 69, 142, 4, 64, 118, 240, 90, 182, 14, 122, 120, 46, 127, 167, 88, 191, 64, 124, 86, 139, 155, 116, 93, 84, 118, 52, 164, 133, 158, 225, 76, 0, 0, 251, 55, 25, 97, 218, 48, 242, 67, 0, 0, 93, 86, 169, 18, 167, 87, 99, 73, 6, 158, 52, 82, 174, 112, 173, 53, 0, 0, 124, 157, 86, 124, 57, 155, 222, 87, 108, 23, 83, 92, 211, 100, 208, 148, 53, 99, 100, 113, 173, 134, 40, 13, 34, 109, 226, 74, 113, 13, 0, 0, 254, 81, 15, 31, 142, 93, 3, 151, 209, 29, 129, 158, 76, 144, 31, 123, 2, 155, 209, 92, 163, 123, 104, 98, 53, 99, 255, 154, 207, 123, 42, 155, 126, 124, 0, 0, 66, 124, 134, 124, 21, 156, 252, 123, 9, 155, 0, 0, 27, 156, 62, 73, 90, 159, 115, 85, 195, 91, 253, 79, 152, 158, 242, 79, 96, 82, 6, 62, 209, 82, 103, 87, 86, 80, 183, 89, 18, 94, 200, 151, 171, 157, 92, 143, 105, 84, 180, 151, 64, 153, 186, 151, 44, 83, 48, 97, 44, 105, 218, 83, 10, 156, 2, 157, 59, 76, 65, 150, 128, 105, 166, 80, 70, 117, 109, 23, 218, 153, 115, 82, 0, 0, 89, 145, 129, 150, 92, 145, 0, 0, 81, 145, 151, 142, 127, 99, 35, 109, 202, 106, 17, 86, 142, 145, 122, 117, 133, 98, 252, 3, 79, 115, 112, 124, 33, 92, 253, 60, 0, 0, 25, 73, 214, 118, 157, 155, 42, 78, 212, 12, 190, 131, 66, 136, 0, 0, 74, 92, 192, 105, 0, 0, 122, 87, 31, 82, 245, 93, 206, 78, 49, 108, 242, 1, 57, 79, 156, 84, 218, 84, 154, 82, 130, 141, 254, 53, 0, 0, 243, 53, 0, 0, 82, 107, 124, 145, 165, 159, 151, 155, 46, 152, 180, 152, 186, 154, 168, 158, 132, 158, 122, 113, 20, 123, 0, 0, 250, 107, 24, 136, 120, 127, 0, 0, 32, 86, 74, 166, 119, 142, 83, 159, 0, 0, 212, 141, 79, 142, 28, 158, 1, 142, 130, 98, 125, 131, 40, 142, 117, 142, 211, 122, 119, 74, 62, 122, 216, 120, 234, 108, 103, 138, 7, 118, 90, 138, 38, 159, 206, 108, 214, 135, 195, 117, 178, 162, 83, 120, 64, 248, 12, 141, 226, 114, 113, 115, 45, 139, 2, 115, 241, 116, 235, 140, 187, 74, 47, 134, 186, 95, 160, 136, 183, 68, 0, 0, 59, 24, 5, 110, 0, 0, 126, 138, 27, 37, 0, 0, 253, 96, 103, 118, 215, 154, 68, 157, 110, 147, 143, 155, 245, 135, 0, 0, 0, 0, 247, 140, 44, 115, 33, 151, 176, 155, 214, 53, 178, 114, 7, 76, 81, 124, 74, 153, 89, 97, 89, 97, 4, 76, 150, 158, 125, 97, 0, 0, 95, 87, 111, 97, 166, 98, 57, 98, 0, 0, 92, 58, 226, 97, 170, 83, 245, 51, 100, 99, 2, 104, 210, 53, 87, 93, 194, 139, 218, 143, 57, 142, 0, 0, 217, 80, 70, 29, 6, 121, 50, 83, 56, 150, 59, 15, 101, 64, 0, 0, 254, 119, 0, 0, 194, 124, 26, 95, 218, 124, 45, 122, 102, 128, 99, 128, 77, 125, 5, 117, 242, 116, 148, 137, 26, 130, 12, 103, 98, 128, 134, 116, 91, 128, 240, 116, 3, 129, 36, 119, 137, 137, 204, 103, 83, 117, 209, 110, 169, 135, 206, 135, 200, 129, 140, 135, 73, 138, 173, 140, 67, 139, 43, 119, 248, 116, 218, 132, 53, 54, 178, 105, 166, 141, 0, 0, 169, 137, 0, 0, 185, 109, 193, 135, 17, 64, 231, 116, 219, 61, 118, 113, 164, 96, 156, 97, 209, 60, 0, 0, 119, 96, 0, 0, 113, 127, 45, 139, 0, 0, 233, 96, 126, 75, 32, 82, 24, 60, 199, 60, 215, 94, 86, 118, 49, 85, 68, 25, 254, 18, 3, 153, 220, 109, 173, 112, 193, 92, 173, 97, 15, 138, 119, 54, 238, 0, 70, 104, 14, 79, 98, 69, 31, 91, 76, 99, 80, 159, 166, 158, 107, 98, 71, 5, 219, 146, 223, 5, 197, 63, 76, 133, 181, 66, 239, 115, 181, 81, 73, 54, 66, 73, 228, 137, 68, 147, 219, 25, 238, 130, 200, 60, 60, 120, 68, 103, 223, 98, 51, 73, 170, 137, 160, 2, 179, 107, 5, 19, 171, 79, 237, 36, 8, 80, 41, 109, 132, 122, 0, 54, 177, 74, 19, 37, 0, 0, 126, 3, 164, 95, 128, 3, 71, 3, 219, 110, 31, 4, 0, 0, 1, 81, 122, 52, 14, 81, 108, 152, 67, 55, 22, 132, 164, 73, 135, 4, 96, 81, 180, 51, 106, 81, 255, 11, 252, 32, 229, 2, 48, 37, 142, 5, 51, 50, 131, 25, 130, 91, 125, 135, 179, 5, 153, 60, 178, 81, 184, 81, 52, 157, 201, 81, 207, 81, 209, 81, 220, 60, 211, 81, 166, 74, 179, 81, 226, 81, 66, 83, 237, 81, 205, 131, 62, 105, 45, 55, 123, 95, 11, 82, 38, 82, 60, 82, 181, 82, 87, 82, 148, 82, 185, 82, 197, 82, 21, 124, 66, 133, 224, 82, 13, 134, 19, 107, 0, 0, 222, 138, 73, 85, 217, 110, 128, 63, 84, 9, 236, 63, 51, 83, 0, 0, 226, 11, 203, 108, 38, 23, 27, 104, 213, 115, 74, 96, 170, 62, 204, 56, 232, 22, 221, 113, 162, 68, 109, 83, 116, 83, 171, 134, 126, 83, 0, 0, 150, 21, 19, 22, 230, 119, 147, 83, 155, 138, 160, 83, 171, 83, 174, 83, 167, 115, 114, 87, 89, 63, 156, 115, 193, 83, 197, 83, 73, 108, 73, 78, 254, 87, 217, 83, 171, 58, 143, 11, 224, 83, 235, 63, 163, 45, 246, 83, 119, 12, 19, 84, 121, 112, 43, 85, 87, 102, 91, 109, 109, 84, 83, 107, 116, 13, 93, 85, 143, 84, 164, 84, 166, 71, 13, 23, 221, 14, 180, 61, 77, 13, 188, 137, 152, 38, 71, 85, 237, 76, 47, 84, 23, 116, 134, 85, 169, 85, 0, 0, 215, 24, 58, 64, 82, 69, 53, 68, 179, 102, 180, 16, 55, 86, 205, 102, 138, 50, 164, 102, 173, 102, 77, 86, 79, 86, 241, 120, 241, 86, 135, 151, 254, 83, 0, 87, 239, 86, 237, 86, 102, 139, 35, 54, 79, 18, 70, 87, 165, 65, 110, 108, 139, 112, 66, 87, 177, 54, 126, 108, 230, 87, 22, 20, 3, 88, 84, 20, 99, 67, 38, 88, 245, 75, 92, 88, 170, 88, 97, 53, 224, 88, 220, 88, 60, 18, 251, 88, 255, 91, 67, 87, 80, 161, 120, 66, 211, 147, 161, 53, 31, 89, 166, 104, 195, 54, 89, 110, 62, 22, 36, 90, 83, 85, 146, 22, 5, 133, 201, 89, 78, 13, 129, 108, 42, 109, 220, 23, 217, 89, 251, 23, 178, 23, 166, 109, 113, 109, 40, 24, 213, 22, 249, 89, 69, 110, 171, 90, 99, 90, 230, 54, 169, 73, 0, 0, 8, 55, 150, 90, 101, 116, 211, 90, 161, 111, 84, 37, 133, 61, 17, 25, 50, 55, 184, 22, 131, 94, 208, 82, 118, 91, 136, 101, 124, 91, 14, 122, 4, 64, 93, 72, 4, 2, 213, 91, 96, 97, 52, 26, 204, 89, 165, 5, 243, 91, 157, 91, 16, 77, 5, 92, 68, 27, 19, 92, 206, 115, 20, 92, 165, 28, 40, 107, 73, 92, 221, 72, 133, 92, 233, 92, 239, 92, 139, 93, 249, 29, 55, 30, 16, 93, 24, 93, 70, 93, 164, 30, 186, 92, 215, 93, 252, 130, 45, 56, 1, 73, 73, 32, 115, 33, 135, 130, 54, 56, 194, 59, 46, 94, 138, 106, 0, 0, 122, 94, 188, 68, 211, 12, 166, 83, 183, 78, 0, 0, 168, 83, 113, 23, 9, 94, 244, 94, 130, 132, 249, 94, 251, 94, 160, 56, 252, 94, 62, 104, 27, 148, 13, 95, 193, 1, 148, 248, 222, 58, 174, 72, 58, 19, 58, 95, 136, 104, 208, 35, 0, 0, 113, 36, 99, 95, 189, 151, 110, 110, 114, 95, 64, 147, 54, 138, 167, 95, 182, 93, 95, 61, 80, 82, 106, 31, 248, 112, 104, 38, 214, 145, 158, 2, 41, 138, 49, 96, 133, 102, 119, 24, 99, 57, 199, 61, 57, 54, 144, 87, 180, 39, 113, 121, 64, 62, 158, 96, 0, 0, 179, 96, 130, 73, 143, 73, 83, 122, 164, 116, 225, 80, 160, 90, 100, 97, 36, 132, 66, 97, 166, 248, 210, 110, 129, 97, 244, 81, 86, 6, 135, 97, 170, 91, 183, 63, 95, 40, 211, 97, 157, 139, 93, 153, 208, 97, 50, 57, 128, 41, 193, 40, 35, 96, 92, 97, 30, 101, 139, 99, 24, 1, 197, 98, 112, 23, 213, 98, 13, 46, 108, 99, 223, 73, 23, 58, 56, 100, 248, 99, 142, 19, 252, 23, 0, 0, 138, 111, 54, 46, 20, 152, 140, 64, 29, 87, 225, 100, 229, 100, 123, 148, 102, 58, 58, 100, 87, 58, 77, 101, 22, 111, 40, 74, 35, 74, 133, 101, 109, 101, 95, 101, 126, 48, 181, 101, 64, 73, 55, 75, 209, 101, 216, 64, 41, 24, 224, 101, 227, 101, 223, 95, 0, 52, 24, 102, 247, 49, 248, 49, 68, 102, 164, 49, 165, 49, 75, 102, 117, 14, 103, 102, 230, 81, 115, 102, 0, 0, 61, 30, 49, 50, 244, 133, 200, 49, 19, 83, 197, 119, 247, 40, 164, 153, 2, 103, 156, 67, 33, 74, 43, 59, 250, 105, 194, 55, 0, 0, 103, 103, 98, 103, 205, 65, 237, 144, 215, 103, 233, 68, 34, 104, 80, 110, 60, 146, 1, 104, 230, 51, 160, 109, 93, 104, 111, 52, 225, 105, 11, 106, 223, 138, 115, 105, 195, 104, 205, 53, 1, 105, 0, 105, 50, 61, 1, 58, 60, 54, 128, 59, 172, 103, 97, 105, 74, 138, 252, 66, 54, 105, 152, 105, 161, 59, 201, 3, 99, 131, 144, 80, 249, 105, 89, 54, 42, 33, 69, 106, 3, 55, 157, 106, 243, 59, 177, 103, 200, 106, 156, 145, 13, 60, 29, 107, 35, 9, 222, 96, 53, 107, 116, 107, 205, 39, 181, 110, 219, 58, 181, 3, 88, 25, 64, 55, 33, 84, 90, 59, 225, 107, 252, 62, 220, 107, 55, 108, 139, 36, 241, 72, 81, 107, 90, 108, 38, 130, 121, 108, 188, 61, 197, 68, 189, 61, 164, 65, 12, 73, 0, 73, 201, 60, 229, 54, 235, 60, 50, 13, 131, 155, 249, 49, 145, 36, 143, 127, 55, 104, 37, 109, 161, 109, 235, 109, 150, 109, 92, 109, 124, 110, 4, 111, 127, 73, 133, 64, 114, 110, 51, 133, 116, 111, 199, 81, 0, 0, 0, 0, 46, 132, 33, 139, 0, 0, 47, 62, 83, 116, 130, 63, 204, 121, 79, 110, 145, 90, 75, 48, 248, 111, 13, 55, 157, 111, 48, 62, 250, 110, 151, 20, 61, 64, 85, 69, 240, 147, 68, 111, 92, 111, 78, 61, 116, 111, 112, 145, 59, 61, 159, 111, 68, 65, 211, 111, 145, 64, 85, 65, 57, 64, 240, 63, 180, 63, 63, 65, 223, 81, 86, 65, 87, 65, 64, 65, 221, 97, 75, 112, 126, 112, 167, 112, 129, 112, 204, 112, 213, 112, 214, 112, 223, 112, 4, 65, 232, 61, 180, 113, 150, 113, 119, 66, 43, 113, 69, 113, 136, 90, 74, 113, 0, 0, 156, 92, 101, 67, 79, 113, 98, 147, 193, 66, 44, 113, 90, 68, 39, 74, 34, 74, 186, 113, 232, 139, 189, 112, 14, 114, 66, 148, 21, 114, 17, 89, 67, 148, 36, 114, 65, 147, 5, 86, 46, 114, 64, 114, 116, 73, 189, 104, 85, 114, 87, 114, 85, 62, 68, 48, 13, 104, 61, 111, 130, 114, 0, 0, 43, 115, 35, 72, 43, 136, 237, 72, 4, 136, 40, 115, 46, 115, 207, 115, 170, 115, 58, 12, 46, 106, 201, 115, 73, 116, 226, 65, 231, 22, 36, 74, 35, 102, 197, 54, 183, 73, 141, 73, 251, 73, 247, 115, 21, 116, 3, 105, 38, 74, 57, 116, 195, 5, 215, 62, 0, 0, 173, 40, 96, 116, 178, 142, 71, 116, 228, 115, 118, 116, 185, 131, 108, 116, 48, 55, 116, 116, 241, 147, 44, 106, 130, 116, 83, 73, 140, 74, 95, 65, 121, 74, 143, 139, 70, 91, 3, 140, 158, 24, 200, 116, 136, 25, 14, 117, 0, 0, 30, 117, 217, 142, 75, 26, 215, 91, 172, 142, 133, 147, 77, 117, 74, 117, 103, 117, 110, 117, 130, 79, 4, 63, 19, 77, 142, 117, 93, 116, 158, 117, 180, 117, 2, 118, 44, 118, 81, 118, 79, 118, 111, 118, 118, 118, 245, 99, 144, 118, 239, 129, 248, 55, 17, 105, 14, 105, 161, 118, 165, 118, 183, 118, 204, 118, 159, 111, 98, 132, 157, 80, 125, 81, 28, 30, 30, 119, 38, 119, 64, 119, 175, 100, 32, 82, 88, 119, 172, 50, 175, 119, 100, 137, 104, 137, 193, 22, 244, 119, 0, 0, 118, 19, 18, 74, 202, 104, 175, 120, 199, 120, 211, 120, 165, 150, 46, 121, 224, 85, 215, 120, 52, 121, 177, 120, 12, 118, 184, 143, 132, 136, 43, 139, 131, 96, 28, 38, 134, 121, 0, 137, 2, 105, 128, 121, 87, 88, 157, 121, 57, 123, 60, 121, 169, 121, 42, 110, 38, 113, 168, 62, 198, 121, 13, 145, 212, 121, 32, 5, 95, 68, 15, 82, 130, 184, 248, 0, 0, 64, 32, 169, 78, 4, 0, 0, 0, 0, 52, 11, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 64, 0, 0, 0, 0, 0, 0, 0, 0, 4, 88, 0, 60, 0, 0, 0, 0, 0, 128, 92, 173, 220, 243, 187, 201, 67, 238, 237, 164, 15, 38, 193, 155, 118, 242, 239, 222, 251, 250, 247, 15, 50, 68, 175, 254, 239, 253, 254, 17, 96, 176, 0, 0, 33, 25, 129, 32, 16, 136, 168, 96, 33, 105, 36, 0, 68, 137, 196, 0, 0, 3, 64, 53, 0, 67, 132, 49, 81, 147, 104, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 1, 128, 172, 100, 130, 64, 140, 161, 144, 4, 80, 96, 212, 0, 210, 42, 24, 157, 104, 53, 151, 79, 216, 248, 32, 196, 130, 28, 40, 130, 117, 148, 2, 56, 64, 160, 161, 197, 16, 113, 77, 196, 13, 152, 185, 94, 91, 1, 67, 159, 153, 3, 120, 32, 226, 31, 8, 137, 1, 201, 64, 7, 3, 13, 154, 144, 82, 209, 79, 124, 3, 2, 33, 32, 192, 110, 19, 131, 181, 219, 245, 229, 119, 144, 79, 23, 154, 54, 23, 12, 0, 110, 186, 9, 47, 96, 84, 0, 30, 120, 104, 34, 112, 86, 158, 37, 243, 142, 183, 23, 11, 239, 230, 119, 23, 91, 27, 193, 16, 152, 141, 18, 24, 182, 207, 1, 49, 114, 26, 91, 44, 182, 192, 32, 226, 195, 92, 130, 27, 224, 218, 206, 133, 214, 64, 169, 84, 11, 208, 15, 72, 68, 64, 16, 9, 212, 64, 174, 59, 100, 30, 68, 43, 23, 8, 134, 130, 54, 24, 160, 137, 231, 156, 91, 8, 132, 3, 2, 218, 144, 236, 219, 135, 133, 191, 162, 173, 157, 142, 157, 152, 32, 37, 70, 0, 70, 159, 127, 227, 213, 201, 132, 244, 214, 77, 6, 227, 182, 24, 18, 9, 0, 0, 0, 4, 0, 0, 32, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 142, 120, 110, 95, 63, 126, 221, 61, 247, 252, 155, 252, 174, 210, 255, 143, 107, 241, 231, 191, 186, 174, 110, 23, 239, 220, 167, 62, 182, 181, 119, 201, 146, 215, 165, 182, 74, 110, 155, 185, 129, 77, 103, 254, 84, 241, 155, 98, 254, 111, 82, 215, 54, 254, 191, 41, 69, 129, 249, 189, 101, 166, 66, 57, 0, 0, 66, 96, 143, 0, 148, 64, 64, 210, 175, 215, 209, 219, 0, 160, 152, 178, 123, 6, 82, 32, 152, 22, 200, 61, 9, 0, 0, 1, 0, 0, 0, 1, 10, 178, 8, 128, 0, 0, 0, 4, 136, 32, 20, 16, 76, 0, 0, 4, 0, 161, 68, 16, 0, 65, 1, 0, 8, 64, 240, 223, 79, 54, 88, 241, 245, 181, 128, 245, 103, 128, 64, 0, 80, 78, 65, 200, 132, 0, 90, 96, 216, 1, 43, 1, 80, 161, 22, 196, 64, 242, 110, 17, 172, 32, 57, 196, 192, 8, 7, 12, 9, 152, 150, 196, 155, 16, 28, 152, 108, 134, 42, 166, 1, 70, 17, 109, 229, 203, 196, 192, 146, 16, 33, 22, 18, 157, 114, 244, 105, 14, 23, 42, 162, 129, 244, 123, 0, 8, 164, 11, 144, 16, 44, 204, 57, 74, 1, 240, 22, 11, 10, 64, 12, 29, 234, 12, 68, 14, 69, 2, 0, 8, 4, 4, 8, 4, 4, 8, 2, 4, 0, 0, 0, 0, 0, 0, 0, 195, 138, 204, 132, 195, 138, 204, 140, 195, 170, 204, 132, 195, 170, 204, 140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 12, 255, 1, 48, 2, 48, 14, 255, 39, 32, 27, 255, 26, 255, 31, 255, 1, 255, 48, 254, 38, 32, 37, 32, 80, 254, 81, 254, 82, 254, 183, 0, 84, 254, 85, 254, 86, 254, 87, 254, 92, 255, 19, 32, 49, 254, 20, 32, 51, 254, 116, 37, 52, 254, 79, 254, 8, 255, 9, 255, 53, 254, 54, 254, 91, 255, 93, 255, 55, 254, 56, 254, 20, 48, 21, 48, 57, 254, 58, 254, 16, 48, 17, 48, 59, 254, 60, 254, 10, 48, 11, 48, 61, 254, 62, 254, 8, 48, 9, 48, 63, 254, 64, 254, 12, 48, 13, 48, 65, 254, 66, 254, 14, 48, 15, 48, 67, 254, 68, 254, 89, 254, 90, 254, 91, 254, 92, 254, 93, 254, 94, 254, 24, 32, 25, 32, 28, 32, 29, 32, 29, 48, 30, 48, 53, 32, 50, 32, 3, 255, 6, 255, 10, 255, 59, 32, 167, 0, 3, 48, 203, 37, 207, 37, 179, 37, 178, 37, 206, 37, 6, 38, 5, 38, 199, 37, 198, 37, 161, 37, 160, 37, 189, 37, 188, 37, 163, 50, 5, 33, 175, 0, 227, 255, 63, 255, 205, 2, 73, 254, 74, 254, 77, 254, 78, 254, 75, 254, 76, 254, 95, 254, 96, 254, 97, 254, 11, 255, 13, 255, 215, 0, 247, 0, 177, 0, 26, 34, 28, 255, 30, 255, 29, 255, 102, 34, 103, 34, 96, 34, 30, 34, 82, 34, 97, 34, 98, 254, 99, 254, 100, 254, 101, 254, 102, 254, 94, 255, 41, 34, 42, 34, 165, 34, 32, 34, 31, 34, 191, 34, 210, 51, 209, 51, 43, 34, 46, 34, 53, 34, 52, 34, 64, 38, 66, 38, 149, 34, 153, 34, 145, 33, 147, 33, 144, 33, 146, 33, 150, 33, 151, 33, 153, 33, 152, 33, 37, 34, 35, 34, 15, 255, 60, 255, 21, 34, 104, 254, 4, 255, 229, 255, 18, 48, 224, 255, 225, 255, 5, 255, 32, 255, 3, 33, 9, 33, 105, 254, 106, 254, 107, 254, 213, 51, 156, 51, 157, 51, 158, 51, 206, 51, 161, 51, 142, 51, 143, 51, 196, 51, 176, 0, 89, 81, 91, 81, 94, 81, 93, 81, 97, 81, 99, 81, 231, 85, 233, 116, 206, 124, 129, 37, 130, 37, 131, 37, 132, 37, 133, 37, 134, 37, 135, 37, 136, 37, 143, 37, 142, 37, 141, 37, 140, 37, 139, 37, 138, 37, 137, 37, 60, 37, 52, 37, 44, 37, 36, 37, 28, 37, 148, 37, 0, 37, 2, 37, 149, 37, 12, 37, 16, 37, 20, 37, 24, 37, 109, 37, 110, 37, 112, 37, 111, 37, 80, 37, 94, 37, 106, 37, 97, 37, 226, 37, 227, 37, 229, 37, 228, 37, 113, 37, 114, 37, 115, 37, 16, 255, 17, 255, 18, 255, 19, 255, 20, 255, 21, 255, 22, 255, 23, 255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 76572);
    allocate([24, 255, 25, 255, 96, 33, 97, 33, 98, 33, 99, 33, 100, 33, 101, 33, 102, 33, 103, 33, 104, 33, 105, 33, 33, 48, 34, 48, 35, 48, 36, 48, 37, 48, 38, 48, 39, 48, 40, 48, 41, 48, 65, 83, 68, 83, 69, 83, 33, 255, 34, 255, 35, 255, 36, 255, 37, 255, 38, 255, 39, 255, 40, 255, 41, 255, 42, 255, 43, 255, 44, 255, 45, 255, 46, 255, 47, 255, 48, 255, 49, 255, 50, 255, 51, 255, 52, 255, 53, 255, 54, 255, 55, 255, 56, 255, 57, 255, 58, 255, 65, 255, 66, 255, 67, 255, 68, 255, 69, 255, 70, 255, 71, 255, 72, 255, 73, 255, 74, 255, 75, 255, 76, 255, 77, 255, 78, 255, 79, 255, 80, 255, 81, 255, 82, 255, 83, 255, 84, 255, 85, 255, 86, 255, 87, 255, 88, 255, 89, 255, 90, 255, 145, 3, 146, 3, 147, 3, 148, 3, 149, 3, 150, 3, 151, 3, 152, 3, 153, 3, 154, 3, 155, 3, 156, 3, 157, 3, 158, 3, 159, 3, 160, 3, 161, 3, 163, 3, 164, 3, 165, 3, 166, 3, 167, 3, 168, 3, 169, 3, 177, 3, 178, 3, 179, 3, 180, 3, 181, 3, 182, 3, 183, 3, 184, 3, 185, 3, 186, 3, 187, 3, 188, 3, 189, 3, 190, 3, 191, 3, 192, 3, 193, 3, 195, 3, 196, 3, 197, 3, 198, 3, 199, 3, 200, 3, 201, 3, 5, 49, 6, 49, 7, 49, 8, 49, 9, 49, 10, 49, 11, 49, 12, 49, 13, 49, 14, 49, 15, 49, 16, 49, 17, 49, 18, 49, 19, 49, 20, 49, 21, 49, 22, 49, 23, 49, 24, 49, 25, 49, 26, 49, 27, 49, 28, 49, 29, 49, 30, 49, 31, 49, 32, 49, 33, 49, 34, 49, 35, 49, 36, 49, 37, 49, 38, 49, 39, 49, 40, 49, 41, 49, 217, 2, 201, 2, 202, 2, 199, 2, 203, 2, 0, 36, 1, 36, 2, 36, 3, 36, 4, 36, 5, 36, 6, 36, 7, 36, 8, 36, 9, 36, 10, 36, 11, 36, 12, 36, 13, 36, 14, 36, 15, 36, 16, 36, 17, 36, 18, 36, 19, 36, 20, 36, 21, 36, 22, 36, 23, 36, 24, 36, 25, 36, 26, 36, 27, 36, 28, 36, 29, 36, 30, 36, 31, 36, 33, 36, 172, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 89, 78, 1, 78, 3, 78, 67, 78, 93, 78, 134, 78, 140, 78, 186, 78, 63, 81, 101, 81, 107, 81, 224, 81, 0, 82, 1, 82, 155, 82, 21, 83, 65, 83, 92, 83, 200, 83, 9, 78, 11, 78, 8, 78, 10, 78, 43, 78, 56, 78, 225, 81, 69, 78, 72, 78, 95, 78, 94, 78, 142, 78, 161, 78, 64, 81, 3, 82, 250, 82, 67, 83, 201, 83, 227, 83, 31, 87, 235, 88, 21, 89, 39, 89, 115, 89, 80, 91, 81, 91, 83, 91, 248, 91, 15, 92, 34, 92, 56, 92, 113, 92, 221, 93, 229, 93, 241, 93, 242, 93, 243, 93, 254, 93, 114, 94, 254, 94, 11, 95, 19, 95, 77, 98, 17, 78, 16, 78, 13, 78, 45, 78, 48, 78, 57, 78, 75, 78, 57, 92, 136, 78, 145, 78, 149, 78, 146, 78, 148, 78, 162, 78, 193, 78, 192, 78, 195, 78, 198, 78, 199, 78, 205, 78, 202, 78, 203, 78, 196, 78, 67, 81, 65, 81, 103, 81, 109, 81, 110, 81, 108, 81, 151, 81, 246, 81, 6, 82, 7, 82, 8, 82, 251, 82, 254, 82, 255, 82, 22, 83, 57, 83, 72, 83, 71, 83, 69, 83, 94, 83, 132, 83, 203, 83, 202, 83, 205, 83, 236, 88, 41, 89, 43, 89, 42, 89, 45, 89, 84, 91, 17, 92, 36, 92, 58, 92, 111, 92, 244, 93, 123, 94, 255, 94, 20, 95, 21, 95, 195, 95, 8, 98, 54, 98, 75, 98, 78, 98, 47, 101, 135, 101, 151, 101, 164, 101, 185, 101, 229, 101, 240, 102, 8, 103, 40, 103, 32, 107, 98, 107, 121, 107, 203, 107, 212, 107, 219, 107, 15, 108, 52, 108, 107, 112, 42, 114, 54, 114, 59, 114, 71, 114, 89, 114, 91, 114, 172, 114, 139, 115, 25, 78, 22, 78, 21, 78, 20, 78, 24, 78, 59, 78, 77, 78, 79, 78, 78, 78, 229, 78, 216, 78, 212, 78, 213, 78, 214, 78, 215, 78, 227, 78, 228, 78, 217, 78, 222, 78, 69, 81, 68, 81, 137, 81, 138, 81, 172, 81, 249, 81, 250, 81, 248, 81, 10, 82, 160, 82, 159, 82, 5, 83, 6, 83, 23, 83, 29, 83, 223, 78, 74, 83, 73, 83, 97, 83, 96, 83, 111, 83, 110, 83, 187, 83, 239, 83, 228, 83, 243, 83, 236, 83, 238, 83, 233, 83, 232, 83, 252, 83, 248, 83, 245, 83, 235, 83, 230, 83, 234, 83, 242, 83, 241, 83, 240, 83, 229, 83, 237, 83, 251, 83, 219, 86, 218, 86, 22, 89, 46, 89, 49, 89, 116, 89, 118, 89, 85, 91, 131, 91, 60, 92, 232, 93, 231, 93, 230, 93, 2, 94, 3, 94, 115, 94, 124, 94, 1, 95, 24, 95, 23, 95, 197, 95, 10, 98, 83, 98, 84, 98, 82, 98, 81, 98, 165, 101, 230, 101, 46, 103, 44, 103, 42, 103, 43, 103, 45, 103, 99, 107, 205, 107, 17, 108, 16, 108, 56, 108, 65, 108, 64, 108, 62, 108, 175, 114, 132, 115, 137, 115, 220, 116, 230, 116, 24, 117, 31, 117, 40, 117, 41, 117, 48, 117, 49, 117, 50, 117, 51, 117, 139, 117, 125, 118, 174, 118, 191, 118, 238, 118, 219, 119, 226, 119, 243, 119, 58, 121, 190, 121, 116, 122, 203, 122, 30, 78, 31, 78, 82, 78, 83, 78, 105, 78, 153, 78, 164, 78, 166, 78, 165, 78, 255, 78, 9, 79, 25, 79, 10, 79, 21, 79, 13, 79, 16, 79, 17, 79, 15, 79, 242, 78, 246, 78, 251, 78, 240, 78, 243, 78, 253, 78, 1, 79, 11, 79, 73, 81, 71, 81, 70, 81, 72, 81, 104, 81, 113, 81, 141, 81, 176, 81, 23, 82, 17, 82, 18, 82, 14, 82, 22, 82, 163, 82, 8, 83, 33, 83, 32, 83, 112, 83, 113, 83, 9, 84, 15, 84, 12, 84, 10, 84, 16, 84, 1, 84, 11, 84, 4, 84, 17, 84, 13, 84, 8, 84, 3, 84, 14, 84, 6, 84, 18, 84, 224, 86, 222, 86, 221, 86, 51, 87, 48, 87, 40, 87, 45, 87, 44, 87, 47, 87, 41, 87, 25, 89, 26, 89, 55, 89, 56, 89, 132, 89, 120, 89, 131, 89, 125, 89, 121, 89, 130, 89, 129, 89, 87, 91, 88, 91, 135, 91, 136, 91, 133, 91, 137, 91, 250, 91, 22, 92, 121, 92, 222, 93, 6, 94, 118, 94, 116, 94, 15, 95, 27, 95, 217, 95, 214, 95, 14, 98, 12, 98, 13, 98, 16, 98, 99, 98, 91, 98, 88, 98, 54, 101, 233, 101, 232, 101, 236, 101, 237, 101, 242, 102, 243, 102, 9, 103, 61, 103, 52, 103, 49, 103, 53, 103, 33, 107, 100, 107, 123, 107, 22, 108, 93, 108, 87, 108, 89, 108, 95, 108, 96, 108, 80, 108, 85, 108, 97, 108, 91, 108, 77, 108, 78, 108, 112, 112, 95, 114, 93, 114, 126, 118, 249, 122, 115, 124, 248, 124, 54, 127, 138, 127, 189, 127, 1, 128, 3, 128, 12, 128, 18, 128, 51, 128, 127, 128, 137, 128, 139, 128, 140, 128, 227, 129, 234, 129, 243, 129, 252, 129, 12, 130, 27, 130, 31, 130, 110, 130, 114, 130, 126, 130, 107, 134, 64, 136, 76, 136, 99, 136, 127, 137, 33, 150, 50, 78, 168, 78, 77, 79, 79, 79, 71, 79, 87, 79, 94, 79, 52, 79, 91, 79, 85, 79, 48, 79, 80, 79, 81, 79, 61, 79, 58, 79, 56, 79, 67, 79, 84, 79, 60, 79, 70, 79, 99, 79, 92, 79, 96, 79, 47, 79, 78, 79, 54, 79, 89, 79, 93, 79, 72, 79, 90, 79, 76, 81, 75, 81, 77, 81, 117, 81, 182, 81, 183, 81, 37, 82, 36, 82, 41, 82, 42, 82, 40, 82, 171, 82, 169, 82, 170, 82, 172, 82, 35, 83, 115, 83, 117, 83, 29, 84, 45, 84, 30, 84, 62, 84, 38, 84, 78, 84, 39, 84, 70, 84, 67, 84, 51, 84, 72, 84, 66, 84, 27, 84, 41, 84, 74, 84, 57, 84, 59, 84, 56, 84, 46, 84, 53, 84, 54, 84, 32, 84, 60, 84, 64, 84, 49, 84, 43, 84, 31, 84, 44, 84, 234, 86, 240, 86, 228, 86, 235, 86, 74, 87, 81, 87, 64, 87, 77, 87, 71, 87, 78, 87, 62, 87, 80, 87, 79, 87, 59, 87, 239, 88, 62, 89, 157, 89, 146, 89, 168, 89, 158, 89, 163, 89, 153, 89, 150, 89, 141, 89, 164, 89, 147, 89, 138, 89, 165, 89, 93, 91, 92, 91, 90, 91, 91, 91, 140, 91, 139, 91, 143, 91, 44, 92, 64, 92, 65, 92, 63, 92, 62, 92, 144, 92, 145, 92, 148, 92, 140, 92, 235, 93, 12, 94, 143, 94, 135, 94, 138, 94, 247, 94, 4, 95, 31, 95, 100, 95, 98, 95, 119, 95, 121, 95, 216, 95, 204, 95, 215, 95, 205, 95, 241, 95, 235, 95, 248, 95, 234, 95, 18, 98, 17, 98, 132, 98, 151, 98, 150, 98, 128, 98, 118, 98, 137, 98, 109, 98, 138, 98, 124, 98, 126, 98, 121, 98, 115, 98, 146, 98, 111, 98, 152, 98, 110, 98, 149, 98, 147, 98, 145, 98, 134, 98, 57, 101, 59, 101, 56, 101, 241, 101, 244, 102, 95, 103, 78, 103, 79, 103, 80, 103, 81, 103, 92, 103, 86, 103, 94, 103, 73, 103, 70, 103, 96, 103, 83, 103, 87, 103, 101, 107, 207, 107, 66, 108, 94, 108, 153, 108, 129, 108, 136, 108, 137, 108, 133, 108, 155, 108, 106, 108, 122, 108, 144, 108, 112, 108, 140, 108, 104, 108, 150, 108, 146, 108, 125, 108, 131, 108, 114, 108, 126, 108, 116, 108, 134, 108, 118, 108, 141, 108, 148, 108, 152, 108, 130, 108, 118, 112, 124, 112, 125, 112, 120, 112, 98, 114, 97, 114, 96, 114, 196, 114, 194, 114, 150, 115, 44, 117, 43, 117, 55, 117, 56, 117, 130, 118, 239, 118, 227, 119, 193, 121, 192, 121, 191, 121, 118, 122, 251, 124, 85, 127, 150, 128, 147, 128, 157, 128, 152, 128, 155, 128, 154, 128, 178, 128, 111, 130, 146, 130, 139, 130, 141, 130, 139, 137, 210, 137, 0, 138, 55, 140, 70, 140, 85, 140, 157, 140, 100, 141, 112, 141, 179, 141, 171, 142, 202, 142, 155, 143, 176, 143, 194, 143, 198, 143, 197, 143, 196, 143, 225, 93, 145, 144, 162, 144, 170, 144, 166, 144, 163, 144, 73, 145, 198, 145, 204, 145, 50, 150, 46, 150, 49, 150, 42, 150, 44, 150, 38, 78, 86, 78, 115, 78, 139, 78, 155, 78, 158, 78, 171, 78, 172, 78, 111, 79, 157, 79, 141, 79, 115, 79, 127, 79, 108, 79, 155, 79, 139, 79, 134, 79, 131, 79, 112, 79, 117, 79, 136, 79, 105, 79, 123, 79, 150, 79, 126, 79, 143, 79, 145, 79, 122, 79, 84, 81, 82, 81, 85, 81, 105, 81, 119, 81, 118, 81, 120, 81, 189, 81, 253, 81, 59, 82, 56, 82, 55, 82, 58, 82, 48, 82, 46, 82, 54, 82, 65, 82, 190, 82, 187, 82, 82, 83, 84, 83, 83, 83, 81, 83, 102, 83, 119, 83, 120, 83, 121, 83, 214, 83, 212, 83, 215, 83, 115, 84, 117, 84, 150, 84, 120, 84, 149, 84, 128, 84, 123, 84, 119, 84, 132, 84, 146, 84, 134, 84, 124, 84, 144, 84, 113, 84, 118, 84, 140, 84, 154, 84, 98, 84, 104, 84, 139, 84, 125, 84, 142, 84, 250, 86, 131, 87, 119, 87, 106, 87, 105, 87, 97, 87, 102, 87, 100, 87, 124, 87, 28, 89, 73, 89, 71, 89, 72, 89, 68, 89, 84, 89, 190, 89, 187, 89, 212, 89, 185, 89, 174, 89, 209, 89, 198, 89, 208, 89, 205, 89, 203, 89, 211, 89, 202, 89, 175, 89, 179, 89, 210, 89, 197, 89, 95, 91, 100, 91, 99, 91, 151, 91, 154, 91, 152, 91, 156, 91, 153, 91, 155, 91, 26, 92, 72, 92, 69, 92, 70, 92, 183, 92, 161, 92, 184, 92, 169, 92, 171, 92, 177, 92, 179, 92, 24, 94, 26, 94, 22, 94, 21, 94, 27, 94, 17, 94, 120, 94, 154, 94, 151, 94, 156, 94, 149, 94, 150, 94, 246, 94, 38, 95, 39, 95, 41, 95, 128, 95, 129, 95, 127, 95, 124, 95, 221, 95, 224, 95, 253, 95, 245, 95, 255, 95, 15, 96, 20, 96, 47, 96, 53, 96, 22, 96, 42, 96, 21, 96, 33, 96, 39, 96, 41, 96, 43, 96, 27, 96, 22, 98, 21, 98, 63, 98, 62, 98, 64, 98, 127, 98, 201, 98, 204, 98, 196, 98, 191, 98, 194, 98, 185, 98, 210, 98, 219, 98, 171, 98, 211, 98, 212, 98, 203, 98, 200, 98, 168, 98, 189, 98, 188, 98, 208, 98, 217, 98, 199, 98, 205, 98, 181, 98, 218, 98, 177, 98, 216, 98, 214, 98, 215, 98, 198, 98, 172, 98, 206, 98, 62, 101, 167, 101, 188, 101, 250, 101, 20, 102, 19, 102, 12, 102, 6, 102, 2, 102, 14, 102, 0, 102, 15, 102, 21, 102, 10, 102, 7, 102, 13, 103, 11, 103, 109, 103, 139, 103, 149, 103, 113, 103, 156, 103, 115, 103, 119, 103, 135, 103, 157, 103, 151, 103, 111, 103, 112, 103, 127, 103, 137, 103, 126, 103, 144, 103, 117, 103, 154, 103, 147, 103, 124, 103, 106, 103, 114, 103, 35, 107, 102, 107, 103, 107, 127, 107, 19, 108, 27, 108, 227, 108, 232, 108, 243, 108, 177, 108, 204, 108, 229, 108, 179, 108, 189, 108, 190, 108, 188, 108, 226, 108, 171, 108, 213, 108, 211, 108, 184, 108, 196, 108, 185, 108, 193, 108, 174, 108, 215, 108, 197, 108, 241, 108, 191, 108, 187, 108, 225, 108, 219, 108, 202, 108, 172, 108, 239, 108, 220, 108, 214, 108, 224, 108, 149, 112, 142, 112, 146, 112, 138, 112, 153, 112, 44, 114, 45, 114, 56, 114, 72, 114, 103, 114, 105, 114, 192, 114, 206, 114, 217, 114, 215, 114, 208, 114, 169, 115, 168, 115, 159, 115, 171, 115, 165, 115, 61, 117, 157, 117, 153, 117, 154, 117, 132, 118, 194, 118, 242, 118, 244, 118, 229, 119, 253, 119, 62, 121, 64, 121, 65, 121, 201, 121, 200, 121, 122, 122, 121, 122, 250, 122, 254, 124, 84, 127, 140, 127, 139, 127, 5, 128, 186, 128, 165, 128, 162, 128, 177, 128, 161, 128, 171, 128, 169, 128, 180, 128, 170, 128, 175, 128, 229, 129, 254, 129, 13, 130, 179, 130, 157, 130, 153, 130, 173, 130, 189, 130, 159, 130, 185, 130, 177, 130, 172, 130, 165, 130, 175, 130, 184, 130, 163, 130, 176, 130, 190, 130, 183, 130, 78, 134, 113, 134, 29, 82, 104, 136, 203, 142, 206, 143, 212, 143, 209, 143, 181, 144, 184, 144, 177, 144, 182, 144, 199, 145, 209, 145, 119, 149, 128, 149, 28, 150, 64, 150, 63, 150, 59, 150, 68, 150, 66, 150, 185, 150, 232, 150, 82, 151, 94, 151, 159, 78, 173, 78, 174, 78, 225, 79, 181, 79, 175, 79, 191, 79, 224, 79, 209, 79, 207, 79, 221, 79, 195, 79, 182, 79, 216, 79, 223, 79, 202, 79, 215, 79, 174, 79, 208, 79, 196, 79, 194, 79, 218, 79, 206, 79, 222, 79, 183, 79, 87, 81, 146, 81, 145, 81, 160, 81, 78, 82, 67, 82, 74, 82, 77, 82, 76, 82, 75, 82, 71, 82, 199, 82, 201, 82, 195, 82, 193, 82, 13, 83, 87, 83, 123, 83, 154, 83, 219, 83, 172, 84, 192, 84, 168, 84, 206, 84, 201, 84, 184, 84, 166, 84, 179, 84, 199, 84, 194, 84, 189, 84, 170, 84, 193, 84, 196, 84, 200, 84, 175, 84, 171, 84, 177, 84, 187, 84, 169, 84, 167, 84, 191, 84, 255, 86, 130, 87, 139, 87, 160, 87, 163, 87, 162, 87, 206, 87, 174, 87, 147, 87, 85, 89, 81, 89, 79, 89, 78, 89, 80, 89, 220, 89, 216, 89, 255, 89, 227, 89, 232, 89, 3, 90, 229, 89, 234, 89, 218, 89, 230, 89, 1, 90, 251, 89, 105, 91, 163, 91, 166, 91, 164, 91, 162, 91, 165, 91, 1, 92, 78, 92, 79, 92, 77, 92, 75, 92, 217, 92, 210, 92, 247, 93, 29, 94, 37, 94, 31, 94, 125, 94, 160, 94, 166, 94, 250, 94, 8, 95, 45, 95, 101, 95, 136, 95, 133, 95, 138, 95, 139, 95, 135, 95, 140, 95, 137, 95, 18, 96, 29, 96, 32, 96, 37, 96, 14, 96, 40, 96, 77, 96, 112, 96, 104, 96, 98, 96, 70, 96, 67, 96, 108, 96, 107, 96, 106, 96, 100, 96, 65, 98, 220, 98, 22, 99, 9, 99, 252, 98, 237, 98, 1, 99, 238, 98, 253, 98, 7, 99, 241, 98, 247, 98, 239, 98, 236, 98, 254, 98, 244, 98, 17, 99, 2, 99, 63, 101, 69, 101, 171, 101, 189, 101, 226, 101, 37, 102, 45, 102, 32, 102, 39, 102, 47, 102, 31, 102, 40, 102, 49, 102, 36, 102, 247, 102, 255, 103, 211, 103, 241, 103, 212, 103, 208, 103, 236, 103, 182, 103, 175, 103, 245, 103, 233, 103, 239, 103, 196, 103, 209, 103, 180, 103, 218, 103, 229, 103, 184, 103, 207, 103, 222, 103, 243, 103, 176, 103, 217, 103, 226, 103, 221, 103, 210, 103, 106, 107, 131, 107, 134, 107, 181, 107, 210, 107, 215, 107, 31, 108, 201, 108, 11, 109, 50, 109, 42, 109, 65, 109, 37, 109, 12, 109, 49, 109, 30, 109, 23, 109, 59, 109, 61, 109, 62, 109, 54, 109, 27, 109, 245, 108, 57, 109, 39, 109, 56, 109, 41, 109, 46, 109, 53, 109, 14, 109, 43, 109, 171, 112, 186, 112, 179, 112, 172, 112, 175, 112, 173, 112, 184, 112, 174, 112, 164, 112, 48, 114, 114, 114, 111, 114, 116, 114, 233, 114, 224, 114, 225, 114, 183, 115, 202, 115, 187, 115, 178, 115, 205, 115, 192, 115, 179, 115, 26, 117, 45, 117, 79, 117, 76, 117, 78, 117, 75, 117, 171, 117, 164, 117, 165, 117, 162, 117, 163, 117, 120, 118, 134, 118, 135, 118, 136, 118, 200, 118, 198, 118, 195, 118, 197, 118, 1, 119, 249, 118, 248, 118, 9, 119, 11, 119, 254, 118, 252, 118, 7, 119, 220, 119, 2, 120, 20, 120, 12, 120, 13, 120, 70, 121, 73, 121, 72, 121, 71, 121, 185, 121, 186, 121, 209, 121, 210, 121, 203, 121, 127, 122, 129, 122, 255, 122, 253, 122, 125, 124, 2, 125, 5, 125, 0, 125, 9, 125, 7, 125, 4, 125, 6, 125, 56, 127, 142, 127, 191, 127, 4, 128, 16, 128, 13, 128, 17, 128, 54, 128, 214, 128, 229, 128, 218, 128, 195, 128, 196, 128, 204, 128, 225, 128, 219, 128, 206, 128, 222, 128, 228, 128, 221, 128, 244, 129, 34, 130, 231, 130, 3, 131, 5, 131, 227, 130, 219, 130, 230, 130, 4, 131, 229, 130, 2, 131, 9, 131, 210, 130, 215, 130, 241, 130, 1, 131, 220, 130, 212, 130, 209, 130, 222, 130, 211, 130, 223, 130, 239, 130, 6, 131, 80, 134, 121, 134, 123, 134, 122, 134, 77, 136, 107, 136, 129, 137, 212, 137, 8, 138, 2, 138, 3, 138, 158, 140, 160, 140, 116, 141, 115, 141, 180, 141, 205, 142, 204, 142, 240, 143, 230, 143, 226, 143, 234, 143, 229, 143, 237, 143, 235, 143, 228, 143, 232, 143, 202, 144, 206, 144, 193, 144, 195, 144, 75, 145, 74, 145, 205, 145, 130, 149, 80, 150, 75, 150, 76, 150, 77, 150, 98, 151, 105, 151, 203, 151, 237, 151, 243, 151, 1, 152, 168, 152, 219, 152, 223, 152, 150, 153, 153, 153, 88, 78, 179, 78, 12, 80, 13, 80, 35, 80, 239, 79, 38, 80, 37, 80, 248, 79, 41, 80, 22, 80, 6, 80, 60, 80, 31, 80, 26, 80, 18, 80, 17, 80, 250, 79, 0, 80, 20, 80, 40, 80, 241, 79, 33, 80, 11, 80, 25, 80, 24, 80, 243, 79, 238, 79, 45, 80, 42, 80, 254, 79, 43, 80, 9, 80, 124, 81, 164, 81, 165, 81, 162, 81, 205, 81, 204, 81, 198, 81, 203, 81, 86, 82, 92, 82, 84, 82, 91, 82, 93, 82, 42, 83, 127, 83, 159, 83, 157, 83, 223, 83, 232, 84, 16, 85, 1, 85, 55, 85, 252, 84, 229, 84, 242, 84, 6, 85, 250, 84, 20, 85, 233, 84, 237, 84, 225, 84, 9, 85, 238, 84, 234, 84, 230, 84, 39, 85, 7, 85, 253, 84, 15, 85, 3, 87, 4, 87, 194, 87, 212, 87, 203, 87, 195, 87, 9, 88, 15, 89, 87, 89, 88, 89, 90, 89, 17, 90, 24, 90, 28, 90, 31, 90, 27, 90, 19, 90, 236, 89, 32, 90, 35, 90, 41, 90, 37, 90, 12, 90, 9, 90, 107, 91, 88, 92, 176, 91, 179, 91, 182, 91, 180, 91, 174, 91, 181, 91, 185, 91, 184, 91, 4, 92, 81, 92, 85, 92, 80, 92, 237, 92, 253, 92, 251, 92, 234, 92, 232, 92, 240, 92, 246, 92, 1, 93, 244, 92, 238, 93, 45, 94, 43, 94, 171, 94, 173, 94, 167, 94, 49, 95, 146, 95, 145, 95, 144, 95, 89, 96, 99, 96, 101, 96, 80, 96, 85, 96, 109, 96, 105, 96, 111, 96, 132, 96, 159, 96, 154, 96, 141, 96, 148, 96, 140, 96, 133, 96, 150, 96, 71, 98, 243, 98, 8, 99, 255, 98, 78, 99, 62, 99, 47, 99, 85, 99, 66, 99, 70, 99, 79, 99, 73, 99, 58, 99, 80, 99, 61, 99, 42, 99, 43, 99, 40, 99, 77, 99, 76, 99, 72, 101, 73, 101, 153, 101, 193, 101, 197, 101, 66, 102, 73, 102, 79, 102, 67, 102, 82, 102, 76, 102, 69, 102, 65, 102, 248, 102, 20, 103, 21, 103, 23, 103, 33, 104, 56, 104, 72, 104, 70, 104, 83, 104, 57, 104, 66, 104, 84, 104, 41, 104, 179, 104, 23, 104, 76, 104, 81, 104, 61, 104, 244, 103, 80, 104, 64, 104, 60, 104, 67, 104, 42, 104, 69, 104, 19, 104, 24, 104, 65, 104, 138, 107, 137, 107, 183, 107, 35, 108, 39, 108, 40, 108, 38, 108, 36, 108, 240, 108, 106, 109, 149, 109, 136, 109, 135, 109, 102, 109, 120, 109, 119, 109, 89, 109, 147, 109, 108, 109, 137, 109, 110, 109, 90, 109, 116, 109, 105, 109, 140, 109, 138, 109, 121, 109, 133, 109, 101, 109, 148, 109, 202, 112, 216, 112, 228, 112, 217, 112, 200, 112, 207, 112, 57, 114, 121, 114, 252, 114, 249, 114, 253, 114, 248, 114, 247, 114, 134, 115, 237, 115, 9, 116, 238, 115, 224, 115, 234, 115, 222, 115, 84, 117, 93, 117, 92, 117, 90, 117, 89, 117, 190, 117, 197, 117, 199, 117, 178, 117, 179, 117, 189, 117, 188, 117, 185, 117, 194, 117, 184, 117, 139, 118, 176, 118, 202, 118, 205, 118, 206, 118, 41, 119, 31, 119, 32, 119, 40, 119, 233, 119, 48, 120, 39, 120, 56, 120, 29, 120, 52, 120, 55, 120, 37, 120, 45, 120, 32, 120, 31, 120, 50, 120, 85, 121, 80, 121, 96, 121, 95, 121, 86, 121, 94, 121, 93, 121, 87, 121, 90, 121, 228, 121, 227, 121, 231, 121, 223, 121, 230, 121, 233, 121, 216, 121, 132, 122, 136, 122, 217, 122, 6, 123, 17, 123, 137, 124, 33, 125, 23, 125, 11, 125, 10, 125, 32, 125, 34, 125, 20, 125, 16, 125, 21, 125, 26, 125, 28, 125, 13, 125, 25, 125, 27, 125, 58, 127, 95, 127, 148, 127, 197, 127, 193, 127, 6, 128, 24, 128, 21, 128, 25, 128, 23, 128, 61, 128, 63, 128, 241, 128, 2, 129, 240, 128, 5, 129, 237, 128, 244, 128, 6, 129, 248, 128, 243, 128, 8, 129, 253, 128, 10, 129, 252, 128, 239, 128, 237, 129, 236, 129, 0, 130, 16, 130, 42, 130, 43, 130, 40, 130, 44, 130, 187, 130, 43, 131, 82, 131, 84, 131, 74, 131, 56, 131, 80, 131, 73, 131, 53, 131, 52, 131, 79, 131, 50, 131, 57, 131, 54, 131, 23, 131, 64, 131, 49, 131, 40, 131, 67, 131, 84, 134, 138, 134, 170, 134, 147, 134, 164, 134, 169, 134, 140, 134, 163, 134, 156, 134, 112, 136, 119, 136, 129, 136, 130, 136, 125, 136, 121, 136, 24, 138, 16, 138, 14, 138, 12, 138, 21, 138, 10, 138, 23, 138, 19, 138, 22, 138, 15, 138, 17, 138, 72, 140, 122, 140, 121, 140, 161, 140, 162, 140, 119, 141, 172, 142, 210, 142, 212, 142, 207, 142, 177, 143, 1, 144, 6, 144, 247, 143, 0, 144, 250, 143, 244, 143, 3, 144, 253, 143, 5, 144, 248, 143, 149, 144, 225, 144, 221, 144, 226, 144, 82, 145, 77, 145, 76, 145, 216, 145, 221, 145, 215, 145, 220, 145, 217, 145, 131, 149, 98, 150, 99, 150, 97, 150, 91, 150, 93, 150, 100, 150, 88, 150, 94, 150, 187, 150, 226, 152, 172, 153, 168, 154, 216, 154, 37, 155, 50, 155, 60, 155, 126, 78, 122, 80, 125, 80, 92, 80, 71, 80, 67, 80, 76, 80, 90, 80, 73, 80, 101, 80, 118, 80, 78, 80, 85, 80, 117, 80, 116, 80, 119, 80, 79, 80, 15, 80, 111, 80, 109, 80, 92, 81, 149, 81, 240, 81, 106, 82, 111, 82, 210, 82, 217, 82, 216, 82, 213, 82, 16, 83, 15, 83, 25, 83, 63, 83, 64, 83, 62, 83, 195, 83, 252, 102, 70, 85, 106, 85, 102, 85, 68, 85, 94, 85, 97, 85, 67, 85, 74, 85, 49, 85, 86, 85, 79, 85, 85, 85, 47, 85, 100, 85, 56, 85, 46, 85, 92, 85, 44, 85, 99, 85, 51, 85, 65, 85, 87, 85, 8, 87, 11, 87, 9, 87, 223, 87, 5, 88, 10, 88, 6, 88, 224, 87, 228, 87, 250, 87, 2, 88, 53, 88, 247, 87, 249, 87, 32, 89, 98, 89, 54, 90, 65, 90, 73, 90, 102, 90, 106, 90, 64, 90, 60, 90, 98, 90, 90, 90, 70, 90, 74, 90, 112, 91, 199, 91, 197, 91, 196, 91, 194, 91, 191, 91, 198, 91, 9, 92, 8, 92, 7, 92, 96, 92, 92, 92, 93, 92, 7, 93, 6, 93, 14, 93, 27, 93, 22, 93, 34, 93, 17, 93, 41, 93, 20, 93, 25, 93, 36, 93, 39, 93, 23, 93, 226, 93, 56, 94, 54, 94, 51, 94, 55, 94, 183, 94, 184, 94, 182, 94, 181, 94, 190, 94, 53, 95, 55, 95, 87, 95, 108, 95, 105, 95, 107, 95, 151, 95, 153, 95, 158, 95, 152, 95, 161, 95, 160, 95, 156, 95, 127, 96, 163, 96, 137, 96, 160, 96, 168, 96, 203, 96, 180, 96, 230, 96, 189, 96, 197, 96, 187, 96, 181, 96, 220, 96, 188, 96, 216, 96, 213, 96, 198, 96, 223, 96, 184, 96, 218, 96, 199, 96, 26, 98, 27, 98, 72, 98, 160, 99, 167, 99, 114, 99, 150, 99, 162, 99, 165, 99, 119, 99, 103, 99, 152, 99, 170, 99, 113, 99, 169, 99, 137, 99, 131, 99, 155, 99, 107, 99, 168, 99, 132, 99, 136, 99, 153, 99, 161, 99, 172, 99, 146, 99, 143, 99, 128, 99, 123, 99, 105, 99, 104, 99, 122, 99, 93, 101, 86, 101, 81, 101, 89, 101, 87, 101, 95, 85, 79, 101, 88, 101, 85, 101, 84, 101, 156, 101, 155, 101, 172, 101, 207, 101, 203, 101, 204, 101, 206, 101, 93, 102, 90, 102, 100, 102, 104, 102, 102, 102, 94, 102, 249, 102, 215, 82, 27, 103, 129, 104, 175, 104, 162, 104, 147, 104, 181, 104, 127, 104, 118, 104, 177, 104, 167, 104, 151, 104, 176, 104, 131, 104, 196, 104, 173, 104, 134, 104, 133, 104, 148, 104, 157, 104, 168, 104, 159, 104, 161, 104, 130, 104, 50, 107, 186, 107, 235, 107, 236, 107, 43, 108, 142, 109, 188, 109, 243, 109, 217, 109, 178, 109, 225, 109, 204, 109, 228, 109, 251, 109, 250, 109, 5, 110, 199, 109, 203, 109, 175, 109, 209, 109, 174, 109, 222, 109, 249, 109, 184, 109, 247, 109, 245, 109, 197, 109, 210, 109, 26, 110, 181, 109, 218, 109, 235, 109, 216, 109, 234, 109, 241, 109, 238, 109, 232, 109, 198, 109, 196, 109, 170, 109, 236, 109, 191, 109, 230, 109, 249, 112, 9, 113, 10, 113, 253, 112, 239, 112, 61, 114, 125, 114, 129, 114, 28, 115, 27, 115, 22, 115, 19, 115, 25, 115, 135, 115, 5, 116, 10, 116, 3, 116, 6, 116, 254, 115, 13, 116, 224, 116, 246, 116, 247, 116, 28, 117, 34, 117, 101, 117, 102, 117, 98, 117, 112, 117, 143, 117, 212, 117, 213, 117, 181, 117, 202, 117, 205, 117, 142, 118, 212, 118, 210, 118, 219, 118, 55, 119, 62, 119, 60, 119, 54, 119, 56, 119, 58, 119, 107, 120, 67, 120, 78, 120, 101, 121, 104, 121, 109, 121, 251, 121, 146, 122, 149, 122, 32, 123, 40, 123, 27, 123, 44, 123, 38, 123, 25, 123, 30, 123, 46, 123, 146, 124, 151, 124, 149, 124, 70, 125, 67, 125, 113, 125, 46, 125, 57, 125, 60, 125, 64, 125, 48, 125, 51, 125, 68, 125, 47, 125, 66, 125, 50, 125, 49, 125, 61, 127, 158, 127, 154, 127, 204, 127, 206, 127, 210, 127, 28, 128, 74, 128, 70, 128, 47, 129, 22, 129, 35, 129, 43, 129, 41, 129, 48, 129, 36, 129, 2, 130, 53, 130, 55, 130, 54, 130, 57, 130, 142, 131, 158, 131, 152, 131, 120, 131, 162, 131, 150, 131, 189, 131, 171, 131, 146, 131, 138, 131, 147, 131, 137, 131, 160, 131, 119, 131, 123, 131, 124, 131, 134, 131, 167, 131, 85, 134, 106, 95, 199, 134, 192, 134, 182, 134, 196, 134, 181, 134, 198, 134, 203, 134, 177, 134, 175, 134, 201, 134, 83, 136, 158, 136, 136, 136, 171, 136, 146, 136, 150, 136, 141, 136, 139, 136, 147, 137, 143, 137, 42, 138, 29, 138, 35, 138, 37, 138, 49, 138, 45, 138, 31, 138, 27, 138, 34, 138, 73, 140, 90, 140, 169, 140, 172, 140, 171, 140, 168, 140, 170, 140, 167, 140, 103, 141, 102, 141, 190, 141, 186, 141, 219, 142, 223, 142, 25, 144, 13, 144, 26, 144, 23, 144, 35, 144, 31, 144, 29, 144, 16, 144, 21, 144, 30, 144, 32, 144, 15, 144, 34, 144, 22, 144, 27, 144, 20, 144, 232, 144, 237, 144, 253, 144, 87, 145, 206, 145, 245, 145, 230, 145, 227, 145, 231, 145, 237, 145, 233, 145, 137, 149, 106, 150, 117, 150, 115, 150, 120, 150, 112, 150, 116, 150, 118, 150, 119, 150, 108, 150, 192, 150, 234, 150, 233, 150, 224, 122, 223, 122, 2, 152, 3, 152, 90, 155, 229, 156, 117, 158, 127, 158, 165, 158, 187, 158, 162, 80, 141, 80, 133, 80, 153, 80, 145, 80, 128, 80, 150, 80, 152, 80, 154, 80, 0, 103, 241, 81, 114, 82, 116, 82, 117, 82, 105, 82, 222, 82, 221, 82, 219, 82, 90, 83, 165, 83, 123, 85, 128, 85, 167, 85, 124, 85, 138, 85, 157, 85, 152, 85, 130, 85, 156, 85, 170, 85, 148, 85, 135, 85, 139, 85, 131, 85, 179, 85, 174, 85, 159, 85, 62, 85, 178, 85, 154, 85, 187, 85, 172, 85, 177, 85, 126, 85, 137, 85, 171, 85, 153, 85, 13, 87, 47, 88, 42, 88, 52, 88, 36, 88, 48, 88, 49, 88, 33, 88, 29, 88, 32, 88, 249, 88, 250, 88, 96, 89, 119, 90, 154, 90, 127, 90, 146, 90, 155, 90, 167, 90, 115, 91, 113, 91, 210, 91, 204, 91, 211, 91, 208, 91, 10, 92, 11, 92, 49, 92, 76, 93, 80, 93, 52, 93, 71, 93, 253, 93, 69, 94, 61, 94, 64, 94, 67, 94, 126, 94, 202, 94, 193, 94, 194, 94, 196, 94, 60, 95, 109, 95, 169, 95, 170, 95, 168, 95, 209, 96, 225, 96, 178, 96, 182, 96, 224, 96, 28, 97, 35, 97, 250, 96, 21, 97, 240, 96, 251, 96, 244, 96, 104, 97, 241, 96, 14, 97, 246, 96, 9, 97, 0, 97, 18, 97, 31, 98, 73, 98, 163, 99, 140, 99, 207, 99, 192, 99, 233, 99, 201, 99, 198, 99, 205, 99, 210, 99, 227, 99, 208, 99, 225, 99, 214, 99, 237, 99, 238, 99, 118, 99, 244, 99, 234, 99, 219, 99, 82, 100, 218, 99, 249, 99, 94, 101, 102, 101, 98, 101, 99, 101, 145, 101, 144, 101, 175, 101, 110, 102, 112, 102, 116, 102, 118, 102, 111, 102, 145, 102, 122, 102, 126, 102, 119, 102, 254, 102, 255, 102, 31, 103, 29, 103, 250, 104, 213, 104, 224, 104, 216, 104, 215, 104, 5, 105, 223, 104, 245, 104, 238, 104, 231, 104, 249, 104, 210, 104, 242, 104, 227, 104, 203, 104, 205, 104, 13, 105, 18, 105, 14, 105, 201, 104, 218, 104, 110, 105, 251, 104, 62, 107, 58, 107, 61, 107, 152, 107, 150, 107, 188, 107, 239, 107, 46, 108, 47, 108, 44, 108, 47, 110, 56, 110, 84, 110, 33, 110, 50, 110, 103, 110, 74, 110, 32, 110, 37, 110, 35, 110, 27, 110, 91, 110, 88, 110, 36, 110, 86, 110, 110, 110, 45, 110, 38, 110, 111, 110, 52, 110, 77, 110, 58, 110, 44, 110, 67, 110, 29, 110, 62, 110, 203, 110, 137, 110, 25, 110, 78, 110, 99, 110, 68, 110, 114, 110, 105, 110, 95, 110, 25, 113, 26, 113, 38, 113, 48, 113, 33, 113, 54, 113, 110, 113, 28, 113, 76, 114, 132, 114, 128, 114, 54, 115, 37, 115, 52, 115, 41, 115, 58, 116, 42, 116, 51, 116, 34, 116, 37, 116, 53, 116, 54, 116, 52, 116, 47, 116, 27, 116, 38, 116, 40, 116, 37, 117, 38, 117, 107, 117, 106, 117, 226, 117, 219, 117, 227, 117, 217, 117, 216, 117, 222, 117, 224, 117, 123, 118, 124, 118, 150, 118, 147, 118, 180, 118, 220, 118, 79, 119, 237, 119, 93, 120, 108, 120, 111, 120, 13, 122, 8, 122, 11, 122, 5, 122, 0, 122, 152, 122, 151, 122, 150, 122, 229, 122, 227, 122, 73, 123, 86, 123, 70, 123, 80, 123, 82, 123, 84, 123, 77, 123, 75, 123, 79, 123, 81, 123, 159, 124, 165, 124, 94, 125, 80, 125, 104, 125, 85, 125, 43, 125, 110, 125, 114, 125, 97, 125, 102, 125, 98, 125, 112, 125, 115, 125, 132, 85, 212, 127, 213, 127, 11, 128, 82, 128, 133, 128, 85, 129, 84, 129, 75, 129, 81, 129, 78, 129, 57, 129, 70, 129, 62, 129, 76, 129, 83, 129, 116, 129, 18, 130, 28, 130, 233, 131, 3, 132, 248, 131, 13, 132, 224, 131, 197, 131, 11, 132, 193, 131, 239, 131, 241, 131, 244, 131, 87, 132, 10, 132, 240, 131, 12, 132, 204, 131, 253, 131, 242, 131, 202, 131, 56, 132, 14, 132, 4, 132, 220, 131, 7, 132, 212, 131, 223, 131, 91, 134, 223, 134, 217, 134, 237, 134, 212, 134, 219, 134, 228, 134, 208, 134, 222, 134, 87, 136, 193, 136, 194, 136, 177, 136, 131, 137, 150, 137, 59, 138, 96, 138, 85, 138, 94, 138, 60, 138, 65, 138, 84, 138, 91, 138, 80, 138, 70, 138, 52, 138, 58, 138, 54, 138, 86, 138, 97, 140, 130, 140, 175, 140, 188, 140, 179, 140, 189, 140, 193, 140, 187, 140, 192, 140, 180, 140, 183, 140, 182, 140, 191, 140, 184, 140, 138, 141, 133, 141, 129, 141, 206, 141, 221, 141, 203, 141, 218, 141, 209, 141, 204, 141, 219, 141, 198, 141, 251, 142, 248, 142, 252, 142, 156, 143, 46, 144, 53, 144, 49, 144, 56, 144, 50, 144, 54, 144, 2, 145, 245, 144, 9, 145, 254, 144, 99, 145, 101, 145, 207, 145, 20, 146, 21, 146, 35, 146, 9, 146, 30, 146, 13, 146, 16, 146, 7, 146, 17, 146, 148, 149, 143, 149, 139, 149, 145, 149, 147, 149, 146, 149, 142, 149, 138, 150, 142, 150, 139, 150, 125, 150, 133, 150, 134, 150, 141, 150, 114, 150, 132, 150, 193, 150, 197, 150, 196, 150, 198, 150, 199, 150, 239, 150, 242, 150, 204, 151, 5, 152, 6, 152, 8, 152, 231, 152, 234, 152, 239, 152, 233, 152, 242, 152, 237, 152, 174, 153, 173, 153, 195, 158, 205, 158, 209, 158, 130, 78, 173, 80, 181, 80, 178, 80, 179, 80, 197, 80, 190, 80, 172, 80, 183, 80, 187, 80, 175, 80, 199, 80, 127, 82, 119, 82, 125, 82, 223, 82, 230, 82, 228, 82, 226, 82, 227, 82, 47, 83, 223, 85, 232, 85, 211, 85, 230, 85, 206, 85, 220, 85, 199, 85, 209, 85, 227, 85, 228, 85, 239, 85, 218, 85, 225, 85, 197, 85, 198, 85, 229, 85, 201, 85, 18, 87, 19, 87, 94, 88, 81, 88, 88, 88, 87, 88, 90, 88, 84, 88, 107, 88, 76, 88, 109, 88, 74, 88, 98, 88, 82, 88, 75, 88, 103, 89, 193, 90, 201, 90, 204, 90, 190, 90, 189, 90, 188, 90, 179, 90, 194, 90, 178, 90, 105, 93, 111, 93, 76, 94, 121, 94, 201, 94, 200, 94, 18, 95, 89, 95, 172, 95, 174, 95, 26, 97, 15, 97, 72, 97, 31, 97, 243, 96, 27, 97, 249, 96, 1, 97, 8, 97, 78, 97, 76, 97, 68, 97, 77, 97, 62, 97, 52, 97, 39, 97, 13, 97, 6, 97, 55, 97, 33, 98, 34, 98, 19, 100, 62, 100, 30, 100, 42, 100, 45, 100, 61, 100, 44, 100, 15, 100, 28, 100, 20, 100, 13, 100, 54, 100, 22, 100, 23, 100, 6, 100, 108, 101, 159, 101, 176, 101, 151, 102, 137, 102, 135, 102, 136, 102, 150, 102, 132, 102, 152, 102, 141, 102, 3, 103, 148, 105, 109, 105, 90, 105, 119, 105, 96, 105, 84, 105, 117, 105, 48, 105, 130, 105, 74, 105, 104, 105, 107, 105, 94, 105, 83, 105, 121, 105, 134, 105, 93, 105, 99, 105, 91, 105, 71, 107, 114, 107, 192, 107, 191, 107, 211, 107, 253, 107, 162, 110, 175, 110, 211, 110, 182, 110, 194, 110, 144, 110, 157, 110, 199, 110, 197, 110, 165, 110, 152, 110, 188, 110, 186, 110, 171, 110, 209, 110, 150, 110, 156, 110, 196, 110, 212, 110, 170, 110, 167, 110, 180, 110, 78, 113, 89, 113, 105, 113, 100, 113, 73, 113, 103, 113, 92, 113, 108, 113, 102, 113, 76, 113, 101, 113, 94, 113, 70, 113, 104, 113, 86, 113, 58, 114, 82, 114, 55, 115, 69, 115, 63, 115, 62, 115, 111, 116, 90, 116, 85, 116, 95, 116, 94, 116, 65, 116, 63, 116, 89, 116, 91, 116, 92, 116, 118, 117, 120, 117, 0, 118, 240, 117, 1, 118, 242, 117, 241, 117, 250, 117, 255, 117, 244, 117, 243, 117, 222, 118, 223, 118, 91, 119, 107, 119, 102, 119, 94, 119, 99, 119, 121, 119, 106, 119, 108, 119, 92, 119, 101, 119, 104, 119, 98, 119, 238, 119, 142, 120, 176, 120, 151, 120, 152, 120, 140, 120, 137, 120, 124, 120, 145, 120, 147, 120, 127, 120, 122, 121, 127, 121, 129, 121, 44, 132, 189, 121, 28, 122, 26, 122, 32, 122, 20, 122, 31, 122, 30, 122, 159, 122, 160, 122, 119, 123, 192, 123, 96, 123, 110, 123, 103, 123, 177, 124, 179, 124, 181, 124, 147, 125, 121, 125, 145, 125, 129, 125, 143, 125, 91, 125, 110, 127, 105, 127, 106, 127, 114, 127, 169, 127, 168, 127, 164, 127, 86, 128, 88, 128, 134, 128, 132, 128, 113, 129, 112, 129, 120, 129, 101, 129, 110, 129, 115, 129, 107, 129, 121, 129, 122, 129, 102, 129, 5, 130, 71, 130, 130, 132, 119, 132, 61, 132, 49, 132, 117, 132, 102, 132, 107, 132, 73, 132, 108, 132, 91, 132, 60, 132, 53, 132, 97, 132, 99, 132, 105, 132, 109, 132, 70, 132, 94, 134, 92, 134, 95, 134, 249, 134, 19, 135, 8, 135, 7, 135, 0, 135, 254, 134, 251, 134, 2, 135, 3, 135, 6, 135, 10, 135, 89, 136, 223, 136, 212, 136, 217, 136, 220, 136, 216, 136, 221, 136, 225, 136, 202, 136, 213, 136, 210, 136, 156, 137, 227, 137, 107, 138, 114, 138, 115, 138, 102, 138, 105, 138, 112, 138, 135, 138, 124, 138, 99, 138, 160, 138, 113, 138, 133, 138, 109, 138, 98, 138, 110, 138, 108, 138, 121, 138, 123, 138, 62, 138, 104, 138, 98, 140, 138, 140, 137, 140, 202, 140, 199, 140, 200, 140, 196, 140, 178, 140, 195, 140, 194, 140, 197, 140, 225, 141, 223, 141, 232, 141, 239, 141, 243, 141, 250, 141, 234, 141, 228, 141, 230, 141, 178, 142, 3, 143, 9, 143, 254, 142, 10, 143, 159, 143, 178, 143, 75, 144, 74, 144, 83, 144, 66, 144, 84, 144, 60, 144, 85, 144, 80, 144, 71, 144, 79, 144, 78, 144, 77, 144, 81, 144, 62, 144, 65, 144, 18, 145, 23, 145, 108, 145, 106, 145, 105, 145, 201, 145, 55, 146, 87, 146, 56, 146, 61, 146, 64, 146, 62, 146, 91, 146, 75, 146, 100, 146, 81, 146, 52, 146, 73, 146, 77, 146, 69, 146, 57, 146, 63, 146, 90, 146, 152, 149, 152, 150, 148, 150, 149, 150, 205, 150, 203, 150, 201, 150, 202, 150, 247, 150, 251, 150, 249, 150, 246, 150, 86, 151, 116, 151, 118, 151, 16, 152, 17, 152, 19, 152, 10, 152, 18, 152, 12, 152, 252, 152, 244, 152, 253, 152, 254, 152, 179, 153, 177, 153, 180, 153, 225, 154, 233, 156, 130, 158, 14, 159, 19, 159, 32, 159, 231, 80, 238, 80, 229, 80, 214, 80, 237, 80, 218, 80, 213, 80, 207, 80, 209, 80, 241, 80, 206, 80, 233, 80, 98, 81, 243, 81, 131, 82, 130, 82, 49, 83, 173, 83, 254, 85, 0, 86, 27, 86, 23, 86, 253, 85, 20, 86, 6, 86, 9, 86, 13, 86, 14, 86, 247, 85, 22, 86, 31, 86, 8, 86, 16, 86, 246, 85, 24, 87, 22, 87, 117, 88, 126, 88, 131, 88, 147, 88, 138, 88, 121, 88, 133, 88, 125, 88, 253, 88, 37, 89, 34, 89, 36, 89, 106, 89, 105, 89, 225, 90, 230, 90, 233, 90, 215, 90, 214, 90, 216, 90, 227, 90, 117, 91, 222, 91, 231, 91, 225, 91, 229, 91, 230, 91, 232, 91, 226, 91, 228, 91, 223, 91, 13, 92, 98, 92, 132, 93, 135, 93, 91, 94, 99, 94, 85, 94, 87, 94, 84, 94, 211, 94, 214, 94, 10, 95, 70, 95, 112, 95, 185, 95, 71, 97, 63, 97, 75, 97, 119, 97, 98, 97, 99, 97, 95, 97, 90, 97, 88, 97, 117, 97, 42, 98, 135, 100, 88, 100, 84, 100, 164, 100, 120, 100, 95, 100, 122, 100, 81, 100, 103, 100, 52, 100, 109, 100, 123, 100, 114, 101, 161, 101, 215, 101, 214, 101, 162, 102, 168, 102, 157, 102, 156, 105, 168, 105, 149, 105, 193, 105, 174, 105, 211, 105, 203, 105, 155, 105, 183, 105, 187, 105, 171, 105, 180, 105, 208, 105, 205, 105, 173, 105, 204, 105, 166, 105, 195, 105, 163, 105, 73, 107, 76, 107, 51, 108, 51, 111, 20, 111, 254, 110, 19, 111, 244, 110, 41, 111, 62, 111, 32, 111, 44, 111, 15, 111, 2, 111, 34, 111, 255, 110, 239, 110, 6, 111, 49, 111, 56, 111, 50, 111, 35, 111, 21, 111, 43, 111, 47, 111, 136, 111, 42, 111, 236, 110, 1, 111, 242, 110, 204, 110, 247, 110, 148, 113, 153, 113, 125, 113, 138, 113, 132, 113, 146, 113, 62, 114, 146, 114, 150, 114, 68, 115, 80, 115, 100, 116, 99, 116, 106, 116, 112, 116, 109, 116, 4, 117, 145, 117, 39, 118, 13, 118, 11, 118, 9, 118, 19, 118, 225, 118, 227, 118, 132, 119, 125, 119, 127, 119, 97, 119, 193, 120, 159, 120, 167, 120, 179, 120, 169, 120, 163, 120, 142, 121, 143, 121, 141, 121, 46, 122, 49, 122, 170, 122, 169, 122, 237, 122, 239, 122, 161, 123, 149, 123, 139, 123, 117, 123, 151, 123, 157, 123, 148, 123, 143, 123, 184, 123, 135, 123, 132, 123, 185, 124, 189, 124, 190, 124, 187, 125, 176, 125, 156, 125, 189, 125, 190, 125, 160, 125, 202, 125, 180, 125, 178, 125, 177, 125, 186, 125, 162, 125, 191, 125, 181, 125, 184, 125, 173, 125, 210, 125, 199, 125, 172, 125, 112, 127, 224, 127, 225, 127, 223, 127, 94, 128, 90, 128, 135, 128, 80, 129, 128, 129, 143, 129, 136, 129, 138, 129, 127, 129, 130, 129, 231, 129, 250, 129, 7, 130, 20, 130, 30, 130, 75, 130, 201, 132, 191, 132, 198, 132, 196, 132, 153, 132, 158, 132, 178, 132, 156, 132, 203, 132, 184, 132, 192, 132, 211, 132, 144, 132, 188, 132, 209, 132, 202, 132, 63, 135, 28, 135, 59, 135, 34, 135, 37, 135, 52, 135, 24, 135, 85, 135, 55, 135, 41, 135, 243, 136, 2, 137, 244, 136, 249, 136, 248, 136, 253, 136, 232, 136, 26, 137, 239, 136, 166, 138, 140, 138, 158, 138, 163, 138, 141, 138, 161, 138, 147, 138, 164, 138, 170, 138, 165, 138, 168, 138, 152, 138, 145, 138, 154, 138, 167, 138, 106, 140, 141, 140, 140, 140, 211, 140, 209, 140, 210, 140, 107, 141, 153, 141, 149, 141, 252, 141, 20, 143, 18, 143, 21, 143, 19, 143, 163, 143, 96, 144, 88, 144, 92, 144, 99, 144, 89, 144, 94, 144, 98, 144, 93, 144, 91, 144, 25, 145, 24, 145, 30, 145, 117, 145, 120, 145, 119, 145, 116, 145, 120, 146, 128, 146, 133, 146, 152, 146, 150, 146, 123, 146, 147, 146, 156, 146, 168, 146, 124, 146, 145, 146, 161, 149, 168, 149, 169, 149, 163, 149, 165, 149, 164, 149, 153, 150, 156, 150, 155, 150, 204, 150, 210, 150, 0, 151, 124, 151, 133, 151, 246, 151, 23, 152, 24, 152, 175, 152, 177, 152, 3, 153, 5, 153, 12, 153, 9, 153, 193, 153, 175, 154, 176, 154, 230, 154, 65, 155, 66, 155, 244, 156, 246, 156, 243, 156, 188, 158, 59, 159, 74, 159, 4, 81, 0, 81, 251, 80, 245, 80, 249, 80, 2, 81, 8, 81, 9, 81, 5, 81, 220, 81, 135, 82, 136, 82, 137, 82, 141, 82, 138, 82, 240, 82, 178, 83, 46, 86, 59, 86, 57, 86, 50, 86, 63, 86, 52, 86, 41, 86, 83, 86, 78, 86, 87, 86, 116, 86, 54, 86, 47, 86, 48, 86, 128, 88, 159, 88, 158, 88, 179, 88, 156, 88, 174, 88, 169, 88, 166, 88, 109, 89, 9, 91, 251, 90, 11, 91, 245, 90, 12, 91, 8, 91, 238, 91, 236, 91, 233, 91, 235, 91, 100, 92, 101, 92, 157, 93, 148, 93, 98, 94, 95, 94, 97, 94, 226, 94, 218, 94, 223, 94, 221, 94, 227, 94, 224, 94, 72, 95, 113, 95, 183, 95, 181, 95, 118, 97, 103, 97, 110, 97, 93, 97, 85, 97, 130, 97, 124, 97, 112, 97, 107, 97, 126, 97, 167, 97, 144, 97, 171, 97, 142, 97, 172, 97, 154, 97, 164, 97, 148, 97, 174, 97, 46, 98, 105, 100, 111, 100, 121, 100, 158, 100, 178, 100, 136, 100, 144, 100, 176, 100, 165, 100, 147, 100, 149, 100, 169, 100, 146, 100, 174, 100, 173, 100, 171, 100, 154, 100, 172, 100, 153, 100, 162, 100, 179, 100, 117, 101, 119, 101, 120, 101, 174, 102, 171, 102, 180, 102, 177, 102, 35, 106, 31, 106, 232, 105, 1, 106, 30, 106, 25, 106, 253, 105, 33, 106, 19, 106, 10, 106, 243, 105, 2, 106, 5, 106, 237, 105, 17, 106, 80, 107, 78, 107, 164, 107, 197, 107, 198, 107, 63, 111, 124, 111, 132, 111, 81, 111, 102, 111, 84, 111, 134, 111, 109, 111, 91, 111, 120, 111, 110, 111, 142, 111, 122, 111, 112, 111, 100, 111, 151, 111, 88, 111, 213, 110, 111, 111, 96, 111, 95, 111, 159, 113, 172, 113, 177, 113, 168, 113, 86, 114, 155, 114, 78, 115, 87, 115, 105, 116, 139, 116, 131, 116, 126, 116, 128, 116, 127, 117, 32, 118, 41, 118, 31, 118, 36, 118, 38, 118, 33, 118, 34, 118, 154, 118, 186, 118, 228, 118, 142, 119, 135, 119, 140, 119, 145, 119, 139, 119, 203, 120, 197, 120, 186, 120, 202, 120, 190, 120, 213, 120, 188, 120, 208, 120, 63, 122, 60, 122, 64, 122, 61, 122, 55, 122, 59, 122, 175, 122, 174, 122, 173, 123, 177, 123, 196, 123, 180, 123, 198, 123, 199, 123, 193, 123, 160, 123, 204, 123, 202, 124, 224, 125, 244, 125, 239, 125, 251, 125, 216, 125, 236, 125, 221, 125, 232, 125, 227, 125, 218, 125, 222, 125, 233, 125, 158, 125, 217, 125, 242, 125, 249, 125, 117, 127, 119, 127, 175, 127, 233, 127, 38, 128, 155, 129, 156, 129, 157, 129, 160, 129, 154, 129, 152, 129, 23, 133, 61, 133, 26, 133, 238, 132, 44, 133, 45, 133, 19, 133, 17, 133, 35, 133, 33, 133, 20, 133, 236, 132, 37, 133, 255, 132, 6, 133, 130, 135, 116, 135, 118, 135, 96, 135, 102, 135, 120, 135, 104, 135, 89, 135, 87, 135, 76, 135, 83, 135, 91, 136, 93, 136, 16, 137, 7, 137, 18, 137, 19, 137, 21, 137, 10, 137, 188, 138, 210, 138, 199, 138, 196, 138, 149, 138, 203, 138, 248, 138, 178, 138, 201, 138, 194, 138, 191, 138, 176, 138, 214, 138, 205, 138, 182, 138, 185, 138, 219, 138, 76, 140, 78, 140, 108, 140, 224, 140, 222, 140, 230, 140, 228, 140, 236, 140, 237, 140, 226, 140, 227, 140, 220, 140, 234, 140, 225, 140, 109, 141, 159, 141, 163, 141, 43, 142, 16, 142, 29, 142, 34, 142, 15, 142, 41, 142, 31, 142, 33, 142, 30, 142, 186, 142, 29, 143, 27, 143, 31, 143, 41, 143, 38, 143, 42, 143, 28, 143, 30, 143, 37, 143, 105, 144, 110, 144, 104, 144, 109, 144, 119, 144, 48, 145, 45, 145, 39, 145, 49, 145, 135, 145, 137, 145, 139, 145, 131, 145, 197, 146, 187, 146, 183, 146, 234, 146, 172, 146, 228, 146, 193, 146, 179, 146, 188, 146, 210, 146, 199, 146, 240, 146, 178, 146, 173, 149, 177, 149, 4, 151, 6, 151, 7, 151, 9, 151, 96, 151, 141, 151, 139, 151, 143, 151, 33, 152, 43, 152, 28, 152, 179, 152, 10, 153, 19, 153, 18, 153, 24, 153, 221, 153, 208, 153, 223, 153, 219, 153, 209, 153, 213, 153, 210, 153, 217, 153, 183, 154, 238, 154, 239, 154, 39, 155, 69, 155, 68, 155, 119, 155, 111, 155, 6, 157, 9, 157, 3, 157, 169, 158, 190, 158, 206, 158, 168, 88, 82, 159, 18, 81, 24, 81, 20, 81, 16, 81, 21, 81, 128, 81, 170, 81, 221, 81, 145, 82, 147, 82, 243, 82, 89, 86, 107, 86, 121, 86, 105, 86, 100, 86, 120, 86, 106, 86, 104, 86, 101, 86, 113, 86, 111, 86, 108, 86, 98, 86, 118, 86, 193, 88, 190, 88, 199, 88, 197, 88, 110, 89, 29, 91, 52, 91, 120, 91, 240, 91, 14, 92, 74, 95, 178, 97, 145, 97, 169, 97, 138, 97, 205, 97, 182, 97, 190, 97, 202, 97, 200, 97, 48, 98, 197, 100, 193, 100, 203, 100, 187, 100, 188, 100, 218, 100, 196, 100, 199, 100, 194, 100, 205, 100, 191, 100, 210, 100, 212, 100, 190, 100, 116, 101, 198, 102, 201, 102, 185, 102, 196, 102, 199, 102, 184, 102, 61, 106, 56, 106, 58, 106, 89, 106, 107, 106, 88, 106, 57, 106, 68, 106, 98, 106, 97, 106, 75, 106, 71, 106, 53, 106, 95, 106, 72, 106, 89, 107, 119, 107, 5, 108, 194, 111, 177, 111, 161, 111, 195, 111, 164, 111, 193, 111, 167, 111, 179, 111, 192, 111, 185, 111, 182, 111, 166, 111, 160, 111, 180, 111, 190, 113, 201, 113, 208, 113, 210, 113, 200, 113, 213, 113, 185, 113, 206, 113, 217, 113, 220, 113, 195, 113, 196, 113, 104, 115, 156, 116, 163, 116, 152, 116, 159, 116, 158, 116, 226, 116, 12, 117, 13, 117, 52, 118, 56, 118, 58, 118, 231, 118, 229, 118, 160, 119, 158, 119, 159, 119, 165, 119, 232, 120, 218, 120, 236, 120, 231, 120, 166, 121, 77, 122, 78, 122, 70, 122, 76, 122, 75, 122, 186, 122, 217, 123, 17, 124, 201, 123, 228, 123, 219, 123, 225, 123, 233, 123, 230, 123, 213, 124, 214, 124, 10, 126, 17, 126, 8, 126, 27, 126, 35, 126, 30, 126, 29, 126, 9, 126, 16, 126, 121, 127, 178, 127, 240, 127, 241, 127, 238, 127, 40, 128, 179, 129, 169, 129, 168, 129, 251, 129, 8, 130, 88, 130, 89, 130, 74, 133, 89, 133, 72, 133, 104, 133, 105, 133, 67, 133, 73, 133, 109, 133, 106, 133, 94, 133, 131, 135, 159, 135, 158, 135, 162, 135, 141, 135, 97, 136, 42, 137, 50, 137, 37, 137, 43, 137, 33, 137, 170, 137, 166, 137, 230, 138, 250, 138, 235, 138, 241, 138, 0, 139, 220, 138, 231, 138, 238, 138, 254, 138, 1, 139, 2, 139, 247, 138, 237, 138, 243, 138, 246, 138, 252, 138, 107, 140, 109, 140, 147, 140, 244, 140, 68, 142, 49, 142, 52, 142, 66, 142, 57, 142, 53, 142, 59, 143, 47, 143, 56, 143, 51, 143, 168, 143, 166, 143, 117, 144, 116, 144, 120, 144, 114, 144, 124, 144, 122, 144, 52, 145, 146, 145, 32, 147, 54, 147, 248, 146, 51, 147, 47, 147, 34, 147, 252, 146, 43, 147, 4, 147, 26, 147, 16, 147, 38, 147, 33, 147, 21, 147, 46, 147, 25, 147, 187, 149, 167, 150, 168, 150, 170, 150, 213, 150, 14, 151, 17, 151, 22, 151, 13, 151, 19, 151, 15, 151, 91, 151, 92, 151, 102, 151, 152, 151, 48, 152, 56, 152, 59, 152, 55, 152, 45, 152, 57, 152, 36, 152, 16, 153, 40, 153, 30, 153, 27, 153, 33, 153, 26, 153, 237, 153, 226, 153, 241, 153, 184, 154, 188, 154, 251, 154, 237, 154, 40, 155, 145, 155, 21, 157, 35, 157, 38, 157, 40, 157, 18, 157, 27, 157, 216, 158, 212, 158, 141, 159, 156, 159, 42, 81, 31, 81, 33, 81, 50, 81, 245, 82, 142, 86, 128, 86, 144, 86, 133, 86, 135, 86, 143, 86, 213, 88, 211, 88, 209, 88, 206, 88, 48, 91, 42, 91, 36, 91, 122, 91, 55, 92, 104, 92, 188, 93, 186, 93, 189, 93, 184, 93, 107, 94, 76, 95, 189, 95, 201, 97, 194, 97, 199, 97, 230, 97, 203, 97, 50, 98, 52, 98, 206, 100, 202, 100, 216, 100, 224, 100, 240, 100, 230, 100, 236, 100, 241, 100, 226, 100, 237, 100, 130, 101, 131, 101, 217, 102, 214, 102, 128, 106, 148, 106, 132, 106, 162, 106, 156, 106, 219, 106, 163, 106, 126, 106, 151, 106, 144, 106, 160, 106, 92, 107, 174, 107, 218, 107, 8, 108, 216, 111, 241, 111, 223, 111, 224, 111, 219, 111, 228, 111, 235, 111, 239, 111, 128, 111, 236, 111, 225, 111, 233, 111, 213, 111, 238, 111, 240, 111, 231, 113, 223, 113, 238, 113, 230, 113, 229, 113, 237, 113, 236, 113, 244, 113, 224, 113, 53, 114, 70, 114, 112, 115, 114, 115, 169, 116, 176, 116, 166, 116, 168, 116, 70, 118, 66, 118, 76, 118, 234, 118, 179, 119, 170, 119, 176, 119, 172, 119, 167, 119, 173, 119, 239, 119, 247, 120, 250, 120, 244, 120, 239, 120, 1, 121, 167, 121, 170, 121, 87, 122, 191, 122, 7, 124, 13, 124, 254, 123, 247, 123, 12, 124, 224, 123, 224, 124, 220, 124, 222, 124, 226, 124, 223, 124, 217, 124, 221, 124, 46, 126, 62, 126, 70, 126, 55, 126, 50, 126, 67, 126, 43, 126, 61, 126, 49, 126, 69, 126, 65, 126, 52, 126, 57, 126, 72, 126, 53, 126, 63, 126, 47, 126, 68, 127, 243, 127, 252, 127, 113, 128, 114, 128, 112, 128, 111, 128, 115, 128, 198, 129, 195, 129, 186, 129, 194, 129, 192, 129, 191, 129, 189, 129, 201, 129, 190, 129, 232, 129, 9, 130, 113, 130, 170, 133, 132, 133, 126, 133, 156, 133, 145, 133, 148, 133, 175, 133, 155, 133, 135, 133, 168, 133, 138, 133, 103, 134, 192, 135, 209, 135, 179, 135, 210, 135, 198, 135, 171, 135, 187, 135, 186, 135, 200, 135, 203, 135, 59, 137, 54, 137, 68, 137, 56, 137, 61, 137, 172, 137, 14, 139, 23, 139, 25, 139, 27, 139, 10, 139, 32, 139, 29, 139, 4, 139, 16, 139, 65, 140, 63, 140, 115, 140, 250, 140, 253, 140, 252, 140, 248, 140, 251, 140, 168, 141, 73, 142, 75, 142, 72, 142, 74, 142, 68, 143, 62, 143, 66, 143, 69, 143, 63, 143, 127, 144, 125, 144, 132, 144, 129, 144, 130, 144, 128, 144, 57, 145, 163, 145, 158, 145, 156, 145, 77, 147, 130, 147, 40, 147, 117, 147, 74, 147, 101, 147, 75, 147, 24, 147, 126, 147, 108, 147, 91, 147, 112, 147, 90, 147, 84, 147, 202, 149, 203, 149, 204, 149, 200, 149, 198, 149, 177, 150, 184, 150, 214, 150, 28, 151, 30, 151, 160, 151, 211, 151, 70, 152, 182, 152, 53, 153, 1, 154, 255, 153, 174, 155, 171, 155, 170, 155, 173, 155, 59, 157, 63, 157, 139, 158, 207, 158, 222, 158, 220, 158, 221, 158, 219, 158, 62, 159, 75, 159, 226, 83, 149, 86, 174, 86, 217, 88, 216, 88, 56, 91, 93, 95, 227, 97, 51, 98, 244, 100, 242, 100, 254, 100, 6, 101, 250, 100, 251, 100, 247, 100, 183, 101, 220, 102, 38, 103, 179, 106, 172, 106, 195, 106, 187, 106, 184, 106, 194, 106, 174, 106, 175, 106, 95, 107, 120, 107, 175, 107, 9, 112, 11, 112, 254, 111, 6, 112, 250, 111, 17, 112, 15, 112, 251, 113, 252, 113, 254, 113, 248, 113, 119, 115, 117, 115, 167, 116, 191, 116, 21, 117, 86, 118, 88, 118, 82, 118, 189, 119, 191, 119, 187, 119, 188, 119, 14, 121, 174, 121, 97, 122, 98, 122, 96, 122, 196, 122, 197, 122, 43, 124, 39, 124, 42, 124, 30, 124, 35, 124, 33, 124, 231, 124, 84, 126, 85, 126, 94, 126, 90, 126, 97, 126, 82, 126, 89, 126, 72, 127, 249, 127, 251, 127, 119, 128, 118, 128, 205, 129, 207, 129, 10, 130, 207, 133, 169, 133, 205, 133, 208, 133, 201, 133, 176, 133, 186, 133, 185, 133, 166, 133, 239, 135, 236, 135, 242, 135, 224, 135, 134, 137, 178, 137, 244, 137, 40, 139, 57, 139, 44, 139, 43, 139, 80, 140, 5, 141, 89, 142, 99, 142, 102, 142, 100, 142, 95, 142, 85, 142, 192, 142, 73, 143, 77, 143, 135, 144, 131, 144, 136, 144, 171, 145, 172, 145, 208, 145, 148, 147, 138, 147, 150, 147, 162, 147, 179, 147, 174, 147, 172, 147, 176, 147, 152, 147, 154, 147, 151, 147, 212, 149, 214, 149, 208, 149, 213, 149, 226, 150, 220, 150, 217, 150, 219, 150, 222, 150, 36, 151, 163, 151, 166, 151, 173, 151, 249, 151, 77, 152, 79, 152, 76, 152, 78, 152, 83, 152, 186, 152, 62, 153, 63, 153, 61, 153, 46, 153, 165, 153, 14, 154, 193, 154, 3, 155, 6, 155, 79, 155, 78, 155, 77, 155, 202, 155, 201, 155, 253, 155, 200, 155], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 86812);
    allocate([192, 155, 81, 157, 93, 157, 96, 157, 224, 158, 21, 159, 44, 159, 51, 81, 165, 86, 222, 88, 223, 88, 226, 88, 245, 91, 144, 159, 236, 94, 242, 97, 247, 97, 246, 97, 245, 97, 0, 101, 15, 101, 224, 102, 221, 102, 229, 106, 221, 106, 218, 106, 211, 106, 27, 112, 31, 112, 40, 112, 26, 112, 29, 112, 21, 112, 24, 112, 6, 114, 13, 114, 88, 114, 162, 114, 120, 115, 122, 115, 189, 116, 202, 116, 227, 116, 135, 117, 134, 117, 95, 118, 97, 118, 199, 119, 25, 121, 177, 121, 107, 122, 105, 122, 62, 124, 63, 124, 56, 124, 61, 124, 55, 124, 64, 124, 107, 126, 109, 126, 121, 126, 105, 126, 106, 126, 133, 127, 115, 126, 182, 127, 185, 127, 184, 127, 216, 129, 233, 133, 221, 133, 234, 133, 213, 133, 228, 133, 229, 133, 247, 133, 251, 135, 5, 136, 13, 136, 249, 135, 254, 135, 96, 137, 95, 137, 86, 137, 94, 137, 65, 139, 92, 139, 88, 139, 73, 139, 90, 139, 78, 139, 79, 139, 70, 139, 89, 139, 8, 141, 10, 141, 124, 142, 114, 142, 135, 142, 118, 142, 108, 142, 122, 142, 116, 142, 84, 143, 78, 143, 173, 143, 138, 144, 139, 144, 177, 145, 174, 145, 225, 147, 209, 147, 223, 147, 195, 147, 200, 147, 220, 147, 221, 147, 214, 147, 226, 147, 205, 147, 216, 147, 228, 147, 215, 147, 232, 147, 220, 149, 180, 150, 227, 150, 42, 151, 39, 151, 97, 151, 220, 151, 251, 151, 94, 152, 88, 152, 91, 152, 188, 152, 69, 153, 73, 153, 22, 154, 25, 154, 13, 155, 232, 155, 231, 155, 214, 155, 219, 155, 137, 157, 97, 157, 114, 157, 106, 157, 108, 157, 146, 158, 151, 158, 147, 158, 180, 158, 248, 82, 168, 86, 183, 86, 182, 86, 180, 86, 188, 86, 228, 88, 64, 91, 67, 91, 125, 91, 246, 91, 201, 93, 248, 97, 250, 97, 24, 101, 20, 101, 25, 101, 230, 102, 39, 103, 236, 106, 62, 112, 48, 112, 50, 112, 16, 114, 123, 115, 207, 116, 98, 118, 101, 118, 38, 121, 42, 121, 44, 121, 43, 121, 199, 122, 246, 122, 76, 124, 67, 124, 77, 124, 239, 124, 240, 124, 174, 143, 125, 126, 124, 126, 130, 126, 76, 127, 0, 128, 218, 129, 102, 130, 251, 133, 249, 133, 17, 134, 250, 133, 6, 134, 11, 134, 7, 134, 10, 134, 20, 136, 21, 136, 100, 137, 186, 137, 248, 137, 112, 139, 108, 139, 102, 139, 111, 139, 95, 139, 107, 139, 15, 141, 13, 141, 137, 142, 129, 142, 133, 142, 130, 142, 180, 145, 203, 145, 24, 148, 3, 148, 253, 147, 225, 149, 48, 151, 196, 152, 82, 153, 81, 153, 168, 153, 43, 154, 48, 154, 55, 154, 53, 154, 19, 156, 13, 156, 121, 158, 181, 158, 232, 158, 47, 159, 95, 159, 99, 159, 97, 159, 55, 81, 56, 81, 193, 86, 192, 86, 194, 86, 20, 89, 108, 92, 205, 93, 252, 97, 254, 97, 29, 101, 28, 101, 149, 101, 233, 102, 251, 106, 4, 107, 250, 106, 178, 107, 76, 112, 27, 114, 167, 114, 214, 116, 212, 116, 105, 118, 211, 119, 80, 124, 143, 126, 140, 126, 188, 127, 23, 134, 45, 134, 26, 134, 35, 136, 34, 136, 33, 136, 31, 136, 106, 137, 108, 137, 189, 137, 116, 139, 119, 139, 125, 139, 19, 141, 138, 142, 141, 142, 139, 142, 95, 143, 175, 143, 186, 145, 46, 148, 51, 148, 53, 148, 58, 148, 56, 148, 50, 148, 43, 148, 226, 149, 56, 151, 57, 151, 50, 151, 255, 151, 103, 152, 101, 152, 87, 153, 69, 154, 67, 154, 64, 154, 62, 154, 207, 154, 84, 155, 81, 155, 45, 156, 37, 156, 175, 157, 180, 157, 194, 157, 184, 157, 157, 158, 239, 158, 25, 159, 92, 159, 102, 159, 103, 159, 60, 81, 59, 81, 200, 86, 202, 86, 201, 86, 127, 91, 212, 93, 210, 93, 78, 95, 255, 97, 36, 101, 10, 107, 97, 107, 81, 112, 88, 112, 128, 115, 228, 116, 138, 117, 110, 118, 108, 118, 179, 121, 96, 124, 95, 124, 126, 128, 125, 128, 223, 129, 114, 137, 111, 137, 252, 137, 128, 139, 22, 141, 23, 141, 145, 142, 147, 142, 97, 143, 72, 145, 68, 148, 81, 148, 82, 148, 61, 151, 62, 151, 195, 151, 193, 151, 107, 152, 85, 153, 85, 154, 77, 154, 210, 154, 26, 155, 73, 156, 49, 156, 62, 156, 59, 156, 211, 157, 215, 157, 52, 159, 108, 159, 106, 159, 148, 159, 204, 86, 214, 93, 0, 98, 35, 101, 43, 101, 42, 101, 236, 102, 16, 107, 218, 116, 202, 122, 100, 124, 99, 124, 101, 124, 147, 126, 150, 126, 148, 126, 226, 129, 56, 134, 63, 134, 49, 136, 138, 139, 144, 144, 143, 144, 99, 148, 96, 148, 100, 148, 104, 151, 111, 152, 92, 153, 90, 154, 91, 154, 87, 154, 211, 154, 212, 154, 209, 154, 84, 156, 87, 156, 86, 156, 229, 157, 159, 158, 244, 158, 209, 86, 233, 88, 44, 101, 94, 112, 113, 118, 114, 118, 215, 119, 80, 127, 136, 127, 54, 136, 57, 136, 98, 136, 147, 139, 146, 139, 150, 139, 119, 130, 27, 141, 192, 145, 106, 148, 66, 151, 72, 151, 68, 151, 198, 151, 112, 152, 95, 154, 34, 155, 88, 155, 95, 156, 249, 157, 250, 157, 124, 158, 125, 158, 7, 159, 119, 159, 114, 159, 243, 94, 22, 107, 99, 112, 108, 124, 110, 124, 59, 136, 192, 137, 161, 142, 193, 145, 114, 148, 112, 148, 113, 152, 94, 153, 214, 154, 35, 155, 204, 158, 100, 112, 218, 119, 154, 139, 119, 148, 201, 151, 98, 154, 101, 154, 156, 126, 156, 139, 170, 142, 197, 145, 125, 148, 126, 148, 124, 148, 119, 156, 120, 156, 247, 158, 84, 140, 127, 148, 26, 158, 40, 114, 106, 154, 49, 155, 27, 158, 30, 158, 114, 124, 96, 36, 97, 36, 98, 36, 99, 36, 100, 36, 101, 36, 102, 36, 103, 36, 104, 36, 105, 36, 116, 36, 117, 36, 118, 36, 119, 36, 120, 36, 121, 36, 122, 36, 123, 36, 124, 36, 125, 36, 112, 33, 113, 33, 114, 33, 115, 33, 116, 33, 117, 33, 118, 33, 119, 33, 120, 33, 121, 33, 54, 78, 63, 78, 133, 78, 160, 78, 130, 81, 150, 81, 171, 81, 249, 82, 56, 83, 105, 83, 182, 83, 10, 89, 128, 91, 219, 93, 122, 94, 127, 94, 244, 94, 80, 95, 97, 95, 52, 101, 224, 101, 146, 117, 118, 118, 181, 143, 182, 150, 168, 0, 198, 2, 253, 48, 254, 48, 157, 48, 158, 48, 0, 0, 0, 0, 5, 48, 6, 48, 7, 48, 252, 48, 59, 255, 61, 255, 61, 39, 65, 48, 66, 48, 67, 48, 68, 48, 69, 48, 70, 48, 71, 48, 72, 48, 73, 48, 74, 48, 75, 48, 76, 48, 77, 48, 78, 48, 79, 48, 80, 48, 81, 48, 82, 48, 83, 48, 84, 48, 85, 48, 86, 48, 87, 48, 88, 48, 89, 48, 90, 48, 91, 48, 92, 48, 93, 48, 94, 48, 95, 48, 96, 48, 97, 48, 98, 48, 99, 48, 100, 48, 101, 48, 102, 48, 103, 48, 104, 48, 105, 48, 106, 48, 107, 48, 108, 48, 109, 48, 110, 48, 111, 48, 112, 48, 113, 48, 114, 48, 115, 48, 116, 48, 117, 48, 118, 48, 119, 48, 120, 48, 121, 48, 122, 48, 123, 48, 124, 48, 125, 48, 126, 48, 127, 48, 128, 48, 129, 48, 130, 48, 131, 48, 132, 48, 133, 48, 134, 48, 135, 48, 136, 48, 137, 48, 138, 48, 139, 48, 140, 48, 141, 48, 142, 48, 143, 48, 144, 48, 145, 48, 146, 48, 147, 48, 161, 48, 162, 48, 163, 48, 164, 48, 165, 48, 166, 48, 167, 48, 168, 48, 169, 48, 170, 48, 171, 48, 172, 48, 173, 48, 174, 48, 175, 48, 176, 48, 177, 48, 178, 48, 179, 48, 180, 48, 181, 48, 182, 48, 183, 48, 184, 48, 185, 48, 186, 48, 187, 48, 188, 48, 189, 48, 190, 48, 191, 48, 192, 48, 193, 48, 194, 48, 195, 48, 196, 48, 197, 48, 198, 48, 199, 48, 200, 48, 201, 48, 202, 48, 203, 48, 204, 48, 205, 48, 206, 48, 207, 48, 208, 48, 209, 48, 210, 48, 211, 48, 212, 48, 213, 48, 214, 48, 215, 48, 216, 48, 217, 48, 218, 48, 219, 48, 220, 48, 221, 48, 222, 48, 223, 48, 224, 48, 225, 48, 226, 48, 227, 48, 228, 48, 229, 48, 230, 48, 231, 48, 232, 48, 233, 48, 234, 48, 235, 48, 236, 48, 237, 48, 238, 48, 239, 48, 240, 48, 241, 48, 242, 48, 243, 48, 244, 48, 245, 48, 246, 48, 16, 4, 17, 4, 18, 4, 19, 4, 20, 4, 21, 4, 1, 4, 22, 4, 23, 4, 24, 4, 25, 4, 26, 4, 27, 4, 28, 4, 29, 4, 30, 4, 31, 4, 32, 4, 33, 4, 34, 4, 35, 4, 36, 4, 37, 4, 38, 4, 39, 4, 40, 4, 41, 4, 42, 4, 43, 4, 44, 4, 45, 4, 46, 4, 47, 4, 48, 4, 49, 4, 50, 4, 51, 4, 52, 4, 53, 4, 81, 4, 54, 4, 55, 4, 56, 4, 57, 4, 58, 4, 59, 4, 60, 4, 61, 4, 62, 4, 63, 4, 64, 4, 65, 4, 66, 4, 67, 4, 68, 4, 69, 4, 70, 4, 71, 4, 72, 4, 73, 4, 74, 4, 75, 4, 76, 4, 77, 4, 78, 4, 79, 4, 231, 33, 184, 33, 185, 33, 207, 49, 204, 0, 90, 78, 138, 0, 2, 82, 145, 68, 176, 159, 136, 81, 177, 159, 7, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 226, 255, 228, 255, 7, 255, 2, 255, 49, 50, 22, 33, 33, 33, 155, 48, 156, 48, 128, 46, 132, 46, 134, 46, 135, 46, 136, 46, 138, 46, 140, 46, 141, 46, 149, 46, 156, 46, 157, 46, 165, 46, 167, 46, 170, 46, 172, 46, 174, 46, 182, 46, 188, 46, 190, 46, 198, 46, 202, 46, 204, 46, 205, 46, 207, 46, 214, 46, 215, 46, 222, 46, 227, 46, 0, 0, 0, 0, 0, 0, 131, 2, 80, 2, 91, 2, 84, 2, 117, 2, 83, 1, 248, 0, 75, 1, 138, 2, 106, 2, 66, 78, 92, 78, 245, 81, 26, 83, 130, 83, 7, 78, 12, 78, 71, 78, 141, 78, 215, 86, 12, 250, 110, 92, 115, 95, 15, 78, 135, 81, 14, 78, 46, 78, 147, 78, 194, 78, 201, 78, 200, 78, 152, 81, 252, 82, 108, 83, 185, 83, 32, 87, 3, 89, 44, 89, 16, 92, 255, 93, 225, 101, 179, 107, 204, 107, 20, 108, 63, 114, 49, 78, 60, 78, 232, 78, 220, 78, 233, 78, 225, 78, 221, 78, 218, 78, 12, 82, 28, 83, 76, 83, 34, 87, 35, 87, 23, 89, 47, 89, 129, 91, 132, 91, 18, 92, 59, 92, 116, 92, 115, 92, 4, 94, 128, 94, 130, 94, 201, 95, 9, 98, 80, 98, 21, 108, 54, 108, 67, 108, 63, 108, 59, 108, 174, 114, 176, 114, 138, 115, 184, 121, 138, 128, 30, 150, 14, 79, 24, 79, 44, 79, 245, 78, 20, 79, 241, 78, 0, 79, 247, 78, 8, 79, 29, 79, 2, 79, 5, 79, 34, 79, 19, 79, 4, 79, 244, 78, 18, 79, 177, 81, 19, 82, 9, 82, 16, 82, 166, 82, 34, 83, 31, 83, 77, 83, 138, 83, 7, 84, 225, 86, 223, 86, 46, 87, 42, 87, 52, 87, 60, 89, 128, 89, 124, 89, 133, 89, 123, 89, 126, 89, 119, 89, 127, 89, 86, 91, 21, 92, 37, 92, 124, 92, 122, 92, 123, 92, 126, 92, 223, 93, 117, 94, 132, 94, 2, 95, 26, 95, 116, 95, 213, 95, 212, 95, 207, 95, 92, 98, 94, 98, 100, 98, 97, 98, 102, 98, 98, 98, 89, 98, 96, 98, 90, 98, 101, 98, 239, 101, 238, 101, 62, 103, 57, 103, 56, 103, 59, 103, 58, 103, 63, 103, 60, 103, 51, 103, 24, 108, 70, 108, 82, 108, 92, 108, 79, 108, 74, 108, 84, 108, 75, 108, 76, 108, 113, 112, 94, 114, 180, 114, 181, 114, 142, 115, 42, 117, 127, 118, 117, 122, 81, 127, 120, 130, 124, 130, 128, 130, 125, 130, 127, 130, 77, 134, 126, 137, 153, 144, 151, 144, 152, 144, 155, 144, 148, 144, 34, 150, 36, 150, 32, 150, 35, 150, 86, 79, 59, 79, 98, 79, 73, 79, 83, 79, 100, 79, 62, 79, 103, 79, 82, 79, 95, 79, 65, 79, 88, 79, 45, 79, 51, 79, 63, 79, 97, 79, 143, 81, 185, 81, 28, 82, 30, 82, 33, 82, 173, 82, 174, 82, 9, 83, 99, 83, 114, 83, 142, 83, 143, 83, 48, 84, 55, 84, 42, 84, 84, 84, 69, 84, 25, 84, 28, 84, 37, 84, 24, 84, 61, 84, 79, 84, 65, 84, 40, 84, 36, 84, 71, 84, 238, 86, 231, 86, 229, 86, 65, 87, 69, 87, 76, 87, 73, 87, 75, 87, 82, 87, 6, 89, 64, 89, 166, 89, 152, 89, 160, 89, 151, 89, 142, 89, 162, 89, 144, 89, 143, 89, 167, 89, 161, 89, 142, 91, 146, 91, 40, 92, 42, 92, 141, 92, 143, 92, 136, 92, 139, 92, 137, 92, 146, 92, 138, 92, 134, 92, 147, 92, 149, 92, 224, 93, 10, 94, 14, 94, 139, 94, 137, 94, 140, 94, 136, 94, 141, 94, 5, 95, 29, 95, 120, 95, 118, 95, 210, 95, 209, 95, 208, 95, 237, 95, 232, 95, 238, 95, 243, 95, 225, 95, 228, 95, 227, 95, 250, 95, 239, 95, 247, 95, 251, 95, 0, 96, 244, 95, 58, 98, 131, 98, 140, 98, 142, 98, 143, 98, 148, 98, 135, 98, 113, 98, 123, 98, 122, 98, 112, 98, 129, 98, 136, 98, 119, 98, 125, 98, 114, 98, 116, 98, 55, 101, 240, 101, 244, 101, 243, 101, 242, 101, 245, 101, 69, 103, 71, 103, 89, 103, 85, 103, 76, 103, 72, 103, 93, 103, 77, 103, 90, 103, 75, 103, 208, 107, 25, 108, 26, 108, 120, 108, 103, 108, 107, 108, 132, 108, 139, 108, 143, 108, 113, 108, 111, 108, 105, 108, 154, 108, 109, 108, 135, 108, 149, 108, 156, 108, 102, 108, 115, 108, 101, 108, 123, 108, 142, 108, 116, 112, 122, 112, 99, 114, 191, 114, 189, 114, 195, 114, 198, 114, 193, 114, 186, 114, 197, 114, 149, 115, 151, 115, 147, 115, 148, 115, 146, 115, 58, 117, 57, 117, 148, 117, 149, 117, 129, 118, 61, 121, 52, 128, 149, 128, 153, 128, 144, 128, 146, 128, 156, 128, 144, 130, 143, 130, 133, 130, 142, 130, 145, 130, 147, 130, 138, 130, 131, 130, 132, 130, 120, 140, 201, 143, 191, 143, 159, 144, 161, 144, 165, 144, 158, 144, 167, 144, 160, 144, 48, 150, 40, 150, 47, 150, 45, 150, 51, 78, 152, 79, 124, 79, 133, 79, 125, 79, 128, 79, 135, 79, 118, 79, 116, 79, 137, 79, 132, 79, 119, 79, 76, 79, 151, 79, 106, 79, 154, 79, 121, 79, 129, 79, 120, 79, 144, 79, 156, 79, 148, 79, 158, 79, 146, 79, 130, 79, 149, 79, 107, 79, 110, 79, 158, 81, 188, 81, 190, 81, 53, 82, 50, 82, 51, 82, 70, 82, 49, 82, 188, 82, 10, 83, 11, 83, 60, 83, 146, 83, 148, 83, 135, 84, 127, 84, 129, 84, 145, 84, 130, 84, 136, 84, 107, 84, 122, 84, 126, 84, 101, 84, 108, 84, 116, 84, 102, 84, 141, 84, 111, 84, 97, 84, 96, 84, 152, 84, 99, 84, 103, 84, 100, 84, 247, 86, 249, 86, 111, 87, 114, 87, 109, 87, 107, 87, 113, 87, 112, 87, 118, 87, 128, 87, 117, 87, 123, 87, 115, 87, 116, 87, 98, 87, 104, 87, 125, 87, 12, 89, 69, 89, 181, 89, 186, 89, 207, 89, 206, 89, 178, 89, 204, 89, 193, 89, 182, 89, 188, 89, 195, 89, 214, 89, 177, 89, 189, 89, 192, 89, 200, 89, 180, 89, 199, 89, 98, 91, 101, 91, 147, 91, 149, 91, 68, 92, 71, 92, 174, 92, 164, 92, 160, 92, 181, 92, 175, 92, 168, 92, 172, 92, 159, 92, 163, 92, 173, 92, 162, 92, 170, 92, 167, 92, 157, 92, 165, 92, 182, 92, 176, 92, 166, 92, 23, 94, 20, 94, 25, 94, 40, 95, 34, 95, 35, 95, 36, 95, 84, 95, 130, 95, 126, 95, 125, 95, 222, 95, 229, 95, 45, 96, 38, 96, 25, 96, 50, 96, 11, 96, 52, 96, 10, 96, 23, 96, 51, 96, 26, 96, 30, 96, 44, 96, 34, 96, 13, 96, 16, 96, 46, 96, 19, 96, 17, 96, 12, 96, 9, 96, 28, 96, 20, 98, 61, 98, 173, 98, 180, 98, 209, 98, 190, 98, 170, 98, 182, 98, 202, 98, 174, 98, 179, 98, 175, 98, 187, 98, 169, 98, 176, 98, 184, 98, 61, 101, 168, 101, 187, 101, 9, 102, 252, 101, 4, 102, 18, 102, 8, 102, 251, 101, 3, 102, 11, 102, 13, 102, 5, 102, 253, 101, 17, 102, 16, 102, 246, 102, 10, 103, 133, 103, 108, 103, 142, 103, 146, 103, 118, 103, 123, 103, 152, 103, 134, 103, 132, 103, 116, 103, 141, 103, 140, 103, 122, 103, 159, 103, 145, 103, 153, 103, 131, 103, 125, 103, 129, 103, 120, 103, 121, 103, 148, 103, 37, 107, 128, 107, 126, 107, 222, 107, 29, 108, 147, 108, 236, 108, 235, 108, 238, 108, 217, 108, 182, 108, 212, 108, 173, 108, 231, 108, 183, 108, 208, 108, 194, 108, 186, 108, 195, 108, 198, 108, 237, 108, 242, 108, 210, 108, 221, 108, 180, 108, 138, 108, 157, 108, 128, 108, 222, 108, 192, 108, 48, 109, 205, 108, 199, 108, 176, 108, 249, 108, 207, 108, 233, 108, 209, 108, 148, 112, 152, 112, 133, 112, 147, 112, 134, 112, 132, 112, 145, 112, 150, 112, 130, 112, 154, 112, 131, 112, 106, 114, 214, 114, 203, 114, 216, 114, 201, 114, 220, 114, 210, 114, 212, 114, 218, 114, 204, 114, 209, 114, 164, 115, 161, 115, 173, 115, 166, 115, 162, 115, 160, 115, 172, 115, 157, 115, 221, 116, 232, 116, 63, 117, 64, 117, 62, 117, 140, 117, 152, 117, 175, 118, 243, 118, 241, 118, 240, 118, 245, 118, 248, 119, 252, 119, 249, 119, 251, 119, 250, 119, 247, 119, 66, 121, 63, 121, 197, 121, 120, 122, 123, 122, 251, 122, 117, 124, 253, 124, 53, 128, 143, 128, 174, 128, 163, 128, 184, 128, 181, 128, 173, 128, 32, 130, 160, 130, 192, 130, 171, 130, 154, 130, 152, 130, 155, 130, 181, 130, 167, 130, 174, 130, 188, 130, 158, 130, 186, 130, 180, 130, 168, 130, 161, 130, 169, 130, 194, 130, 164, 130, 195, 130, 182, 130, 162, 130, 112, 134, 111, 134, 109, 134, 110, 134, 86, 140, 210, 143, 203, 143, 211, 143, 205, 143, 214, 143, 213, 143, 215, 143, 178, 144, 180, 144, 175, 144, 179, 144, 176, 144, 57, 150, 61, 150, 60, 150, 58, 150, 67, 150, 205, 79, 197, 79, 211, 79, 178, 79, 201, 79, 203, 79, 193, 79, 212, 79, 220, 79, 217, 79, 187, 79, 179, 79, 219, 79, 199, 79, 214, 79, 186, 79, 192, 79, 185, 79, 236, 79, 68, 82, 73, 82, 192, 82, 194, 82, 61, 83, 124, 83, 151, 83, 150, 83, 153, 83, 152, 83, 186, 84, 161, 84, 173, 84, 165, 84, 207, 84, 195, 84, 13, 131, 183, 84, 174, 84, 214, 84, 182, 84, 197, 84, 198, 84, 160, 84, 112, 84, 188, 84, 162, 84, 190, 84, 114, 84, 222, 84, 176, 84, 181, 87, 158, 87, 159, 87, 164, 87, 140, 87, 151, 87, 157, 87, 155, 87, 148, 87, 152, 87, 143, 87, 153, 87, 165, 87, 154, 87, 149, 87, 244, 88, 13, 89, 83, 89, 225, 89, 222, 89, 238, 89, 0, 90, 241, 89, 221, 89, 250, 89, 253, 89, 252, 89, 246, 89, 228, 89, 242, 89, 247, 89, 219, 89, 233, 89, 243, 89, 245, 89, 224, 89, 254, 89, 244, 89, 237, 89, 168, 91, 76, 92, 208, 92, 216, 92, 204, 92, 215, 92, 203, 92, 219, 92, 222, 92, 218, 92, 201, 92, 199, 92, 202, 92, 214, 92, 211, 92, 212, 92, 207, 92, 200, 92, 198, 92, 206, 92, 223, 92, 248, 92, 249, 93, 33, 94, 34, 94, 35, 94, 32, 94, 36, 94, 176, 94, 164, 94, 162, 94, 155, 94, 163, 94, 165, 94, 7, 95, 46, 95, 86, 95, 134, 95, 55, 96, 57, 96, 84, 96, 114, 96, 94, 96, 69, 96, 83, 96, 71, 96, 73, 96, 91, 96, 76, 96, 64, 96, 66, 96, 95, 96, 36, 96, 68, 96, 88, 96, 102, 96, 110, 96, 66, 98, 67, 98, 207, 98, 13, 99, 11, 99, 245, 98, 14, 99, 3, 99, 235, 98, 249, 98, 15, 99, 12, 99, 248, 98, 246, 98, 0, 99, 19, 99, 20, 99, 250, 98, 21, 99, 251, 98, 240, 98, 65, 101, 67, 101, 170, 101, 191, 101, 54, 102, 33, 102, 50, 102, 53, 102, 28, 102, 38, 102, 34, 102, 51, 102, 43, 102, 58, 102, 29, 102, 52, 102, 57, 102, 46, 102, 15, 103, 16, 103, 193, 103, 242, 103, 200, 103, 186, 103, 220, 103, 187, 103, 248, 103, 216, 103, 192, 103, 183, 103, 197, 103, 235, 103, 228, 103, 223, 103, 181, 103, 205, 103, 179, 103, 247, 103, 246, 103, 238, 103, 227, 103, 194, 103, 185, 103, 206, 103, 231, 103, 240, 103, 178, 103, 252, 103, 198, 103, 237, 103, 204, 103, 174, 103, 230, 103, 219, 103, 250, 103, 201, 103, 202, 103, 195, 103, 234, 103, 203, 103, 40, 107, 130, 107, 132, 107, 182, 107, 214, 107, 216, 107, 224, 107, 32, 108, 33, 108, 40, 109, 52, 109, 45, 109, 31, 109, 60, 109, 63, 109, 18, 109, 10, 109, 218, 108, 51, 109, 4, 109, 25, 109, 58, 109, 26, 109, 17, 109, 0, 109, 29, 109, 66, 109, 1, 109, 24, 109, 55, 109, 3, 109, 15, 109, 64, 109, 7, 109, 32, 109, 44, 109, 8, 109, 34, 109, 9, 109, 16, 109, 183, 112, 159, 112, 190, 112, 177, 112, 176, 112, 161, 112, 180, 112, 181, 112, 169, 112, 65, 114, 73, 114, 74, 114, 108, 114, 112, 114, 115, 114, 110, 114, 202, 114, 228, 114, 232, 114, 235, 114, 223, 114, 234, 114, 230, 114, 227, 114, 133, 115, 204, 115, 194, 115, 200, 115, 197, 115, 185, 115, 182, 115, 181, 115, 180, 115, 235, 115, 191, 115, 199, 115, 190, 115, 195, 115, 198, 115, 184, 115, 203, 115, 236, 116, 238, 116, 46, 117, 71, 117, 72, 117, 167, 117, 170, 117, 121, 118, 196, 118, 8, 119, 3, 119, 4, 119, 5, 119, 10, 119, 247, 118, 251, 118, 250, 118, 231, 119, 232, 119, 6, 120, 17, 120, 18, 120, 5, 120, 16, 120, 15, 120, 14, 120, 9, 120, 3, 120, 19, 120, 74, 121, 76, 121, 75, 121, 69, 121, 68, 121, 213, 121, 205, 121, 207, 121, 214, 121, 206, 121, 128, 122, 126, 122, 209, 122, 0, 123, 1, 123, 122, 124, 120, 124, 121, 124, 127, 124, 128, 124, 129, 124, 3, 125, 8, 125, 1, 125, 88, 127, 145, 127, 141, 127, 190, 127, 7, 128, 14, 128, 15, 128, 20, 128, 55, 128, 216, 128, 199, 128, 224, 128, 209, 128, 200, 128, 194, 128, 208, 128, 197, 128, 227, 128, 217, 128, 220, 128, 202, 128, 213, 128, 201, 128, 207, 128, 215, 128, 230, 128, 205, 128, 255, 129, 33, 130, 148, 130, 217, 130, 254, 130, 249, 130, 7, 131, 232, 130, 0, 131, 213, 130, 58, 131, 235, 130, 214, 130, 244, 130, 236, 130, 225, 130, 242, 130, 245, 130, 12, 131, 251, 130, 246, 130, 240, 130, 234, 130, 228, 130, 224, 130, 250, 130, 243, 130, 237, 130, 119, 134, 116, 134, 124, 134, 115, 134, 65, 136, 78, 136, 103, 136, 106, 136, 105, 136, 211, 137, 4, 138, 7, 138, 114, 141, 227, 143, 225, 143, 238, 143, 224, 143, 241, 144, 189, 144, 191, 144, 213, 144, 197, 144, 190, 144, 199, 144, 203, 144, 200, 144, 212, 145, 211, 145, 84, 150, 79, 150, 81, 150, 83, 150, 74, 150, 78, 150, 30, 80, 5, 80, 7, 80, 19, 80, 34, 80, 48, 80, 27, 80, 245, 79, 244, 79, 51, 80, 55, 80, 44, 80, 246, 79, 247, 79, 23, 80, 28, 80, 32, 80, 39, 80, 53, 80, 47, 80, 49, 80, 14, 80, 90, 81, 148, 81, 147, 81, 202, 81, 196, 81, 197, 81, 200, 81, 206, 81, 97, 82, 90, 82, 82, 82, 94, 82, 95, 82, 85, 82, 98, 82, 205, 82, 14, 83, 158, 83, 38, 85, 226, 84, 23, 85, 18, 85, 231, 84, 243, 84, 228, 84, 26, 85, 255, 84, 4, 85, 8, 85, 235, 84, 17, 85, 5, 85, 241, 84, 10, 85, 251, 84, 247, 84, 248, 84, 224, 84, 14, 85, 3, 85, 11, 85, 1, 87, 2, 87, 204, 87, 50, 88, 213, 87, 210, 87, 186, 87, 198, 87, 189, 87, 188, 87, 184, 87, 182, 87, 191, 87, 199, 87, 208, 87, 185, 87, 193, 87, 14, 89, 74, 89, 25, 90, 22, 90, 45, 90, 46, 90, 21, 90, 15, 90, 23, 90, 10, 90, 30, 90, 51, 90, 108, 91, 167, 91, 173, 91, 172, 91, 3, 92, 86, 92, 84, 92, 236, 92, 255, 92, 238, 92, 241, 92, 247, 92, 0, 93, 249, 92, 41, 94, 40, 94, 168, 94, 174, 94, 170, 94, 172, 94, 51, 95, 48, 95, 103, 95, 93, 96, 90, 96, 103, 96, 65, 96, 162, 96, 136, 96, 128, 96, 146, 96, 129, 96, 157, 96, 131, 96, 149, 96, 155, 96, 151, 96, 135, 96, 156, 96, 142, 96, 25, 98, 70, 98, 242, 98, 16, 99, 86, 99, 44, 99, 68, 99, 69, 99, 54, 99, 67, 99, 228, 99, 57, 99, 75, 99, 74, 99, 60, 99, 41, 99, 65, 99, 52, 99, 88, 99, 84, 99, 89, 99, 45, 99, 71, 99, 51, 99, 90, 99, 81, 99, 56, 99, 87, 99, 64, 99, 72, 99, 74, 101, 70, 101, 198, 101, 195, 101, 196, 101, 194, 101, 74, 102, 95, 102, 71, 102, 81, 102, 18, 103, 19, 103, 31, 104, 26, 104, 73, 104, 50, 104, 51, 104, 59, 104, 75, 104, 79, 104, 22, 104, 49, 104, 28, 104, 53, 104, 43, 104, 45, 104, 47, 104, 78, 104, 68, 104, 52, 104, 29, 104, 18, 104, 20, 104, 38, 104, 40, 104, 46, 104, 77, 104, 58, 104, 37, 104, 32, 104, 44, 107, 47, 107, 45, 107, 49, 107, 52, 107, 109, 107, 130, 128, 136, 107, 230, 107, 228, 107, 232, 107, 227, 107, 226, 107, 231, 107, 37, 108, 122, 109, 99, 109, 100, 109, 118, 109, 13, 109, 97, 109, 146, 109, 88, 109, 98, 109, 109, 109, 111, 109, 145, 109, 141, 109, 239, 109, 127, 109, 134, 109, 94, 109, 103, 109, 96, 109, 151, 109, 112, 109, 124, 109, 95, 109, 130, 109, 152, 109, 47, 109, 104, 109, 139, 109, 126, 109, 128, 109, 132, 109, 22, 109, 131, 109, 123, 109, 125, 109, 117, 109, 144, 109, 220, 112, 211, 112, 209, 112, 221, 112, 203, 112, 57, 127, 226, 112, 215, 112, 210, 112, 222, 112, 224, 112, 212, 112, 205, 112, 197, 112, 198, 112, 199, 112, 218, 112, 206, 112, 225, 112, 66, 114, 120, 114, 119, 114, 118, 114, 0, 115, 250, 114, 244, 114, 254, 114, 246, 114, 243, 114, 251, 114, 1, 115, 211, 115, 217, 115, 229, 115, 214, 115, 188, 115, 231, 115, 227, 115, 233, 115, 220, 115, 210, 115, 219, 115, 212, 115, 221, 115, 218, 115, 215, 115, 216, 115, 232, 115, 222, 116, 223, 116, 244, 116, 245, 116, 33, 117, 91, 117, 95, 117, 176, 117, 193, 117, 187, 117, 196, 117, 192, 117, 191, 117, 182, 117, 186, 117, 138, 118, 201, 118, 29, 119, 27, 119, 16, 119, 19, 119, 18, 119, 35, 119, 17, 119, 21, 119, 25, 119, 26, 119, 34, 119, 39, 119, 35, 120, 44, 120, 34, 120, 53, 120, 47, 120, 40, 120, 46, 120, 43, 120, 33, 120, 41, 120, 51, 120, 42, 120, 49, 120, 84, 121, 91, 121, 79, 121, 92, 121, 83, 121, 82, 121, 81, 121, 235, 121, 236, 121, 224, 121, 238, 121, 237, 121, 234, 121, 220, 121, 222, 121, 221, 121, 134, 122, 137, 122, 133, 122, 139, 122, 140, 122, 138, 122, 135, 122, 216, 122, 16, 123, 4, 123, 19, 123, 5, 123, 15, 123, 8, 123, 10, 123, 14, 123, 9, 123, 18, 123, 132, 124, 145, 124, 138, 124, 140, 124, 136, 124, 141, 124, 133, 124, 30, 125, 29, 125, 17, 125, 14, 125, 24, 125, 22, 125, 19, 125, 31, 125, 18, 125, 15, 125, 12, 125, 92, 127, 97, 127, 94, 127, 96, 127, 93, 127, 91, 127, 150, 127, 146, 127, 195, 127, 194, 127, 192, 127, 22, 128, 62, 128, 57, 128, 250, 128, 242, 128, 249, 128, 245, 128, 1, 129, 251, 128, 0, 129, 1, 130, 47, 130, 37, 130, 51, 131, 45, 131, 68, 131, 25, 131, 81, 131, 37, 131, 86, 131, 63, 131, 65, 131, 38, 131, 28, 131, 34, 131, 66, 131, 78, 131, 27, 131, 42, 131, 8, 131, 60, 131, 77, 131, 22, 131, 36, 131, 32, 131, 55, 131, 47, 131, 41, 131, 71, 131, 69, 131, 76, 131, 83, 131, 30, 131, 44, 131, 75, 131, 39, 131, 72, 131, 83, 134, 82, 134, 162, 134, 168, 134, 150, 134, 141, 134, 145, 134, 158, 134, 135, 134, 151, 134, 134, 134, 139, 134, 154, 134, 133, 134, 165, 134, 153, 134, 161, 134, 167, 134, 149, 134, 152, 134, 142, 134, 157, 134, 144, 134, 148, 134, 67, 136, 68, 136, 109, 136, 117, 136, 118, 136, 114, 136, 128, 136, 113, 136, 127, 136, 111, 136, 131, 136, 126, 136, 116, 136, 124, 136, 18, 138, 71, 140, 87, 140, 123, 140, 164, 140, 163, 140, 118, 141, 120, 141, 181, 141, 183, 141, 182, 141, 209, 142, 211, 142, 254, 143, 245, 143, 2, 144, 255, 143, 251, 143, 4, 144, 252, 143, 246, 143, 214, 144, 224, 144, 217, 144, 218, 144, 227, 144, 223, 144, 229, 144, 216, 144, 219, 144, 215, 144, 220, 144, 228, 144, 80, 145, 78, 145, 79, 145, 213, 145, 226, 145, 218, 145, 92, 150, 95, 150, 188, 150, 227, 152, 223, 154, 47, 155, 127, 78, 112, 80, 106, 80, 97, 80, 94, 80, 96, 80, 83, 80, 75, 80, 93, 80, 114, 80, 72, 80, 77, 80, 65, 80, 91, 80, 74, 80, 98, 80, 21, 80, 69, 80, 95, 80, 105, 80, 107, 80, 99, 80, 100, 80, 70, 80, 64, 80, 110, 80, 115, 80, 87, 80, 81, 80, 208, 81, 107, 82, 109, 82, 108, 82, 110, 82, 214, 82, 211, 82, 45, 83, 156, 83, 117, 85, 118, 85, 60, 85, 77, 85, 80, 85, 52, 85, 42, 85, 81, 85, 98, 85, 54, 85, 53, 85, 48, 85, 82, 85, 69, 85, 12, 85, 50, 85, 101, 85, 78, 85, 57, 85, 72, 85, 45, 85, 59, 85, 64, 85, 75, 85, 10, 87, 7, 87, 251, 87, 20, 88, 226, 87, 246, 87, 220, 87, 244, 87, 0, 88, 237, 87, 253, 87, 8, 88, 248, 87, 11, 88, 243, 87, 207, 87, 7, 88, 238, 87, 227, 87, 242, 87, 229, 87, 236, 87, 225, 87, 14, 88, 252, 87, 16, 88, 231, 87, 1, 88, 12, 88, 241, 87, 233, 87, 240, 87, 13, 88, 4, 88, 92, 89, 96, 90, 88, 90, 85, 90, 103, 90, 94, 90, 56, 90, 53, 90, 109, 90, 80, 90, 95, 90, 101, 90, 108, 90, 83, 90, 100, 90, 87, 90, 67, 90, 93, 90, 82, 90, 68, 90, 91, 90, 72, 90, 142, 90, 62, 90, 77, 90, 57, 90, 76, 90, 112, 90, 105, 90, 71, 90, 81, 90, 86, 90, 66, 90, 92, 90, 114, 91, 110, 91, 193, 91, 192, 91, 89, 92, 30, 93, 11, 93, 29, 93, 26, 93, 32, 93, 12, 93, 40, 93, 13, 93, 38, 93, 37, 93, 15, 93, 48, 93, 18, 93, 35, 93, 31, 93, 46, 93, 62, 94, 52, 94, 177, 94, 180, 94, 185, 94, 178, 94, 179, 94, 54, 95, 56, 95, 155, 95, 150, 95, 159, 95, 138, 96, 144, 96, 134, 96, 190, 96, 176, 96, 186, 96, 211, 96, 212, 96, 207, 96, 228, 96, 217, 96, 221, 96, 200, 96, 177, 96, 219, 96, 183, 96, 202, 96, 191, 96, 195, 96, 205, 96, 192, 96, 50, 99, 101, 99, 138, 99, 130, 99, 125, 99, 189, 99, 158, 99, 173, 99, 157, 99, 151, 99, 171, 99, 142, 99, 111, 99, 135, 99, 144, 99, 110, 99, 175, 99, 117, 99, 156, 99, 109, 99, 174, 99, 124, 99, 164, 99, 59, 99, 159, 99, 120, 99, 133, 99, 129, 99, 145, 99, 141, 99, 112, 99, 83, 101, 205, 101, 101, 102, 97, 102, 91, 102, 89, 102, 92, 102, 98, 102, 24, 103, 121, 104, 135, 104, 144, 104, 156, 104, 109, 104, 110, 104, 174, 104, 171, 104, 86, 105, 111, 104, 163, 104, 172, 104, 169, 104, 117, 104, 116, 104, 178, 104, 143, 104, 119, 104, 146, 104, 124, 104, 107, 104, 114, 104, 170, 104, 128, 104, 113, 104, 126, 104, 155, 104, 150, 104, 139, 104, 160, 104, 137, 104, 164, 104, 120, 104, 123, 104, 145, 104, 140, 104, 138, 104, 125, 104, 54, 107, 51, 107, 55, 107, 56, 107, 145, 107, 143, 107, 141, 107, 142, 107, 140, 107, 42, 108, 192, 109, 171, 109, 180, 109, 179, 109, 116, 110, 172, 109, 233, 109, 226, 109, 183, 109, 246, 109, 212, 109, 0, 110, 200, 109, 224, 109, 223, 109, 214, 109, 190, 109, 229, 109, 220, 109, 221, 109, 219, 109, 244, 109, 202, 109, 189, 109, 237, 109, 240, 109, 186, 109, 213, 109, 194, 109, 207, 109, 201, 109, 208, 109, 242, 109, 211, 109, 253, 109, 215, 109, 205, 109, 227, 109, 187, 109, 250, 112, 13, 113, 247, 112, 23, 113, 244, 112, 12, 113, 240, 112, 4, 113, 243, 112, 16, 113, 252, 112, 255, 112, 6, 113, 19, 113, 0, 113, 248, 112, 246, 112, 11, 113, 2, 113, 14, 113, 126, 114, 123, 114, 124, 114, 127, 114, 29, 115, 23, 115, 7, 115, 17, 115, 24, 115, 10, 115, 8, 115, 255, 114, 15, 115, 30, 115, 136, 115, 246, 115, 248, 115, 245, 115, 4, 116, 1, 116, 253, 115, 7, 116, 0, 116, 250, 115, 252, 115, 255, 115, 12, 116, 11, 116, 244, 115, 8, 116, 100, 117, 99, 117, 206, 117, 210, 117, 207, 117, 203, 117, 204, 117, 209, 117, 208, 117, 143, 118, 137, 118, 211, 118, 57, 119, 47, 119, 45, 119, 49, 119, 50, 119, 52, 119, 51, 119, 61, 119, 37, 119, 59, 119, 53, 119, 72, 120, 82, 120, 73, 120, 77, 120, 74, 120, 76, 120, 38, 120, 69, 120, 80, 120, 100, 121, 103, 121, 105, 121, 106, 121, 99, 121, 107, 121, 97, 121, 187, 121, 250, 121, 248, 121, 246, 121, 247, 121, 143, 122, 148, 122, 144, 122, 53, 123, 71, 123, 52, 123, 37, 123, 48, 123, 34, 123, 36, 123, 51, 123, 24, 123, 42, 123, 29, 123, 49, 123, 43, 123, 45, 123, 47, 123, 50, 123, 56, 123, 26, 123, 35, 123, 148, 124, 152, 124, 150, 124, 163, 124, 53, 125, 61, 125, 56, 125, 54, 125, 58, 125, 69, 125, 44, 125, 41, 125, 65, 125, 71, 125, 62, 125, 63, 125, 74, 125, 59, 125, 40, 125, 99, 127, 149, 127, 156, 127, 157, 127, 155, 127, 202, 127, 203, 127, 205, 127, 208, 127, 209, 127, 199, 127, 207, 127, 201, 127, 31, 128, 30, 128, 27, 128, 71, 128, 67, 128, 72, 128, 24, 129, 37, 129, 25, 129, 27, 129, 45, 129, 31, 129, 44, 129, 30, 129, 33, 129, 21, 129, 39, 129, 29, 129, 34, 129, 17, 130, 56, 130, 51, 130, 58, 130, 52, 130, 50, 130, 116, 130, 144, 131, 163, 131, 168, 131, 141, 131, 122, 131, 115, 131, 164, 131, 116, 131, 143, 131, 129, 131, 149, 131, 153, 131, 117, 131, 148, 131, 169, 131, 125, 131, 131, 131, 140, 131, 157, 131, 155, 131, 170, 131, 139, 131, 126, 131, 165, 131, 175, 131, 136, 131, 151, 131, 176, 131, 127, 131, 166, 131, 135, 131, 174, 131, 118, 131, 154, 131, 89, 134, 86, 134, 191, 134, 183, 134, 194, 134, 193, 134, 197, 134, 186, 134, 176, 134, 200, 134, 185, 134, 179, 134, 184, 134, 204, 134, 180, 134, 187, 134, 188, 134, 195, 134, 189, 134, 190, 134, 82, 136, 137, 136, 149, 136, 168, 136, 162, 136, 170, 136, 154, 136, 145, 136, 161, 136, 159, 136, 152, 136, 167, 136, 153, 136, 155, 136, 151, 136, 164, 136, 172, 136, 140, 136, 147, 136, 142, 136, 130, 137, 214, 137, 217, 137, 213, 137, 48, 138, 39, 138, 44, 138, 30, 138, 57, 140, 59, 140, 92, 140, 93, 140, 125, 140, 165, 140, 125, 141, 123, 141, 121, 141, 188, 141, 194, 141, 185, 141, 191, 141, 193, 141, 216, 142, 222, 142, 221, 142, 220, 142, 215, 142, 224, 142, 225, 142, 36, 144, 11, 144, 17, 144, 28, 144, 12, 144, 33, 144, 239, 144, 234, 144, 240, 144, 244, 144, 242, 144, 243, 144, 212, 144, 235, 144, 236, 144, 233, 144, 86, 145, 88, 145, 90, 145, 83, 145, 85, 145, 236, 145, 244, 145, 241, 145, 243, 145, 248, 145, 228, 145, 249, 145, 234, 145, 235, 145, 247, 145, 232, 145, 238, 145, 122, 149, 134, 149, 136, 149, 124, 150, 109, 150, 107, 150, 113, 150, 111, 150, 191, 150, 106, 151, 4, 152, 229, 152, 151, 153, 155, 80, 149, 80, 148, 80, 158, 80, 139, 80, 163, 80, 131, 80, 140, 80, 142, 80, 157, 80, 104, 80, 156, 80, 146, 80, 130, 80, 135, 80, 95, 81, 212, 81, 18, 83, 17, 83, 164, 83, 167, 83, 145, 85, 168, 85, 165, 85, 173, 85, 119, 85, 69, 86, 162, 85, 147, 85, 136, 85, 143, 85, 181, 85, 129, 85, 163, 85, 146, 85, 164, 85, 125, 85, 140, 85, 166, 85, 127, 85, 149, 85, 161, 85, 142, 85, 12, 87, 41, 88, 55, 88, 25, 88, 30, 88, 39, 88, 35, 88, 40, 88, 245, 87, 72, 88, 37, 88, 28, 88, 27, 88, 51, 88, 63, 88, 54, 88, 46, 88, 57, 88, 56, 88, 45, 88, 44, 88, 59, 88, 97, 89, 175, 90, 148, 90, 159, 90, 122, 90, 162, 90, 158, 90, 120, 90, 166, 90, 124, 90, 165, 90, 172, 90, 149, 90, 174, 90, 55, 90, 132, 90, 138, 90, 151, 90, 131, 90, 139, 90, 169, 90, 123, 90, 125, 90, 140, 90, 156, 90, 143, 90, 147, 90, 157, 90, 234, 91, 205, 91, 203, 91, 212, 91, 209, 91, 202, 91, 206, 91, 12, 92, 48, 92, 55, 93, 67, 93, 107, 93, 65, 93, 75, 93, 63, 93, 53, 93, 81, 93, 78, 93, 85, 93, 51, 93, 58, 93, 82, 93, 61, 93, 49, 93, 89, 93, 66, 93, 57, 93, 73, 93, 56, 93, 60, 93, 50, 93, 54, 93, 64, 93, 69, 93, 68, 94, 65, 94, 88, 95, 166, 95, 165, 95, 171, 95, 201, 96, 185, 96, 204, 96, 226, 96, 206, 96, 196, 96, 20, 97, 242, 96, 10, 97, 22, 97, 5, 97, 245, 96, 19, 97, 248, 96, 252, 96, 254, 96, 193, 96, 3, 97, 24, 97, 29, 97, 16, 97, 255, 96, 4, 97, 11, 97, 74, 98, 148, 99, 177, 99, 176, 99, 206, 99, 229, 99, 232, 99, 239, 99, 195, 99, 157, 100, 243, 99, 202, 99, 224, 99, 246, 99, 213, 99, 242, 99, 245, 99, 97, 100, 223, 99, 190, 99, 221, 99, 220, 99, 196, 99, 216, 99, 211, 99, 194, 99, 199, 99, 204, 99, 203, 99, 200, 99, 240, 99, 215, 99, 217, 99, 50, 101, 103, 101, 106, 101, 100, 101, 92, 101, 104, 101, 101, 101, 140, 101, 157, 101, 158, 101, 174, 101, 208, 101, 210, 101, 124, 102, 108, 102, 123, 102, 128, 102, 113, 102, 121, 102, 106, 102, 114, 102, 1, 103, 12, 105, 211, 104, 4, 105, 220, 104, 42, 105, 236, 104, 234, 104, 241, 104, 15, 105, 214, 104, 247, 104, 235, 104, 228, 104, 246, 104, 19, 105, 16, 105, 243, 104, 225, 104, 7, 105, 204, 104, 8, 105, 112, 105, 180, 104, 17, 105, 239, 104, 198, 104, 20, 105, 248, 104, 208, 104, 253, 104, 252, 104, 232, 104, 11, 105, 10, 105, 23, 105, 206, 104, 200, 104, 221, 104, 222, 104, 230, 104, 244, 104, 209, 104, 6, 105, 212, 104, 233, 104, 21, 105, 37, 105, 199, 104, 57, 107, 59, 107, 63, 107, 60, 107, 148, 107, 151, 107, 153, 107, 149, 107, 189, 107, 240, 107, 242, 107, 243, 107, 48, 108, 252, 109, 70, 110, 71, 110, 31, 110, 73, 110, 136, 110, 60, 110, 61, 110, 69, 110, 98, 110, 43, 110, 63, 110, 65, 110, 93, 110, 115, 110, 28, 110, 51, 110, 75, 110, 64, 110, 81, 110, 59, 110, 3, 110, 46, 110, 94, 110, 104, 110, 92, 110, 97, 110, 49, 110, 40, 110, 96, 110, 113, 110, 107, 110, 57, 110, 34, 110, 48, 110, 83, 110, 101, 110, 39, 110, 120, 110, 100, 110, 119, 110, 85, 110, 121, 110, 82, 110, 102, 110, 53, 110, 54, 110, 90, 110, 32, 113, 30, 113, 47, 113, 251, 112, 46, 113, 49, 113, 35, 113, 37, 113, 34, 113, 50, 113, 31, 113, 40, 113, 58, 113, 27, 113, 75, 114, 90, 114, 136, 114, 137, 114, 134, 114, 133, 114, 139, 114, 18, 115, 11, 115, 48, 115, 34, 115, 49, 115, 51, 115, 39, 115, 50, 115, 45, 115, 38, 115, 35, 115, 53, 115, 12, 115, 46, 116, 44, 116, 48, 116, 43, 116, 22, 116, 26, 116, 33, 116, 45, 116, 49, 116, 36, 116, 35, 116, 29, 116, 41, 116, 32, 116, 50, 116, 251, 116, 47, 117, 111, 117, 108, 117, 231, 117, 218, 117, 225, 117, 230, 117, 221, 117, 223, 117, 228, 117, 215, 117, 149, 118, 146, 118, 218, 118, 70, 119, 71, 119, 68, 119, 77, 119, 69, 119, 74, 119, 78, 119, 75, 119, 76, 119, 222, 119, 236, 119, 96, 120, 100, 120, 101, 120, 92, 120, 109, 120, 113, 120, 106, 120, 110, 120, 112, 120, 105, 120, 104, 120, 94, 120, 98, 120, 116, 121, 115, 121, 114, 121, 112, 121, 2, 122, 10, 122, 3, 122, 12, 122, 4, 122, 153, 122, 230, 122, 228, 122, 74, 123, 59, 123, 68, 123, 72, 123, 76, 123, 78, 123, 64, 123, 88, 123, 69, 123, 162, 124, 158, 124, 168, 124, 161, 124, 88, 125, 111, 125, 99, 125, 83, 125, 86, 125, 103, 125, 106, 125, 79, 125, 109, 125, 92, 125, 107, 125, 82, 125, 84, 125, 105, 125, 81, 125, 95, 125, 78, 125, 62, 127, 63, 127, 101, 127, 102, 127, 162, 127, 160, 127, 161, 127, 215, 127, 81, 128, 79, 128, 80, 128, 254, 128, 212, 128, 67, 129, 74, 129, 82, 129, 79, 129, 71, 129, 61, 129, 77, 129, 58, 129, 230, 129, 238, 129, 247, 129, 248, 129, 249, 129, 4, 130, 60, 130, 61, 130, 63, 130, 117, 130, 59, 131, 207, 131, 249, 131, 35, 132, 192, 131, 232, 131, 18, 132, 231, 131, 228, 131, 252, 131, 246, 131, 16, 132, 198, 131, 200, 131, 235, 131, 227, 131, 191, 131, 1, 132, 221, 131, 229, 131, 216, 131, 255, 131, 225, 131, 203, 131, 206, 131, 214, 131, 245, 131, 201, 131, 9, 132, 15, 132, 222, 131, 17, 132, 6, 132, 194, 131, 243, 131, 213, 131, 250, 131, 199, 131, 209, 131, 234, 131, 19, 132, 195, 131, 236, 131, 238, 131, 196, 131, 251, 131, 215, 131, 226, 131, 27, 132, 219, 131, 254, 131, 216, 134, 226, 134, 230, 134, 211, 134, 227, 134, 218, 134, 234, 134, 221, 134, 235, 134, 220, 134, 236, 134, 233, 134, 215, 134, 232, 134, 209, 134, 72, 136, 86, 136, 85, 136, 186, 136, 215, 136, 185, 136, 184, 136, 192, 136, 190, 136, 182, 136, 188, 136, 183, 136, 189, 136, 178, 136, 1, 137, 201, 136, 149, 137, 152, 137, 151, 137, 221, 137, 218, 137, 219, 137, 78, 138, 77, 138, 57, 138, 89, 138, 64, 138, 87, 138, 88, 138, 68, 138, 69, 138, 82, 138, 72, 138, 81, 138, 74, 138, 76, 138, 79, 138, 95, 140, 129, 140, 128, 140, 186, 140, 190, 140, 176, 140, 185, 140, 181, 140, 132, 141, 128, 141, 137, 141, 216, 141, 211, 141, 205, 141, 199, 141, 214, 141, 220, 141, 207, 141, 213, 141, 217, 141, 200, 141, 215, 141, 197, 141, 239, 142, 247, 142, 250, 142, 249, 142, 230, 142, 238, 142, 229, 142, 245, 142, 231, 142, 232, 142, 246, 142, 235, 142, 241, 142, 236, 142, 244, 142, 233, 142, 45, 144, 52, 144, 47, 144, 6, 145, 44, 145, 4, 145, 255, 144, 252, 144, 8, 145, 249, 144, 251, 144, 1, 145, 0, 145, 7, 145, 5, 145, 3, 145, 97, 145, 100, 145, 95, 145, 98, 145, 96, 145, 1, 146, 10, 146, 37, 146, 3, 146, 26, 146, 38, 146, 15, 146, 12, 146, 0, 146, 18, 146, 255, 145, 253, 145, 6, 146, 4, 146, 39, 146, 2, 146, 28, 146, 36, 146, 25, 146, 23, 146, 5, 146, 22, 146, 123, 149, 141, 149, 140, 149, 144, 149, 135, 150, 126, 150, 136, 150, 137, 150, 131, 150, 128, 150, 194, 150, 200, 150, 195, 150, 241, 150, 240, 150, 108, 151, 112, 151, 110, 151, 7, 152, 169, 152, 235, 152, 230, 156, 249, 158, 131, 78, 132, 78, 182, 78, 189, 80, 191, 80, 198, 80, 174, 80, 196, 80, 202, 80, 180, 80, 200, 80, 194, 80, 176, 80, 193, 80, 186, 80, 177, 80, 203, 80, 201, 80, 182, 80, 184, 80, 215, 81, 122, 82, 120, 82, 123, 82, 124, 82, 195, 85, 219, 85, 204, 85, 208, 85, 203, 85, 202, 85, 221, 85, 192, 85, 212, 85, 196, 85, 233, 85, 191, 85, 210, 85, 141, 85, 207, 85, 213, 85, 226, 85, 214, 85, 200, 85, 242, 85, 205, 85, 217, 85, 194, 85, 20, 87, 83, 88, 104, 88, 100, 88, 79, 88, 77, 88, 73, 88, 111, 88, 85, 88, 78, 88, 93, 88, 89, 88, 101, 88, 91, 88, 61, 88, 99, 88, 113, 88, 252, 88, 199, 90, 196, 90, 203, 90, 186, 90, 184, 90, 177, 90, 181, 90, 176, 90, 191, 90, 200, 90, 187, 90, 198, 90, 183, 90, 192, 90, 202, 90, 180, 90, 182, 90, 205, 90, 185, 90, 144, 90, 214, 91, 216, 91, 217, 91, 31, 92, 51, 92, 113, 93, 99, 93, 74, 93, 101, 93, 114, 93, 108, 93, 94, 93, 104, 93, 103, 93, 98, 93, 240, 93, 79, 94, 78, 94, 74, 94, 77, 94, 75, 94, 197, 94, 204, 94, 198, 94, 203, 94, 199, 94, 64, 95, 175, 95, 173, 95, 247, 96, 73, 97, 74, 97, 43, 97, 69, 97, 54, 97, 50, 97, 46, 97, 70, 97, 47, 97, 79, 97, 41, 97, 64, 97, 32, 98, 104, 145, 35, 98, 37, 98, 36, 98, 197, 99, 241, 99, 235, 99, 16, 100, 18, 100, 9, 100, 32, 100, 36, 100, 51, 100, 67, 100, 31, 100, 21, 100, 24, 100, 57, 100, 55, 100, 34, 100, 35, 100, 12, 100, 38, 100, 48, 100, 40, 100, 65, 100, 53, 100, 47, 100, 10, 100, 26, 100, 64, 100, 37, 100, 39, 100, 11, 100, 231, 99, 27, 100, 46, 100, 33, 100, 14, 100, 111, 101, 146, 101, 211, 101, 134, 102, 140, 102, 149, 102, 144, 102, 139, 102, 138, 102, 153, 102, 148, 102, 120, 102, 32, 103, 102, 105, 95, 105, 56, 105, 78, 105, 98, 105, 113, 105, 63, 105, 69, 105, 106, 105, 57, 105, 66, 105, 87, 105, 89, 105, 122, 105, 72, 105, 73, 105, 53, 105, 108, 105, 51, 105, 61, 105, 101, 105, 240, 104, 120, 105, 52, 105, 105, 105, 64, 105, 111, 105, 68, 105, 118, 105, 88, 105, 65, 105, 116, 105, 76, 105, 59, 105, 75, 105, 55, 105, 92, 105, 79, 105, 81, 105, 50, 105, 82, 105, 47, 105, 123, 105, 60, 105, 70, 107, 69, 107, 67, 107, 66, 107, 72, 107, 65, 107, 155, 107, 13, 250, 251, 107, 252, 107, 249, 107, 247, 107, 248, 107, 155, 110, 214, 110, 200, 110, 143, 110, 192, 110, 159, 110, 147, 110, 148, 110, 160, 110, 177, 110, 185, 110, 198, 110, 210, 110, 189, 110, 193, 110, 158, 110, 201, 110, 183, 110, 176, 110, 205, 110, 166, 110, 207, 110, 178, 110, 190, 110, 195, 110, 220, 110, 216, 110, 153, 110, 146, 110, 142, 110, 141, 110, 164, 110, 161, 110, 191, 110, 179, 110, 208, 110, 202, 110, 151, 110, 174, 110, 163, 110, 71, 113, 84, 113, 82, 113, 99, 113, 96, 113, 65, 113, 93, 113, 98, 113, 114, 113, 120, 113, 106, 113, 97, 113, 66, 113, 88, 113, 67, 113, 75, 113, 112, 113, 95, 113, 80, 113, 83, 113, 68, 113, 77, 113, 90, 113, 79, 114, 141, 114, 140, 114, 145, 114, 144, 114, 142, 114, 60, 115, 66, 115, 59, 115, 58, 115, 64, 115, 74, 115, 73, 115, 68, 116, 74, 116, 75, 116, 82, 116, 81, 116, 87, 116, 64, 116, 79, 116, 80, 116, 78, 116, 66, 116, 70, 116, 77, 116, 84, 116, 225, 116, 255, 116, 254, 116, 253, 116, 29, 117, 121, 117, 119, 117, 131, 105, 239, 117, 15, 118, 3, 118, 247, 117, 254, 117, 252, 117, 249, 117, 248, 117, 16, 118, 251, 117, 246, 117, 237, 117, 245, 117, 253, 117, 153, 118, 181, 118, 221, 118, 85, 119, 95, 119, 96, 119, 82, 119, 86, 119, 90, 119, 105, 119, 103, 119, 84, 119, 89, 119, 109, 119, 224, 119, 135, 120, 154, 120, 148, 120, 143, 120, 132, 120, 149, 120, 133, 120, 134, 120, 161, 120, 131, 120, 121, 120, 153, 120, 128, 120, 150, 120, 123, 120, 124, 121, 130, 121, 125, 121, 121, 121, 17, 122, 24, 122, 25, 122, 18, 122, 23, 122, 21, 122, 34, 122, 19, 122, 27, 122, 16, 122, 163, 122, 162, 122, 158, 122, 235, 122, 102, 123, 100, 123, 109, 123, 116, 123, 105, 123, 114, 123, 101, 123, 115, 123, 113, 123, 112, 123, 97, 123, 120, 123, 118, 123, 99, 123, 178, 124, 180, 124, 175, 124, 136, 125, 134, 125, 128, 125, 141, 125, 127, 125, 133, 125, 122, 125, 142, 125, 123, 125, 131, 125, 124, 125, 140, 125, 148, 125, 132, 125, 125, 125, 146, 125, 109, 127, 107, 127, 103, 127, 104, 127, 108, 127, 166, 127, 165, 127, 167, 127, 219, 127, 220, 127, 33, 128, 100, 129, 96, 129, 119, 129, 92, 129, 105, 129, 91, 129, 98, 129, 114, 129, 33, 103, 94, 129, 118, 129, 103, 129, 111, 129, 68, 129, 97, 129, 29, 130, 73, 130, 68, 130, 64, 130, 66, 130, 69, 130, 241, 132, 63, 132, 86, 132, 118, 132, 121, 132, 143, 132, 141, 132, 101, 132, 81, 132, 64, 132, 134, 132, 103, 132, 48, 132, 77, 132, 125, 132, 90, 132, 89, 132, 116, 132, 115, 132, 93, 132, 7, 133, 94, 132, 55, 132, 58, 132, 52, 132, 122, 132, 67, 132, 120, 132, 50, 132, 69, 132, 41, 132, 217, 131, 75, 132, 47, 132, 66, 132, 45, 132, 95, 132, 112, 132, 57, 132, 78, 132, 76, 132, 82, 132, 111, 132, 197, 132, 142, 132, 59, 132, 71, 132, 54, 132, 51, 132, 104, 132, 126, 132, 68, 132, 43, 132, 96, 132, 84, 132, 110, 132, 80, 132, 11, 135, 4, 135, 247, 134, 12, 135, 250, 134, 214, 134, 245, 134, 77, 135, 248, 134, 14, 135, 9, 135, 1, 135, 246, 134, 13, 135, 5, 135, 214, 136, 203, 136, 205, 136, 206, 136, 222, 136, 219, 136, 218, 136, 204, 136, 208, 136, 133, 137, 155, 137, 223, 137, 229, 137, 228, 137, 225, 137, 224, 137, 226, 137, 220, 137, 230, 137, 118, 138, 134, 138, 127, 138, 97, 138, 63, 138, 119, 138, 130, 138, 132, 138, 117, 138, 131, 138, 129, 138, 116, 138, 122, 138, 60, 140, 75, 140, 74, 140, 101, 140, 100, 140, 102, 140, 134, 140, 132, 140, 133, 140, 204, 140, 104, 141, 105, 141, 145, 141, 140, 141, 142, 141, 143, 141, 141, 141, 147, 141, 148, 141, 144, 141, 146, 141, 240, 141, 224, 141, 236, 141, 241, 141, 238, 141, 208, 141, 233, 141, 227, 141, 226, 141, 231, 141, 242, 141, 235, 141, 244, 141, 6, 143, 255, 142, 1, 143, 0, 143, 5, 143, 7, 143, 8, 143, 2, 143, 11, 143, 82, 144, 63, 144, 68, 144, 73, 144, 61, 144, 16, 145, 13, 145, 15, 145, 17, 145, 22, 145, 20, 145, 11, 145, 14, 145, 110, 145, 111, 145, 72, 146, 82, 146, 48, 146, 58, 146, 102, 146, 51, 146, 101, 146, 94, 146, 131, 146, 46, 146, 74, 146, 70, 146, 109, 146, 108, 146, 79, 146, 96, 146, 103, 146, 111, 146, 54, 146, 97, 146, 112, 146, 49, 146, 84, 146, 99, 146, 80, 146, 114, 146, 78, 146, 83, 146, 76, 146, 86, 146, 50, 146, 159, 149, 156, 149, 158, 149, 155, 149, 146, 150, 147, 150, 145, 150, 151, 150, 206, 150, 250, 150, 253, 150, 248, 150, 245, 150, 115, 151, 119, 151, 120, 151, 114, 151, 15, 152, 13, 152, 14, 152, 172, 152, 246, 152, 249, 152, 175, 153, 178, 153, 176, 153, 181, 153, 173, 154, 171, 154, 91, 155, 234, 156, 237, 156, 231, 156, 128, 158, 253, 158, 230, 80, 212, 80, 215, 80, 232, 80, 243, 80, 219, 80, 234, 80, 221, 80, 228, 80, 211, 80, 236, 80, 240, 80, 239, 80, 227, 80, 224, 80, 216, 81, 128, 82, 129, 82, 233, 82, 235, 82, 48, 83, 172, 83, 39, 86, 21, 86, 12, 86, 18, 86, 252, 85, 15, 86, 28, 86, 1, 86, 19, 86, 2, 86, 250, 85, 29, 86, 4, 86, 255, 85, 249, 85, 137, 88, 124, 88, 144, 88, 152, 88, 134, 88, 129, 88, 127, 88, 116, 88, 139, 88, 122, 88, 135, 88, 145, 88, 142, 88, 118, 88, 130, 88, 136, 88, 123, 88, 148, 88, 143, 88, 254, 88, 107, 89, 220, 90, 238, 90, 229, 90, 213, 90, 234, 90, 218, 90, 237, 90, 235, 90, 243, 90, 226, 90, 224, 90, 219, 90, 236, 90, 222, 90, 221, 90, 217, 90, 232, 90, 223, 90, 119, 91, 224, 91, 227, 91, 99, 92, 130, 93, 128, 93, 125, 93, 134, 93, 122, 93, 129, 93, 119, 93, 138, 93, 137, 93, 136, 93, 126, 93, 124, 93, 141, 93, 121, 93, 127, 93, 88, 94, 89, 94, 83, 94, 216, 94, 209, 94, 215, 94, 206, 94, 220, 94, 213, 94, 217, 94, 210, 94, 212, 94, 68, 95, 67, 95, 111, 95, 182, 95, 44, 97, 40, 97, 65, 97, 94, 97, 113, 97, 115, 97, 82, 97, 83, 97, 114, 97, 108, 97, 128, 97, 116, 97, 84, 97, 122, 97, 91, 97, 101, 97, 59, 97, 106, 97, 97, 97, 86, 97, 41, 98, 39, 98, 43, 98, 43, 100, 77, 100, 91, 100, 93, 100, 116, 100, 118, 100, 114, 100, 115, 100, 125, 100, 117, 100, 102, 100, 166, 100, 78, 100, 130, 100, 94, 100, 92, 100, 75, 100, 83, 100, 96, 100, 80, 100, 127, 100, 63, 100, 108, 100, 107, 100, 89, 100, 101, 100, 119, 100, 115, 101, 160, 101, 161, 102, 160, 102, 159, 102, 5, 103, 4, 103, 34, 103, 177, 105, 182, 105, 201, 105, 160, 105, 206, 105, 150, 105, 176, 105, 172, 105, 188, 105, 145, 105, 153, 105, 142, 105, 167, 105, 141, 105, 169, 105, 190, 105, 175, 105, 191, 105, 196, 105, 189, 105, 164, 105, 212, 105, 185, 105, 202, 105, 154, 105, 207, 105, 179, 105, 147, 105, 170, 105, 161, 105, 158, 105, 217, 105, 151, 105, 144, 105, 194, 105, 181, 105, 165, 105, 198, 105, 74, 107, 77, 107, 75, 107, 158, 107, 159, 107, 160, 107, 195, 107, 196, 107, 254, 107, 206, 110, 245, 110, 241, 110, 3, 111, 37, 111, 248, 110, 55, 111, 251, 110, 46, 111, 9, 111, 78, 111, 25, 111, 26, 111, 39, 111, 24, 111, 59, 111, 18, 111, 237, 110, 10, 111, 54, 111, 115, 111, 249, 110, 238, 110, 45, 111, 64, 111, 48, 111, 60, 111, 53, 111, 235, 110, 7, 111, 14, 111, 67, 111, 5, 111, 253, 110, 246, 110, 57, 111, 28, 111, 252, 110, 58, 111, 31, 111, 13, 111, 30, 111, 8, 111, 33, 111, 135, 113, 144, 113, 137, 113, 128, 113, 133, 113, 130, 113, 143, 113, 123, 113, 134, 113, 129, 113, 151, 113, 68, 114, 83, 114, 151, 114, 149, 114, 147, 114, 67, 115, 77, 115, 81, 115, 76, 115, 98, 116, 115, 116, 113, 116, 117, 116, 114, 116, 103, 116, 110, 116, 0, 117, 2, 117, 3, 117, 125, 117, 144, 117, 22, 118, 8, 118, 12, 118, 21, 118, 17, 118, 10, 118, 20, 118, 184, 118, 129, 119, 124, 119, 133, 119, 130, 119, 110, 119, 128, 119, 111, 119, 126, 119, 131, 119, 178, 120, 170, 120, 180, 120, 173, 120, 168, 120, 126, 120, 171, 120, 158, 120, 165, 120, 160, 120, 172, 120, 162, 120, 164, 120, 152, 121, 138, 121, 139, 121, 150, 121, 149, 121, 148, 121, 147, 121, 151, 121, 136, 121, 146, 121, 144, 121, 43, 122, 74, 122, 48, 122, 47, 122, 40, 122, 38, 122, 168, 122, 171, 122, 172, 122, 238, 122, 136, 123, 156, 123, 138, 123, 145, 123, 144, 123, 150, 123, 141, 123, 140, 123, 155, 123, 142, 123, 133, 123, 152, 123, 132, 82, 153, 123, 164, 123, 130, 123, 187, 124, 191, 124, 188, 124, 186, 124, 167, 125, 183, 125, 194, 125, 163, 125, 170, 125, 193, 125, 192, 125, 197, 125, 157, 125, 206, 125, 196, 125, 198, 125, 203, 125, 204, 125, 175, 125, 185, 125, 150, 125, 188, 125, 159, 125, 166, 125, 174, 125, 169, 125, 161, 125, 201, 125, 115, 127, 226, 127, 227, 127, 229, 127, 222, 127, 36, 128, 93, 128, 92, 128, 137, 129, 134, 129, 131, 129, 135, 129, 141, 129, 140, 129, 139, 129, 21, 130, 151, 132, 164, 132, 161, 132, 159, 132, 186, 132, 206, 132, 194, 132, 172, 132, 174, 132, 171, 132, 185, 132, 180, 132, 193, 132, 205, 132, 170, 132, 154, 132, 177, 132, 208, 132, 157, 132, 167, 132, 187, 132, 162, 132, 148, 132, 199, 132, 204, 132, 155, 132, 169, 132, 175, 132, 168, 132, 214, 132, 152, 132, 182, 132, 207, 132, 160, 132, 215, 132, 212, 132, 210, 132, 219, 132, 176, 132, 145, 132, 97, 134, 51, 135, 35, 135, 40, 135, 107, 135, 64, 135], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 97052);
    allocate([46, 135, 30, 135, 33, 135, 25, 135, 27, 135, 67, 135, 44, 135, 65, 135, 62, 135, 70, 135, 32, 135, 50, 135, 42, 135, 45, 135, 60, 135, 18, 135, 58, 135, 49, 135, 53, 135, 66, 135, 38, 135, 39, 135, 56, 135, 36, 135, 26, 135, 48, 135, 17, 135, 247, 136, 231, 136, 241, 136, 242, 136, 250, 136, 254, 136, 238, 136, 252, 136, 246, 136, 251, 136, 240, 136, 236, 136, 235, 136, 157, 137, 161, 137, 159, 137, 158, 137, 233, 137, 235, 137, 232, 137, 171, 138, 153, 138, 139, 138, 146, 138, 143, 138, 150, 138, 61, 140, 104, 140, 105, 140, 213, 140, 207, 140, 215, 140, 150, 141, 9, 142, 2, 142, 255, 141, 13, 142, 253, 141, 10, 142, 3, 142, 7, 142, 6, 142, 5, 142, 254, 141, 0, 142, 4, 142, 16, 143, 17, 143, 14, 143, 13, 143, 35, 145, 28, 145, 32, 145, 34, 145, 31, 145, 29, 145, 26, 145, 36, 145, 33, 145, 27, 145, 122, 145, 114, 145, 121, 145, 115, 145, 165, 146, 164, 146, 118, 146, 155, 146, 122, 146, 160, 146, 148, 146, 170, 146, 141, 146, 166, 146, 154, 146, 171, 146, 121, 146, 151, 146, 127, 146, 163, 146, 238, 146, 142, 146, 130, 146, 149, 146, 162, 146, 125, 146, 136, 146, 161, 146, 138, 146, 134, 146, 140, 146, 153, 146, 167, 146, 126, 146, 135, 146, 169, 146, 157, 146, 139, 146, 45, 146, 158, 150, 161, 150, 255, 150, 88, 151, 125, 151, 122, 151, 126, 151, 131, 151, 128, 151, 130, 151, 123, 151, 132, 151, 129, 151, 127, 151, 206, 151, 205, 151, 22, 152, 173, 152, 174, 152, 2, 153, 0, 153, 7, 153, 157, 153, 156, 153, 195, 153, 185, 153, 187, 153, 186, 153, 194, 153, 189, 153, 199, 153, 177, 154, 227, 154, 231, 154, 62, 155, 63, 155, 96, 155, 97, 155, 95, 155, 241, 156, 242, 156, 245, 156, 167, 158, 255, 80, 3, 81, 48, 81, 248, 80, 6, 81, 7, 81, 246, 80, 254, 80, 11, 81, 12, 81, 253, 80, 10, 81, 139, 82, 140, 82, 241, 82, 239, 82, 72, 86, 66, 86, 76, 86, 53, 86, 65, 86, 74, 86, 73, 86, 70, 86, 88, 86, 90, 86, 64, 86, 51, 86, 61, 86, 44, 86, 62, 86, 56, 86, 42, 86, 58, 86, 26, 87, 171, 88, 157, 88, 177, 88, 160, 88, 163, 88, 175, 88, 172, 88, 165, 88, 161, 88, 255, 88, 255, 90, 244, 90, 253, 90, 247, 90, 246, 90, 3, 91, 248, 90, 2, 91, 249, 90, 1, 91, 7, 91, 5, 91, 15, 91, 103, 92, 153, 93, 151, 93, 159, 93, 146, 93, 162, 93, 147, 93, 149, 93, 160, 93, 156, 93, 161, 93, 154, 93, 158, 93, 105, 94, 93, 94, 96, 94, 92, 94, 243, 125, 219, 94, 222, 94, 225, 94, 73, 95, 178, 95, 139, 97, 131, 97, 121, 97, 177, 97, 176, 97, 162, 97, 137, 97, 155, 97, 147, 97, 175, 97, 173, 97, 159, 97, 146, 97, 170, 97, 161, 97, 141, 97, 102, 97, 179, 97, 45, 98, 110, 100, 112, 100, 150, 100, 160, 100, 133, 100, 151, 100, 156, 100, 143, 100, 139, 100, 138, 100, 140, 100, 163, 100, 159, 100, 104, 100, 177, 100, 152, 100, 118, 101, 122, 101, 121, 101, 123, 101, 178, 101, 179, 101, 181, 102, 176, 102, 169, 102, 178, 102, 183, 102, 170, 102, 175, 102, 0, 106, 6, 106, 23, 106, 229, 105, 248, 105, 21, 106, 241, 105, 228, 105, 32, 106, 255, 105, 236, 105, 226, 105, 27, 106, 29, 106, 254, 105, 39, 106, 242, 105, 238, 105, 20, 106, 247, 105, 231, 105, 64, 106, 8, 106, 230, 105, 251, 105, 13, 106, 252, 105, 235, 105, 9, 106, 4, 106, 24, 106, 37, 106, 15, 106, 246, 105, 38, 106, 7, 106, 244, 105, 22, 106, 81, 107, 165, 107, 163, 107, 162, 107, 166, 107, 1, 108, 0, 108, 255, 107, 2, 108, 65, 111, 38, 111, 126, 111, 135, 111, 198, 111, 146, 111, 141, 111, 137, 111, 140, 111, 98, 111, 79, 111, 133, 111, 90, 111, 150, 111, 118, 111, 108, 111, 130, 111, 85, 111, 114, 111, 82, 111, 80, 111, 87, 111, 148, 111, 147, 111, 93, 111, 0, 111, 97, 111, 107, 111, 125, 111, 103, 111, 144, 111, 83, 111, 139, 111, 105, 111, 127, 111, 149, 111, 99, 111, 119, 111, 106, 111, 123, 111, 178, 113, 175, 113, 155, 113, 176, 113, 160, 113, 154, 113, 169, 113, 181, 113, 157, 113, 165, 113, 158, 113, 164, 113, 161, 113, 170, 113, 156, 113, 167, 113, 179, 113, 152, 114, 154, 114, 88, 115, 82, 115, 94, 115, 95, 115, 96, 115, 93, 115, 91, 115, 97, 115, 90, 115, 89, 115, 98, 115, 135, 116, 137, 116, 138, 116, 134, 116, 129, 116, 125, 116, 133, 116, 136, 116, 124, 116, 121, 116, 8, 117, 7, 117, 126, 117, 37, 118, 30, 118, 25, 118, 29, 118, 28, 118, 35, 118, 26, 118, 40, 118, 27, 118, 156, 118, 157, 118, 158, 118, 155, 118, 141, 119, 143, 119, 137, 119, 136, 119, 205, 120, 187, 120, 207, 120, 204, 120, 209, 120, 206, 120, 212, 120, 200, 120, 195, 120, 196, 120, 201, 120, 154, 121, 161, 121, 160, 121, 156, 121, 162, 121, 155, 121, 118, 107, 57, 122, 178, 122, 180, 122, 179, 122, 183, 123, 203, 123, 190, 123, 172, 123, 206, 123, 175, 123, 185, 123, 202, 123, 181, 123, 197, 124, 200, 124, 204, 124, 203, 124, 247, 125, 219, 125, 234, 125, 231, 125, 215, 125, 225, 125, 3, 126, 250, 125, 230, 125, 246, 125, 241, 125, 240, 125, 238, 125, 223, 125, 118, 127, 172, 127, 176, 127, 173, 127, 237, 127, 235, 127, 234, 127, 236, 127, 230, 127, 232, 127, 100, 128, 103, 128, 163, 129, 159, 129, 158, 129, 149, 129, 162, 129, 153, 129, 151, 129, 22, 130, 79, 130, 83, 130, 82, 130, 80, 130, 78, 130, 81, 130, 36, 133, 59, 133, 15, 133, 0, 133, 41, 133, 14, 133, 9, 133, 13, 133, 31, 133, 10, 133, 39, 133, 28, 133, 251, 132, 43, 133, 250, 132, 8, 133, 12, 133, 244, 132, 42, 133, 242, 132, 21, 133, 247, 132, 235, 132, 243, 132, 252, 132, 18, 133, 234, 132, 233, 132, 22, 133, 254, 132, 40, 133, 29, 133, 46, 133, 2, 133, 253, 132, 30, 133, 246, 132, 49, 133, 38, 133, 231, 132, 232, 132, 240, 132, 239, 132, 249, 132, 24, 133, 32, 133, 48, 133, 11, 133, 25, 133, 47, 133, 98, 134, 86, 135, 99, 135, 100, 135, 119, 135, 225, 135, 115, 135, 88, 135, 84, 135, 91, 135, 82, 135, 97, 135, 90, 135, 81, 135, 94, 135, 109, 135, 106, 135, 80, 135, 78, 135, 95, 135, 93, 135, 111, 135, 108, 135, 122, 135, 110, 135, 92, 135, 101, 135, 79, 135, 123, 135, 117, 135, 98, 135, 103, 135, 105, 135, 90, 136, 5, 137, 12, 137, 20, 137, 11, 137, 23, 137, 24, 137, 25, 137, 6, 137, 22, 137, 17, 137, 14, 137, 9, 137, 162, 137, 164, 137, 163, 137, 237, 137, 240, 137, 236, 137, 207, 138, 198, 138, 184, 138, 211, 138, 209, 138, 212, 138, 213, 138, 187, 138, 215, 138, 190, 138, 192, 138, 197, 138, 216, 138, 195, 138, 186, 138, 189, 138, 217, 138, 62, 140, 77, 140, 143, 140, 229, 140, 223, 140, 217, 140, 232, 140, 218, 140, 221, 140, 231, 140, 160, 141, 156, 141, 161, 141, 155, 141, 32, 142, 35, 142, 37, 142, 36, 142, 46, 142, 21, 142, 27, 142, 22, 142, 17, 142, 25, 142, 38, 142, 39, 142, 20, 142, 18, 142, 24, 142, 19, 142, 28, 142, 23, 142, 26, 142, 44, 143, 36, 143, 24, 143, 26, 143, 32, 143, 35, 143, 22, 143, 23, 143, 115, 144, 112, 144, 111, 144, 103, 144, 107, 144, 47, 145, 43, 145, 41, 145, 42, 145, 50, 145, 38, 145, 46, 145, 133, 145, 134, 145, 138, 145, 129, 145, 130, 145, 132, 145, 128, 145, 208, 146, 195, 146, 196, 146, 192, 146, 217, 146, 182, 146, 207, 146, 241, 146, 223, 146, 216, 146, 233, 146, 215, 146, 221, 146, 204, 146, 239, 146, 194, 146, 232, 146, 202, 146, 200, 146, 206, 146, 230, 146, 205, 146, 213, 146, 201, 146, 224, 146, 222, 146, 231, 146, 209, 146, 211, 146, 181, 146, 225, 146, 198, 146, 180, 146, 124, 149, 172, 149, 171, 149, 174, 149, 176, 149, 164, 150, 162, 150, 211, 150, 5, 151, 8, 151, 2, 151, 90, 151, 138, 151, 142, 151, 136, 151, 208, 151, 207, 151, 30, 152, 29, 152, 38, 152, 41, 152, 40, 152, 32, 152, 27, 152, 39, 152, 178, 152, 8, 153, 250, 152, 17, 153, 20, 153, 22, 153, 23, 153, 21, 153, 220, 153, 205, 153, 207, 153, 211, 153, 212, 153, 206, 153, 201, 153, 214, 153, 216, 153, 203, 153, 215, 153, 204, 153, 179, 154, 236, 154, 235, 154, 243, 154, 242, 154, 241, 154, 70, 155, 67, 155, 103, 155, 116, 155, 113, 155, 102, 155, 118, 155, 117, 155, 112, 155, 104, 155, 100, 155, 108, 155, 252, 156, 250, 156, 253, 156, 255, 156, 247, 156, 7, 157, 0, 157, 249, 156, 251, 156, 8, 157, 5, 157, 4, 157, 131, 158, 211, 158, 15, 159, 16, 159, 28, 81, 19, 81, 23, 81, 26, 81, 17, 81, 222, 81, 52, 83, 225, 83, 112, 86, 96, 86, 110, 86, 115, 86, 102, 86, 99, 86, 109, 86, 114, 86, 94, 86, 119, 86, 28, 87, 27, 87, 200, 88, 189, 88, 201, 88, 191, 88, 186, 88, 194, 88, 188, 88, 198, 88, 23, 91, 25, 91, 27, 91, 33, 91, 20, 91, 19, 91, 16, 91, 22, 91, 40, 91, 26, 91, 32, 91, 30, 91, 239, 91, 172, 93, 177, 93, 169, 93, 167, 93, 181, 93, 176, 93, 174, 93, 170, 93, 168, 93, 178, 93, 173, 93, 175, 93, 180, 93, 103, 94, 104, 94, 102, 94, 111, 94, 233, 94, 231, 94, 230, 94, 232, 94, 229, 94, 75, 95, 188, 95, 157, 97, 168, 97, 150, 97, 197, 97, 180, 97, 198, 97, 193, 97, 204, 97, 186, 97, 191, 97, 184, 97, 140, 97, 215, 100, 214, 100, 208, 100, 207, 100, 201, 100, 189, 100, 137, 100, 195, 100, 219, 100, 243, 100, 217, 100, 51, 101, 127, 101, 124, 101, 162, 101, 200, 102, 190, 102, 192, 102, 202, 102, 203, 102, 207, 102, 189, 102, 187, 102, 186, 102, 204, 102, 35, 103, 52, 106, 102, 106, 73, 106, 103, 106, 50, 106, 104, 106, 62, 106, 93, 106, 109, 106, 118, 106, 91, 106, 81, 106, 40, 106, 90, 106, 59, 106, 63, 106, 65, 106, 106, 106, 100, 106, 80, 106, 79, 106, 84, 106, 111, 106, 105, 106, 96, 106, 60, 106, 94, 106, 86, 106, 85, 106, 77, 106, 78, 106, 70, 106, 85, 107, 84, 107, 86, 107, 167, 107, 170, 107, 171, 107, 200, 107, 199, 107, 4, 108, 3, 108, 6, 108, 173, 111, 203, 111, 163, 111, 199, 111, 188, 111, 206, 111, 200, 111, 94, 111, 196, 111, 189, 111, 158, 111, 202, 111, 168, 111, 4, 112, 165, 111, 174, 111, 186, 111, 172, 111, 170, 111, 207, 111, 191, 111, 184, 111, 162, 111, 201, 111, 171, 111, 205, 111, 175, 111, 178, 111, 176, 111, 197, 113, 194, 113, 191, 113, 184, 113, 214, 113, 192, 113, 193, 113, 203, 113, 212, 113, 202, 113, 199, 113, 207, 113, 189, 113, 216, 113, 188, 113, 198, 113, 218, 113, 219, 113, 157, 114, 158, 114, 105, 115, 102, 115, 103, 115, 108, 115, 101, 115, 107, 115, 106, 115, 127, 116, 154, 116, 160, 116, 148, 116, 146, 116, 149, 116, 161, 116, 11, 117, 128, 117, 47, 118, 45, 118, 49, 118, 61, 118, 51, 118, 60, 118, 53, 118, 50, 118, 48, 118, 187, 118, 230, 118, 154, 119, 157, 119, 161, 119, 156, 119, 155, 119, 162, 119, 163, 119, 149, 119, 153, 119, 151, 119, 221, 120, 233, 120, 229, 120, 234, 120, 222, 120, 227, 120, 219, 120, 225, 120, 226, 120, 237, 120, 223, 120, 224, 120, 164, 121, 68, 122, 72, 122, 71, 122, 182, 122, 184, 122, 181, 122, 177, 122, 183, 122, 222, 123, 227, 123, 231, 123, 221, 123, 213, 123, 229, 123, 218, 123, 232, 123, 249, 123, 212, 123, 234, 123, 226, 123, 220, 123, 235, 123, 216, 123, 223, 123, 210, 124, 212, 124, 215, 124, 208, 124, 209, 124, 18, 126, 33, 126, 23, 126, 12, 126, 31, 126, 32, 126, 19, 126, 14, 126, 28, 126, 21, 126, 26, 126, 34, 126, 11, 126, 15, 126, 22, 126, 13, 126, 20, 126, 37, 126, 36, 126, 67, 127, 123, 127, 124, 127, 122, 127, 177, 127, 239, 127, 42, 128, 41, 128, 108, 128, 177, 129, 166, 129, 174, 129, 185, 129, 181, 129, 171, 129, 176, 129, 172, 129, 180, 129, 178, 129, 183, 129, 167, 129, 242, 129, 85, 130, 86, 130, 87, 130, 86, 133, 69, 133, 107, 133, 77, 133, 83, 133, 97, 133, 88, 133, 64, 133, 70, 133, 100, 133, 65, 133, 98, 133, 68, 133, 81, 133, 71, 133, 99, 133, 62, 133, 91, 133, 113, 133, 78, 133, 110, 133, 117, 133, 85, 133, 103, 133, 96, 133, 140, 133, 102, 133, 93, 133, 84, 133, 101, 133, 108, 133, 99, 134, 101, 134, 100, 134, 155, 135, 143, 135, 151, 135, 147, 135, 146, 135, 136, 135, 129, 135, 150, 135, 152, 135, 121, 135, 135, 135, 163, 135, 133, 135, 144, 135, 145, 135, 157, 135, 132, 135, 148, 135, 156, 135, 154, 135, 137, 135, 30, 137, 38, 137, 48, 137, 45, 137, 46, 137, 39, 137, 49, 137, 34, 137, 41, 137, 35, 137, 47, 137, 44, 137, 31, 137, 241, 137, 224, 138, 226, 138, 242, 138, 244, 138, 245, 138, 221, 138, 20, 139, 228, 138, 223, 138, 240, 138, 200, 138, 222, 138, 225, 138, 232, 138, 255, 138, 239, 138, 251, 138, 145, 140, 146, 140, 144, 140, 245, 140, 238, 140, 241, 140, 240, 140, 243, 140, 108, 141, 110, 141, 165, 141, 167, 141, 51, 142, 62, 142, 56, 142, 64, 142, 69, 142, 54, 142, 60, 142, 61, 142, 65, 142, 48, 142, 63, 142, 189, 142, 54, 143, 46, 143, 53, 143, 50, 143, 57, 143, 55, 143, 52, 143, 118, 144, 121, 144, 123, 144, 134, 144, 250, 144, 51, 145, 53, 145, 54, 145, 147, 145, 144, 145, 145, 145, 141, 145, 143, 145, 39, 147, 30, 147, 8, 147, 31, 147, 6, 147, 15, 147, 122, 147, 56, 147, 60, 147, 27, 147, 35, 147, 18, 147, 1, 147, 70, 147, 45, 147, 14, 147, 13, 147, 203, 146, 29, 147, 250, 146, 37, 147, 19, 147, 249, 146, 247, 146, 52, 147, 2, 147, 36, 147, 255, 146, 41, 147, 57, 147, 53, 147, 42, 147, 20, 147, 12, 147, 11, 147, 254, 146, 9, 147, 0, 147, 251, 146, 22, 147, 188, 149, 205, 149, 190, 149, 185, 149, 186, 149, 182, 149, 191, 149, 181, 149, 189, 149, 169, 150, 212, 150, 11, 151, 18, 151, 16, 151, 153, 151, 151, 151, 148, 151, 240, 151, 248, 151, 53, 152, 47, 152, 50, 152, 36, 153, 31, 153, 39, 153, 41, 153, 158, 153, 238, 153, 236, 153, 229, 153, 228, 153, 240, 153, 227, 153, 234, 153, 233, 153, 231, 153, 185, 154, 191, 154, 180, 154, 187, 154, 246, 154, 250, 154, 249, 154, 247, 154, 51, 155, 128, 155, 133, 155, 135, 155, 124, 155, 126, 155, 123, 155, 130, 155, 147, 155, 146, 155, 144, 155, 122, 155, 149, 155, 125, 155, 136, 155, 37, 157, 23, 157, 32, 157, 30, 157, 20, 157, 41, 157, 29, 157, 24, 157, 34, 157, 16, 157, 25, 157, 31, 157, 136, 158, 134, 158, 135, 158, 174, 158, 173, 158, 213, 158, 214, 158, 250, 158, 18, 159, 61, 159, 38, 81, 37, 81, 34, 81, 36, 81, 32, 81, 41, 81, 244, 82, 147, 86, 140, 86, 141, 86, 134, 86, 132, 86, 131, 86, 126, 86, 130, 86, 127, 86, 129, 86, 214, 88, 212, 88, 207, 88, 210, 88, 45, 91, 37, 91, 50, 91, 35, 91, 44, 91, 39, 91, 38, 91, 47, 91, 46, 91, 123, 91, 241, 91, 242, 91, 183, 93, 108, 94, 106, 94, 190, 95, 187, 95, 195, 97, 181, 97, 188, 97, 231, 97, 224, 97, 229, 97, 228, 97, 232, 97, 222, 97, 239, 100, 233, 100, 227, 100, 235, 100, 228, 100, 232, 100, 129, 101, 128, 101, 182, 101, 218, 101, 210, 102, 141, 106, 150, 106, 129, 106, 165, 106, 137, 106, 159, 106, 155, 106, 161, 106, 158, 106, 135, 106, 147, 106, 142, 106, 149, 106, 131, 106, 168, 106, 164, 106, 145, 106, 127, 106, 166, 106, 154, 106, 133, 106, 140, 106, 146, 106, 91, 107, 173, 107, 9, 108, 204, 111, 169, 111, 244, 111, 212, 111, 227, 111, 220, 111, 237, 111, 231, 111, 230, 111, 222, 111, 242, 111, 221, 111, 226, 111, 232, 111, 225, 113, 241, 113, 232, 113, 242, 113, 228, 113, 240, 113, 226, 113, 115, 115, 110, 115, 111, 115, 151, 116, 178, 116, 171, 116, 144, 116, 170, 116, 173, 116, 177, 116, 165, 116, 175, 116, 16, 117, 17, 117, 18, 117, 15, 117, 132, 117, 67, 118, 72, 118, 73, 118, 71, 118, 164, 118, 233, 118, 181, 119, 171, 119, 178, 119, 183, 119, 182, 119, 180, 119, 177, 119, 168, 119, 240, 119, 243, 120, 253, 120, 2, 121, 251, 120, 252, 120, 242, 120, 5, 121, 249, 120, 254, 120, 4, 121, 171, 121, 168, 121, 92, 122, 91, 122, 86, 122, 88, 122, 84, 122, 90, 122, 190, 122, 192, 122, 193, 122, 5, 124, 15, 124, 242, 123, 0, 124, 255, 123, 251, 123, 14, 124, 244, 123, 11, 124, 243, 123, 2, 124, 9, 124, 3, 124, 1, 124, 248, 123, 253, 123, 6, 124, 240, 123, 241, 123, 16, 124, 10, 124, 232, 124, 45, 126, 60, 126, 66, 126, 51, 126, 72, 152, 56, 126, 42, 126, 73, 126, 64, 126, 71, 126, 41, 126, 76, 126, 48, 126, 59, 126, 54, 126, 68, 126, 58, 126, 69, 127, 127, 127, 126, 127, 125, 127, 244, 127, 242, 127, 44, 128, 187, 129, 196, 129, 204, 129, 202, 129, 197, 129, 199, 129, 188, 129, 233, 129, 91, 130, 90, 130, 92, 130, 131, 133, 128, 133, 143, 133, 167, 133, 149, 133, 160, 133, 139, 133, 163, 133, 123, 133, 164, 133, 154, 133, 158, 133, 119, 133, 124, 133, 137, 133, 161, 133, 122, 133, 120, 133, 87, 133, 142, 133, 150, 133, 134, 133, 141, 133, 153, 133, 157, 133, 129, 133, 162, 133, 130, 133, 136, 133, 133, 133, 121, 133, 118, 133, 152, 133, 144, 133, 159, 133, 104, 134, 190, 135, 170, 135, 173, 135, 197, 135, 176, 135, 172, 135, 185, 135, 181, 135, 188, 135, 174, 135, 201, 135, 195, 135, 194, 135, 204, 135, 183, 135, 175, 135, 196, 135, 202, 135, 180, 135, 182, 135, 191, 135, 184, 135, 189, 135, 222, 135, 178, 135, 53, 137, 51, 137, 60, 137, 62, 137, 65, 137, 82, 137, 55, 137, 66, 137, 173, 137, 175, 137, 174, 137, 242, 137, 243, 137, 30, 139, 24, 139, 22, 139, 17, 139, 5, 139, 11, 139, 34, 139, 15, 139, 18, 139, 21, 139, 7, 139, 13, 139, 8, 139, 6, 139, 28, 139, 19, 139, 26, 139, 79, 140, 112, 140, 114, 140, 113, 140, 111, 140, 149, 140, 148, 140, 249, 140, 111, 141, 78, 142, 77, 142, 83, 142, 80, 142, 76, 142, 71, 142, 67, 143, 64, 143, 133, 144, 126, 144, 56, 145, 154, 145, 162, 145, 155, 145, 153, 145, 159, 145, 161, 145, 157, 145, 160, 145, 161, 147, 131, 147, 175, 147, 100, 147, 86, 147, 71, 147, 124, 147, 88, 147, 92, 147, 118, 147, 73, 147, 80, 147, 81, 147, 96, 147, 109, 147, 143, 147, 76, 147, 106, 147, 121, 147, 87, 147, 85, 147, 82, 147, 79, 147, 113, 147, 119, 147, 123, 147, 97, 147, 94, 147, 99, 147, 103, 147, 128, 147, 78, 147, 89, 147, 199, 149, 192, 149, 201, 149, 195, 149, 197, 149, 183, 149, 174, 150, 176, 150, 172, 150, 32, 151, 31, 151, 24, 151, 29, 151, 25, 151, 154, 151, 161, 151, 156, 151, 158, 151, 157, 151, 213, 151, 212, 151, 241, 151, 65, 152, 68, 152, 74, 152, 73, 152, 69, 152, 67, 152, 37, 153, 43, 153, 44, 153, 42, 153, 51, 153, 50, 153, 47, 153, 45, 153, 49, 153, 48, 153, 152, 153, 163, 153, 161, 153, 2, 154, 250, 153, 244, 153, 247, 153, 249, 153, 248, 153, 246, 153, 251, 153, 253, 153, 254, 153, 252, 153, 3, 154, 190, 154, 254, 154, 253, 154, 1, 155, 252, 154, 72, 155, 154, 155, 168, 155, 158, 155, 155, 155, 166, 155, 161, 155, 165, 155, 164, 155, 134, 155, 162, 155, 160, 155, 175, 155, 51, 157, 65, 157, 103, 157, 54, 157, 46, 157, 47, 157, 49, 157, 56, 157, 48, 157, 69, 157, 66, 157, 67, 157, 62, 157, 55, 157, 64, 157, 61, 157, 245, 127, 45, 157, 138, 158, 137, 158, 141, 158, 176, 158, 200, 158, 218, 158, 251, 158, 255, 158, 36, 159, 35, 159, 34, 159, 84, 159, 160, 159, 49, 81, 45, 81, 46, 81, 152, 86, 156, 86, 151, 86, 154, 86, 157, 86, 153, 86, 112, 89, 60, 91, 105, 92, 106, 92, 192, 93, 109, 94, 110, 94, 216, 97, 223, 97, 237, 97, 238, 97, 241, 97, 234, 97, 240, 97, 235, 97, 214, 97, 233, 97, 255, 100, 4, 101, 253, 100, 248, 100, 1, 101, 3, 101, 252, 100, 148, 101, 219, 101, 218, 102, 219, 102, 216, 102, 197, 106, 185, 106, 189, 106, 225, 106, 198, 106, 186, 106, 182, 106, 183, 106, 199, 106, 180, 106, 173, 106, 94, 107, 201, 107, 11, 108, 7, 112, 12, 112, 13, 112, 1, 112, 5, 112, 20, 112, 14, 112, 255, 111, 0, 112, 251, 111, 38, 112, 252, 111, 247, 111, 10, 112, 1, 114, 255, 113, 249, 113, 3, 114, 253, 113, 118, 115, 184, 116, 192, 116, 181, 116, 193, 116, 190, 116, 182, 116, 187, 116, 194, 116, 20, 117, 19, 117, 92, 118, 100, 118, 89, 118, 80, 118, 83, 118, 87, 118, 90, 118, 166, 118, 189, 118, 236, 118, 194, 119, 186, 119, 255, 120, 12, 121, 19, 121, 20, 121, 9, 121, 16, 121, 18, 121, 17, 121, 173, 121, 172, 121, 95, 122, 28, 124, 41, 124, 25, 124, 32, 124, 31, 124, 45, 124, 29, 124, 38, 124, 40, 124, 34, 124, 37, 124, 48, 124, 92, 126, 80, 126, 86, 126, 99, 126, 88, 126, 98, 126, 95, 126, 81, 126, 96, 126, 87, 126, 83, 126, 181, 127, 179, 127, 247, 127, 248, 127, 117, 128, 209, 129, 210, 129, 208, 129, 95, 130, 94, 130, 180, 133, 198, 133, 192, 133, 195, 133, 194, 133, 179, 133, 181, 133, 189, 133, 199, 133, 196, 133, 191, 133, 203, 133, 206, 133, 200, 133, 197, 133, 177, 133, 182, 133, 210, 133, 36, 134, 184, 133, 183, 133, 190, 133, 105, 134, 231, 135, 230, 135, 226, 135, 219, 135, 235, 135, 234, 135, 229, 135, 223, 135, 243, 135, 228, 135, 212, 135, 220, 135, 211, 135, 237, 135, 216, 135, 227, 135, 164, 135, 215, 135, 217, 135, 1, 136, 244, 135, 232, 135, 221, 135, 83, 137, 75, 137, 79, 137, 76, 137, 70, 137, 80, 137, 81, 137, 73, 137, 42, 139, 39, 139, 35, 139, 51, 139, 48, 139, 53, 139, 71, 139, 47, 139, 60, 139, 62, 139, 49, 139, 37, 139, 55, 139, 38, 139, 54, 139, 46, 139, 36, 139, 59, 139, 61, 139, 58, 139, 66, 140, 117, 140, 153, 140, 152, 140, 151, 140, 254, 140, 4, 141, 2, 141, 0, 141, 92, 142, 98, 142, 96, 142, 87, 142, 86, 142, 94, 142, 101, 142, 103, 142, 91, 142, 90, 142, 97, 142, 93, 142, 105, 142, 84, 142, 70, 143, 71, 143, 72, 143, 75, 143, 40, 145, 58, 145, 59, 145, 62, 145, 168, 145, 165, 145, 167, 145, 175, 145, 170, 145, 181, 147, 140, 147, 146, 147, 183, 147, 155, 147, 157, 147, 137, 147, 167, 147, 142, 147, 170, 147, 158, 147, 166, 147, 149, 147, 136, 147, 153, 147, 159, 147, 141, 147, 177, 147, 145, 147, 178, 147, 164, 147, 168, 147, 180, 147, 163, 147, 165, 147, 210, 149, 211, 149, 209, 149, 179, 150, 215, 150, 218, 150, 194, 93, 223, 150, 216, 150, 221, 150, 35, 151, 34, 151, 37, 151, 172, 151, 174, 151, 168, 151, 171, 151, 164, 151, 170, 151, 162, 151, 165, 151, 215, 151, 217, 151, 214, 151, 216, 151, 250, 151, 80, 152, 81, 152, 82, 152, 184, 152, 65, 153, 60, 153, 58, 153, 15, 154, 11, 154, 9, 154, 13, 154, 4, 154, 17, 154, 10, 154, 5, 154, 7, 154, 6, 154, 192, 154, 220, 154, 8, 155, 4, 155, 5, 155, 41, 155, 53, 155, 74, 155, 76, 155, 75, 155, 199, 155, 198, 155, 195, 155, 191, 155, 193, 155, 181, 155, 184, 155, 211, 155, 182, 155, 196, 155, 185, 155, 189, 155, 92, 157, 83, 157, 79, 157, 74, 157, 91, 157, 75, 157, 89, 157, 86, 157, 76, 157, 87, 157, 82, 157, 84, 157, 95, 157, 88, 157, 90, 157, 142, 158, 140, 158, 223, 158, 1, 159, 0, 159, 22, 159, 37, 159, 43, 159, 42, 159, 41, 159, 40, 159, 76, 159, 85, 159, 52, 81, 53, 81, 150, 82, 247, 82, 180, 83, 171, 86, 173, 86, 166, 86, 167, 86, 170, 86, 172, 86, 218, 88, 221, 88, 219, 88, 18, 89, 61, 91, 62, 91, 63, 91, 195, 93, 112, 94, 191, 95, 251, 97, 7, 101, 16, 101, 13, 101, 9, 101, 12, 101, 14, 101, 132, 101, 222, 101, 221, 101, 222, 102, 231, 106, 224, 106, 204, 106, 209, 106, 217, 106, 203, 106, 223, 106, 220, 106, 208, 106, 235, 106, 207, 106, 205, 106, 222, 106, 96, 107, 176, 107, 12, 108, 25, 112, 39, 112, 32, 112, 22, 112, 43, 112, 33, 112, 34, 112, 35, 112, 41, 112, 23, 112, 36, 112, 28, 112, 42, 112, 12, 114, 10, 114, 7, 114, 2, 114, 5, 114, 165, 114, 166, 114, 164, 114, 163, 114, 161, 114, 203, 116, 197, 116, 183, 116, 195, 116, 22, 117, 96, 118, 201, 119, 202, 119, 196, 119, 241, 119, 29, 121, 27, 121, 33, 121, 28, 121, 23, 121, 30, 121, 176, 121, 103, 122, 104, 122, 51, 124, 60, 124, 57, 124, 44, 124, 59, 124, 236, 124, 234, 124, 118, 126, 117, 126, 120, 126, 112, 126, 119, 126, 111, 126, 122, 126, 114, 126, 116, 126, 104, 126, 75, 127, 74, 127, 131, 127, 134, 127, 183, 127, 253, 127, 254, 127, 120, 128, 215, 129, 213, 129, 100, 130, 97, 130, 99, 130, 235, 133, 241, 133, 237, 133, 217, 133, 225, 133, 232, 133, 218, 133, 215, 133, 236, 133, 242, 133, 248, 133, 216, 133, 223, 133, 227, 133, 220, 133, 209, 133, 240, 133, 230, 133, 239, 133, 222, 133, 226, 133, 0, 136, 250, 135, 3, 136, 246, 135, 247, 135, 9, 136, 12, 136, 11, 136, 6, 136, 252, 135, 8, 136, 255, 135, 10, 136, 2, 136, 98, 137, 90, 137, 91, 137, 87, 137, 97, 137, 92, 137, 88, 137, 93, 137, 89, 137, 136, 137, 183, 137, 182, 137, 246, 137, 80, 139, 72, 139, 74, 139, 64, 139, 83, 139, 86, 139, 84, 139, 75, 139, 85, 139, 81, 139, 66, 139, 82, 139, 87, 139, 67, 140, 119, 140, 118, 140, 154, 140, 6, 141, 7, 141, 9, 141, 172, 141, 170, 141, 173, 141, 171, 141, 109, 142, 120, 142, 115, 142, 106, 142, 111, 142, 123, 142, 194, 142, 82, 143, 81, 143, 79, 143, 80, 143, 83, 143, 180, 143, 64, 145, 63, 145, 176, 145, 173, 145, 222, 147, 199, 147, 207, 147, 194, 147, 218, 147, 208, 147, 249, 147, 236, 147, 204, 147, 217, 147, 169, 147, 230, 147, 202, 147, 212, 147, 238, 147, 227, 147, 213, 147, 196, 147, 206, 147, 192, 147, 210, 147, 231, 147, 125, 149, 218, 149, 219, 149, 225, 150, 41, 151, 43, 151, 44, 151, 40, 151, 38, 151, 179, 151, 183, 151, 182, 151, 221, 151, 222, 151, 223, 151, 92, 152, 89, 152, 93, 152, 87, 152, 191, 152, 189, 152, 187, 152, 190, 152, 72, 153, 71, 153, 67, 153, 166, 153, 167, 153, 26, 154, 21, 154, 37, 154, 29, 154, 36, 154, 27, 154, 34, 154, 32, 154, 39, 154, 35, 154, 30, 154, 28, 154, 20, 154, 194, 154, 11, 155, 10, 155, 14, 155, 12, 155, 55, 155, 234, 155, 235, 155, 224, 155, 222, 155, 228, 155, 230, 155, 226, 155, 240, 155, 212, 155, 215, 155, 236, 155, 220, 155, 217, 155, 229, 155, 213, 155, 225, 155, 218, 155, 119, 157, 129, 157, 138, 157, 132, 157, 136, 157, 113, 157, 128, 157, 120, 157, 134, 157, 139, 157, 140, 157, 125, 157, 107, 157, 116, 157, 117, 157, 112, 157, 105, 157, 133, 157, 115, 157, 123, 157, 130, 157, 111, 157, 121, 157, 127, 157, 135, 157, 104, 157, 148, 158, 145, 158, 192, 158, 252, 158, 45, 159, 64, 159, 65, 159, 77, 159, 86, 159, 87, 159, 88, 159, 55, 83, 178, 86, 181, 86, 179, 86, 227, 88, 69, 91, 198, 93, 199, 93, 238, 94, 239, 94, 192, 95, 193, 95, 249, 97, 23, 101, 22, 101, 21, 101, 19, 101, 223, 101, 232, 102, 227, 102, 228, 102, 243, 106, 240, 106, 234, 106, 232, 106, 249, 106, 241, 106, 238, 106, 239, 106, 60, 112, 53, 112, 47, 112, 55, 112, 52, 112, 49, 112, 66, 112, 56, 112, 63, 112, 58, 112, 57, 112, 64, 112, 59, 112, 51, 112, 65, 112, 19, 114, 20, 114, 168, 114, 125, 115, 124, 115, 186, 116, 171, 118, 170, 118, 190, 118, 237, 118, 204, 119, 206, 119, 207, 119, 205, 119, 242, 119, 37, 121, 35, 121, 39, 121, 40, 121, 36, 121, 41, 121, 178, 121, 110, 122, 108, 122, 109, 122, 247, 122, 73, 124, 72, 124, 74, 124, 71, 124, 69, 124, 238, 124, 123, 126, 126, 126, 129, 126, 128, 126, 186, 127, 255, 127, 121, 128, 219, 129, 217, 129, 11, 130, 104, 130, 105, 130, 34, 134, 255, 133, 1, 134, 254, 133, 27, 134, 0, 134, 246, 133, 4, 134, 9, 134, 5, 134, 12, 134, 253, 133, 25, 136, 16, 136, 17, 136, 23, 136, 19, 136, 22, 136, 99, 137, 102, 137, 185, 137, 247, 137, 96, 139, 106, 139, 93, 139, 104, 139, 99, 139, 101, 139, 103, 139, 109, 139, 174, 141, 134, 142, 136, 142, 132, 142, 89, 143, 86, 143, 87, 143, 85, 143, 88, 143, 90, 143, 141, 144, 67, 145, 65, 145, 183, 145, 181, 145, 178, 145, 179, 145, 11, 148, 19, 148, 251, 147, 32, 148, 15, 148, 20, 148, 254, 147, 21, 148, 16, 148, 40, 148, 25, 148, 13, 148, 245, 147, 0, 148, 247, 147, 7, 148, 14, 148, 22, 148, 18, 148, 250, 147, 9, 148, 248, 147, 10, 148, 255, 147, 252, 147, 12, 148, 246, 147, 17, 148, 6, 148, 222, 149, 224, 149, 223, 149, 46, 151, 47, 151, 185, 151, 187, 151, 253, 151, 254, 151, 96, 152, 98, 152, 99, 152, 95, 152, 193, 152, 194, 152, 80, 153, 78, 153, 89, 153, 76, 153, 75, 153, 83, 153, 50, 154, 52, 154, 49, 154, 44, 154, 42, 154, 54, 154, 41, 154, 46, 154, 56, 154, 45, 154, 199, 154, 202, 154, 198, 154, 16, 155, 18, 155, 17, 155, 11, 156, 8, 156, 247, 155, 5, 156, 18, 156, 248, 155, 64, 156, 7, 156, 14, 156, 6, 156, 23, 156, 20, 156, 9, 156, 159, 157, 153, 157, 164, 157, 157, 157, 146, 157, 152, 157, 144, 157, 155, 157, 160, 157, 148, 157, 156, 157, 170, 157, 151, 157, 161, 157, 154, 157, 162, 157, 168, 157, 158, 157, 163, 157, 191, 157, 169, 157, 150, 157, 166, 157, 167, 157, 153, 158, 155, 158, 154, 158, 229, 158, 228, 158, 231, 158, 230, 158, 48, 159, 46, 159, 91, 159, 96, 159, 94, 159, 93, 159, 89, 159, 145, 159, 58, 81, 57, 81, 152, 82, 151, 82, 195, 86, 189, 86, 190, 86, 72, 91, 71, 91, 203, 93, 207, 93, 241, 94, 253, 97, 27, 101, 2, 107, 252, 106, 3, 107, 248, 106, 0, 107, 67, 112, 68, 112, 74, 112, 72, 112, 73, 112, 69, 112, 70, 112, 29, 114, 26, 114, 25, 114, 126, 115, 23, 117, 106, 118, 208, 119, 45, 121, 49, 121, 47, 121, 84, 124, 83, 124, 242, 124, 138, 126, 135, 126, 136, 126, 139, 126, 134, 126, 141, 126, 77, 127, 187, 127, 48, 128, 221, 129, 24, 134, 42, 134, 38, 134, 31, 134, 35, 134, 28, 134, 25, 134, 39, 134, 46, 134, 33, 134, 32, 134, 41, 134, 30, 134, 37, 134, 41, 136, 29, 136, 27, 136, 32, 136, 36, 136, 28, 136, 43, 136, 74, 136, 109, 137, 105, 137, 110, 137, 107, 137, 250, 137, 121, 139, 120, 139, 69, 139, 122, 139, 123, 139, 16, 141, 20, 141, 175, 141, 142, 142, 140, 142, 94, 143, 91, 143, 93, 143, 70, 145, 68, 145, 69, 145, 185, 145, 63, 148, 59, 148, 54, 148, 41, 148, 61, 148, 60, 148, 48, 148, 57, 148, 42, 148, 55, 148, 44, 148, 64, 148, 49, 148, 229, 149, 228, 149, 227, 149, 53, 151, 58, 151, 191, 151, 225, 151, 100, 152, 201, 152, 198, 152, 192, 152, 88, 153, 86, 153, 57, 154, 61, 154, 70, 154, 68, 154, 66, 154, 65, 154, 58, 154, 63, 154, 205, 154, 21, 155, 23, 155, 24, 155, 22, 155, 58, 155, 82, 155, 43, 156, 29, 156, 28, 156, 44, 156, 35, 156, 40, 156, 41, 156, 36, 156, 33, 156, 183, 157, 182, 157, 188, 157, 193, 157, 199, 157, 202, 157, 207, 157, 190, 157, 197, 157, 195, 157, 187, 157, 181, 157, 206, 157, 185, 157, 186, 157, 172, 157, 200, 157, 177, 157, 173, 157, 204, 157, 179, 157, 205, 157, 178, 157, 122, 158, 156, 158, 235, 158, 238, 158, 237, 158, 27, 159, 24, 159, 26, 159, 49, 159, 78, 159, 101, 159, 100, 159, 146, 159, 185, 78, 198, 86, 197, 86, 203, 86, 113, 89, 75, 91, 76, 91, 213, 93, 209, 93, 242, 94, 33, 101, 32, 101, 38, 101, 34, 101, 11, 107, 8, 107, 9, 107, 13, 108, 85, 112, 86, 112, 87, 112, 82, 112, 30, 114, 31, 114, 169, 114, 127, 115, 216, 116, 213, 116, 217, 116, 215, 116, 109, 118, 173, 118, 53, 121, 180, 121, 112, 122, 113, 122, 87, 124, 92, 124, 89, 124, 91, 124, 90, 124, 244, 124, 241, 124, 145, 126, 79, 127, 135, 127, 222, 129, 107, 130, 52, 134, 53, 134, 51, 134, 44, 134, 50, 134, 54, 134, 44, 136, 40, 136, 38, 136, 42, 136, 37, 136, 113, 137, 191, 137, 190, 137, 251, 137, 126, 139, 132, 139, 130, 139, 134, 139, 133, 139, 127, 139, 21, 141, 149, 142, 148, 142, 154, 142, 146, 142, 144, 142, 150, 142, 151, 142, 96, 143, 98, 143, 71, 145, 76, 148, 80, 148, 74, 148, 75, 148, 79, 148, 71, 148, 69, 148, 72, 148, 73, 148, 70, 148, 63, 151, 227, 151, 106, 152, 105, 152, 203, 152, 84, 153, 91, 153, 78, 154, 83, 154, 84, 154, 76, 154, 79, 154, 72, 154, 74, 154, 73, 154, 82, 154, 80, 154, 208, 154, 25, 155, 43, 155, 59, 155, 86, 155, 85, 155, 70, 156, 72, 156, 63, 156, 68, 156, 57, 156, 51, 156, 65, 156, 60, 156, 55, 156, 52, 156, 50, 156, 61, 156, 54, 156, 219, 157, 210, 157, 222, 157, 218, 157, 203, 157, 208, 157, 220, 157, 209, 157, 223, 157, 233, 157, 217, 157, 216, 157, 214, 157, 245, 157, 213, 157, 221, 157, 182, 158, 240, 158, 53, 159, 51, 159, 50, 159, 66, 159, 107, 159, 149, 159, 162, 159, 61, 81, 153, 82, 232, 88, 231, 88, 114, 89, 77, 91, 216, 93, 47, 136, 79, 95, 1, 98, 3, 98, 4, 98, 41, 101, 37, 101, 150, 101, 235, 102, 17, 107, 18, 107, 15, 107, 202, 107, 91, 112, 90, 112, 34, 114, 130, 115, 129, 115, 131, 115, 112, 118, 212, 119, 103, 124, 102, 124, 149, 126, 108, 130, 58, 134, 64, 134, 57, 134, 60, 134, 49, 134, 59, 134, 62, 134, 48, 136, 50, 136, 46, 136, 51, 136, 118, 137, 116, 137, 115, 137, 254, 137, 140, 139, 142, 139, 139, 139, 136, 139, 69, 140, 25, 141, 152, 142, 100, 143, 99, 143, 188, 145, 98, 148, 85, 148, 93, 148, 87, 148, 94, 148, 196, 151, 197, 151, 0, 152, 86, 154, 89, 154, 30, 155, 31, 155, 32, 155, 82, 156, 88, 156, 80, 156, 74, 156, 77, 156, 75, 156, 85, 156, 89, 156, 76, 156, 78, 156, 251, 157, 247, 157, 239, 157, 227, 157, 235, 157, 248, 157, 228, 157, 246, 157, 225, 157, 238, 157, 230, 157, 242, 157, 240, 157, 226, 157, 236, 157, 244, 157, 243, 157, 232, 157, 237, 157, 194, 158, 208, 158, 242, 158, 243, 158, 6, 159, 28, 159, 56, 159, 55, 159, 54, 159, 67, 159, 79, 159, 113, 159, 112, 159, 110, 159, 111, 159, 211, 86, 205, 86, 78, 91, 109, 92, 45, 101, 237, 102, 238, 102, 19, 107, 95, 112, 97, 112, 93, 112, 96, 112, 35, 114, 219, 116, 229, 116, 213, 119, 56, 121, 183, 121, 182, 121, 106, 124, 151, 126, 137, 127, 109, 130, 67, 134, 56, 136, 55, 136, 53, 136, 75, 136, 148, 139, 149, 139, 158, 142, 159, 142, 160, 142, 157, 142, 190, 145, 189, 145, 194, 145, 107, 148, 104, 148, 105, 148, 229, 150, 70, 151, 67, 151, 71, 151, 199, 151, 229, 151, 94, 154, 213, 154, 89, 155, 99, 156, 103, 156, 102, 156, 98, 156, 94, 156, 96, 156, 2, 158, 254, 157, 7, 158, 3, 158, 6, 158, 5, 158, 0, 158, 1, 158, 9, 158, 255, 157, 253, 157, 4, 158, 160, 158, 30, 159, 70, 159, 116, 159, 117, 159, 118, 159, 212, 86, 46, 101, 184, 101, 24, 107, 25, 107, 23, 107, 26, 107, 98, 112, 38, 114, 170, 114, 216, 119, 217, 119, 57, 121, 105, 124, 107, 124, 246, 124, 154, 126, 152, 126, 155, 126, 153, 126, 224, 129, 225, 129, 70, 134, 71, 134, 72, 134, 121, 137, 122, 137, 124, 137, 123, 137, 255, 137, 152, 139, 153, 139, 165, 142, 164, 142, 163, 142, 110, 148, 109, 148, 111, 148, 113, 148, 115, 148, 73, 151, 114, 152, 95, 153, 104, 156, 110, 156, 109, 156, 11, 158, 13, 158, 16, 158, 15, 158, 18, 158, 17, 158, 161, 158, 245, 158, 9, 159, 71, 159, 120, 159, 123, 159, 122, 159, 121, 159, 30, 87, 102, 112, 111, 124, 60, 136, 178, 141, 166, 142, 195, 145, 116, 148, 120, 148, 118, 148, 117, 148, 96, 154, 116, 156, 115, 156, 113, 156, 117, 156, 20, 158, 19, 158, 246, 158, 10, 159, 164, 159, 104, 112, 101, 112, 247, 124, 106, 134, 62, 136, 61, 136, 63, 136, 158, 139, 156, 140, 169, 142, 201, 142, 75, 151, 115, 152, 116, 152, 204, 152, 97, 153, 171, 153, 100, 154, 102, 154, 103, 154, 36, 155, 21, 158, 23, 158, 72, 159, 7, 98, 30, 107, 39, 114, 76, 134, 168, 142, 130, 148, 128, 148, 129, 148, 105, 154, 104, 154, 46, 155, 25, 158, 41, 114, 75, 134, 159, 139, 131, 148, 121, 156, 183, 158, 117, 118, 107, 154, 122, 156, 29, 158, 105, 112, 106, 112, 164, 158, 126, 159, 73, 159, 152, 159, 129, 120, 185, 146, 207, 136, 187, 88, 82, 96, 167, 124, 250, 90, 84, 37, 102, 37, 87, 37, 96, 37, 108, 37, 99, 37, 90, 37, 105, 37, 93, 37, 82, 37, 100, 37, 85, 37, 94, 37, 106, 37, 97, 37, 88, 37, 103, 37, 91, 37, 83, 37, 101, 37, 86, 37, 95, 37, 107, 37, 98, 37, 89, 37, 104, 37, 92, 37, 81, 37, 80, 37, 109, 37, 110, 37, 112, 37, 111, 37, 147, 37, 0, 0, 0, 0, 0, 0, 0, 48, 1, 48, 2, 48, 183, 0, 37, 32, 38, 32, 168, 0, 3, 48, 173, 0, 21, 32, 37, 34, 60, 255, 60, 34, 24, 32, 25, 32, 28, 32, 29, 32, 20, 48, 21, 48, 8, 48, 9, 48, 10, 48, 11, 48, 12, 48, 13, 48, 14, 48, 15, 48, 16, 48, 17, 48, 177, 0, 215, 0, 247, 0, 96, 34, 100, 34, 101, 34, 30, 34, 52, 34, 176, 0, 50, 32, 51, 32, 3, 33, 43, 33, 224, 255, 225, 255, 229, 255, 66, 38, 64, 38, 32, 34, 165, 34, 18, 35, 2, 34, 7, 34, 97, 34, 82, 34, 167, 0, 59, 32, 6, 38, 5, 38, 203, 37, 207, 37, 206, 37, 199, 37, 198, 37, 161, 37, 160, 37, 179, 37, 178, 37, 189, 37, 188, 37, 146, 33, 144, 33, 145, 33, 147, 33, 148, 33, 19, 48, 106, 34, 107, 34, 26, 34, 61, 34, 29, 34, 53, 34, 43, 34, 44, 34, 8, 34, 11, 34, 134, 34, 135, 34, 130, 34, 131, 34, 42, 34, 41, 34, 39, 34, 40, 34, 226, 255, 210, 33, 212, 33, 0, 34, 3, 34, 180, 0, 94, 255, 199, 2, 216, 2, 221, 2, 218, 2, 217, 2, 184, 0, 219, 2, 161, 0, 191, 0, 208, 2, 46, 34, 17, 34, 15, 34, 164, 0, 9, 33, 48, 32, 193, 37, 192, 37, 183, 37, 182, 37, 100, 38, 96, 38, 97, 38, 101, 38, 103, 38, 99, 38, 153, 34, 200, 37, 163, 37, 208, 37, 209, 37, 146, 37, 164, 37, 165, 37, 168, 37, 167, 37, 166, 37, 169, 37, 104, 38, 15, 38, 14, 38, 28, 38, 30, 38, 182, 0, 32, 32, 33, 32, 149, 33, 151, 33, 153, 33, 150, 33, 152, 33, 109, 38, 105, 38, 106, 38, 108, 38, 127, 50, 28, 50, 22, 33, 199, 51, 34, 33, 194, 51, 216, 51, 33, 33, 172, 32, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 255, 2, 255, 3, 255, 4, 255, 5, 255, 6, 255, 7, 255, 8, 255, 9, 255, 10, 255, 11, 255, 12, 255, 13, 255, 14, 255, 15, 255, 16, 255, 17, 255, 18, 255, 19, 255, 20, 255, 21, 255, 22, 255, 23, 255, 24, 255, 25, 255, 26, 255, 27, 255, 28, 255, 29, 255, 30, 255, 31, 255, 32, 255, 33, 255, 34, 255, 35, 255, 36, 255, 37, 255, 38, 255, 39, 255, 40, 255, 41, 255, 42, 255, 43, 255, 44, 255, 45, 255, 46, 255, 47, 255, 48, 255, 49, 255, 50, 255, 51, 255, 52, 255, 53, 255, 54, 255, 55, 255, 56, 255, 57, 255, 58, 255, 59, 255, 230, 255, 61, 255, 62, 255, 63, 255, 64, 255, 65, 255, 66, 255, 67, 255, 68, 255, 69, 255, 70, 255, 71, 255, 72, 255, 73, 255, 74, 255, 75, 255, 76, 255, 77, 255, 78, 255, 79, 255, 80, 255, 81, 255, 82, 255, 83, 255, 84, 255, 85, 255, 86, 255, 87, 255, 88, 255, 89, 255, 90, 255, 91, 255, 92, 255, 93, 255, 227, 255, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 49, 58, 49, 59, 49, 60, 49, 61, 49, 62, 49, 63, 49, 64, 49, 65, 49, 66, 49, 67, 49, 68, 49, 69, 49, 70, 49, 71, 49, 72, 49, 73, 49, 74, 49, 75, 49, 76, 49, 77, 49, 78, 49, 79, 49, 80, 49, 81, 49, 82, 49, 83, 49, 84, 49, 85, 49, 86, 49, 87, 49, 88, 49, 89, 49, 90, 49, 91, 49, 92, 49, 93, 49, 94, 49, 95, 49, 96, 49, 97, 49, 98, 49, 99, 49, 100, 49, 101, 49, 102, 49, 103, 49, 104, 49, 105, 49, 106, 49, 107, 49, 108, 49, 109, 49, 110, 49, 111, 49, 112, 49, 113, 49, 114, 49, 115, 49, 116, 49, 117, 49, 118, 49, 119, 49, 120, 49, 121, 49, 122, 49, 123, 49, 124, 49, 125, 49, 126, 49, 127, 49, 128, 49, 129, 49, 130, 49, 131, 49, 132, 49, 133, 49, 134, 49, 135, 49, 136, 49, 137, 49, 138, 49, 139, 49, 140, 49, 141, 49, 142, 49, 112, 33, 113, 33, 114, 33, 115, 33, 116, 33, 117, 33, 118, 33, 119, 33, 120, 33, 121, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 33, 97, 33, 98, 33, 99, 33, 100, 33, 101, 33, 102, 33, 103, 33, 104, 33, 105, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145, 3, 146, 3, 147, 3, 148, 3, 149, 3, 150, 3, 151, 3, 152, 3, 153, 3, 154, 3, 155, 3, 156, 3, 157, 3, 158, 3, 159, 3, 160, 3, 161, 3, 163, 3, 164, 3, 165, 3, 166, 3, 167, 3, 168, 3, 169, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 177, 3, 178, 3, 179, 3, 180, 3, 181, 3, 182, 3, 183, 3, 184, 3, 185, 3, 186, 3, 187, 3, 188, 3, 189, 3, 190, 3, 191, 3, 192, 3, 193, 3, 195, 3, 196, 3, 197, 3, 198, 3, 199, 3, 200, 3, 201, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 2, 37, 12, 37, 16, 37, 24, 37, 20, 37, 28, 37, 44, 37, 36, 37, 52, 37, 60, 37, 1, 37, 3, 37, 15, 37, 19, 37, 27, 37, 23, 37, 35, 37, 51, 37, 43, 37, 59, 37, 75, 37, 32, 37, 47, 37, 40, 37, 55, 37, 63, 37, 29, 37, 48, 37, 37, 37, 56, 37, 66, 37, 18, 37, 17, 37, 26, 37, 25, 37, 22, 37, 21, 37, 14, 37, 13, 37, 30, 37, 31, 37, 33, 37, 34, 37, 38, 37, 39, 37, 41, 37, 42, 37, 45, 37, 46, 37, 49, 37, 50, 37, 53, 37, 54, 37, 57, 37, 58, 37, 61, 37, 62, 37, 64, 37, 65, 37, 67, 37, 68, 37, 69, 37, 70, 37, 71, 37, 72, 37, 73, 37, 74, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 149, 51, 150, 51, 151, 51, 19, 33, 152, 51, 196, 51, 163, 51, 164, 51, 165, 51, 166, 51, 153, 51, 154, 51, 155, 51, 156, 51, 157, 51, 158, 51, 159, 51, 160, 51, 161, 51, 162, 51, 202, 51, 141, 51, 142, 51, 143, 51, 207, 51, 136, 51, 137, 51, 200, 51, 167, 51, 168, 51, 176, 51, 177, 51, 178, 51, 179, 51, 180, 51, 181, 51, 182, 51, 183, 51, 184, 51, 185, 51, 128, 51, 129, 51, 130, 51, 131, 51, 132, 51, 186, 51, 187, 51, 188, 51, 189, 51, 190, 51, 191, 51, 144, 51, 145, 51, 146, 51, 147, 51, 148, 51, 38, 33, 192, 51, 193, 51, 138, 51, 139, 51, 140, 51, 214, 51, 197, 51, 173, 51, 174, 51, 175, 51, 219, 51, 169, 51, 170, 51, 171, 51, 172, 51, 221, 51, 208, 51, 211, 51, 195, 51, 201, 51, 220, 51, 198, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 0, 208, 0, 170, 0, 38, 1, 0, 0, 50, 1, 0, 0, 63, 1, 65, 1, 216, 0, 82, 1, 186, 0, 222, 0, 102, 1, 74, 1, 0, 0, 96, 50, 97, 50, 98, 50, 99, 50, 100, 50, 101, 50, 102, 50, 103, 50, 104, 50, 105, 50, 106, 50, 107, 50, 108, 50, 109, 50, 110, 50, 111, 50, 112, 50, 113, 50, 114, 50, 115, 50, 116, 50, 117, 50, 118, 50, 119, 50, 120, 50, 121, 50, 122, 50, 123, 50, 208, 36, 209, 36, 210, 36, 211, 36, 212, 36, 213, 36, 214, 36, 215, 36, 216, 36, 217, 36, 218, 36, 219, 36, 220, 36, 221, 36, 222, 36, 223, 36, 224, 36, 225, 36, 226, 36, 227, 36, 228, 36, 229, 36, 230, 36, 231, 36, 232, 36, 233, 36, 96, 36, 97, 36, 98, 36, 99, 36, 100, 36, 101, 36, 102, 36, 103, 36, 104, 36, 105, 36, 106, 36, 107, 36, 108, 36, 109, 36, 110, 36, 189, 0, 83, 33, 84, 33, 188, 0, 190, 0, 91, 33, 92, 33, 93, 33, 94, 33, 230, 0, 17, 1, 240, 0, 39, 1, 49, 1, 51, 1, 56, 1, 64, 1, 66, 1, 248, 0, 83, 1, 223, 0, 254, 0, 103, 1, 75, 1, 73, 1, 0, 50, 1, 50, 2, 50, 3, 50, 4, 50, 5, 50, 6, 50, 7, 50, 8, 50, 9, 50, 10, 50, 11, 50, 12, 50, 13, 50, 14, 50, 15, 50, 16, 50, 17, 50, 18, 50, 19, 50, 20, 50, 21, 50, 22, 50, 23, 50, 24, 50, 25, 50, 26, 50, 27, 50, 156, 36, 157, 36, 158, 36, 159, 36, 160, 36, 161, 36, 162, 36, 163, 36, 164, 36, 165, 36, 166, 36, 167, 36, 168, 36, 169, 36, 170, 36, 171, 36, 172, 36, 173, 36, 174, 36, 175, 36, 176, 36, 177, 36, 178, 36, 179, 36, 180, 36, 181, 36, 116, 36, 117, 36, 118, 36, 119, 36, 120, 36, 121, 36, 122, 36, 123, 36, 124, 36, 125, 36, 126, 36, 127, 36, 128, 36, 129, 36, 130, 36, 185, 0, 178, 0, 179, 0, 116, 32, 127, 32, 129, 32, 130, 32, 131, 32, 132, 32, 65, 48, 66, 48, 67, 48, 68, 48, 69, 48, 70, 48, 71, 48, 72, 48, 73, 48, 74, 48, 75, 48, 76, 48, 77, 48, 78, 48, 79, 48, 80, 48, 81, 48, 82, 48, 83, 48, 84, 48, 85, 48, 86, 48, 87, 48, 88, 48, 89, 48, 90, 48, 91, 48, 92, 48, 93, 48, 94, 48, 95, 48, 96, 48, 97, 48, 98, 48, 99, 48, 100, 48, 101, 48, 102, 48, 103, 48, 104, 48, 105, 48, 106, 48, 107, 48, 108, 48, 109, 48, 110, 48, 111, 48, 112, 48, 113, 48, 114, 48, 115, 48, 116, 48, 117, 48, 118, 48, 119, 48, 120, 48, 121, 48, 122, 48, 123, 48, 124, 48, 125, 48, 126, 48, 127, 48, 128, 48, 129, 48, 130, 48, 131, 48, 132, 48, 133, 48, 134, 48, 135, 48, 136, 48, 137, 48, 138, 48, 139, 48, 140, 48, 141, 48, 142, 48, 143, 48, 144, 48, 145, 48, 146, 48, 147, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 48, 162, 48, 163, 48, 164, 48, 165, 48, 166, 48, 167, 48, 168, 48, 169, 48, 170, 48, 171, 48, 172, 48, 173, 48, 174, 48, 175, 48, 176, 48, 177, 48, 178, 48, 179, 48, 180, 48, 181, 48, 182, 48, 183, 48, 184, 48, 185, 48, 186, 48, 187, 48, 188, 48, 189, 48, 190, 48, 191, 48, 192, 48, 193, 48, 194, 48, 195, 48, 196, 48, 197, 48, 198, 48, 199, 48, 200, 48, 201, 48, 202, 48, 203, 48, 204, 48, 205, 48, 206, 48, 207, 48, 208, 48, 209, 48, 210, 48, 211, 48, 212, 48, 213, 48, 214, 48, 215, 48, 216, 48, 217, 48, 218, 48, 219, 48, 220, 48, 221, 48, 222, 48, 223, 48, 224, 48, 225, 48, 226, 48, 227, 48, 228, 48, 229, 48, 230, 48, 231, 48, 232, 48, 233, 48, 234, 48, 235, 48, 236, 48, 237, 48, 238, 48, 239, 48, 240, 48, 241, 48, 242, 48, 243, 48, 244, 48, 245, 48, 246, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 4, 17, 4, 18, 4, 19, 4, 20, 4, 21, 4, 1, 4, 22, 4, 23, 4, 24, 4, 25, 4, 26, 4, 27, 4, 28, 4, 29, 4, 30, 4, 31, 4, 32, 4, 33, 4, 34, 4, 35, 4, 36, 4, 37, 4, 38, 4, 39, 4, 40, 4, 41, 4, 42, 4, 43, 4, 44, 4, 45, 4, 46, 4, 47, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 4, 49, 4, 50, 4, 51, 4, 52, 4, 53, 4, 81, 4, 54, 4, 55, 4, 56, 4, 57, 4, 58, 4, 59, 4, 60, 4, 61, 4, 62, 4, 63, 4, 64, 4, 65, 4, 66, 4, 67, 4, 68, 4, 69, 4, 70, 4, 71, 4, 72, 4, 73, 4, 74, 4, 75, 4, 76, 4, 77, 4, 78, 4, 79, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 1, 172, 4, 172, 7, 172, 8, 172, 9, 172, 10, 172, 16, 172, 17, 172, 18, 172, 19, 172, 20, 172, 21, 172, 22, 172, 23, 172, 25, 172, 26, 172, 27, 172, 28, 172, 29, 172, 32, 172, 36, 172, 44, 172, 45, 172, 47, 172, 48, 172, 49, 172, 56, 172, 57, 172, 60, 172, 64, 172, 75, 172, 77, 172, 84, 172, 88, 172, 92, 172, 112, 172, 113, 172, 116, 172, 119, 172, 120, 172, 122, 172, 128, 172, 129, 172, 131, 172, 132, 172, 133, 172, 134, 172, 137, 172, 138, 172, 139, 172, 140, 172, 144, 172, 148, 172, 156, 172, 157, 172, 159, 172, 160, 172, 161, 172, 168, 172, 169, 172, 170, 172, 172, 172, 175, 172, 176, 172, 184, 172, 185, 172, 187, 172, 188, 172, 189, 172, 193, 172, 196, 172, 200, 172, 204, 172, 213, 172, 215, 172, 224, 172, 225, 172, 228, 172, 231, 172, 232, 172, 234, 172, 236, 172, 239, 172, 240, 172, 241, 172, 243, 172, 245, 172, 246, 172, 252, 172, 253, 172, 0, 173, 4, 173, 6, 173, 12, 173, 13, 173, 15, 173, 17, 173, 24, 173, 28, 173, 32, 173, 41, 173, 44, 173, 45, 173, 52, 173, 53, 173, 56, 173, 60, 173, 68, 173, 69, 173, 71, 173, 73, 173, 80, 173, 84, 173, 88, 173, 97, 173, 99, 173, 108, 173, 109, 173, 112, 173, 115, 173, 116, 173, 117, 173, 118, 173, 123, 173, 124, 173, 125, 173, 127, 173, 129, 173, 130, 173, 136, 173, 137, 173, 140, 173, 144, 173, 156, 173, 157, 173, 164, 173, 183, 173, 192, 173, 193, 173, 196, 173, 200, 173, 208, 173, 209, 173, 211, 173, 220, 173, 224, 173, 228, 173, 248, 173, 249, 173, 252, 173, 255, 173, 0, 174, 1, 174, 8, 174, 9, 174, 11, 174, 13, 174, 20, 174, 48, 174, 49, 174, 52, 174, 55, 174, 56, 174, 58, 174, 64, 174, 65, 174, 67, 174, 69, 174, 70, 174, 74, 174, 76, 174, 77, 174, 78, 174, 80, 174, 84, 174, 86, 174, 92, 174, 93, 174, 95, 174, 96, 174, 97, 174, 101, 174, 104, 174, 105, 174, 108, 174, 112, 174, 120, 174, 121, 174, 123, 174, 124, 174, 125, 174, 132, 174, 133, 174, 140, 174, 188, 174, 189, 174, 190, 174, 192, 174, 196, 174, 204, 174, 205, 174, 207, 174, 208, 174, 209, 174, 216, 174, 217, 174, 220, 174, 232, 174, 235, 174, 237, 174, 244, 174, 248, 174, 252, 174, 7, 175, 8, 175], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 107292);
    allocate([13, 175, 16, 175, 44, 175, 45, 175, 48, 175, 50, 175, 52, 175, 60, 175, 61, 175, 63, 175, 65, 175, 66, 175, 67, 175, 72, 175, 73, 175, 80, 175, 92, 175, 93, 175, 100, 175, 101, 175, 121, 175, 128, 175, 132, 175, 136, 175, 144, 175, 145, 175, 149, 175, 156, 175, 184, 175, 185, 175, 188, 175, 192, 175, 199, 175, 200, 175, 201, 175, 203, 175, 205, 175, 206, 175, 212, 175, 220, 175, 232, 175, 233, 175, 240, 175, 241, 175, 244, 175, 248, 175, 0, 176, 1, 176, 4, 176, 12, 176, 16, 176, 20, 176, 28, 176, 29, 176, 40, 176, 68, 176, 69, 176, 72, 176, 74, 176, 76, 176, 78, 176, 83, 176, 84, 176, 85, 176, 87, 176, 89, 176, 93, 176, 124, 176, 125, 176, 128, 176, 132, 176, 140, 176, 141, 176, 143, 176, 145, 176, 152, 176, 153, 176, 154, 176, 156, 176, 159, 176, 160, 176, 161, 176, 162, 176, 168, 176, 169, 176, 171, 176, 172, 176, 173, 176, 174, 176, 175, 176, 177, 176, 179, 176, 180, 176, 181, 176, 184, 176, 188, 176, 196, 176, 197, 176, 199, 176, 200, 176, 201, 176, 208, 176, 209, 176, 212, 176, 216, 176, 224, 176, 229, 176, 8, 177, 9, 177, 11, 177, 12, 177, 16, 177, 18, 177, 19, 177, 24, 177, 25, 177, 27, 177, 28, 177, 29, 177, 35, 177, 36, 177, 37, 177, 40, 177, 44, 177, 52, 177, 53, 177, 55, 177, 56, 177, 57, 177, 64, 177, 65, 177, 68, 177, 72, 177, 80, 177, 81, 177, 84, 177, 85, 177, 88, 177, 92, 177, 96, 177, 120, 177, 121, 177, 124, 177, 128, 177, 130, 177, 136, 177, 137, 177, 139, 177, 141, 177, 146, 177, 147, 177, 148, 177, 152, 177, 156, 177, 168, 177, 204, 177, 208, 177, 212, 177, 220, 177, 221, 177, 223, 177, 232, 177, 233, 177, 236, 177, 240, 177, 249, 177, 251, 177, 253, 177, 4, 178, 5, 178, 8, 178, 11, 178, 12, 178, 20, 178, 21, 178, 23, 178, 25, 178, 32, 178, 52, 178, 60, 178, 88, 178, 92, 178, 96, 178, 104, 178, 105, 178, 116, 178, 117, 178, 124, 178, 132, 178, 133, 178, 137, 178, 144, 178, 145, 178, 148, 178, 152, 178, 153, 178, 154, 178, 160, 178, 161, 178, 163, 178, 165, 178, 166, 178, 170, 178, 172, 178, 176, 178, 180, 178, 200, 178, 201, 178, 204, 178, 208, 178, 210, 178, 216, 178, 217, 178, 219, 178, 221, 178, 226, 178, 228, 178, 229, 178, 230, 178, 232, 178, 235, 178, 236, 178, 237, 178, 238, 178, 239, 178, 243, 178, 244, 178, 245, 178, 247, 178, 248, 178, 249, 178, 250, 178, 251, 178, 255, 178, 0, 179, 1, 179, 4, 179, 8, 179, 16, 179, 17, 179, 19, 179, 20, 179, 21, 179, 28, 179, 84, 179, 85, 179, 86, 179, 88, 179, 91, 179, 92, 179, 94, 179, 95, 179, 100, 179, 101, 179, 103, 179, 105, 179, 107, 179, 110, 179, 112, 179, 113, 179, 116, 179, 120, 179, 128, 179, 129, 179, 131, 179, 132, 179, 133, 179, 140, 179, 144, 179, 148, 179, 160, 179, 161, 179, 168, 179, 172, 179, 196, 179, 197, 179, 200, 179, 203, 179, 204, 179, 206, 179, 208, 179, 212, 179, 213, 179, 215, 179, 217, 179, 219, 179, 221, 179, 224, 179, 228, 179, 232, 179, 252, 179, 16, 180, 24, 180, 28, 180, 32, 180, 40, 180, 41, 180, 43, 180, 52, 180, 80, 180, 81, 180, 84, 180, 88, 180, 96, 180, 97, 180, 99, 180, 101, 180, 108, 180, 128, 180, 136, 180, 157, 180, 164, 180, 168, 180, 172, 180, 181, 180, 183, 180, 185, 180, 192, 180, 196, 180, 200, 180, 208, 180, 213, 180, 220, 180, 221, 180, 224, 180, 227, 180, 228, 180, 230, 180, 236, 180, 237, 180, 239, 180, 241, 180, 248, 180, 20, 181, 21, 181, 24, 181, 27, 181, 28, 181, 36, 181, 37, 181, 39, 181, 40, 181, 41, 181, 42, 181, 48, 181, 49, 181, 52, 181, 56, 181, 64, 181, 65, 181, 67, 181, 68, 181, 69, 181, 75, 181, 76, 181, 77, 181, 80, 181, 84, 181, 92, 181, 93, 181, 95, 181, 96, 181, 97, 181, 160, 181, 161, 181, 164, 181, 168, 181, 170, 181, 171, 181, 176, 181, 177, 181, 179, 181, 180, 181, 181, 181, 187, 181, 188, 181, 189, 181, 192, 181, 196, 181, 204, 181, 205, 181, 207, 181, 208, 181, 209, 181, 216, 181, 236, 181, 16, 182, 17, 182, 20, 182, 24, 182, 37, 182, 44, 182, 52, 182, 72, 182, 100, 182, 104, 182, 156, 182, 157, 182, 160, 182, 164, 182, 171, 182, 172, 182, 177, 182, 212, 182, 240, 182, 244, 182, 248, 182, 0, 183, 1, 183, 5, 183, 40, 183, 41, 183, 44, 183, 47, 183, 48, 183, 56, 183, 57, 183, 59, 183, 68, 183, 72, 183, 76, 183, 84, 183, 85, 183, 96, 183, 100, 183, 104, 183, 112, 183, 113, 183, 115, 183, 117, 183, 124, 183, 125, 183, 128, 183, 132, 183, 140, 183, 141, 183, 143, 183, 144, 183, 145, 183, 146, 183, 150, 183, 151, 183, 152, 183, 153, 183, 156, 183, 160, 183, 168, 183, 169, 183, 171, 183, 172, 183, 173, 183, 180, 183, 181, 183, 184, 183, 199, 183, 201, 183, 236, 183, 237, 183, 240, 183, 244, 183, 252, 183, 253, 183, 255, 183, 0, 184, 1, 184, 7, 184, 8, 184, 9, 184, 12, 184, 16, 184, 24, 184, 25, 184, 27, 184, 29, 184, 36, 184, 37, 184, 40, 184, 44, 184, 52, 184, 53, 184, 55, 184, 56, 184, 57, 184, 64, 184, 68, 184, 81, 184, 83, 184, 92, 184, 93, 184, 96, 184, 100, 184, 108, 184, 109, 184, 111, 184, 113, 184, 120, 184, 124, 184, 141, 184, 168, 184, 176, 184, 180, 184, 184, 184, 192, 184, 193, 184, 195, 184, 197, 184, 204, 184, 208, 184, 212, 184, 221, 184, 223, 184, 225, 184, 232, 184, 233, 184, 236, 184, 240, 184, 248, 184, 249, 184, 251, 184, 253, 184, 4, 185, 24, 185, 32, 185, 60, 185, 61, 185, 64, 185, 68, 185, 76, 185, 79, 185, 81, 185, 88, 185, 89, 185, 92, 185, 96, 185, 104, 185, 105, 185, 107, 185, 109, 185, 116, 185, 117, 185, 120, 185, 124, 185, 132, 185, 133, 185, 135, 185, 137, 185, 138, 185, 141, 185, 142, 185, 172, 185, 173, 185, 176, 185, 180, 185, 188, 185, 189, 185, 191, 185, 193, 185, 200, 185, 201, 185, 204, 185, 206, 185, 207, 185, 208, 185, 209, 185, 210, 185, 216, 185, 217, 185, 219, 185, 221, 185, 222, 185, 225, 185, 227, 185, 228, 185, 229, 185, 232, 185, 236, 185, 244, 185, 245, 185, 247, 185, 248, 185, 249, 185, 250, 185, 0, 186, 1, 186, 8, 186, 21, 186, 56, 186, 57, 186, 60, 186, 64, 186, 66, 186, 72, 186, 73, 186, 75, 186, 77, 186, 78, 186, 83, 186, 84, 186, 85, 186, 88, 186, 92, 186, 100, 186, 101, 186, 103, 186, 104, 186, 105, 186, 112, 186, 113, 186, 116, 186, 120, 186, 131, 186, 132, 186, 133, 186, 135, 186, 140, 186, 168, 186, 169, 186, 171, 186, 172, 186, 176, 186, 178, 186, 184, 186, 185, 186, 187, 186, 189, 186, 196, 186, 200, 186, 216, 186, 217, 186, 252, 186, 0, 187, 4, 187, 13, 187, 15, 187, 17, 187, 24, 187, 28, 187, 32, 187, 41, 187, 43, 187, 52, 187, 53, 187, 54, 187, 56, 187, 59, 187, 60, 187, 61, 187, 62, 187, 68, 187, 69, 187, 71, 187, 73, 187, 77, 187, 79, 187, 80, 187, 84, 187, 88, 187, 97, 187, 99, 187, 108, 187, 136, 187, 140, 187, 144, 187, 164, 187, 168, 187, 172, 187, 180, 187, 183, 187, 192, 187, 196, 187, 200, 187, 208, 187, 211, 187, 248, 187, 249, 187, 252, 187, 255, 187, 0, 188, 2, 188, 8, 188, 9, 188, 11, 188, 12, 188, 13, 188, 15, 188, 17, 188, 20, 188, 21, 188, 22, 188, 23, 188, 24, 188, 27, 188, 28, 188, 29, 188, 30, 188, 31, 188, 36, 188, 37, 188, 39, 188, 41, 188, 45, 188, 48, 188, 49, 188, 52, 188, 56, 188, 64, 188, 65, 188, 67, 188, 68, 188, 69, 188, 73, 188, 76, 188, 77, 188, 80, 188, 93, 188, 132, 188, 133, 188, 136, 188, 139, 188, 140, 188, 142, 188, 148, 188, 149, 188, 151, 188, 153, 188, 154, 188, 160, 188, 161, 188, 164, 188, 167, 188, 168, 188, 176, 188, 177, 188, 179, 188, 180, 188, 181, 188, 188, 188, 189, 188, 192, 188, 196, 188, 205, 188, 207, 188, 208, 188, 209, 188, 213, 188, 216, 188, 220, 188, 244, 188, 245, 188, 246, 188, 248, 188, 252, 188, 4, 189, 5, 189, 7, 189, 9, 189, 16, 189, 20, 189, 36, 189, 44, 189, 64, 189, 72, 189, 73, 189, 76, 189, 80, 189, 88, 189, 89, 189, 100, 189, 104, 189, 128, 189, 129, 189, 132, 189, 135, 189, 136, 189, 137, 189, 138, 189, 144, 189, 145, 189, 147, 189, 149, 189, 153, 189, 154, 189, 156, 189, 164, 189, 176, 189, 184, 189, 212, 189, 213, 189, 216, 189, 220, 189, 233, 189, 240, 189, 244, 189, 248, 189, 0, 190, 3, 190, 5, 190, 12, 190, 13, 190, 16, 190, 20, 190, 28, 190, 29, 190, 31, 190, 68, 190, 69, 190, 72, 190, 76, 190, 78, 190, 84, 190, 85, 190, 87, 190, 89, 190, 90, 190, 91, 190, 96, 190, 97, 190, 100, 190, 104, 190, 106, 190, 112, 190, 113, 190, 115, 190, 116, 190, 117, 190, 123, 190, 124, 190, 125, 190, 128, 190, 132, 190, 140, 190, 141, 190, 143, 190, 144, 190, 145, 190, 152, 190, 153, 190, 168, 190, 208, 190, 209, 190, 212, 190, 215, 190, 216, 190, 224, 190, 227, 190, 228, 190, 229, 190, 236, 190, 1, 191, 8, 191, 9, 191, 24, 191, 25, 191, 27, 191, 28, 191, 29, 191, 64, 191, 65, 191, 68, 191, 72, 191, 80, 191, 81, 191, 85, 191, 148, 191, 176, 191, 197, 191, 204, 191, 205, 191, 208, 191, 212, 191, 220, 191, 223, 191, 225, 191, 60, 192, 81, 192, 88, 192, 92, 192, 96, 192, 104, 192, 105, 192, 144, 192, 145, 192, 148, 192, 152, 192, 160, 192, 161, 192, 163, 192, 165, 192, 172, 192, 173, 192, 175, 192, 176, 192, 179, 192, 180, 192, 181, 192, 182, 192, 188, 192, 189, 192, 191, 192, 192, 192, 193, 192, 197, 192, 200, 192, 201, 192, 204, 192, 208, 192, 216, 192, 217, 192, 219, 192, 220, 192, 221, 192, 228, 192, 229, 192, 232, 192, 236, 192, 244, 192, 245, 192, 247, 192, 249, 192, 0, 193, 4, 193, 8, 193, 16, 193, 21, 193, 28, 193, 29, 193, 30, 193, 31, 193, 32, 193, 35, 193, 36, 193, 38, 193, 39, 193, 44, 193, 45, 193, 47, 193, 48, 193, 49, 193, 54, 193, 56, 193, 57, 193, 60, 193, 64, 193, 72, 193, 73, 193, 75, 193, 76, 193, 77, 193, 84, 193, 85, 193, 88, 193, 92, 193, 100, 193, 101, 193, 103, 193, 104, 193, 105, 193, 112, 193, 116, 193, 120, 193, 133, 193, 140, 193, 141, 193, 142, 193, 144, 193, 148, 193, 150, 193, 156, 193, 157, 193, 159, 193, 161, 193, 165, 193, 168, 193, 169, 193, 172, 193, 176, 193, 189, 193, 196, 193, 200, 193, 204, 193, 212, 193, 215, 193, 216, 193, 224, 193, 228, 193, 232, 193, 240, 193, 241, 193, 243, 193, 252, 193, 253, 193, 0, 194, 4, 194, 12, 194, 13, 194, 15, 194, 17, 194, 24, 194, 25, 194, 28, 194, 31, 194, 32, 194, 40, 194, 41, 194, 43, 194, 45, 194, 47, 194, 49, 194, 50, 194, 52, 194, 72, 194, 80, 194, 81, 194, 84, 194, 88, 194, 96, 194, 101, 194, 108, 194, 109, 194, 112, 194, 116, 194, 124, 194, 125, 194, 127, 194, 129, 194, 136, 194, 137, 194, 144, 194, 152, 194, 155, 194, 157, 194, 164, 194, 165, 194, 168, 194, 172, 194, 173, 194, 180, 194, 181, 194, 183, 194, 185, 194, 220, 194, 221, 194, 224, 194, 227, 194, 228, 194, 235, 194, 236, 194, 237, 194, 239, 194, 241, 194, 246, 194, 248, 194, 249, 194, 251, 194, 252, 194, 0, 195, 8, 195, 9, 195, 12, 195, 13, 195, 19, 195, 20, 195, 21, 195, 24, 195, 28, 195, 36, 195, 37, 195, 40, 195, 41, 195, 69, 195, 104, 195, 105, 195, 108, 195, 112, 195, 114, 195, 120, 195, 121, 195, 124, 195, 125, 195, 132, 195, 136, 195, 140, 195, 192, 195, 216, 195, 217, 195, 220, 195, 223, 195, 224, 195, 226, 195, 232, 195, 233, 195, 237, 195, 244, 195, 245, 195, 248, 195, 8, 196, 16, 196, 36, 196, 44, 196, 48, 196, 52, 196, 60, 196, 61, 196, 72, 196, 100, 196, 101, 196, 104, 196, 108, 196, 116, 196, 117, 196, 121, 196, 128, 196, 148, 196, 156, 196, 184, 196, 188, 196, 233, 196, 240, 196, 241, 196, 244, 196, 248, 196, 250, 196, 255, 196, 0, 197, 1, 197, 12, 197, 16, 197, 20, 197, 28, 197, 40, 197, 41, 197, 44, 197, 48, 197, 56, 197, 57, 197, 59, 197, 61, 197, 68, 197, 69, 197, 72, 197, 73, 197, 74, 197, 76, 197, 77, 197, 78, 197, 83, 197, 84, 197, 85, 197, 87, 197, 88, 197, 89, 197, 93, 197, 94, 197, 96, 197, 97, 197, 100, 197, 104, 197, 112, 197, 113, 197, 115, 197, 116, 197, 117, 197, 124, 197, 125, 197, 128, 197, 132, 197, 135, 197, 140, 197, 141, 197, 143, 197, 145, 197, 149, 197, 151, 197, 152, 197, 156, 197, 160, 197, 169, 197, 180, 197, 181, 197, 184, 197, 185, 197, 187, 197, 188, 197, 189, 197, 190, 197, 196, 197, 197, 197, 198, 197, 199, 197, 200, 197, 201, 197, 202, 197, 204, 197, 206, 197, 208, 197, 209, 197, 212, 197, 216, 197, 224, 197, 225, 197, 227, 197, 229, 197, 236, 197, 237, 197, 238, 197, 240, 197, 244, 197, 246, 197, 247, 197, 252, 197, 253, 197, 254, 197, 255, 197, 0, 198, 1, 198, 5, 198, 6, 198, 7, 198, 8, 198, 12, 198, 16, 198, 24, 198, 25, 198, 27, 198, 28, 198, 36, 198, 37, 198, 40, 198, 44, 198, 45, 198, 46, 198, 48, 198, 51, 198, 52, 198, 53, 198, 55, 198, 57, 198, 59, 198, 64, 198, 65, 198, 68, 198, 72, 198, 80, 198, 81, 198, 83, 198, 84, 198, 85, 198, 92, 198, 93, 198, 96, 198, 108, 198, 111, 198, 113, 198, 120, 198, 121, 198, 124, 198, 128, 198, 136, 198, 137, 198, 139, 198, 141, 198, 148, 198, 149, 198, 152, 198, 156, 198, 164, 198, 165, 198, 167, 198, 169, 198, 176, 198, 177, 198, 180, 198, 184, 198, 185, 198, 186, 198, 192, 198, 193, 198, 195, 198, 197, 198, 204, 198, 205, 198, 208, 198, 212, 198, 220, 198, 221, 198, 224, 198, 225, 198, 232, 198, 233, 198, 236, 198, 240, 198, 248, 198, 249, 198, 253, 198, 4, 199, 5, 199, 8, 199, 12, 199, 20, 199, 21, 199, 23, 199, 25, 199, 32, 199, 33, 199, 36, 199, 40, 199, 48, 199, 49, 199, 51, 199, 53, 199, 55, 199, 60, 199, 61, 199, 64, 199, 68, 199, 74, 199, 76, 199, 77, 199, 79, 199, 81, 199, 82, 199, 83, 199, 84, 199, 85, 199, 86, 199, 87, 199, 88, 199, 92, 199, 96, 199, 104, 199, 107, 199, 116, 199, 117, 199, 120, 199, 124, 199, 125, 199, 126, 199, 131, 199, 132, 199, 133, 199, 135, 199, 136, 199, 137, 199, 138, 199, 142, 199, 144, 199, 145, 199, 148, 199, 150, 199, 151, 199, 152, 199, 154, 199, 160, 199, 161, 199, 163, 199, 164, 199, 165, 199, 166, 199, 172, 199, 173, 199, 176, 199, 180, 199, 188, 199, 189, 199, 191, 199, 192, 199, 193, 199, 200, 199, 201, 199, 204, 199, 206, 199, 208, 199, 216, 199, 221, 199, 228, 199, 232, 199, 236, 199, 0, 200, 1, 200, 4, 200, 8, 200, 10, 200, 16, 200, 17, 200, 19, 200, 21, 200, 22, 200, 28, 200, 29, 200, 32, 200, 36, 200, 44, 200, 45, 200, 47, 200, 49, 200, 56, 200, 60, 200, 64, 200, 72, 200, 73, 200, 76, 200, 77, 200, 84, 200, 112, 200, 113, 200, 116, 200, 120, 200, 122, 200, 128, 200, 129, 200, 131, 200, 133, 200, 134, 200, 135, 200, 139, 200, 140, 200, 141, 200, 148, 200, 157, 200, 159, 200, 161, 200, 168, 200, 188, 200, 189, 200, 196, 200, 200, 200, 204, 200, 212, 200, 213, 200, 215, 200, 217, 200, 224, 200, 225, 200, 228, 200, 245, 200, 252, 200, 253, 200, 0, 201, 4, 201, 5, 201, 6, 201, 12, 201, 13, 201, 15, 201, 17, 201, 24, 201, 44, 201, 52, 201, 80, 201, 81, 201, 84, 201, 88, 201, 96, 201, 97, 201, 99, 201, 108, 201, 112, 201, 116, 201, 124, 201, 136, 201, 137, 201, 140, 201, 144, 201, 152, 201, 153, 201, 155, 201, 157, 201, 192, 201, 193, 201, 196, 201, 199, 201, 200, 201, 202, 201, 208, 201, 209, 201, 211, 201, 213, 201, 214, 201, 217, 201, 218, 201, 220, 201, 221, 201, 224, 201, 226, 201, 228, 201, 231, 201, 236, 201, 237, 201, 239, 201, 240, 201, 241, 201, 248, 201, 249, 201, 252, 201, 0, 202, 8, 202, 9, 202, 11, 202, 12, 202, 13, 202, 20, 202, 24, 202, 41, 202, 76, 202, 77, 202, 80, 202, 84, 202, 92, 202, 93, 202, 95, 202, 96, 202, 97, 202, 104, 202, 125, 202, 132, 202, 152, 202, 188, 202, 189, 202, 192, 202, 196, 202, 204, 202, 205, 202, 207, 202, 209, 202, 211, 202, 216, 202, 217, 202, 224, 202, 236, 202, 244, 202, 8, 203, 16, 203, 20, 203, 24, 203, 32, 203, 33, 203, 65, 203, 72, 203, 73, 203, 76, 203, 80, 203, 88, 203, 89, 203, 93, 203, 100, 203, 120, 203, 121, 203, 156, 203, 184, 203, 212, 203, 228, 203, 231, 203, 233, 203, 12, 204, 13, 204, 16, 204, 20, 204, 28, 204, 29, 204, 33, 204, 34, 204, 39, 204, 40, 204, 41, 204, 44, 204, 46, 204, 48, 204, 56, 204, 57, 204, 59, 204, 60, 204, 61, 204, 62, 204, 68, 204, 69, 204, 72, 204, 76, 204, 84, 204, 85, 204, 87, 204, 88, 204, 89, 204, 96, 204, 100, 204, 102, 204, 104, 204, 112, 204, 117, 204, 152, 204, 153, 204, 156, 204, 160, 204, 168, 204, 169, 204, 171, 204, 172, 204, 173, 204, 180, 204, 181, 204, 184, 204, 188, 204, 196, 204, 197, 204, 199, 204, 201, 204, 208, 204, 212, 204, 228, 204, 236, 204, 240, 204, 1, 205, 8, 205, 9, 205, 12, 205, 16, 205, 24, 205, 25, 205, 27, 205, 29, 205, 36, 205, 40, 205, 44, 205, 57, 205, 92, 205, 96, 205, 100, 205, 108, 205, 109, 205, 111, 205, 113, 205, 120, 205, 136, 205, 148, 205, 149, 205, 152, 205, 156, 205, 164, 205, 165, 205, 167, 205, 169, 205, 176, 205, 196, 205, 204, 205, 208, 205, 232, 205, 236, 205, 240, 205, 248, 205, 249, 205, 251, 205, 253, 205, 4, 206, 8, 206, 12, 206, 20, 206, 25, 206, 32, 206, 33, 206, 36, 206, 40, 206, 48, 206, 49, 206, 51, 206, 53, 206, 88, 206, 89, 206, 92, 206, 95, 206, 96, 206, 97, 206, 104, 206, 105, 206, 107, 206, 109, 206, 116, 206, 117, 206, 120, 206, 124, 206, 132, 206, 133, 206, 135, 206, 137, 206, 144, 206, 145, 206, 148, 206, 152, 206, 160, 206, 161, 206, 163, 206, 164, 206, 165, 206, 172, 206, 173, 206, 193, 206, 228, 206, 229, 206, 232, 206, 235, 206, 236, 206, 244, 206, 245, 206, 247, 206, 248, 206, 249, 206, 0, 207, 1, 207, 4, 207, 8, 207, 16, 207, 17, 207, 19, 207, 21, 207, 28, 207, 32, 207, 36, 207, 44, 207, 45, 207, 47, 207, 48, 207, 49, 207, 56, 207, 84, 207, 85, 207, 88, 207, 92, 207, 100, 207, 101, 207, 103, 207, 105, 207, 112, 207, 113, 207, 116, 207, 120, 207, 128, 207, 133, 207, 140, 207, 161, 207, 168, 207, 176, 207, 196, 207, 224, 207, 225, 207, 228, 207, 232, 207, 240, 207, 241, 207, 243, 207, 245, 207, 252, 207, 0, 208, 4, 208, 17, 208, 24, 208, 45, 208, 52, 208, 53, 208, 56, 208, 60, 208, 68, 208, 69, 208, 71, 208, 73, 208, 80, 208, 84, 208, 88, 208, 96, 208, 108, 208, 109, 208, 112, 208, 116, 208, 124, 208, 125, 208, 129, 208, 164, 208, 165, 208, 168, 208, 172, 208, 180, 208, 181, 208, 183, 208, 185, 208, 192, 208, 193, 208, 196, 208, 200, 208, 201, 208, 208, 208, 209, 208, 211, 208, 212, 208, 213, 208, 220, 208, 221, 208, 224, 208, 228, 208, 236, 208, 237, 208, 239, 208, 240, 208, 241, 208, 248, 208, 13, 209, 48, 209, 49, 209, 52, 209, 56, 209, 58, 209, 64, 209, 65, 209, 67, 209, 68, 209, 69, 209, 76, 209, 77, 209, 80, 209, 84, 209, 92, 209, 93, 209, 95, 209, 97, 209, 104, 209, 108, 209, 124, 209, 132, 209, 136, 209, 160, 209, 161, 209, 164, 209, 168, 209, 176, 209, 177, 209, 179, 209, 181, 209, 186, 209, 188, 209, 192, 209, 216, 209, 244, 209, 248, 209, 7, 210, 9, 210, 16, 210, 44, 210, 45, 210, 48, 210, 52, 210, 60, 210, 61, 210, 63, 210, 65, 210, 72, 210, 92, 210, 100, 210, 128, 210, 129, 210, 132, 210, 136, 210, 144, 210, 145, 210, 149, 210, 156, 210, 160, 210, 164, 210, 172, 210, 177, 210, 184, 210, 185, 210, 188, 210, 191, 210, 192, 210, 194, 210, 200, 210, 201, 210, 203, 210, 212, 210, 216, 210, 220, 210, 228, 210, 229, 210, 240, 210, 241, 210, 244, 210, 248, 210, 0, 211, 1, 211, 3, 211, 5, 211, 12, 211, 13, 211, 14, 211, 16, 211, 20, 211, 22, 211, 28, 211, 29, 211, 31, 211, 32, 211, 33, 211, 37, 211, 40, 211, 41, 211, 44, 211, 48, 211, 56, 211, 57, 211, 59, 211, 60, 211, 61, 211, 68, 211, 69, 211, 124, 211, 125, 211, 128, 211, 132, 211, 140, 211, 141, 211, 143, 211, 144, 211, 145, 211, 152, 211, 153, 211, 156, 211, 160, 211, 168, 211, 169, 211, 171, 211, 173, 211, 180, 211, 184, 211, 188, 211, 196, 211, 197, 211, 200, 211, 201, 211, 208, 211, 216, 211, 225, 211, 227, 211, 236, 211, 237, 211, 240, 211, 244, 211, 252, 211, 253, 211, 255, 211, 1, 212, 8, 212, 29, 212, 64, 212, 68, 212, 92, 212, 96, 212, 100, 212, 109, 212, 111, 212, 120, 212, 121, 212, 124, 212, 127, 212, 128, 212, 130, 212, 136, 212, 137, 212, 139, 212, 141, 212, 148, 212, 169, 212, 204, 212, 208, 212, 212, 212, 220, 212, 223, 212, 232, 212, 236, 212, 240, 212, 248, 212, 251, 212, 253, 212, 4, 213, 8, 213, 12, 213, 20, 213, 21, 213, 23, 213, 60, 213, 61, 213, 64, 213, 68, 213, 76, 213, 77, 213, 79, 213, 81, 213, 88, 213, 89, 213, 92, 213, 96, 213, 101, 213, 104, 213, 105, 213, 107, 213, 109, 213, 116, 213, 117, 213, 120, 213, 124, 213, 132, 213, 133, 213, 135, 213, 136, 213, 137, 213, 144, 213, 165, 213, 200, 213, 201, 213, 204, 213, 208, 213, 210, 213, 216, 213, 217, 213, 219, 213, 221, 213, 228, 213, 229, 213, 232, 213, 236, 213, 244, 213, 245, 213, 247, 213, 249, 213, 0, 214, 1, 214, 4, 214, 8, 214, 16, 214, 17, 214, 19, 214, 20, 214, 21, 214, 28, 214, 32, 214, 36, 214, 45, 214, 56, 214, 57, 214, 60, 214, 64, 214, 69, 214, 72, 214, 73, 214, 75, 214, 77, 214, 81, 214, 84, 214, 85, 214, 88, 214, 92, 214, 103, 214, 105, 214, 112, 214, 113, 214, 116, 214, 131, 214, 133, 214, 140, 214, 141, 214, 144, 214, 148, 214, 157, 214, 159, 214, 161, 214, 168, 214, 172, 214, 176, 214, 185, 214, 187, 214, 196, 214, 197, 214, 200, 214, 204, 214, 209, 214, 212, 214, 215, 214, 217, 214, 224, 214, 228, 214, 232, 214, 240, 214, 245, 214, 252, 214, 253, 214, 0, 215, 4, 215, 17, 215, 24, 215, 25, 215, 28, 215, 32, 215, 40, 215, 41, 215, 43, 215, 45, 215, 52, 215, 53, 215, 56, 215, 60, 215, 68, 215, 71, 215, 73, 215, 80, 215, 81, 215, 84, 215, 86, 215, 87, 215, 88, 215, 89, 215, 96, 215, 97, 215, 99, 215, 101, 215, 105, 215, 108, 215, 112, 215, 116, 215, 124, 215, 125, 215, 129, 215, 136, 215, 137, 215, 140, 215, 144, 215, 152, 215, 153, 215, 155, 215, 157, 215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 79, 115, 79, 71, 80, 249, 80, 160, 82, 239, 83, 117, 84, 229, 84, 9, 86, 193, 90, 182, 91, 135, 102, 182, 103, 183, 103, 239, 103, 76, 107, 194, 115, 194, 117, 60, 122, 219, 130, 4, 131, 87, 136, 136, 136, 54, 138, 200, 140, 207, 141, 251, 142, 230, 143, 213, 153, 59, 82, 116, 83, 4, 84, 106, 96, 100, 97, 188, 107, 207, 115, 26, 129, 186, 137, 210, 137, 163, 149, 131, 79, 10, 82, 190, 88, 120, 89, 230, 89, 114, 94, 121, 94, 199, 97, 192, 99, 70, 103, 236, 103, 127, 104, 151, 111, 78, 118, 11, 119, 245, 120, 8, 122, 255, 122, 33, 124, 157, 128, 110, 130, 113, 130, 235, 138, 147, 149, 107, 78, 157, 85, 247, 102, 52, 110, 163, 120, 237, 122, 91, 132, 16, 137, 78, 135, 168, 151, 216, 82, 78, 87, 42, 88, 76, 93, 31, 97, 190, 97, 33, 98, 98, 101, 209, 103, 68, 106, 27, 110, 24, 117, 179, 117, 227, 118, 176, 119, 58, 125, 175, 144, 81, 148, 82, 148, 149, 159, 35, 83, 172, 92, 50, 117, 219, 128, 64, 146, 152, 149, 91, 82, 8, 88, 220, 89, 161, 92, 23, 93, 183, 94, 58, 95, 74, 95, 119, 97, 95, 108, 122, 117, 134, 117, 224, 124, 115, 125, 177, 125, 140, 127, 84, 129, 33, 130, 145, 133, 65, 137, 27, 139, 252, 146, 77, 150, 71, 156, 203, 78, 247, 78, 11, 80, 241, 81, 79, 88, 55, 97, 62, 97, 104, 97, 57, 101, 234, 105, 17, 111, 165, 117, 134, 118, 214, 118, 135, 123, 165, 130, 203, 132, 0, 249, 167, 147, 139, 149, 128, 85, 162, 91, 81, 87, 1, 249, 179, 124, 185, 127, 181, 145, 40, 80, 187, 83, 69, 92, 232, 93, 210, 98, 110, 99, 218, 100, 231, 100, 32, 110, 172, 112, 91, 121, 221, 141, 30, 142, 2, 249, 125, 144, 69, 146, 248, 146, 126, 78, 246, 78, 101, 80, 254, 93, 250, 94, 6, 97, 87, 105, 113, 129, 84, 134, 71, 142, 117, 147, 43, 154, 94, 78, 145, 80, 112, 103, 64, 104, 9, 81, 141, 82, 146, 82, 162, 106, 188, 119, 16, 146, 212, 158, 171, 82, 47, 96, 242, 143, 72, 80, 169, 97, 237, 99, 202, 100, 60, 104, 132, 106, 192, 111, 136, 129, 161, 137, 148, 150, 5, 88, 125, 114, 172, 114, 4, 117, 121, 125, 109, 126, 169, 128, 139, 137, 116, 139, 99, 144, 81, 157, 137, 98, 122, 108, 84, 111, 80, 125, 58, 127, 35, 138, 124, 81, 74, 97, 157, 123, 25, 139, 87, 146, 140, 147, 172, 78, 211, 79, 30, 80, 190, 80, 6, 81, 193, 82, 205, 82, 127, 83, 112, 87, 131, 88, 154, 94, 145, 95, 118, 97, 172, 97, 206, 100, 108, 101, 111, 102, 187, 102, 244, 102, 151, 104, 135, 109, 133, 112, 241, 112, 159, 116, 165, 116, 202, 116, 217, 117, 108, 120, 236, 120, 223, 122, 246, 122, 69, 125, 147, 125, 21, 128, 63, 128, 27, 129, 150, 131, 102, 139, 21, 143, 21, 144, 225, 147, 3, 152, 56, 152, 90, 154, 232, 155, 194, 79, 83, 85, 58, 88, 81, 89, 99, 91, 70, 92, 184, 96, 18, 98, 66, 104, 176, 104, 232, 104, 170, 110, 76, 117, 120, 118, 206, 120, 61, 122, 251, 124, 107, 126, 124, 126, 8, 138, 161, 138, 63, 140, 142, 150, 196, 157, 228, 83, 233, 83, 74, 84, 113, 84, 250, 86, 209, 89, 100, 91, 59, 92, 171, 94, 247, 98, 55, 101, 69, 101, 114, 101, 160, 102, 175, 103, 193, 105, 189, 108, 252, 117, 144, 118, 126, 119, 63, 122, 148, 127, 3, 128, 161, 128, 143, 129, 230, 130, 253, 130, 240, 131, 193, 133, 49, 136, 180, 136, 165, 138, 3, 249, 156, 143, 46, 147, 199, 150, 103, 152, 216, 154, 19, 159, 237, 84, 155, 101, 242, 102, 143, 104, 64, 122, 55, 140, 96, 157, 240, 86, 100, 87, 17, 93, 6, 102, 177, 104, 205, 104, 254, 110, 40, 116, 158, 136, 228, 155, 104, 108, 4, 249, 168, 154, 155, 79, 108, 81, 113, 81, 159, 82, 84, 91, 229, 93, 80, 96, 109, 96, 241, 98, 167, 99, 59, 101, 217, 115, 122, 122, 163, 134, 162, 140, 143, 151, 50, 78, 225, 91, 8, 98, 156, 103, 220, 116, 209, 121, 211, 131, 135, 138, 178, 138, 232, 141, 78, 144, 75, 147, 70, 152, 211, 94, 232, 105, 255, 133, 237, 144, 5, 249, 160, 81, 152, 91, 236, 91, 99, 97, 250, 104, 62, 107, 76, 112, 47, 116, 216, 116, 161, 123, 80, 127, 197, 131, 192, 137, 171, 140, 220, 149, 40, 153, 46, 82, 93, 96, 236, 98, 2, 144, 138, 79, 73, 81, 33, 83, 217, 88, 227, 94, 224, 102, 56, 109, 154, 112, 194, 114, 214, 115, 80, 123, 241, 128, 91, 148, 102, 83, 155, 99, 107, 127, 86, 78, 128, 80, 74, 88, 222, 88, 42, 96, 39, 97, 208, 98, 208, 105, 65, 155, 143, 91, 24, 125, 177, 128, 95, 143, 164, 78, 209, 80, 172, 84, 172, 85, 12, 91, 160, 93, 231, 93, 42, 101, 78, 101, 33, 104, 75, 106, 225, 114, 142, 118, 239, 119, 94, 125, 249, 127, 160, 129, 78, 133, 223, 134, 3, 143, 78, 143, 202, 144, 3, 153, 85, 154, 171, 155, 24, 78, 69, 78, 93, 78, 199, 78, 241, 79, 119, 81, 254, 82, 64, 83, 227, 83, 229, 83, 142, 84, 20, 86, 117, 87, 162, 87, 199, 91, 135, 93, 208, 94, 252, 97, 216, 98, 81, 101, 184, 103, 233, 103, 203, 105, 80, 107, 198, 107, 236, 107, 66, 108, 157, 110, 120, 112, 215, 114, 150, 115, 3, 116, 191, 119, 233, 119, 118, 122, 127, 125, 9, 128, 252, 129, 5, 130, 10, 130, 223, 130, 98, 136, 51, 139, 252, 140, 192, 142, 17, 144, 177, 144, 100, 146, 182, 146, 210, 153, 69, 154, 233, 156, 215, 157, 156, 159, 11, 87, 64, 92, 202, 131, 160, 151, 171, 151, 180, 158, 27, 84, 152, 122, 164, 127, 217, 136, 205, 142, 225, 144, 0, 88, 72, 92, 152, 99, 159, 122, 174, 91, 19, 95, 121, 122, 174, 122, 142, 130, 172, 142, 38, 80, 56, 82, 248, 82, 119, 83, 8, 87, 243, 98, 114, 99, 10, 107, 195, 109, 55, 119, 165, 83, 87, 115, 104, 133, 118, 142, 213, 149, 58, 103, 195, 106, 112, 111, 109, 138, 204, 142, 75, 153, 6, 249, 119, 102, 120, 107, 180, 140, 60, 155, 7, 249, 235, 83, 45, 87, 78, 89, 198, 99, 251, 105, 234, 115, 69, 120, 186, 122, 197, 122, 254, 124, 117, 132, 143, 137, 115, 141, 53, 144, 168, 149, 251, 82, 71, 87, 71, 117, 96, 123, 204, 131, 30, 146, 8, 249, 88, 106, 75, 81, 75, 82, 135, 82, 31, 98, 216, 104, 117, 105, 153, 150, 197, 80, 164, 82, 228, 82, 195, 97, 164, 101, 57, 104, 255, 105, 126, 116, 75, 123, 185, 130, 235, 131, 178, 137, 57, 139, 209, 143, 73, 153, 9, 249, 202, 78, 151, 89, 210, 100, 17, 102, 142, 106, 52, 116, 129, 121, 189, 121, 169, 130, 126, 136, 127, 136, 95, 137, 10, 249, 38, 147, 11, 79, 202, 83, 37, 96, 113, 98, 114, 108, 26, 125, 102, 125, 152, 78, 98, 81, 220, 119, 175, 128, 1, 79, 14, 79, 118, 81, 128, 81, 220, 85, 104, 86, 59, 87, 250, 87, 252, 87, 20, 89, 71, 89, 147, 89, 196, 91, 144, 92, 14, 93, 241, 93, 126, 94, 204, 95, 128, 98, 215, 101, 227, 101, 30, 103, 31, 103, 94, 103, 203, 104, 196, 104, 95, 106, 58, 107, 35, 108, 125, 108, 130, 108, 199, 109, 152, 115, 38, 116, 42, 116, 130, 116, 163, 116, 120, 117, 127, 117, 129, 120, 239, 120, 65, 121, 71, 121, 72, 121, 122, 121, 149, 123, 0, 125, 186, 125, 136, 127, 6, 128, 45, 128, 140, 128, 24, 138, 79, 139, 72, 140, 119, 141, 33, 147, 36, 147, 226, 152, 81, 153, 14, 154, 15, 154, 101, 154, 146, 158, 202, 125, 118, 79, 9, 84, 238, 98, 84, 104, 209, 145, 171, 85, 58, 81, 11, 249, 12, 249, 28, 90, 230, 97, 13, 249, 207, 98, 255, 98, 14, 249, 15, 249, 16, 249, 17, 249, 18, 249, 19, 249, 163, 144, 20, 249, 21, 249, 22, 249, 23, 249, 24, 249, 254, 138, 25, 249, 26, 249, 27, 249, 28, 249, 150, 102, 29, 249, 86, 113, 30, 249, 31, 249, 227, 150, 32, 249, 79, 99, 122, 99, 87, 83, 33, 249, 143, 103, 96, 105, 115, 110, 34, 249, 55, 117, 35, 249, 36, 249, 37, 249, 13, 125, 38, 249, 39, 249, 114, 136, 202, 86, 24, 90, 40, 249, 41, 249, 42, 249, 43, 249, 44, 249, 67, 78, 45, 249, 103, 81, 72, 89, 240, 103, 16, 128, 46, 249, 115, 89, 116, 94, 154, 100, 202, 121, 245, 95, 108, 96, 200, 98, 123, 99, 231, 91, 215, 91, 170, 82, 47, 249, 116, 89, 41, 95, 18, 96, 48, 249, 49, 249, 50, 249, 89, 116, 51, 249, 52, 249, 53, 249, 54, 249, 55, 249, 56, 249, 209, 153, 57, 249, 58, 249, 59, 249, 60, 249, 61, 249, 62, 249, 63, 249, 64, 249, 65, 249, 66, 249, 67, 249, 195, 111, 68, 249, 69, 249, 191, 129, 178, 143, 241, 96, 70, 249, 71, 249, 102, 129, 72, 249, 73, 249, 63, 92, 74, 249, 75, 249, 76, 249, 77, 249, 78, 249, 79, 249, 80, 249, 81, 249, 233, 90, 37, 138, 123, 103, 16, 125, 82, 249, 83, 249, 84, 249, 85, 249, 86, 249, 87, 249, 253, 128, 88, 249, 89, 249, 60, 92, 229, 108, 63, 83, 186, 110, 26, 89, 54, 131, 57, 78, 182, 78, 70, 79, 174, 85, 24, 87, 199, 88, 86, 95, 183, 101, 230, 101, 128, 106, 181, 107, 77, 110, 237, 119, 239, 122, 30, 124, 222, 125, 203, 134, 146, 136, 50, 145, 91, 147, 187, 100, 190, 111, 122, 115, 184, 117, 84, 144, 86, 85, 77, 87, 186, 97, 212, 100, 199, 102, 225, 109, 91, 110, 109, 111, 185, 111, 240, 117, 67, 128, 189, 129, 65, 133, 131, 137, 199, 138, 90, 139, 31, 147, 147, 108, 83, 117, 84, 123, 15, 142, 93, 144, 16, 85, 2, 88, 88, 88, 98, 94, 7, 98, 158, 100, 224, 104, 118, 117, 214, 124, 179, 135, 232, 158, 227, 78, 136, 87, 110, 87, 39, 89, 13, 92, 177, 92, 54, 94, 133, 95, 52, 98, 225, 100, 179, 115, 250, 129, 139, 136, 184, 140, 138, 150, 219, 158, 133, 91, 183, 95, 179, 96, 18, 80, 0, 82, 48, 82, 22, 87, 53, 88, 87, 88, 14, 92, 96, 92, 246, 92, 139, 93, 166, 94, 146, 95, 188, 96, 17, 99, 137, 99, 23, 100, 67, 104, 249, 104, 194, 106, 216, 109, 33, 110, 212, 110, 228, 111, 254, 113, 220, 118, 121, 119, 177, 121, 59, 122, 4, 132, 169, 137, 237, 140, 243, 141, 72, 142, 3, 144, 20, 144, 83, 144, 253, 144, 77, 147, 118, 150, 220, 151, 210, 107, 6, 112, 88, 114, 162, 114, 104, 115, 99, 119, 191, 121, 228, 123, 155, 126, 128, 139, 169, 88, 199, 96, 102, 101, 253, 101, 190, 102, 140, 108, 30, 113, 201, 113, 90, 140, 19, 152, 109, 78, 129, 122, 221, 78, 172, 81, 205, 81, 213, 82, 12, 84, 167, 97, 113, 103, 80, 104, 223, 104, 30, 109, 124, 111, 188, 117, 179, 119, 229, 122, 244, 128, 99, 132, 133, 146, 92, 81, 151, 101, 92, 103, 147, 103, 216, 117, 199, 122, 115, 131, 90, 249, 70, 140, 23, 144, 45, 152, 111, 92, 192, 129, 154, 130, 65, 144, 111, 144, 13, 146, 151, 95, 157, 93, 89, 106, 200, 113, 123, 118, 73, 123, 228, 133, 4, 139, 39, 145, 48, 154, 135, 85, 246, 97, 91, 249, 105, 118, 133, 127, 63, 134, 186, 135, 248, 136, 143, 144, 92, 249, 27, 109, 217, 112, 222, 115, 97, 125, 61, 132, 93, 249, 106, 145, 241, 153, 94, 249, 130, 78, 117, 83, 4, 107, 18, 107, 62, 112, 27, 114, 45, 134, 30, 158, 76, 82, 163, 143, 80, 93, 229, 100, 44, 101, 22, 107, 235, 111, 67, 124, 156, 126, 205, 133, 100, 137, 189, 137, 201, 98, 216, 129, 31, 136, 202, 94, 23, 103, 106, 109, 252, 114, 5, 116, 111, 116, 130, 135, 222, 144, 134, 79, 13, 93, 160, 95, 10, 132, 183, 81, 160, 99, 101, 117, 174, 78, 6, 80, 105, 81, 201, 81, 129, 104, 17, 106, 174, 124, 177, 124, 231, 124, 111, 130, 210, 138, 27, 143, 207, 145, 182, 79, 55, 81, 245, 82, 66, 84, 236, 94, 110, 97, 62, 98, 197, 101, 218, 106, 254, 111, 42, 121, 220, 133, 35, 136, 173, 149, 98, 154, 106, 154, 151, 158, 206, 158, 155, 82, 198, 102, 119, 107, 29, 112, 43, 121, 98, 143, 66, 151, 144, 97, 0, 98, 35, 101, 35, 111, 73, 113, 137, 116, 244, 125, 111, 128, 238, 132, 38, 143, 35, 144, 74, 147, 189, 81, 23, 82, 163, 82, 12, 109, 200, 112, 194, 136, 201, 94, 130, 101, 174, 107, 194, 111, 62, 124, 117, 115, 228, 78, 54, 79, 249, 86, 95, 249, 186, 92, 186, 93, 28, 96, 178, 115, 45, 123, 154, 127, 206, 127, 70, 128, 30, 144, 52, 146, 246, 150, 72, 151, 24, 152, 97, 159, 139, 79, 167, 111, 174, 121, 180, 145, 183, 150, 222, 82, 96, 249, 136, 100, 196, 100, 211, 106, 94, 111, 24, 112, 16, 114, 231, 118, 1, 128, 6, 134, 92, 134, 239, 141, 5, 143, 50, 151, 111, 155, 250, 157, 117, 158, 140, 120, 127, 121, 160, 125, 201, 131, 4, 147, 127, 158, 147, 158, 214, 138, 223, 88, 4, 95, 39, 103, 39, 112, 207, 116, 96, 124, 126, 128, 33, 81, 40, 112, 98, 114, 202, 120, 194, 140, 218, 140, 244, 140, 247, 150, 134, 78, 218, 80, 238, 91, 214, 94, 153, 101, 206, 113, 66, 118, 173, 119, 74, 128, 252, 132, 124, 144, 39, 155, 141, 159, 216, 88, 65, 90, 98, 92, 19, 106, 218, 109, 15, 111, 59, 118, 47, 125, 55, 126, 30, 133, 56, 137, 228, 147, 75, 150, 137, 82, 210, 101, 243, 103, 180, 105, 65, 109, 156, 110, 15, 112, 9, 116, 96, 116, 89, 117, 36, 118, 107, 120, 44, 139, 94, 152, 109, 81, 46, 98, 120, 150, 150, 79, 43, 80, 25, 93, 234, 109, 184, 125, 42, 143, 139, 95, 68, 97, 23, 104, 97, 249, 134, 150, 210, 82, 139, 128, 220, 81, 204, 81, 94, 105, 28, 122, 190, 125, 241, 131, 117, 150, 218, 79, 41, 82, 152, 83, 15, 84, 14, 85, 101, 92, 167, 96, 78, 103, 168, 104, 108, 109, 129, 114, 248, 114, 6, 116, 131, 116, 98, 249, 226, 117, 108, 124, 121, 127, 184, 127, 137, 131, 207, 136, 225, 136, 204, 145, 208, 145, 226, 150, 201, 155, 29, 84, 126, 111, 208, 113, 152, 116, 250, 133, 170, 142, 163, 150, 87, 156, 159, 158, 151, 103, 203, 109, 51, 116, 232, 129, 22, 151, 44, 120, 203, 122, 32, 123, 146, 124, 105, 100, 106, 116, 242, 117, 188, 120, 232, 120, 172, 153, 84, 155, 187, 158, 222, 91, 85, 94, 32, 111, 156, 129, 171, 131, 136, 144, 7, 78, 77, 83, 41, 90, 210, 93, 78, 95, 98, 97, 61, 99, 105, 102, 252, 102, 255, 110, 43, 111, 99, 112, 158, 119, 44, 132, 19, 133, 59, 136, 19, 143, 69, 153, 59, 156, 28, 85, 185, 98, 43, 103, 171, 108, 9, 131, 106, 137, 122, 151, 161, 78, 132, 89, 216, 95, 217, 95, 27, 103, 178, 125, 84, 127, 146, 130, 43, 131, 189, 131, 30, 143, 153, 144, 203, 87, 185, 89, 146, 90, 208, 91, 39, 102, 154, 103, 133, 104, 207, 107, 100, 113, 117, 127, 183, 140, 227, 140, 129, 144, 69, 155, 8, 129, 138, 140, 76, 150, 64, 154, 165, 158, 95, 91, 19, 108, 27, 115, 242, 118, 223, 118, 12, 132, 170, 81, 147, 137, 77, 81, 149, 81, 201, 82, 201, 104, 148, 108, 4, 119, 32, 119, 191, 125, 236, 125, 98, 151, 181, 158, 197, 110, 17, 133, 165, 81, 13, 84, 125, 84, 14, 102, 157, 102, 39, 105, 159, 110, 191, 118, 145, 119, 23, 131, 194, 132, 159, 135, 105, 145, 152, 146, 244, 156, 130, 136, 174, 79, 146, 81, 223, 82, 198, 89, 61, 94, 85, 97, 120, 100, 121, 100, 174, 102, 208, 103, 33, 106, 205, 107, 219, 107, 95, 114, 97, 114, 65, 116, 56, 119, 219, 119, 23, 128, 188, 130, 5, 131, 0, 139, 40, 139, 140, 140, 40, 103, 144, 108, 103, 114, 238, 118, 102, 119, 70, 122, 169, 157, 127, 107, 146, 108, 34, 89, 38, 103, 153, 132, 111, 83, 147, 88, 153, 89, 223, 94, 207, 99, 52, 102, 115, 103, 58, 110, 43, 115, 215, 122, 215, 130, 40, 147, 217, 82, 235, 93, 174, 97, 203, 97, 10, 98, 199, 98, 171, 100, 224, 101, 89, 105, 102, 107, 203, 107, 33, 113, 247, 115, 93, 117, 70, 126, 30, 130, 2, 131, 106, 133, 163, 138, 191, 140, 39, 151, 97, 157, 168, 88, 216, 158, 17, 80, 14, 82, 59, 84, 79, 85, 135, 101, 118, 108, 10, 125, 11, 125, 94, 128, 138, 134, 128, 149, 239, 150, 255, 82, 149, 108, 105, 114, 115, 84, 154, 90, 62, 92, 75, 93, 76, 95, 174, 95, 42, 103, 182, 104, 99, 105, 60, 110, 68, 110, 9, 119, 115, 124, 142, 127, 135, 133, 14, 139, 247, 143, 97, 151, 244, 158, 183, 92, 182, 96, 13, 97, 171, 97, 79, 101, 251, 101, 252, 101, 17, 108, 239, 108, 159, 115, 201, 115, 225, 125, 148, 149, 198, 91, 28, 135, 16, 139, 93, 82, 90, 83, 205, 98, 15, 100, 178, 100, 52, 103, 56, 106, 202, 108, 192, 115, 158, 116, 148, 123, 149, 124, 27, 126, 138, 129, 54, 130, 132, 133, 235, 143, 249, 150, 193, 153, 52, 79, 74, 83, 205, 83, 219, 83, 204, 98, 44, 100, 0, 101, 145, 101, 195, 105, 238, 108, 88, 111, 237, 115, 84, 117, 34, 118, 228, 118, 252, 118, 208, 120, 251, 120, 44, 121, 70, 125, 44, 130, 224, 135, 212, 143, 18, 152, 239, 152, 195, 82, 212, 98, 165, 100, 36, 110, 81, 111, 124, 118, 203, 141, 177, 145, 98, 146, 238, 154, 67, 155, 35, 80, 141, 80, 74, 87, 168, 89, 40, 92, 71, 94, 119, 95, 63, 98, 62, 101, 185, 101, 193, 101, 9, 102, 139, 103, 156, 105, 194, 110, 197, 120, 33, 125, 170, 128, 128, 129, 43, 130, 179, 130, 161, 132, 140, 134, 42, 138, 23, 139, 166, 144, 50, 150, 144, 159, 13, 80, 243, 79, 99, 249, 249, 87, 152, 95, 220, 98, 146, 99, 111, 103, 67, 110, 25, 113, 195, 118, 204, 128, 218, 128, 244, 136, 245, 136, 25, 137, 224, 140, 41, 143, 77, 145, 106, 150, 47, 79, 112, 79, 27, 94, 207, 103, 34, 104, 125, 118, 126, 118, 68, 155, 97, 94, 10, 106, 105, 113, 212, 113, 106, 117, 100, 249, 65, 126, 67, 133, 233, 133, 220, 152, 16, 79, 79, 123, 112, 127, 165, 149, 225, 81, 6, 94, 181, 104, 62, 108, 78, 108, 219, 108, 175, 114, 196, 123, 3, 131, 213, 108, 58, 116, 251, 80, 136, 82, 193, 88, 216, 100, 151, 106, 167, 116, 86, 118, 167, 120, 23, 134, 226, 149, 57, 151, 101, 249, 94, 83, 1, 95, 138, 139, 168, 143, 175, 143, 138, 144, 37, 82, 165, 119, 73, 156, 8, 159, 25, 78, 2, 80, 117, 81, 91, 92, 119, 94, 30, 102, 58, 102, 196, 103, 197, 104, 179, 112, 1, 117, 197, 117, 201, 121, 221, 122, 39, 143, 32, 153, 8, 154, 221, 79, 33, 88, 49, 88, 246, 91, 110, 102, 101, 107, 17, 109, 122, 110, 125, 111, 228, 115, 43, 117, 233, 131, 220, 136, 19, 137, 92, 139, 20, 143, 15, 79, 213, 80, 16, 83, 92, 83, 147, 91, 169, 95, 13, 103, 143, 121, 121, 129, 47, 131, 20, 133, 7, 137, 134, 137, 57, 143, 59, 143, 165, 153, 18, 156, 44, 103, 118, 78, 248, 79, 73, 89, 1, 92, 239, 92, 240, 92, 103, 99, 210, 104, 253, 112, 162, 113, 43, 116, 43, 126, 236, 132, 2, 135, 34, 144, 210, 146, 243, 156, 13, 78, 216, 78, 239, 79, 133, 80, 86, 82, 111, 82, 38, 84, 144, 84, 224, 87, 43, 89, 102, 90, 90, 91, 117, 91, 204, 91, 156, 94, 102, 249, 118, 98, 119, 101, 167, 101, 110, 109, 165, 110, 54, 114, 38, 123, 63, 124, 54, 127, 80, 129, 81, 129, 154, 129, 64, 130, 153, 130, 169, 131, 3, 138, 160, 140, 230, 140, 251, 140, 116, 141, 186, 141, 232, 144, 220, 145, 28, 150, 68, 150, 217, 153, 231, 156, 23, 83, 6, 82, 41, 84, 116, 86, 179, 88, 84, 89, 110, 89, 255, 95, 164, 97, 110, 98, 16, 102, 126, 108, 26, 113, 198, 118, 137, 124, 222, 124, 27, 125, 172, 130, 193, 140, 240, 150, 103, 249, 91, 79, 23, 95, 127, 95, 194, 98, 41, 93, 11, 103, 218, 104, 124, 120, 67, 126, 108, 157, 21, 78, 153, 80, 21, 83, 42, 83, 81, 83, 131, 89, 98, 90, 135, 94, 178, 96, 138, 97, 73, 98, 121, 98, 144, 101, 135, 103, 167, 105, 212, 107, 214, 107, 215, 107, 216, 107, 184, 108, 104, 249, 53, 116, 250, 117, 18, 120, 145, 120, 213, 121, 216, 121, 131, 124, 203, 125, 225, 127, 165, 128, 62, 129, 194, 129, 242, 131, 26, 135, 232, 136, 185, 138, 108, 139, 187, 140, 25, 145, 94, 151, 219, 152, 59, 159, 172, 86, 42, 91, 108, 95, 140, 101, 179, 106, 175, 107, 92, 109, 241, 111, 21, 112, 93, 114, 173, 115, 167, 140, 211, 140, 59, 152, 145, 97, 55, 108, 88, 128, 1, 154, 77, 78, 139, 78, 155, 78, 213, 78, 58, 79, 60, 79, 127, 79, 223, 79, 255, 80, 242, 83, 248, 83, 6, 85, 227, 85, 219, 86, 235, 88, 98, 89, 17, 90, 235, 91, 250, 91, 4, 92, 243, 93, 43, 94, 153, 95, 29, 96, 104, 99, 156, 101, 175, 101, 246, 103, 251, 103, 173, 104, 123, 107, 153, 108, 215, 108, 35, 110, 9, 112, 69, 115, 2, 120, 62, 121, 64, 121, 96, 121, 193, 121, 233, 123, 23, 125, 114, 125, 134, 128, 13, 130, 142, 131, 209, 132, 199, 134, 223, 136, 80, 138, 94, 138, 29, 139, 220, 140, 102, 141, 173, 143, 170, 144, 252, 152, 223, 153, 157, 158, 74, 82, 105, 249, 20, 103, 106, 249, 152, 80, 42, 82, 113, 92, 99, 101, 85, 108, 202, 115, 35, 117, 157, 117, 151, 123, 156, 132, 120, 145, 48, 151, 119, 78, 146, 100, 186, 107, 94, 113, 169, 133, 9, 78, 107, 249, 73, 103, 238, 104, 23, 110, 159, 130, 24, 133, 107, 136, 247, 99, 129, 111, 18, 146, 175, 152, 10, 78, 183, 80, 207, 80, 31, 81, 70, 85, 170, 85, 23, 86, 64, 91, 25, 92, 224, 92, 56, 94, 138, 94, 160, 94, 194, 94, 243, 96, 81, 104, 97, 106, 88, 110, 61, 114, 64, 114, 192, 114, 248, 118, 101, 121, 177, 123, 212, 127, 243, 136, 244, 137, 115, 138, 97, 140, 222, 140, 28, 151, 94, 88, 189, 116, 253, 140, 199, 85, 108, 249, 97, 122, 34, 125, 114, 130, 114, 114, 31, 117, 37, 117, 109, 249, 25, 123, 133, 88, 251, 88, 188, 93, 143, 94, 182, 94, 144, 95, 85, 96, 146, 98, 127, 99, 77, 101, 145, 102, 217, 102, 248, 102, 22, 104, 242, 104, 128, 114, 94, 116, 110, 123, 110, 125, 214, 125, 114, 127, 229, 128, 18, 130, 175, 133, 127, 137, 147, 138, 29, 144, 228, 146, 205, 158, 32, 159, 21, 89, 109, 89, 45, 94, 220, 96, 20, 102, 115, 102, 144, 103, 80, 108, 197, 109, 95, 111, 243, 119, 169, 120, 198, 132, 203, 145, 43, 147, 217, 78, 202, 80, 72, 81, 132, 85, 11, 91, 163, 91, 71, 98, 126, 101, 203, 101, 50, 110, 125, 113, 1, 116, 68, 116, 135, 116, 191, 116, 108, 118, 170, 121, 218, 125, 85, 126, 168, 127, 122, 129, 179, 129, 57, 130, 26, 134, 236, 135, 117, 138, 227, 141, 120, 144, 145, 146, 37, 148, 77, 153, 174, 155, 104, 83, 81, 92, 84, 105, 196, 108, 41, 109, 43, 110, 12, 130, 155, 133, 59, 137, 45, 138, 170, 138, 234, 150, 103, 159, 97, 82, 185, 102, 178, 107, 150, 126, 254, 135, 13, 141, 131, 149, 93, 150, 29, 101, 137, 109, 238, 113, 110, 249, 206, 87, 211, 89, 172, 91, 39, 96, 250, 96, 16, 98, 31, 102, 95, 102, 41, 115, 249, 115, 219, 118, 1, 119, 108, 123, 86, 128, 114, 128, 101, 129, 160, 138, 146, 145, 22, 78, 226, 82, 114, 107, 23, 109, 5, 122, 57, 123, 48, 125, 111, 249, 176, 140, 236, 83, 47, 86, 81, 88, 181, 91, 15, 92, 17, 92, 226, 93, 64, 98, 131, 99, 20, 100, 45, 102, 179, 104, 188, 108, 136, 109, 175, 110, 31, 112, 164, 112, 210, 113, 38, 117, 143, 117, 142, 117, 25, 118, 17, 123, 224, 123, 43, 124, 32, 125, 57, 125, 44, 133, 109, 133, 7, 134, 52, 138, 13, 144, 97, 144, 181, 144, 183, 146, 246, 151, 55, 154, 215, 79, 108, 92, 95, 103, 145, 109, 159, 124, 140, 126, 22, 139, 22, 141, 31, 144, 107, 91, 253, 93, 13, 100, 192, 132, 92, 144, 225, 152, 135, 115, 139, 91, 154, 96, 126, 103, 222, 109, 31, 138, 166, 138, 1, 144, 12, 152, 55, 82, 112, 249, 81, 112, 142, 120, 150, 147, 112, 136, 215, 145, 238, 79, 215, 83, 253, 85, 218, 86, 130, 87, 253, 88, 194, 90, 136, 91, 171, 92, 192, 92, 37, 94, 1, 97, 13, 98, 75, 98, 136, 99, 28, 100, 54, 101, 120, 101, 57, 106, 138, 107, 52, 108, 25, 109, 49, 111, 231, 113, 233, 114, 120, 115, 7, 116, 178, 116, 38, 118, 97, 119, 192, 121, 87, 122, 234, 122, 185, 124, 143, 125, 172, 125, 97, 126, 158, 127, 41, 129, 49, 131, 144, 132, 218, 132, 234, 133, 150, 136, 176, 138, 144, 139, 56, 143, 66, 144, 131, 144, 108, 145, 150, 146, 185, 146, 139, 150, 167, 150, 168, 150, 214, 150, 0, 151, 8, 152, 150, 153, 211, 154, 26, 155, 212, 83, 126, 88, 25, 89, 112, 91, 191, 91, 209, 109, 90, 111, 159, 113, 33, 116, 185, 116, 133, 128, 253, 131, 225, 93, 135, 95, 170, 95, 66, 96, 236, 101, 18, 104, 111, 105, 83, 106, 137, 107, 53, 109, 243, 109, 227, 115, 254, 118, 172, 119, 77, 123, 20, 125, 35, 129, 28, 130, 64, 131, 244, 132, 99, 133, 98, 138, 196, 138, 135, 145, 30, 147, 6, 152, 180, 153, 12, 98, 83, 136, 240, 143, 101, 146, 7, 93, 39, 93, 105, 93, 95, 116, 157, 129, 104, 135, 213, 111, 254, 98, 210, 127, 54, 137, 114, 137, 30, 78, 88, 78, 231, 80, 221, 82, 71, 83, 127, 98, 7, 102, 105, 126, 5, 136, 94, 150, 141, 79, 25, 83, 54, 86, 203, 89, 164, 90, 56, 92, 78, 92, 77, 92, 2, 94, 17, 95, 67, 96, 189, 101, 47, 102, 66, 102, 190, 103, 244, 103, 28, 115, 226, 119, 58, 121, 197, 127, 148, 132, 205, 132, 150, 137, 102, 138, 105, 138, 225, 138, 85, 140, 122, 140, 244, 87, 212, 91, 15, 95, 111, 96, 237, 98, 13, 105, 150, 107, 92, 110, 132, 113, 210, 123, 85, 135, 88, 139, 254, 142, 223, 152, 254, 152, 56, 79, 129, 79, 225, 79, 123, 84, 32, 90, 184, 91, 60, 97, 176, 101, 104, 102, 252, 113, 51, 117, 94, 121, 51, 125, 78, 129, 227, 129, 152, 131, 170, 133, 206, 133, 3, 135, 10, 138, 171, 142, 155, 143, 113, 249, 197, 143, 49, 89, 164, 91, 230, 91, 137, 96, 233, 91, 11, 92, 195, 95, 129, 108, 114, 249, 241, 109, 11, 112, 26, 117, 175, 130, 246, 138, 192, 78, 65, 83, 115, 249, 217, 150, 15, 108, 158, 78, 196, 79, 82, 81, 94, 85, 37, 90, 232, 92, 17, 98, 89, 114, 189, 130, 170, 131, 254, 134, 89, 136, 29, 138, 63, 150, 197, 150, 19, 153, 9, 157, 93, 157, 10, 88, 179, 92, 189, 93, 68, 94, 225, 96, 21, 97, 225, 99, 2, 106, 37, 110, 2, 145, 84, 147, 78, 152, 16, 156, 119, 159, 137, 91, 184, 92, 9, 99, 79, 102, 72, 104, 60, 119, 193, 150, 141, 151, 84, 152, 159, 155, 161, 101, 1, 139, 203, 142, 188, 149, 53, 85, 169, 92, 214, 93, 181, 94, 151, 102, 76, 118, 244, 131, 199, 149, 211, 88, 188, 98, 206, 114, 40, 157, 240, 78, 46, 89, 15, 96, 59, 102, 131, 107, 231, 121, 38, 157, 147, 83, 192, 84, 195, 87, 22, 93, 27, 97, 214, 102, 175, 109, 141, 120, 126, 130, 152, 150, 68, 151, 132, 83, 124, 98, 150, 99, 178, 109, 10, 126, 75, 129, 77, 152, 251, 106, 76, 127, 175, 157, 26, 158, 95, 78, 59, 80, 182, 81, 28, 89, 249, 96, 246, 99, 48, 105, 58, 114, 54, 128, 116, 249, 206, 145, 49, 95, 117, 249, 118, 249, 4, 125, 229, 130, 111, 132, 187, 132, 229, 133, 141, 142, 119, 249, 111, 79, 120, 249, 121, 249, 228, 88, 67, 91, 89, 96, 218, 99, 24, 101, 109, 101, 152, 102, 122, 249, 74, 105, 35, 106, 11, 109, 1, 112, 108, 113, 210, 117, 13, 118, 179, 121, 112, 122, 123, 249, 138, 127, 124, 249, 68, 137, 125, 249, 147, 139, 192, 145, 125, 150, 126, 249, 10, 153, 4, 87, 161, 95, 188, 101, 1, 111, 0, 118, 166, 121, 158, 138, 173, 153, 90, 155, 108, 159, 4, 81, 182, 97, 145, 98, 141, 106, 198, 129, 67, 80, 48, 88, 102, 95, 9, 113, 0, 138, 250, 138, 124, 91, 22, 134, 250, 79, 60, 81, 180, 86, 68, 89, 169, 99, 249, 109, 170, 93, 109, 105, 134, 81, 136, 78, 89, 79, 127, 249, 128, 249, 129, 249, 130, 89, 130, 249, 131, 249, 95, 107, 93, 108, 132, 249, 181, 116, 22, 121, 133, 249, 7, 130, 69, 130, 57, 131, 63, 143, 93, 143, 134, 249, 24, 153, 135, 249, 136, 249, 137, 249, 166, 78, 138, 249, 223, 87, 121, 95, 19, 102, 139, 249, 140, 249, 171, 117, 121, 126, 111, 139, 141, 249, 6, 144, 91, 154, 165, 86, 39, 88, 248, 89, 31, 90, 180, 91, 142, 249, 246, 94, 143, 249, 144, 249, 80, 99, 59, 99, 145, 249, 61, 105, 135, 108, 191, 108, 142, 109, 147, 109, 245, 109, 20, 111, 146, 249, 223, 112, 54, 113, 89, 113, 147, 249, 195, 113, 213, 113, 148, 249, 79, 120, 111, 120, 149, 249, 117, 123, 227, 125, 150, 249, 47, 126, 151, 249, 77, 136, 223, 142, 152, 249, 153, 249, 154, 249, 91, 146, 155, 249, 246, 156, 156, 249, 157, 249, 158, 249, 133, 96, 133, 109, 159, 249, 177, 113, 160, 249, 161, 249, 177, 149, 173, 83, 162, 249, 163, 249, 164, 249, 211, 103, 165, 249, 142, 112, 48, 113, 48, 116, 118, 130, 210, 130, 166, 249, 187, 149, 229, 154, 125, 158, 196, 102, 167, 249, 193, 113, 73, 132, 168, 249, 169, 249, 75, 88, 170, 249, 171, 249, 184, 93, 113, 95, 172, 249, 32, 102, 142, 102, 121, 105, 174, 105, 56, 108, 243, 108, 54, 110, 65, 111, 218, 111, 27, 112, 47, 112, 80, 113, 223, 113, 112, 115, 173, 249, 91, 116, 174, 249, 212, 116, 200, 118, 78, 122, 147, 126, 175, 249, 176, 249, 241, 130, 96, 138, 206, 143, 177, 249, 72, 147, 178, 249, 25, 151, 179, 249, 180, 249, 66, 78, 42, 80, 181, 249, 8, 82, 225, 83, 243, 102, 109, 108, 202, 111, 10, 115, 127, 119, 98, 122, 174, 130, 221, 133, 2, 134, 182, 249, 212, 136, 99, 138, 125, 139, 107, 140, 183, 249, 179, 146, 184, 249, 19, 151, 16, 152, 148, 78, 13, 79, 201, 79, 178, 80, 72, 83, 62, 84, 51, 84, 218, 85, 98, 88, 186, 88, 103, 89, 27, 90, 228, 91, 159, 96, 185, 249, 202, 97, 86, 101, 255, 101, 100, 102, 167, 104, 90, 108, 179, 111, 207, 112, 172, 113, 82, 115, 125, 123, 8, 135, 164, 138, 50, 156, 7, 159, 75, 92, 131, 108, 68, 115, 137, 115, 58, 146, 171, 110, 101, 116, 31, 118, 105, 122, 21, 126, 10, 134, 64, 81, 197, 88, 193, 100, 238, 116, 21, 117, 112, 118, 193, 127, 149, 144, 205, 150, 84, 153, 38, 110, 230, 116, 169, 122, 170, 122, 229, 129, 217, 134, 120, 135, 27, 138, 73, 90, 140, 91, 155, 91, 161, 104, 0, 105, 99, 109, 169, 115, 19, 116, 44, 116, 151, 120, 233, 125, 235, 127, 24, 129, 85, 129, 158, 131, 76, 140, 46, 150, 17, 152, 240, 102, 128, 95, 250, 101, 137, 103, 106, 108, 139, 115, 45, 80, 3, 90, 106, 107, 238, 119, 22, 89, 108, 93, 205, 93, 37, 115, 79, 117, 186, 249, 187, 249], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 117532);
    allocate([229, 80, 249, 81, 47, 88, 45, 89, 150, 89, 218, 89, 229, 91, 188, 249, 189, 249, 162, 93, 215, 98, 22, 100, 147, 100, 254, 100, 190, 249, 220, 102, 191, 249, 72, 106, 192, 249, 255, 113, 100, 116, 193, 249, 136, 122, 175, 122, 71, 126, 94, 126, 0, 128, 112, 129, 194, 249, 239, 135, 129, 137, 32, 139, 89, 144, 195, 249, 128, 144, 82, 153, 126, 97, 50, 107, 116, 109, 31, 126, 37, 137, 177, 143, 209, 79, 173, 80, 151, 81, 199, 82, 199, 87, 137, 88, 185, 91, 184, 94, 66, 97, 149, 105, 140, 109, 103, 110, 182, 110, 148, 113, 98, 116, 40, 117, 44, 117, 115, 128, 56, 131, 201, 132, 10, 142, 148, 147, 222, 147, 196, 249, 142, 78, 81, 79, 118, 80, 42, 81, 200, 83, 203, 83, 243, 83, 135, 91, 211, 91, 36, 92, 26, 97, 130, 97, 244, 101, 91, 114, 151, 115, 64, 116, 194, 118, 80, 121, 145, 121, 185, 121, 6, 125, 189, 127, 139, 130, 213, 133, 94, 134, 194, 143, 71, 144, 245, 144, 234, 145, 133, 150, 232, 150, 233, 150, 214, 82, 103, 95, 237, 101, 49, 102, 47, 104, 92, 113, 54, 122, 193, 144, 10, 152, 145, 78, 197, 249, 82, 106, 158, 107, 144, 111, 137, 113, 24, 128, 184, 130, 83, 133, 75, 144, 149, 150, 242, 150, 251, 151, 26, 133, 49, 155, 144, 78, 138, 113, 196, 150, 67, 81, 159, 83, 225, 84, 19, 87, 18, 87, 163, 87, 155, 90, 196, 90, 195, 91, 40, 96, 63, 97, 244, 99, 133, 108, 57, 109, 114, 110, 144, 110, 48, 114, 63, 115, 87, 116, 209, 130, 129, 136, 69, 143, 96, 144, 198, 249, 98, 150, 88, 152, 27, 157, 8, 103, 138, 141, 94, 146, 77, 79, 73, 80, 222, 80, 113, 83, 13, 87, 212, 89, 1, 90, 9, 92, 112, 97, 144, 102, 45, 110, 50, 114, 75, 116, 239, 125, 195, 128, 14, 132, 102, 132, 63, 133, 95, 135, 91, 136, 24, 137, 2, 139, 85, 144, 203, 151, 79, 155, 115, 78, 145, 79, 18, 81, 106, 81, 199, 249, 47, 85, 169, 85, 122, 91, 165, 91, 124, 94, 125, 94, 190, 94, 160, 96, 223, 96, 8, 97, 9, 97, 196, 99, 56, 101, 9, 103, 200, 249, 212, 103, 218, 103, 201, 249, 97, 105, 98, 105, 185, 108, 39, 109, 202, 249, 56, 110, 203, 249, 225, 111, 54, 115, 55, 115, 204, 249, 92, 116, 49, 117, 205, 249, 82, 118, 206, 249, 207, 249, 173, 125, 254, 129, 56, 132, 213, 136, 152, 138, 219, 138, 237, 138, 48, 142, 66, 142, 74, 144, 62, 144, 122, 144, 73, 145, 201, 145, 110, 147, 208, 249, 209, 249, 9, 88, 210, 249, 211, 107, 137, 128, 178, 128, 211, 249, 212, 249, 65, 81, 107, 89, 57, 92, 213, 249, 214, 249, 100, 111, 167, 115, 228, 128, 7, 141, 215, 249, 23, 146, 143, 149, 216, 249, 217, 249, 218, 249, 219, 249, 127, 128, 14, 98, 28, 112, 104, 125, 141, 135, 220, 249, 160, 87, 105, 96, 71, 97, 183, 107, 190, 138, 128, 146, 177, 150, 89, 78, 31, 84, 235, 109, 45, 133, 112, 150, 243, 151, 238, 152, 214, 99, 227, 108, 145, 144, 221, 81, 201, 97, 186, 129, 249, 157, 157, 79, 26, 80, 0, 81, 156, 91, 15, 97, 255, 97, 236, 100, 5, 105, 197, 107, 145, 117, 227, 119, 169, 127, 100, 130, 143, 133, 251, 135, 99, 136, 188, 138, 112, 139, 171, 145, 140, 78, 229, 78, 10, 79, 221, 249, 222, 249, 55, 89, 232, 89, 223, 249, 242, 93, 27, 95, 91, 95, 33, 96, 224, 249, 225, 249, 226, 249, 227, 249, 62, 114, 229, 115, 228, 249, 112, 117, 205, 117, 229, 249, 251, 121, 230, 249, 12, 128, 51, 128, 132, 128, 225, 130, 81, 131, 231, 249, 232, 249, 189, 140, 179, 140, 135, 144, 233, 249, 234, 249, 244, 152, 12, 153, 235, 249, 236, 249, 55, 112, 202, 118, 202, 127, 204, 127, 252, 127, 26, 139, 186, 78, 193, 78, 3, 82, 112, 83, 237, 249, 189, 84, 224, 86, 251, 89, 197, 91, 21, 95, 205, 95, 110, 110, 238, 249, 239, 249, 106, 125, 53, 131, 240, 249, 147, 134, 141, 138, 241, 249, 109, 151, 119, 151, 242, 249, 243, 249, 0, 78, 90, 79, 126, 79, 249, 88, 229, 101, 162, 110, 56, 144, 176, 147, 185, 153, 251, 78, 236, 88, 138, 89, 217, 89, 65, 96, 244, 249, 245, 249, 20, 122, 246, 249, 79, 131, 195, 140, 101, 81, 68, 83, 247, 249, 248, 249, 249, 249, 205, 78, 105, 82, 85, 91, 191, 130, 212, 78, 58, 82, 168, 84, 201, 89, 255, 89, 80, 91, 87, 91, 92, 91, 99, 96, 72, 97, 203, 110, 153, 112, 110, 113, 134, 115, 247, 116, 181, 117, 193, 120, 43, 125, 5, 128, 234, 129, 40, 131, 23, 133, 201, 133, 238, 138, 199, 140, 204, 150, 92, 79, 250, 82, 188, 86, 171, 101, 40, 102, 124, 112, 184, 112, 53, 114, 189, 125, 141, 130, 76, 145, 192, 150, 114, 157, 113, 91, 231, 104, 152, 107, 122, 111, 222, 118, 145, 92, 171, 102, 91, 111, 180, 123, 42, 124, 54, 136, 220, 150, 8, 78, 215, 78, 32, 83, 52, 88, 187, 88, 239, 88, 108, 89, 7, 92, 51, 94, 132, 94, 53, 95, 140, 99, 178, 102, 86, 103, 31, 106, 163, 106, 12, 107, 63, 111, 70, 114, 250, 249, 80, 115, 139, 116, 224, 122, 167, 124, 120, 129, 223, 129, 231, 129, 138, 131, 108, 132, 35, 133, 148, 133, 207, 133, 221, 136, 19, 141, 172, 145, 119, 149, 156, 150, 141, 81, 201, 84, 40, 87, 176, 91, 77, 98, 80, 103, 61, 104, 147, 104, 61, 110, 211, 110, 125, 112, 33, 126, 193, 136, 161, 140, 9, 143, 75, 159, 78, 159, 45, 114, 143, 123, 205, 138, 26, 147, 71, 79, 78, 79, 50, 81, 128, 84, 208, 89, 149, 94, 181, 98, 117, 103, 110, 105, 23, 106, 174, 108, 26, 110, 217, 114, 42, 115, 189, 117, 184, 123, 53, 125, 231, 130, 249, 131, 87, 132, 247, 133, 91, 138, 175, 140, 135, 142, 25, 144, 184, 144, 206, 150, 95, 159, 227, 82, 10, 84, 225, 90, 194, 91, 88, 100, 117, 101, 244, 110, 196, 114, 251, 249, 132, 118, 77, 122, 27, 123, 77, 124, 62, 126, 223, 127, 123, 131, 43, 139, 202, 140, 100, 141, 225, 141, 95, 142, 234, 143, 249, 143, 105, 144, 209, 147, 67, 79, 122, 79, 179, 80, 104, 81, 120, 81, 77, 82, 106, 82, 97, 88, 124, 88, 96, 89, 8, 92, 85, 92, 219, 94, 155, 96, 48, 98, 19, 104, 191, 107, 8, 108, 177, 111, 78, 113, 32, 116, 48, 117, 56, 117, 81, 117, 114, 118, 76, 123, 139, 123, 173, 123, 198, 123, 143, 126, 110, 138, 62, 143, 73, 143, 63, 146, 147, 146, 34, 147, 43, 148, 251, 150, 90, 152, 107, 152, 30, 153, 7, 82, 42, 98, 152, 98, 89, 109, 100, 118, 202, 122, 192, 123, 118, 125, 96, 83, 190, 92, 151, 94, 56, 111, 185, 112, 152, 124, 17, 151, 142, 155, 222, 158, 165, 99, 122, 100, 118, 135, 1, 78, 149, 78, 173, 78, 92, 80, 117, 80, 72, 84, 195, 89, 154, 91, 64, 94, 173, 94, 247, 94, 129, 95, 197, 96, 58, 99, 63, 101, 116, 101, 204, 101, 118, 102, 120, 102, 254, 103, 104, 105, 137, 106, 99, 107, 64, 108, 192, 109, 232, 109, 31, 110, 94, 110, 30, 112, 161, 112, 142, 115, 253, 115, 58, 117, 91, 119, 135, 120, 142, 121, 11, 122, 125, 122, 190, 124, 142, 125, 71, 130, 2, 138, 234, 138, 158, 140, 45, 145, 74, 145, 216, 145, 102, 146, 204, 146, 32, 147, 6, 151, 86, 151, 92, 151, 2, 152, 14, 159, 54, 82, 145, 82, 124, 85, 36, 88, 29, 94, 31, 95, 140, 96, 208, 99, 175, 104, 223, 111, 109, 121, 44, 123, 205, 129, 186, 133, 253, 136, 248, 138, 68, 142, 141, 145, 100, 150, 155, 150, 61, 151, 76, 152, 74, 159, 206, 79, 70, 81, 203, 81, 169, 82, 50, 86, 20, 95, 107, 95, 170, 99, 205, 100, 233, 101, 65, 102, 250, 102, 249, 102, 29, 103, 157, 104, 215, 104, 253, 105, 21, 111, 110, 111, 103, 113, 229, 113, 42, 114, 170, 116, 58, 119, 86, 121, 90, 121, 223, 121, 32, 122, 149, 122, 151, 124, 223, 124, 68, 125, 112, 126, 135, 128, 251, 133, 164, 134, 84, 138, 191, 138, 153, 141, 129, 142, 32, 144, 109, 144, 227, 145, 59, 150, 213, 150, 229, 156, 207, 101, 7, 124, 179, 141, 195, 147, 88, 91, 10, 92, 82, 83, 217, 98, 29, 115, 39, 80, 151, 91, 158, 95, 176, 96, 107, 97, 213, 104, 217, 109, 46, 116, 46, 122, 66, 125, 156, 125, 49, 126, 107, 129, 42, 142, 53, 142, 126, 147, 24, 148, 80, 79, 80, 87, 230, 93, 167, 94, 43, 99, 106, 127, 59, 78, 79, 79, 143, 79, 90, 80, 221, 89, 196, 128, 106, 84, 104, 84, 254, 85, 79, 89, 153, 91, 222, 93, 218, 94, 93, 102, 49, 103, 241, 103, 42, 104, 232, 108, 50, 109, 74, 110, 141, 111, 183, 112, 224, 115, 135, 117, 76, 124, 2, 125, 44, 125, 162, 125, 31, 130, 219, 134, 59, 138, 133, 138, 112, 141, 138, 142, 51, 143, 49, 144, 78, 145, 82, 145, 68, 148, 208, 153, 249, 122, 165, 124, 202, 79, 1, 81, 198, 81, 200, 87, 239, 91, 251, 92, 89, 102, 61, 106, 90, 109, 150, 110, 236, 111, 12, 113, 111, 117, 227, 122, 34, 136, 33, 144, 117, 144, 203, 150, 255, 153, 1, 131, 45, 78, 242, 78, 70, 136, 205, 145, 125, 83, 219, 106, 107, 105, 65, 108, 122, 132, 158, 88, 142, 97, 254, 102, 239, 98, 221, 112, 17, 117, 199, 117, 82, 126, 184, 132, 73, 139, 8, 141, 75, 78, 234, 83, 171, 84, 48, 87, 64, 87, 215, 95, 1, 99, 7, 99, 111, 100, 47, 101, 232, 101, 122, 102, 157, 103, 179, 103, 98, 107, 96, 108, 154, 108, 44, 111, 229, 119, 37, 120, 73, 121, 87, 121, 25, 125, 162, 128, 2, 129, 243, 129, 157, 130, 183, 130, 24, 135, 140, 138, 252, 249, 4, 141, 190, 141, 114, 144, 244, 118, 25, 122, 55, 122, 84, 126, 119, 128, 7, 85, 212, 85, 117, 88, 47, 99, 34, 100, 73, 102, 75, 102, 109, 104, 155, 105, 132, 107, 37, 109, 177, 110, 205, 115, 104, 116, 161, 116, 91, 117, 185, 117, 225, 118, 30, 119, 139, 119, 230, 121, 9, 126, 29, 126, 251, 129, 47, 133, 151, 136, 58, 138, 209, 140, 235, 142, 176, 143, 50, 144, 173, 147, 99, 150, 115, 150, 7, 151, 132, 79, 241, 83, 234, 89, 201, 90, 25, 94, 78, 104, 198, 116, 190, 117, 233, 121, 146, 122, 163, 129, 237, 134, 234, 140, 204, 141, 237, 143, 159, 101, 21, 103, 253, 249, 247, 87, 87, 111, 221, 125, 47, 143, 246, 147, 198, 150, 181, 95, 242, 97, 132, 111, 20, 78, 152, 79, 31, 80, 201, 83, 223, 85, 111, 93, 238, 93, 33, 107, 100, 107, 203, 120, 154, 123, 254, 249, 73, 142, 202, 142, 110, 144, 73, 99, 62, 100, 64, 119, 132, 122, 47, 147, 127, 148, 106, 159, 176, 100, 175, 111, 230, 113, 168, 116, 218, 116, 196, 122, 18, 124, 130, 126, 178, 124, 152, 126, 154, 139, 10, 141, 125, 148, 16, 153, 76, 153, 57, 82, 223, 91, 230, 100, 45, 103, 46, 125, 237, 80, 195, 83, 121, 88, 88, 97, 89, 97, 250, 97, 172, 101, 217, 122, 146, 139, 150, 139, 9, 80, 33, 80, 117, 82, 49, 85, 60, 90, 224, 94, 112, 95, 52, 97, 94, 101, 12, 102, 54, 102, 162, 102, 205, 105, 196, 110, 50, 111, 22, 115, 33, 118, 147, 122, 57, 129, 89, 130, 214, 131, 188, 132, 181, 80, 240, 87, 192, 91, 232, 91, 105, 95, 161, 99, 38, 120, 181, 125, 220, 131, 33, 133, 199, 145, 245, 145, 138, 81, 245, 103, 86, 123, 172, 140, 196, 81, 187, 89, 189, 96, 85, 134, 28, 80, 255, 249, 84, 82, 58, 92, 125, 97, 26, 98, 211, 98, 242, 100, 165, 101, 204, 110, 32, 118, 10, 129, 96, 142, 95, 150, 187, 150, 223, 78, 67, 83, 152, 85, 41, 89, 221, 93, 197, 100, 201, 108, 250, 109, 148, 115, 127, 122, 27, 130, 166, 133, 228, 140, 16, 142, 119, 144, 231, 145, 225, 149, 33, 150, 198, 151, 248, 81, 242, 84, 134, 85, 185, 95, 164, 100, 136, 111, 180, 125, 31, 143, 77, 143, 53, 148, 201, 80, 22, 92, 190, 108, 251, 109, 27, 117, 187, 119, 61, 124, 100, 124, 121, 138, 194, 138, 30, 88, 190, 89, 22, 94, 119, 99, 82, 114, 138, 117, 107, 119, 220, 138, 188, 140, 18, 143, 243, 94, 116, 102, 248, 109, 125, 128, 193, 131, 203, 138, 81, 151, 214, 155, 0, 250, 67, 82, 255, 102, 149, 109, 239, 110, 224, 125, 230, 138, 46, 144, 94, 144, 212, 154, 29, 82, 127, 82, 232, 84, 148, 97, 132, 98, 219, 98, 162, 104, 18, 105, 90, 105, 53, 106, 146, 112, 38, 113, 93, 120, 1, 121, 14, 121, 210, 121, 13, 122, 150, 128, 120, 130, 213, 130, 73, 131, 73, 133, 130, 140, 133, 141, 98, 145, 139, 145, 174, 145, 195, 79, 209, 86, 237, 113, 215, 119, 0, 135, 248, 137, 248, 91, 214, 95, 81, 103, 168, 144, 226, 83, 90, 88, 245, 91, 164, 96, 129, 97, 96, 100, 61, 126, 112, 128, 37, 133, 131, 146, 174, 100, 172, 80, 20, 93, 0, 103, 156, 88, 189, 98, 168, 99, 14, 105, 120, 105, 30, 106, 107, 110, 186, 118, 203, 121, 187, 130, 41, 132, 207, 138, 168, 141, 253, 143, 18, 145, 75, 145, 156, 145, 16, 147, 24, 147, 154, 147, 219, 150, 54, 154, 13, 156, 17, 78, 92, 117, 93, 121, 250, 122, 81, 123, 201, 123, 46, 126, 196, 132, 89, 142, 116, 142, 248, 142, 16, 144, 37, 102, 63, 105, 67, 116, 250, 81, 46, 103, 220, 158, 69, 81, 224, 95, 150, 108, 242, 135, 93, 136, 119, 136, 180, 96, 181, 129, 3, 132, 5, 141, 214, 83, 57, 84, 52, 86, 54, 90, 49, 92, 138, 112, 224, 127, 90, 128, 6, 129, 237, 129, 163, 141, 137, 145, 95, 154, 242, 157, 116, 80, 196, 78, 160, 83, 251, 96, 44, 110, 100, 92, 136, 79, 36, 80, 228, 85, 217, 92, 95, 94, 101, 96, 148, 104, 187, 108, 196, 109, 190, 113, 212, 117, 244, 117, 97, 118, 26, 122, 73, 122, 199, 125, 251, 125, 110, 127, 244, 129, 169, 134, 28, 143, 201, 150, 179, 153, 82, 159, 71, 82, 197, 82, 237, 152, 170, 137, 3, 78, 210, 103, 6, 111, 181, 79, 226, 91, 149, 103, 136, 108, 120, 109, 27, 116, 39, 120, 221, 145, 124, 147, 196, 135, 228, 121, 49, 122, 235, 95, 214, 78, 164, 84, 62, 85, 174, 88, 165, 89, 240, 96, 83, 98, 214, 98, 54, 103, 85, 105, 53, 130, 64, 150, 177, 153, 221, 153, 44, 80, 83, 83, 68, 85, 124, 87, 1, 250, 88, 98, 2, 250, 226, 100, 107, 102, 221, 103, 193, 111, 239, 111, 34, 116, 56, 116, 23, 138, 56, 148, 81, 84, 6, 86, 102, 87, 72, 95, 154, 97, 78, 107, 88, 112, 173, 112, 187, 125, 149, 138, 106, 89, 43, 129, 162, 99, 8, 119, 61, 128, 170, 140, 84, 88, 45, 100, 187, 105, 149, 91, 17, 94, 111, 110, 3, 250, 105, 133, 76, 81, 240, 83, 42, 89, 32, 96, 75, 97, 134, 107, 112, 108, 240, 108, 30, 123, 206, 128, 212, 130, 198, 141, 176, 144, 177, 152, 4, 250, 199, 100, 164, 111, 145, 100, 4, 101, 78, 81, 16, 84, 31, 87, 14, 138, 95, 97, 118, 104, 5, 250, 219, 117, 82, 123, 113, 125, 26, 144, 6, 88, 204, 105, 127, 129, 42, 137, 0, 144, 57, 152, 120, 80, 87, 89, 172, 89, 149, 98, 15, 144, 42, 155, 93, 97, 121, 114, 214, 149, 97, 87, 70, 90, 244, 93, 138, 98, 173, 100, 250, 100, 119, 103, 226, 108, 62, 109, 44, 114, 54, 116, 52, 120, 119, 127, 173, 130, 219, 141, 23, 152, 36, 82, 66, 87, 127, 103, 72, 114, 227, 116, 169, 140, 166, 143, 17, 146, 42, 150, 107, 81, 237, 83, 76, 99, 105, 79, 4, 85, 150, 96, 87, 101, 155, 108, 127, 109, 76, 114, 253, 114, 23, 122, 135, 137, 157, 140, 109, 95, 142, 111, 249, 112, 168, 129, 14, 97, 191, 79, 79, 80, 65, 98, 71, 114, 199, 123, 232, 125, 233, 127, 77, 144, 173, 151, 25, 154, 182, 140, 106, 87, 115, 94, 176, 103, 13, 132, 85, 138, 32, 84, 22, 91, 99, 94, 226, 94, 10, 95, 131, 101, 186, 128, 61, 133, 137, 149, 91, 150, 72, 79, 5, 83, 13, 83, 15, 83, 134, 84, 250, 84, 3, 87, 3, 94, 22, 96, 155, 98, 177, 98, 85, 99, 6, 250, 225, 108, 102, 109, 177, 117, 50, 120, 222, 128, 47, 129, 222, 130, 97, 132, 178, 132, 141, 136, 18, 137, 11, 144, 234, 146, 253, 152, 145, 155, 69, 94, 180, 102, 221, 102, 17, 112, 6, 114, 7, 250, 245, 79, 125, 82, 106, 95, 83, 97, 83, 103, 25, 106, 2, 111, 226, 116, 104, 121, 104, 136, 121, 140, 199, 152, 196, 152, 67, 154, 193, 84, 31, 122, 83, 105, 247, 138, 74, 140, 168, 152, 174, 153, 124, 95, 171, 98, 178, 117, 174, 118, 171, 136, 127, 144, 66, 150, 57, 83, 60, 95, 197, 95, 204, 108, 204, 115, 98, 117, 139, 117, 70, 123, 254, 130, 157, 153, 79, 78, 60, 144, 11, 78, 85, 79, 166, 83, 15, 89, 200, 94, 48, 102, 179, 108, 85, 116, 119, 131, 102, 135, 192, 140, 80, 144, 30, 151, 21, 156, 209, 88, 120, 91, 80, 134, 20, 139, 180, 157, 210, 91, 104, 96, 141, 96, 241, 101, 87, 108, 34, 111, 163, 111, 26, 112, 85, 127, 240, 127, 145, 149, 146, 149, 80, 150, 211, 151, 114, 82, 68, 143, 253, 81, 43, 84, 184, 84, 99, 85, 138, 85, 187, 106, 181, 109, 216, 125, 102, 130, 156, 146, 119, 150, 121, 158, 8, 84, 200, 84, 210, 118, 228, 134, 164, 149, 212, 149, 92, 150, 162, 78, 9, 79, 238, 89, 230, 90, 247, 93, 82, 96, 151, 98, 109, 103, 65, 104, 134, 108, 47, 110, 56, 127, 155, 128, 42, 130, 8, 250, 9, 250, 5, 152, 165, 78, 85, 80, 179, 84, 147, 87, 90, 89, 105, 91, 179, 91, 200, 97, 119, 105, 119, 109, 35, 112, 249, 135, 227, 137, 114, 138, 231, 138, 130, 144, 237, 153, 184, 154, 190, 82, 56, 104, 22, 80, 120, 94, 79, 103, 71, 131, 76, 136, 171, 78, 17, 84, 174, 86, 230, 115, 21, 145, 255, 151, 9, 153, 87, 153, 153, 153, 83, 86, 159, 88, 91, 134, 49, 138, 178, 97, 246, 106, 123, 115, 210, 142, 71, 107, 170, 150, 87, 154, 85, 89, 0, 114, 107, 141, 105, 151, 212, 79, 244, 92, 38, 95, 248, 97, 91, 102, 235, 108, 171, 112, 132, 115, 185, 115, 254, 115, 41, 119, 77, 119, 67, 125, 98, 125, 35, 126, 55, 130, 82, 136, 10, 250, 226, 140, 73, 146, 111, 152, 81, 91, 116, 122, 64, 136, 1, 152, 204, 90, 224, 79, 84, 83, 62, 89, 253, 92, 62, 99, 121, 109, 249, 114, 5, 129, 7, 129, 162, 131, 207, 146, 48, 152, 168, 78, 68, 81, 17, 82, 139, 87, 98, 95, 194, 108, 206, 110, 5, 112, 80, 112, 175, 112, 146, 113, 233, 115, 105, 116, 74, 131, 162, 135, 97, 136, 8, 144, 162, 144, 163, 147, 168, 153, 110, 81, 87, 95, 224, 96, 103, 97, 179, 102, 89, 133, 74, 142, 175, 145, 139, 151, 78, 78, 146, 78, 124, 84, 213, 88, 250, 88, 125, 89, 181, 92, 39, 95, 54, 98, 72, 98, 10, 102, 103, 102, 235, 107, 105, 109, 207, 109, 86, 110, 248, 110, 148, 111, 224, 111, 233, 111, 93, 112, 208, 114, 37, 116, 90, 116, 224, 116, 147, 118, 92, 121, 202, 124, 30, 126, 225, 128, 166, 130, 107, 132, 191, 132, 78, 134, 95, 134, 116, 135, 119, 139, 106, 140, 172, 147, 0, 152, 101, 152, 209, 96, 22, 98, 119, 145, 90, 90, 15, 102, 247, 109, 62, 110, 63, 116, 66, 155, 253, 95, 218, 96, 15, 123, 196, 84, 24, 95, 94, 108, 211, 108, 42, 109, 216, 112, 5, 125, 121, 134, 12, 138, 59, 157, 22, 83, 140, 84, 5, 91, 58, 106, 107, 112, 117, 117, 141, 121, 190, 121, 177, 130, 239, 131, 113, 138, 65, 139, 168, 140, 116, 151, 11, 250, 244, 100, 43, 101, 186, 120, 187, 120, 107, 122, 56, 78, 154, 85, 80, 89, 166, 91, 123, 94, 163, 96, 219, 99, 97, 107, 101, 102, 83, 104, 25, 110, 101, 113, 176, 116, 8, 125, 132, 144, 105, 154, 37, 156, 59, 109, 209, 110, 62, 115, 65, 140, 202, 149, 240, 81, 76, 94, 168, 95, 77, 96, 246, 96, 48, 97, 76, 97, 67, 102, 68, 102, 165, 105, 193, 108, 95, 110, 201, 110, 98, 111, 76, 113, 156, 116, 135, 118, 193, 123, 39, 124, 82, 131, 87, 135, 81, 144, 141, 150, 195, 158, 47, 83, 222, 86, 251, 94, 138, 95, 98, 96, 148, 96, 247, 97, 102, 102, 3, 103, 156, 106, 238, 109, 174, 111, 112, 112, 106, 115, 106, 126, 190, 129, 52, 131, 212, 134, 168, 138, 196, 140, 131, 82, 114, 115, 150, 91, 107, 106, 4, 148, 238, 84, 134, 86, 93, 91, 72, 101, 133, 101, 201, 102, 159, 104, 141, 109, 198, 109, 59, 114, 180, 128, 117, 145, 77, 154, 175, 79, 25, 80, 154, 83, 14, 84, 60, 84, 137, 85, 197, 85, 63, 94, 140, 95, 61, 103, 102, 113, 221, 115, 5, 144, 219, 82, 243, 82, 100, 88, 206, 88, 4, 113, 143, 113, 251, 113, 176, 133, 19, 138, 136, 102, 168, 133, 167, 85, 132, 102, 74, 113, 49, 132, 73, 83, 153, 85, 193, 107, 89, 95, 189, 95, 238, 99, 137, 102, 71, 113, 241, 138, 29, 143, 190, 158, 17, 79, 58, 100, 203, 112, 102, 117, 103, 134, 100, 96, 78, 139, 248, 157, 71, 81, 246, 81, 8, 83, 54, 109, 248, 128, 209, 158, 21, 102, 35, 107, 152, 112, 213, 117, 3, 84, 121, 92, 7, 125, 22, 138, 32, 107, 61, 107, 70, 107, 56, 84, 112, 96, 61, 109, 213, 127, 8, 130, 214, 80, 222, 81, 156, 85, 107, 86, 205, 86, 236, 89, 9, 91, 12, 94, 153, 97, 152, 97, 49, 98, 94, 102, 230, 102, 153, 113, 185, 113, 186, 113, 167, 114, 167, 121, 0, 122, 178, 127, 112, 138, 0, 0, 0, 0, 0, 0, 1, 0, 160, 0, 167, 0, 168, 0, 169, 0, 175, 0, 176, 0, 178, 0, 183, 0, 184, 0, 198, 0, 215, 0, 216, 0, 230, 0, 247, 0, 248, 0, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 18, 1, 19, 1, 22, 1, 23, 1, 24, 1, 25, 1, 26, 1, 27, 1, 28, 1, 29, 1, 30, 1, 31, 1, 32, 1, 33, 1, 34, 1, 35, 1, 36, 1, 37, 1, 38, 1, 39, 1, 40, 1, 41, 1, 42, 1, 43, 1, 46, 1, 47, 1, 48, 1, 49, 1, 52, 1, 53, 1, 54, 1, 55, 1, 56, 1, 57, 1, 58, 1, 59, 1, 60, 1, 61, 1, 62, 1, 65, 1, 66, 1, 67, 1, 68, 1, 69, 1, 70, 1, 71, 1, 72, 1, 74, 1, 75, 1, 76, 1, 77, 1, 80, 1, 81, 1, 82, 1, 83, 1, 84, 1, 85, 1, 86, 1, 87, 1, 88, 1, 89, 1, 90, 1, 91, 1, 92, 1, 93, 1, 94, 1, 95, 1, 96, 1, 97, 1, 98, 1, 99, 1, 100, 1, 101, 1, 102, 1, 103, 1, 104, 1, 105, 1, 106, 1, 107, 1, 108, 1, 109, 1, 110, 1, 111, 1, 112, 1, 113, 1, 114, 1, 115, 1, 116, 1, 117, 1, 118, 1, 119, 1, 120, 1, 121, 1, 122, 1, 123, 1, 124, 1, 125, 1, 126, 1, 146, 1, 160, 1, 161, 1, 175, 1, 176, 1, 24, 2, 25, 2, 26, 2, 27, 2, 198, 2, 199, 2, 216, 2, 217, 2, 219, 2, 220, 2, 221, 2, 0, 3, 1, 3, 3, 3, 9, 3, 35, 3, 122, 3, 132, 3, 133, 3, 134, 3, 136, 3, 137, 3, 138, 3, 140, 3, 142, 3, 143, 3, 144, 3, 145, 3, 146, 3, 147, 3, 148, 3, 149, 3, 150, 3, 151, 3, 152, 3, 153, 3, 154, 3, 155, 3, 156, 3, 157, 3, 158, 3, 159, 3, 160, 3, 161, 3, 163, 3, 164, 3, 165, 3, 166, 3, 167, 3, 168, 3, 169, 3, 170, 3, 171, 3, 172, 3, 173, 3, 174, 3, 175, 3, 176, 3, 177, 3, 178, 3, 179, 3, 180, 3, 181, 3, 182, 3, 183, 3, 184, 3, 185, 3, 186, 3, 187, 3, 188, 3, 189, 3, 190, 3, 191, 3, 192, 3, 193, 3, 194, 3, 195, 3, 196, 3, 197, 3, 198, 3, 199, 3, 200, 3, 201, 3, 202, 3, 203, 3, 204, 3, 205, 3, 206, 3, 1, 4, 2, 4, 3, 4, 4, 4, 5, 4, 6, 4, 7, 4, 8, 4, 9, 4, 10, 4, 11, 4, 12, 4, 14, 4, 15, 4, 16, 4, 17, 4, 18, 4, 19, 4, 20, 4, 21, 4, 22, 4, 23, 4, 24, 4, 25, 4, 26, 4, 27, 4, 28, 4, 29, 4, 30, 4, 31, 4, 32, 4, 33, 4, 34, 4, 35, 4, 36, 4, 37, 4, 38, 4, 39, 4, 40, 4, 41, 4, 42, 4, 43, 4, 44, 4, 45, 4, 46, 4, 47, 4, 48, 4, 49, 4, 50, 4, 51, 4, 52, 4, 53, 4, 54, 4, 55, 4, 56, 4, 57, 4, 58, 4, 59, 4, 60, 4, 61, 4, 62, 4, 63, 4, 64, 4, 65, 4, 66, 4, 67, 4, 68, 4, 69, 4, 70, 4, 71, 4, 72, 4, 73, 4, 74, 4, 75, 4, 76, 4, 77, 4, 78, 4, 79, 4, 81, 4, 82, 4, 83, 4, 84, 4, 85, 4, 86, 4, 87, 4, 88, 4, 89, 4, 90, 4, 91, 4, 92, 4, 94, 4, 95, 4, 144, 4, 145, 4, 176, 5, 177, 5, 178, 5, 179, 5, 180, 5, 181, 5, 182, 5, 183, 5, 184, 5, 185, 5, 187, 5, 188, 5, 189, 5, 190, 5, 191, 5, 192, 5, 193, 5, 194, 5, 195, 5, 208, 5, 209, 5, 210, 5, 211, 5, 212, 5, 213, 5, 214, 5, 215, 5, 216, 5, 217, 5, 218, 5, 219, 5, 220, 5, 221, 5, 222, 5, 223, 5, 224, 5, 225, 5, 226, 5, 227, 5, 228, 5, 229, 5, 230, 5, 231, 5, 232, 5, 233, 5, 234, 5, 240, 5, 241, 5, 242, 5, 243, 5, 244, 5, 12, 6, 27, 6, 31, 6, 33, 6, 34, 6, 35, 6, 36, 6, 37, 6, 38, 6, 39, 6, 40, 6, 41, 6, 42, 6, 43, 6, 44, 6, 45, 6, 46, 6, 47, 6, 48, 6, 49, 6, 50, 6, 51, 6, 52, 6, 53, 6, 54, 6, 55, 6, 56, 6, 57, 6, 58, 6, 64, 6, 65, 6, 66, 6, 67, 6, 68, 6, 69, 6, 70, 6, 71, 6, 72, 6, 73, 6, 74, 6, 75, 6, 76, 6, 77, 6, 78, 6, 79, 6, 80, 6, 81, 6, 82, 6, 121, 6, 126, 6, 134, 6, 136, 6, 145, 6, 152, 6, 169, 6, 175, 6, 186, 6, 190, 6, 193, 6, 210, 6, 1, 14, 2, 14, 3, 14, 4, 14, 5, 14, 6, 14, 7, 14, 8, 14, 9, 14, 10, 14, 11, 14, 12, 14, 13, 14, 14, 14, 15, 14, 16, 14, 17, 14, 18, 14, 19, 14, 20, 14, 21, 14, 22, 14, 23, 14, 24, 14, 25, 14, 26, 14, 27, 14, 28, 14, 29, 14, 30, 14, 31, 14, 32, 14, 33, 14, 34, 14, 35, 14, 36, 14, 37, 14, 38, 14, 39, 14, 40, 14, 41, 14, 42, 14, 43, 14, 44, 14, 45, 14, 46, 14, 47, 14, 48, 14, 49, 14, 50, 14, 51, 14, 52, 14, 53, 14, 54, 14, 55, 14, 56, 14, 57, 14, 58, 14, 63, 14, 64, 14, 65, 14, 66, 14, 67, 14, 68, 14, 69, 14, 70, 14, 71, 14, 72, 14, 73, 14, 74, 14, 75, 14, 76, 14, 77, 14, 78, 14, 79, 14, 80, 14, 81, 14, 82, 14, 83, 14, 84, 14, 85, 14, 86, 14, 87, 14, 88, 14, 89, 14, 90, 14, 91, 14, 2, 30, 3, 30, 10, 30, 11, 30, 30, 30, 31, 30, 64, 30, 65, 30, 86, 30, 87, 30, 96, 30, 97, 30, 106, 30, 107, 30, 128, 30, 129, 30, 130, 30, 131, 30, 132, 30, 133, 30, 242, 30, 243, 30, 12, 32, 13, 32, 14, 32, 15, 32, 19, 32, 20, 32, 21, 32, 23, 32, 24, 32, 25, 32, 26, 32, 28, 32, 29, 32, 30, 32, 32, 32, 33, 32, 34, 32, 38, 32, 48, 32, 57, 32, 58, 32, 170, 32, 171, 32, 172, 32, 175, 32, 22, 33, 34, 33, 25, 34, 26, 34, 72, 34, 100, 34, 101, 34, 32, 35, 33, 35, 0, 37, 2, 37, 12, 37, 16, 37, 20, 37, 24, 37, 28, 37, 36, 37, 44, 37, 52, 37, 60, 37, 80, 37, 81, 37, 82, 37, 83, 37, 84, 37, 85, 37, 86, 37, 87, 37, 88, 37, 89, 37, 90, 37, 91, 37, 92, 37, 93, 37, 94, 37, 95, 37, 96, 37, 97, 37, 98, 37, 99, 37, 100, 37, 101, 37, 102, 37, 103, 37, 104, 37, 105, 37, 106, 37, 107, 37, 108, 37, 128, 37, 132, 37, 136, 37, 140, 37, 144, 37, 145, 37, 146, 37, 147, 37, 160, 37, 0, 0, 2, 0, 0, 192, 3, 0, 0, 192, 4, 0, 0, 192, 5, 0, 0, 192, 6, 0, 0, 192, 7, 0, 0, 192, 8, 0, 0, 192, 9, 0, 0, 192, 10, 0, 0, 192, 11, 0, 0, 192, 12, 0, 0, 192, 13, 0, 0, 192, 14, 0, 0, 192, 15, 0, 0, 192, 16, 0, 0, 192, 17, 0, 0, 192, 18, 0, 0, 192, 19, 0, 0, 192, 20, 0, 0, 192, 21, 0, 0, 192, 22, 0, 0, 192, 23, 0, 0, 192, 24, 0, 0, 192, 25, 0, 0, 192, 26, 0, 0, 192, 27, 0, 0, 192, 28, 0, 0, 192, 29, 0, 0, 192, 30, 0, 0, 192, 31, 0, 0, 192, 0, 0, 0, 179, 1, 0, 0, 195, 2, 0, 0, 195, 3, 0, 0, 195, 4, 0, 0, 195, 5, 0, 0, 195, 6, 0, 0, 195, 7, 0, 0, 195, 8, 0, 0, 195, 9, 0, 0, 195, 10, 0, 0, 195, 11, 0, 0, 195, 12, 0, 0, 195, 13, 0, 0, 211, 14, 0, 0, 195, 15, 0, 0, 195, 0, 0, 12, 187, 1, 0, 12, 195, 2, 0, 12, 195, 3, 0, 12, 195, 4, 0, 12, 211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 10, 0, 17, 17, 17, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 15, 10, 17, 17, 17, 3, 10, 7, 0, 1, 19, 9, 11, 11, 0, 0, 9, 6, 11, 0, 0, 11, 0, 6, 17, 0, 0, 0, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 10, 10, 17, 17, 17, 0, 10, 0, 0, 2, 0, 9, 11, 0, 0, 0, 9, 0, 11, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 0, 0, 0, 0, 9, 12, 0, 0, 0, 0, 0, 12, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 4, 13, 0, 0, 0, 0, 9, 14, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 15, 0, 0, 0, 0, 9, 16, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 18, 0, 0, 0, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 18, 18, 18, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 10, 0, 0, 0, 0, 9, 11, 0, 0, 0, 0, 0, 11, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 0, 0, 0, 0, 9, 12, 0, 0, 0, 0, 0, 12, 0, 0, 12, 0, 0, 45, 43, 32, 32, 32, 48, 88, 48, 120, 0, 0, 0, 0, 0, 0, 0, 40, 110, 117, 108, 108, 41, 0, 0, 45, 48, 88, 43, 48, 88, 32, 48, 88, 45, 48, 120, 43, 48, 120, 32, 48, 120, 0, 0, 0, 0, 0, 0, 105, 110, 102, 0, 0, 0, 0, 0, 73, 78, 70, 0, 0, 0, 0, 0, 110, 97, 110, 0, 0, 0, 0, 0, 78, 65, 78, 0, 0, 0, 0, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 127772);
    var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
    assert(tempDoublePtr % 8 == 0);
    var ERRNO_CODES = {
        EPERM: 1,
        ENOENT: 2,
        ESRCH: 3,
        EINTR: 4,
        EIO: 5,
        ENXIO: 6,
        E2BIG: 7,
        ENOEXEC: 8,
        EBADF: 9,
        ECHILD: 10,
        EAGAIN: 11,
        EWOULDBLOCK: 11,
        ENOMEM: 12,
        EACCES: 13,
        EFAULT: 14,
        ENOTBLK: 15,
        EBUSY: 16,
        EEXIST: 17,
        EXDEV: 18,
        ENODEV: 19,
        ENOTDIR: 20,
        EISDIR: 21,
        EINVAL: 22,
        ENFILE: 23,
        EMFILE: 24,
        ENOTTY: 25,
        ETXTBSY: 26,
        EFBIG: 27,
        ENOSPC: 28,
        ESPIPE: 29,
        EROFS: 30,
        EMLINK: 31,
        EPIPE: 32,
        EDOM: 33,
        ERANGE: 34,
        ENOMSG: 42,
        EIDRM: 43,
        ECHRNG: 44,
        EL2NSYNC: 45,
        EL3HLT: 46,
        EL3RST: 47,
        ELNRNG: 48,
        EUNATCH: 49,
        ENOCSI: 50,
        EL2HLT: 51,
        EDEADLK: 35,
        ENOLCK: 37,
        EBADE: 52,
        EBADR: 53,
        EXFULL: 54,
        ENOANO: 55,
        EBADRQC: 56,
        EBADSLT: 57,
        EDEADLOCK: 35,
        EBFONT: 59,
        ENOSTR: 60,
        ENODATA: 61,
        ETIME: 62,
        ENOSR: 63,
        ENONET: 64,
        ENOPKG: 65,
        EREMOTE: 66,
        ENOLINK: 67,
        EADV: 68,
        ESRMNT: 69,
        ECOMM: 70,
        EPROTO: 71,
        EMULTIHOP: 72,
        EDOTDOT: 73,
        EBADMSG: 74,
        ENOTUNIQ: 76,
        EBADFD: 77,
        EREMCHG: 78,
        ELIBACC: 79,
        ELIBBAD: 80,
        ELIBSCN: 81,
        ELIBMAX: 82,
        ELIBEXEC: 83,
        ENOSYS: 38,
        ENOTEMPTY: 39,
        ENAMETOOLONG: 36,
        ELOOP: 40,
        EOPNOTSUPP: 95,
        EPFNOSUPPORT: 96,
        ECONNRESET: 104,
        ENOBUFS: 105,
        EAFNOSUPPORT: 97,
        EPROTOTYPE: 91,
        ENOTSOCK: 88,
        ENOPROTOOPT: 92,
        ESHUTDOWN: 108,
        ECONNREFUSED: 111,
        EADDRINUSE: 98,
        ECONNABORTED: 103,
        ENETUNREACH: 101,
        ENETDOWN: 100,
        ETIMEDOUT: 110,
        EHOSTDOWN: 112,
        EHOSTUNREACH: 113,
        EINPROGRESS: 115,
        EALREADY: 114,
        EDESTADDRREQ: 89,
        EMSGSIZE: 90,
        EPROTONOSUPPORT: 93,
        ESOCKTNOSUPPORT: 94,
        EADDRNOTAVAIL: 99,
        ENETRESET: 102,
        EISCONN: 106,
        ENOTCONN: 107,
        ETOOMANYREFS: 109,
        EUSERS: 87,
        EDQUOT: 122,
        ESTALE: 116,
        ENOTSUP: 95,
        ENOMEDIUM: 123,
        EILSEQ: 84,
        EOVERFLOW: 75,
        ECANCELED: 125,
        ENOTRECOVERABLE: 131,
        EOWNERDEAD: 130,
        ESTRPIPE: 86
    };
    var ___errno_state = 0;
    Module["_i64Subtract"] = _i64Subtract;
    Module["_memset"] = _memset;
    var ERRNO_MESSAGES = {
        0: "Success",
        1: "Not super-user",
        2: "No such file or directory",
        3: "No such process",
        4: "Interrupted system call",
        5: "I/O error",
        6: "No such device or address",
        7: "Arg list too long",
        8: "Exec format error",
        9: "Bad file number",
        10: "No children",
        11: "No more processes",
        12: "Not enough core",
        13: "Permission denied",
        14: "Bad address",
        15: "Block device required",
        16: "Mount device busy",
        17: "File exists",
        18: "Cross-device link",
        19: "No such device",
        20: "Not a directory",
        21: "Is a directory",
        22: "Invalid argument",
        23: "Too many open files in system",
        24: "Too many open files",
        25: "Not a typewriter",
        26: "Text file busy",
        27: "File too large",
        28: "No space left on device",
        29: "Illegal seek",
        30: "Read only file system",
        31: "Too many links",
        32: "Broken pipe",
        33: "Math arg out of domain of func",
        34: "Math result not representable",
        35: "File locking deadlock error",
        36: "File or path name too long",
        37: "No record locks available",
        38: "Function not implemented",
        39: "Directory not empty",
        40: "Too many symbolic links",
        42: "No message of desired type",
        43: "Identifier removed",
        44: "Channel number out of range",
        45: "Level 2 not synchronized",
        46: "Level 3 halted",
        47: "Level 3 reset",
        48: "Link number out of range",
        49: "Protocol driver not attached",
        50: "No CSI structure available",
        51: "Level 2 halted",
        52: "Invalid exchange",
        53: "Invalid request descriptor",
        54: "Exchange full",
        55: "No anode",
        56: "Invalid request code",
        57: "Invalid slot",
        59: "Bad font file fmt",
        60: "Device not a stream",
        61: "No data (for no delay io)",
        62: "Timer expired",
        63: "Out of streams resources",
        64: "Machine is not on the network",
        65: "Package not installed",
        66: "The object is remote",
        67: "The link has been severed",
        68: "Advertise error",
        69: "Srmount error",
        70: "Communication error on send",
        71: "Protocol error",
        72: "Multihop attempted",
        73: "Cross mount point (not really error)",
        74: "Trying to read unreadable message",
        75: "Value too large for defined data type",
        76: "Given log. name not unique",
        77: "f.d. invalid for this operation",
        78: "Remote address changed",
        79: "Can   access a needed shared lib",
        80: "Accessing a corrupted shared lib",
        81: ".lib section in a.out corrupted",
        82: "Attempting to link in too many libs",
        83: "Attempting to exec a shared library",
        84: "Illegal byte sequence",
        86: "Streams pipe error",
        87: "Too many users",
        88: "Socket operation on non-socket",
        89: "Destination address required",
        90: "Message too long",
        91: "Protocol wrong type for socket",
        92: "Protocol not available",
        93: "Unknown protocol",
        94: "Socket type not supported",
        95: "Not supported",
        96: "Protocol family not supported",
        97: "Address family not supported by protocol family",
        98: "Address already in use",
        99: "Address not available",
        100: "Network interface is not configured",
        101: "Network is unreachable",
        102: "Connection reset by network",
        103: "Connection aborted",
        104: "Connection reset by peer",
        105: "No buffer space available",
        106: "Socket is already connected",
        107: "Socket is not connected",
        108: "Can't send after socket shutdown",
        109: "Too many references",
        110: "Connection timed out",
        111: "Connection refused",
        112: "Host is down",
        113: "Host is unreachable",
        114: "Socket already connected",
        115: "Connection already in progress",
        116: "Stale file handle",
        122: "Quota exceeded",
        123: "No medium (in tape drive)",
        125: "Operation canceled",
        130: "Previous owner died",
        131: "State not recoverable"
    };
    var PATH = {
        splitPath: function(e) {
            var t = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
            return t.exec(e).slice(1)
        },
        normalizeArray: function(e, t) {
            var n = 0;
            for (var r = e.length - 1; r >= 0; r--) {
                var i = e[r];
                if (i === ".") {
                    e.splice(r, 1)
                } else if (i === "..") {
                    e.splice(r, 1);
                    n++
                } else if (n) {
                    e.splice(r, 1);
                    n--
                }
            }
            if (t) {
                for (; n--; n) {
                    e.unshift("..")
                }
            }
            return e
        },
        normalize: function(e) {
            var t = e.charAt(0) === "/",
                n = e.substr(-1) === "/";
            e = PATH.normalizeArray(e.split("/").filter(function(e) {
                return !!e
            }), !t).join("/");
            if (!e && !t) {
                e = "."
            }
            if (e && n) {
                e += "/"
            }
            return (t ? "/" : "") + e
        },
        dirname: function(e) {
            var t = PATH.splitPath(e),
                n = t[0],
                r = t[1];
            if (!n && !r) {
                return "."
            }
            if (r) {
                r = r.substr(0, r.length - 1)
            }
            return n + r
        },
        basename: function(e) {
            if (e === "/") return "/";
            var t = e.lastIndexOf("/");
            if (t === -1) return e;
            return e.substr(t + 1)
        },
        extname: function(e) {
            return PATH.splitPath(e)[3]
        },
        join: function() {
            var e = Array.prototype.slice.call(arguments, 0);
            return PATH.normalize(e.join("/"))
        },
        join2: function(e, t) {
            return PATH.normalize(e + "/" + t)
        },
        resolve: function() {
            var e = "",
                t = false;
            for (var n = arguments.length - 1; n >= -1 && !t; n--) {
                var r = n >= 0 ? arguments[n] : FS.cwd();
                if (typeof r !== "string") {
                    throw new TypeError("Arguments to path.resolve must be strings")
                } else if (!r) {
                    return ""
                }
                e = r + "/" + e;
                t = r.charAt(0) === "/"
            }
            e = PATH.normalizeArray(e.split("/").filter(function(e) {
                return !!e
            }), !t).join("/");
            return (t ? "/" : "") + e || "."
        },
        relative: function(e, t) {
            function n(e) {
                var t = 0;
                for (; t < e.length; t++) {
                    if (e[t] !== "") break
                }
                var n = e.length - 1;
                for (; n >= 0; n--) {
                    if (e[n] !== "") break
                }
                if (t > n) return [];
                return e.slice(t, n - t + 1)
            }
            e = PATH.resolve(e).substr(1);
            t = PATH.resolve(t).substr(1);
            var r = n(e.split("/"));
            var i = n(t.split("/"));
            var s = Math.min(r.length, i.length);
            var o = s;
            for (var u = 0; u < s; u++) {
                if (r[u] !== i[u]) {
                    o = u;
                    break
                }
            }
            var a = [];
            for (var u = o; u < r.length; u++) {
                a.push("..")
            }
            a = a.concat(i.slice(o));
            return a.join("/")
        }
    };
    var TTY = {
        ttys: [],
        init: function() {},
        shutdown: function() {},
        register: function(e, t) {
            TTY.ttys[e] = {
                input: [],
                output: [],
                ops: t
            };
            FS.registerDevice(e, TTY.stream_ops)
        },
        stream_ops: {
            open: function(e) {
                var t = TTY.ttys[e.node.rdev];
                if (!t) {
                    throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
                }
                e.tty = t;
                e.seekable = false
            },
            close: function(e) {
                if (e.tty.output.length) {
                    e.tty.ops.put_char(e.tty, 10)
                }
            },
            read: function(e, t, n, r, i) {
                if (!e.tty || !e.tty.ops.get_char) {
                    throw new FS.ErrnoError(ERRNO_CODES.ENXIO)
                }
                var s = 0;
                for (var o = 0; o < r; o++) {
                    var u;
                    try {
                        u = e.tty.ops.get_char(e.tty)
                    } catch (a) {
                        throw new FS.ErrnoError(ERRNO_CODES.EIO)
                    }
                    if (u === undefined && s === 0) {
                        throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)
                    }
                    if (u === null || u === undefined) break;
                    s++;
                    t[n + o] = u
                }
                if (s) {
                    e.node.timestamp = Date.now()
                }
                return s
            },
            write: function(e, t, n, r, i) {
                if (!e.tty || !e.tty.ops.put_char) {
                    throw new FS.ErrnoError(ERRNO_CODES.ENXIO)
                }
                for (var s = 0; s < r; s++) {
                    try {
                        e.tty.ops.put_char(e.tty, t[n + s])
                    } catch (o) {
                        throw new FS.ErrnoError(ERRNO_CODES.EIO)
                    }
                }
                if (r) {
                    e.node.timestamp = Date.now()
                }
                return s
            }
        },
        default_tty_ops: {
            get_char: function(e) {
                if (!e.input.length) {
                    var t = null;
                    if (ENVIRONMENT_IS_NODE) {
                        t = process["stdin"]["read"]();
                        if (!t) {
                            if (process["stdin"]["_readableState"] && process["stdin"]["_readableState"]["ended"]) {
                                return null
                            }
                            return undefined
                        }
                    } else if (typeof window != "undefined" && typeof window.prompt == "function") {
                        t = window.prompt("Input: ");
                        if (t !== null) {
                            t += "\n"
                        }
                    } else if (typeof readline == "function") {
                        t = readline();
                        if (t !== null) {
                            t += "\n"
                        }
                    }
                    if (!t) {
                        return null
                    }
                    e.input = intArrayFromString(t, true)
                }
                return e.input.shift()
            },
            put_char: function(e, t) {
                if (t === null || t === 10) {
                    Module["print"](e.output.join(""));
                    e.output = []
                } else {
                    e.output.push(TTY.utf8.processCChar(t))
                }
            }
        },
        default_tty1_ops: {
            put_char: function(e, t) {
                if (t === null || t === 10) {
                    Module["printErr"](e.output.join(""));
                    e.output = []
                } else {
                    e.output.push(TTY.utf8.processCChar(t))
                }
            }
        }
    };
    var MEMFS = {
        ops_table: null,
        mount: function(e) {
            return MEMFS.createNode(null, "/", 16384 | 511, 0)
        },
        createNode: function(e, t, n, r) {
            if (FS.isBlkdev(n) || FS.isFIFO(n)) {
                throw new FS.ErrnoError(ERRNO_CODES.EPERM)
            }
            if (!MEMFS.ops_table) {
                MEMFS.ops_table = {
                    dir: {
                        node: {
                            getattr: MEMFS.node_ops.getattr,
                            setattr: MEMFS.node_ops.setattr,
                            lookup: MEMFS.node_ops.lookup,
                            mknod: MEMFS.node_ops.mknod,
                            rename: MEMFS.node_ops.rename,
                            unlink: MEMFS.node_ops.unlink,
                            rmdir: MEMFS.node_ops.rmdir,
                            readdir: MEMFS.node_ops.readdir,
                            symlink: MEMFS.node_ops.symlink
                        },
                        stream: {
                            llseek: MEMFS.stream_ops.llseek
                        }
                    },
                    file: {
                        node: {
                            getattr: MEMFS.node_ops.getattr,
                            setattr: MEMFS.node_ops.setattr
                        },
                        stream: {
                            llseek: MEMFS.stream_ops.llseek,
                            read: MEMFS.stream_ops.read,
                            write: MEMFS.stream_ops.write,
                            allocate: MEMFS.stream_ops.allocate,
                            mmap: MEMFS.stream_ops.mmap
                        }
                    },
                    link: {
                        node: {
                            getattr: MEMFS.node_ops.getattr,
                            setattr: MEMFS.node_ops.setattr,
                            readlink: MEMFS.node_ops.readlink
                        },
                        stream: {}
                    },
                    chrdev: {
                        node: {
                            getattr: MEMFS.node_ops.getattr,
                            setattr: MEMFS.node_ops.setattr
                        },
                        stream: FS.chrdev_stream_ops
                    }
                }
            }
            var i = FS.createNode(e, t, n, r);
            if (FS.isDir(i.mode)) {
                i.node_ops = MEMFS.ops_table.dir.node;
                i.stream_ops = MEMFS.ops_table.dir.stream;
                i.contents = {}
            } else if (FS.isFile(i.mode)) {
                i.node_ops = MEMFS.ops_table.file.node;
                i.stream_ops = MEMFS.ops_table.file.stream;
                i.usedBytes = 0;
                i.contents = null
            } else if (FS.isLink(i.mode)) {
                i.node_ops = MEMFS.ops_table.link.node;
                i.stream_ops = MEMFS.ops_table.link.stream
            } else if (FS.isChrdev(i.mode)) {
                i.node_ops = MEMFS.ops_table.chrdev.node;
                i.stream_ops = MEMFS.ops_table.chrdev.stream
            }
            i.timestamp = Date.now();
            if (e) {
                e.contents[t] = i
            }
            return i
        },
        getFileDataAsRegularArray: function(e) {
            if (e.contents && e.contents.subarray) {
                var t = [];
                for (var n = 0; n < e.usedBytes; ++n) t.push(e.contents[n]);
                return t
            }
            return e.contents
        },
        getFileDataAsTypedArray: function(e) {
            if (!e.contents) return new Uint8Array;
            if (e.contents.subarray) return e.contents.subarray(0, e.usedBytes);
            return new Uint8Array(e.contents)
        },
        expandFileStorage: function(e, t) {
            if (e.contents && e.contents.subarray && t > e.contents.length) {
                e.contents = MEMFS.getFileDataAsRegularArray(e);
                e.usedBytes = e.contents.length
            }
            if (!e.contents || e.contents.subarray) {
                var n = e.contents ? e.contents.buffer.byteLength : 0;
                if (n >= t) return;
                var r = 1024 * 1024;
                t = Math.max(t, n * (n < r ? 2 : 1.125) | 0);
                if (n != 0) t = Math.max(t, 256);
                var i = e.contents;
                e.contents = new Uint8Array(t);
                if (e.usedBytes > 0) e.contents.set(i.subarray(0, e.usedBytes), 0);
                return
            }
            if (!e.contents && t > 0) e.contents = [];
            while (e.contents.length < t) e.contents.push(0)
        },
        resizeFileStorage: function(e, t) {
            if (e.usedBytes == t) return;
            if (t == 0) {
                e.contents = null;
                e.usedBytes = 0;
                return
            }
            if (!e.contents || e.contents.subarray) {
                var n = e.contents;
                e.contents = new Uint8Array(new ArrayBuffer(t));
                if (n) {
                    e.contents.set(n.subarray(0, Math.min(t, e.usedBytes)))
                }
                e.usedBytes = t;
                return
            }
            if (!e.contents) e.contents = [];
            if (e.contents.length > t) e.contents.length = t;
            else
                while (e.contents.length < t) e.contents.push(0);
            e.usedBytes = t
        },
        node_ops: {
            getattr: function(e) {
                var t = {};
                t.dev = FS.isChrdev(e.mode) ? e.id : 1;
                t.ino = e.id;
                t.mode = e.mode;
                t.nlink = 1;
                t.uid = 0;
                t.gid = 0;
                t.rdev = e.rdev;
                if (FS.isDir(e.mode)) {
                    t.size = 4096
                } else if (FS.isFile(e.mode)) {
                    t.size = e.usedBytes
                } else if (FS.isLink(e.mode)) {
                    t.size = e.link.length
                } else {
                    t.size = 0
                }
                t.atime = new Date(e.timestamp);
                t.mtime = new Date(e.timestamp);
                t.ctime = new Date(e.timestamp);
                t.blksize = 4096;
                t.blocks = Math.ceil(t.size / t.blksize);
                return t
            },
            setattr: function(e, t) {
                if (t.mode !== undefined) {
                    e.mode = t.mode
                }
                if (t.timestamp !== undefined) {
                    e.timestamp = t.timestamp
                }
                if (t.size !== undefined) {
                    MEMFS.resizeFileStorage(e, t.size)
                }
            },
            lookup: function(e, t) {
                throw FS.genericErrors[ERRNO_CODES.ENOENT]
            },
            mknod: function(e, t, n, r) {
                return MEMFS.createNode(e, t, n, r)
            },
            rename: function(e, t, n) {
                if (FS.isDir(e.mode)) {
                    var r;
                    try {
                        r = FS.lookupNode(t, n)
                    } catch (i) {}
                    if (r) {
                        for (var s in r.contents) {
                            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)
                        }
                    }
                }
                delete e.parent.contents[e.name];
                e.name = n;
                t.contents[n] = e;
                e.parent = t
            },
            unlink: function(e, t) {
                delete e.contents[t]
            },
            rmdir: function(e, t) {
                var n = FS.lookupNode(e, t);
                for (var r in n.contents) {
                    throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)
                }
                delete e.contents[t]
            },
            readdir: function(e) {
                var t = [".", ".."];
                for (var n in e.contents) {
                    if (!e.contents.hasOwnProperty(n)) {
                        continue
                    }
                    t.push(n)
                }
                return t
            },
            symlink: function(e, t, n) {
                var r = MEMFS.createNode(e, t, 511 | 40960, 0);
                r.link = n;
                return r
            },
            readlink: function(e) {
                if (!FS.isLink(e.mode)) {
                    throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
                }
                return e.link
            }
        },
        stream_ops: {
            read: function(e, t, n, r, i) {
                var s = e.node.contents;
                if (i >= e.node.usedBytes) return 0;
                var o = Math.min(e.node.usedBytes - i, r);
                assert(o >= 0);
                if (o > 8 && s.subarray) {
                    t.set(s.subarray(i, i + o), n)
                } else {
                    for (var u = 0; u < o; u++) t[n + u] = s[i + u]
                }
                return o
            },
            write: function(e, t, n, r, i, s) {
                if (!r) return 0;
                var o = e.node;
                o.timestamp = Date.now();
                if (t.subarray && (!o.contents || o.contents.subarray)) {
                    if (s) {
                        o.contents = t.subarray(n, n + r);
                        o.usedBytes = r;
                        return r
                    } else if (o.usedBytes === 0 && i === 0) {
                        o.contents = new Uint8Array(t.subarray(n, n + r));
                        o.usedBytes = r;
                        return r
                    } else if (i + r <= o.usedBytes) {
                        o.contents.set(t.subarray(n, n + r), i);
                        return r
                    }
                }
                MEMFS.expandFileStorage(o, i + r);
                if (o.contents.subarray && t.subarray) o.contents.set(t.subarray(n, n + r), i);
                else
                    for (var u = 0; u < r; u++) {
                        o.contents[i + u] = t[n + u]
                    }
                o.usedBytes = Math.max(o.usedBytes, i + r);
                return r
            },
            llseek: function(e, t, n) {
                var r = t;
                if (n === 1) {
                    r += e.position
                } else if (n === 2) {
                    if (FS.isFile(e.node.mode)) {
                        r += e.node.usedBytes
                    }
                }
                if (r < 0) {
                    throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
                }
                e.ungotten = [];
                e.position = r;
                return r
            },
            allocate: function(e, t, n) {
                MEMFS.expandFileStorage(e.node, t + n);
                e.node.usedBytes = Math.max(e.node.usedBytes, t + n)
            },
            mmap: function(e, t, n, r, i, s, o) {
                if (!FS.isFile(e.node.mode)) {
                    throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
                }
                var u;
                var a;
                var f = e.node.contents;
                if (!(o & 2) && (f.buffer === t || f.buffer === t.buffer)) {
                    a = false;
                    u = f.byteOffset
                } else {
                    if (i > 0 || i + r < e.node.usedBytes) {
                        if (f.subarray) {
                            f = f.subarray(i, i + r)
                        } else {
                            f = Array.prototype.slice.call(f, i, i + r)
                        }
                    }
                    a = true;
                    u = _malloc(r);
                    if (!u) {
                        throw new FS.ErrnoError(ERRNO_CODES.ENOMEM)
                    }
                    t.set(f, u)
                }
                return {
                    ptr: u,
                    allocated: a
                }
            }
        }
    };
    var IDBFS = {
        dbs: {},
        indexedDB: function() {
            if (typeof indexedDB !== "undefined") return indexedDB;
            var e = null;
            if (typeof window === "object") e = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
            assert(e, "IDBFS used, but indexedDB not supported");
            return e
        },
        DB_VERSION: 21,
        DB_STORE_NAME: "FILE_DATA",
        mount: function(e) {
            return MEMFS.mount.apply(null, arguments)
        },
        syncfs: function(e, t, n) {
            IDBFS.getLocalSet(e, function(r, i) {
                if (r) return n(r);
                IDBFS.getRemoteSet(e, function(e, r) {
                    if (e) return n(e);
                    var s = t ? r : i;
                    var o = t ? i : r;
                    IDBFS.reconcile(s, o, n)
                })
            })
        },
        getDB: function(e, t) {
            var n = IDBFS.dbs[e];
            if (n) {
                return t(null, n)
            }
            var r;
            try {
                r = IDBFS.indexedDB().open(e, IDBFS.DB_VERSION)
            } catch (i) {
                return t(i)
            }
            r.onupgradeneeded = function(e) {
                var t = e.target.result;
                var n = e.target.transaction;
                var r;
                if (t.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
                    r = n.objectStore(IDBFS.DB_STORE_NAME)
                } else {
                    r = t.createObjectStore(IDBFS.DB_STORE_NAME)
                }
                r.createIndex("timestamp", "timestamp", {
                    unique: false
                })
            };
            r.onsuccess = function() {
                n = r.result;
                IDBFS.dbs[e] = n;
                t(null, n)
            };
            r.onerror = function() {
                t(this.error)
            }
        },
        getLocalSet: function(e, t) {
            function r(e) {
                return e !== "." && e !== ".."
            }

            function i(e) {
                return function(t) {
                    return PATH.join2(e, t)
                }
            }
            var n = {};
            var s = FS.readdir(e.mountpoint).filter(r).map(i(e.mountpoint));
            while (s.length) {
                var o = s.pop();
                var u;
                try {
                    u = FS.stat(o)
                } catch (a) {
                    return t(a)
                }
                if (FS.isDir(u.mode)) {
                    s.push.apply(s, FS.readdir(o).filter(r).map(i(o)))
                }
                n[o] = {
                    timestamp: u.mtime
                }
            }
            return t(null, {
                type: "local",
                entries: n
            })
        },
        getRemoteSet: function(e, t) {
            var n = {};
            IDBFS.getDB(e.mountpoint, function(e, r) {
                if (e) return t(e);
                var i = r.transaction([IDBFS.DB_STORE_NAME], "readonly");
                i.onerror = function() {
                    t(this.error)
                };
                var s = i.objectStore(IDBFS.DB_STORE_NAME);
                var o = s.index("timestamp");
                o.openKeyCursor().onsuccess = function(e) {
                    var i = e.target.result;
                    if (!i) {
                        return t(null, {
                            type: "remote",
                            db: r,
                            entries: n
                        })
                    }
                    n[i.primaryKey] = {
                        timestamp: i.key
                    };
                    i.continue()
                }
            })
        },
        loadLocalEntry: function(e, t) {
            var n, r;
            try {
                var i = FS.lookupPath(e);
                r = i.node;
                n = FS.stat(e)
            } catch (s) {
                return t(s)
            }
            if (FS.isDir(n.mode)) {
                return t(null, {
                    timestamp: n.mtime,
                    mode: n.mode
                })
            } else if (FS.isFile(n.mode)) {
                r.contents = MEMFS.getFileDataAsTypedArray(r);
                return t(null, {
                    timestamp: n.mtime,
                    mode: n.mode,
                    contents: r.contents
                })
            } else {
                return t(new Error("node type not supported"))
            }
        },
        storeLocalEntry: function(e, t, n) {
            try {
                if (FS.isDir(t.mode)) {
                    FS.mkdir(e, t.mode)
                } else if (FS.isFile(t.mode)) {
                    FS.writeFile(e, t.contents, {
                        encoding: "binary",
                        canOwn: true
                    })
                } else {
                    return n(new Error("node type not supported"))
                }
                FS.chmod(e, t.mode);
                FS.utime(e, t.timestamp, t.timestamp)
            } catch (r) {
                return n(r)
            }
            n(null)
        },
        removeLocalEntry: function(e, t) {
            try {
                var n = FS.lookupPath(e);
                var r = FS.stat(e);
                if (FS.isDir(r.mode)) {
                    FS.rmdir(e)
                } else if (FS.isFile(r.mode)) {
                    FS.unlink(e)
                }
            } catch (i) {
                return t(i)
            }
            t(null)
        },
        loadRemoteEntry: function(e, t, n) {
            var r = e.get(t);
            r.onsuccess = function(e) {
                n(null, e.target.result)
            };
            r.onerror = function() {
                n(this.error)
            }
        },
        storeRemoteEntry: function(e, t, n, r) {
            var i = e.put(n, t);
            i.onsuccess = function() {
                r(null)
            };
            i.onerror = function() {
                r(this.error)
            }
        },
        removeRemoteEntry: function(e, t, n) {
            var r = e.delete(t);
            r.onsuccess = function() {
                n(null)
            };
            r.onerror = function() {
                n(this.error)
            }
        },
        reconcile: function(e, t, n) {
            function c(e) {
                if (e) {
                    if (!c.errored) {
                        c.errored = true;
                        return n(e)
                    }
                    return
                }
                if (++u >= r) {
                    return n(null)
                }
            }
            var r = 0;
            var i = [];
            Object.keys(e.entries).forEach(function(n) {
                var s = e.entries[n];
                var o = t.entries[n];
                if (!o || s.timestamp > o.timestamp) {
                    i.push(n);
                    r++
                }
            });
            var s = [];
            Object.keys(t.entries).forEach(function(n) {
                var i = t.entries[n];
                var o = e.entries[n];
                if (!o) {
                    s.push(n);
                    r++
                }
            });
            if (!r) {
                return n(null)
            }
            var o = false;
            var u = 0;
            var a = e.type === "remote" ? e.db : t.db;
            var f = a.transaction([IDBFS.DB_STORE_NAME], "readwrite");
            var l = f.objectStore(IDBFS.DB_STORE_NAME);
            f.onerror = function() {
                c(this.error)
            };
            i.sort().forEach(function(e) {
                if (t.type === "local") {
                    IDBFS.loadRemoteEntry(l, e, function(t, n) {
                        if (t) return c(t);
                        IDBFS.storeLocalEntry(e, n, c)
                    })
                } else {
                    IDBFS.loadLocalEntry(e, function(t, n) {
                        if (t) return c(t);
                        IDBFS.storeRemoteEntry(l, e, n, c)
                    })
                }
            });
            s.sort().reverse().forEach(function(e) {
                if (t.type === "local") {
                    IDBFS.removeLocalEntry(e, c)
                } else {
                    IDBFS.removeRemoteEntry(l, e, c)
                }
            })
        }
    };
    var NODEFS = {
        isWindows: false,
        staticInit: function() {
            NODEFS.isWindows = !!process.platform.match(/^win/)
        },
        mount: function(e) {
            assert(ENVIRONMENT_IS_NODE);
            return NODEFS.createNode(null, "/", NODEFS.getMode(e.opts.root), 0)
        },
        createNode: function(e, t, n, r) {
            if (!FS.isDir(n) && !FS.isFile(n) && !FS.isLink(n)) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            var i = FS.createNode(e, t, n);
            i.node_ops = NODEFS.node_ops;
            i.stream_ops = NODEFS.stream_ops;
            return i
        },
        getMode: function(e) {
            var t;
            try {
                t = fs.lstatSync(e);
                if (NODEFS.isWindows) {
                    t.mode = t.mode | (t.mode & 146) >> 1
                }
            } catch (n) {
                if (!n.code) throw n;
                throw new FS.ErrnoError(ERRNO_CODES[n.code])
            }
            return t.mode
        },
        realPath: function(e) {
            var t = [];
            while (e.parent !== e) {
                t.push(e.name);
                e = e.parent
            }
            t.push(e.mount.opts.root);
            t.reverse();
            return PATH.join.apply(null, t)
        },
        flagsToPermissionStringMap: {
            0: "r",
            1: "r+",
            2: "r+",
            64: "r",
            65: "r+",
            66: "r+",
            129: "rx+",
            193: "rx+",
            514: "w+",
            577: "w",
            578: "w+",
            705: "wx",
            706: "wx+",
            1024: "a",
            1025: "a",
            1026: "a+",
            1089: "a",
            1090: "a+",
            1153: "ax",
            1154: "ax+",
            1217: "ax",
            1218: "ax+",
            4096: "rs",
            4098: "rs+"
        },
        flagsToPermissionString: function(e) {
            if (e in NODEFS.flagsToPermissionStringMap) {
                return NODEFS.flagsToPermissionStringMap[e]
            } else {
                return e
            }
        },
        node_ops: {
            getattr: function(e) {
                var t = NODEFS.realPath(e);
                var n;
                try {
                    n = fs.lstatSync(t)
                } catch (r) {
                    if (!r.code) throw r;
                    throw new FS.ErrnoError(ERRNO_CODES[r.code])
                }
                if (NODEFS.isWindows && !n.blksize) {
                    n.blksize = 4096
                }
                if (NODEFS.isWindows && !n.blocks) {
                    n.blocks = (n.size + n.blksize - 1) / n.blksize | 0
                }
                return {
                    dev: n.dev,
                    ino: n.ino,
                    mode: n.mode,
                    nlink: n.nlink,
                    uid: n.uid,
                    gid: n.gid,
                    rdev: n.rdev,
                    size: n.size,
                    atime: n.atime,
                    mtime: n.mtime,
                    ctime: n.ctime,
                    blksize: n.blksize,
                    blocks: n.blocks
                }
            },
            setattr: function(e, t) {
                var n = NODEFS.realPath(e);
                try {
                    if (t.mode !== undefined) {
                        fs.chmodSync(n, t.mode);
                        e.mode = t.mode
                    }
                    if (t.timestamp !== undefined) {
                        var r = new Date(t.timestamp);
                        fs.utimesSync(n, r, r)
                    }
                    if (t.size !== undefined) {
                        fs.truncateSync(n, t.size)
                    }
                } catch (i) {
                    if (!i.code) throw i;
                    throw new FS.ErrnoError(ERRNO_CODES[i.code])
                }
            },
            lookup: function(e, t) {
                var n = PATH.join2(NODEFS.realPath(e), t);
                var r = NODEFS.getMode(n);
                return NODEFS.createNode(e, t, r)
            },
            mknod: function(e, t, n, r) {
                var i = NODEFS.createNode(e, t, n, r);
                var s = NODEFS.realPath(i);
                try {
                    if (FS.isDir(i.mode)) {
                        fs.mkdirSync(s, i.mode)
                    } else {
                        fs.writeFileSync(s, "", {
                            mode: i.mode
                        })
                    }
                } catch (o) {
                    if (!o.code) throw o;
                    throw new FS.ErrnoError(ERRNO_CODES[o.code])
                }
                return i
            },
            rename: function(e, t, n) {
                var r = NODEFS.realPath(e);
                var i = PATH.join2(NODEFS.realPath(t), n);
                try {
                    fs.renameSync(r, i)
                } catch (s) {
                    if (!s.code) throw s;
                    throw new FS.ErrnoError(ERRNO_CODES[s.code])
                }
            },
            unlink: function(e, t) {
                var n = PATH.join2(NODEFS.realPath(e), t);
                try {
                    fs.unlinkSync(n)
                } catch (r) {
                    if (!r.code) throw r;
                    throw new FS.ErrnoError(ERRNO_CODES[r.code])
                }
            },
            rmdir: function(e, t) {
                var n = PATH.join2(NODEFS.realPath(e), t);
                try {
                    fs.rmdirSync(n)
                } catch (r) {
                    if (!r.code) throw r;
                    throw new FS.ErrnoError(ERRNO_CODES[r.code])
                }
            },
            readdir: function(e) {
                var t = NODEFS.realPath(e);
                try {
                    return fs.readdirSync(t)
                } catch (n) {
                    if (!n.code) throw n;
                    throw new FS.ErrnoError(ERRNO_CODES[n.code])
                }
            },
            symlink: function(e, t, n) {
                var r = PATH.join2(NODEFS.realPath(e), t);
                try {
                    fs.symlinkSync(n, r)
                } catch (i) {
                    if (!i.code) throw i;
                    throw new FS.ErrnoError(ERRNO_CODES[i.code])
                }
            },
            readlink: function(e) {
                var t = NODEFS.realPath(e);
                try {
                    return fs.readlinkSync(t)
                } catch (n) {
                    if (!n.code) throw n;
                    throw new FS.ErrnoError(ERRNO_CODES[n.code])
                }
            }
        },
        stream_ops: {
            open: function(e) {
                var t = NODEFS.realPath(e.node);
                try {
                    if (FS.isFile(e.node.mode)) {
                        e.nfd = fs.openSync(t, NODEFS.flagsToPermissionString(e.flags))
                    }
                } catch (n) {
                    if (!n.code) throw n;
                    throw new FS.ErrnoError(ERRNO_CODES[n.code])
                }
            },
            close: function(e) {
                try {
                    if (FS.isFile(e.node.mode) && e.nfd) {
                        fs.closeSync(e.nfd)
                    }
                } catch (t) {
                    if (!t.code) throw t;
                    throw new FS.ErrnoError(ERRNO_CODES[t.code])
                }
            },
            read: function(e, t, n, r, i) {
                var s = new Buffer(r);
                var o;
                try {
                    o = fs.readSync(e.nfd, s, 0, r, i)
                } catch (u) {
                    throw new FS.ErrnoError(ERRNO_CODES[u.code])
                }
                if (o > 0) {
                    for (var a = 0; a < o; a++) {
                        t[n + a] = s[a]
                    }
                }
                return o
            },
            write: function(e, t, n, r, i) {
                var s = new Buffer(t.subarray(n, n + r));
                var o;
                try {
                    o = fs.writeSync(e.nfd, s, 0, r, i)
                } catch (u) {
                    throw new FS.ErrnoError(ERRNO_CODES[u.code])
                }
                return o
            },
            llseek: function(e, t, n) {
                var r = t;
                if (n === 1) {
                    r += e.position
                } else if (n === 2) {
                    if (FS.isFile(e.node.mode)) {
                        try {
                            var i = fs.fstatSync(e.nfd);
                            r += i.size
                        } catch (s) {
                            throw new FS.ErrnoError(ERRNO_CODES[s.code])
                        }
                    }
                }
                if (r < 0) {
                    throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
                }
                e.position = r;
                return r
            }
        }
    };
    var _stdin = allocate(1, "i32*", ALLOC_STATIC);
    var _stdout = allocate(1, "i32*", ALLOC_STATIC);
    var _stderr = allocate(1, "i32*", ALLOC_STATIC);
    var FS = {
        root: null,
        mounts: [],
        devices: [null],
        streams: [],
        nextInode: 1,
        nameTable: null,
        currentPath: "/",
        initialized: false,
        ignorePermissions: true,
        trackingDelegate: {},
        tracking: {
            openFlags: {
                READ: 1,
                WRITE: 2
            }
        },
        ErrnoError: null,
        genericErrors: {},
        handleFSError: function(e) {
            if (!(e instanceof FS.ErrnoError)) throw e + " : " + stackTrace();
            return ___setErrNo(e.errno)
        },
        lookupPath: function(e, t) {
            e = PATH.resolve(FS.cwd(), e);
            t = t || {};
            if (!e) return {
                path: "",
                node: null
            };
            var n = {
                follow_mount: true,
                recurse_count: 0
            };
            for (var r in n) {
                if (t[r] === undefined) {
                    t[r] = n[r]
                }
            }
            if (t.recurse_count > 8) {
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP)
            }
            var i = PATH.normalizeArray(e.split("/").filter(function(e) {
                return !!e
            }), false);
            var s = FS.root;
            var o = "/";
            for (var u = 0; u < i.length; u++) {
                var a = u === i.length - 1;
                if (a && t.parent) {
                    break
                }
                s = FS.lookupNode(s, i[u]);
                o = PATH.join2(o, i[u]);
                if (FS.isMountpoint(s)) {
                    if (!a || a && t.follow_mount) {
                        s = s.mounted.root
                    }
                }
                if (!a || t.follow) {
                    var f = 0;
                    while (FS.isLink(s.mode)) {
                        var l = FS.readlink(o);
                        o = PATH.resolve(PATH.dirname(o), l);
                        var c = FS.lookupPath(o, {
                            recurse_count: t.recurse_count
                        });
                        s = c.node;
                        if (f++ > 40) {
                            throw new FS.ErrnoError(ERRNO_CODES.ELOOP)
                        }
                    }
                }
            }
            return {
                path: o,
                node: s
            }
        },
        getPath: function(e) {
            var t;
            while (true) {
                if (FS.isRoot(e)) {
                    var n = e.mount.mountpoint;
                    if (!t) return n;
                    return n[n.length - 1] !== "/" ? n + "/" + t : n + t
                }
                t = t ? e.name + "/" + t : e.name;
                e = e.parent
            }
        },
        hashName: function(e, t) {
            var n = 0;
            for (var r = 0; r < t.length; r++) {
                n = (n << 5) - n + t.charCodeAt(r) | 0
            }
            return (e + n >>> 0) % FS.nameTable.length
        },
        hashAddNode: function(e) {
            var t = FS.hashName(e.parent.id, e.name);
            e.name_next = FS.nameTable[t];
            FS.nameTable[t] = e
        },
        hashRemoveNode: function(e) {
            var t = FS.hashName(e.parent.id, e.name);
            if (FS.nameTable[t] === e) {
                FS.nameTable[t] = e.name_next
            } else {
                var n = FS.nameTable[t];
                while (n) {
                    if (n.name_next === e) {
                        n.name_next = e.name_next;
                        break
                    }
                    n = n.name_next
                }
            }
        },
        lookupNode: function(e, t) {
            var n = FS.mayLookup(e);
            if (n) {
                throw new FS.ErrnoError(n, e)
            }
            var r = FS.hashName(e.id, t);
            for (var i = FS.nameTable[r]; i; i = i.name_next) {
                var s = i.name;
                if (i.parent.id === e.id && s === t) {
                    return i
                }
            }
            return FS.lookup(e, t)
        },
        createNode: function(e, t, n, r) {
            if (!FS.FSNode) {
                FS.FSNode = function(e, t, n, r) {
                    if (!e) {
                        e = this
                    }
                    this.parent = e;
                    this.mount = e.mount;
                    this.mounted = null;
                    this.id = FS.nextInode++;
                    this.name = t;
                    this.mode = n;
                    this.node_ops = {};
                    this.stream_ops = {};
                    this.rdev = r
                };
                FS.FSNode.prototype = {};
                var i = 292 | 73;
                var s = 146;
                Object.defineProperties(FS.FSNode.prototype, {
                    read: {
                        get: function() {
                            return (this.mode & i) === i
                        },
                        set: function(e) {
                            e ? this.mode |= i : this.mode &= ~i
                        }
                    },
                    write: {
                        get: function() {
                            return (this.mode & s) === s
                        },
                        set: function(e) {
                            e ? this.mode |= s : this.mode &= ~s
                        }
                    },
                    isFolder: {
                        get: function() {
                            return FS.isDir(this.mode)
                        }
                    },
                    isDevice: {
                        get: function() {
                            return FS.isChrdev(this.mode)
                        }
                    }
                })
            }
            var o = new FS.FSNode(e, t, n, r);
            FS.hashAddNode(o);
            return o
        },
        destroyNode: function(e) {
            FS.hashRemoveNode(e)
        },
        isRoot: function(e) {
            return e === e.parent
        },
        isMountpoint: function(e) {
            return !!e.mounted
        },
        isFile: function(e) {
            return (e & 61440) === 32768
        },
        isDir: function(e) {
            return (e & 61440) === 16384
        },
        isLink: function(e) {
            return (e & 61440) === 40960
        },
        isChrdev: function(e) {
            return (e & 61440) === 8192
        },
        isBlkdev: function(e) {
            return (e & 61440) === 24576
        },
        isFIFO: function(e) {
            return (e & 61440) === 4096
        },
        isSocket: function(e) {
            return (e & 49152) === 49152
        },
        flagModes: {
            r: 0,
            rs: 1052672,
            "r+": 2,
            w: 577,
            wx: 705,
            xw: 705,
            "w+": 578,
            "wx+": 706,
            "xw+": 706,
            a: 1089,
            ax: 1217,
            xa: 1217,
            "a+": 1090,
            "ax+": 1218,
            "xa+": 1218
        },
        modeStringToFlags: function(e) {
            var t = FS.flagModes[e];
            if (typeof t === "undefined") {
                throw new Error("Unknown file open mode: " + e)
            }
            return t
        },
        flagsToPermissionString: function(e) {
            var t = e & 2097155;
            var n = ["r", "w", "rw"][t];
            if (e & 512) {
                n += "w"
            }
            return n
        },
        nodePermissions: function(e, t) {
            if (FS.ignorePermissions) {
                return 0
            }
            if (t.indexOf("r") !== -1 && !(e.mode & 292)) {
                return ERRNO_CODES.EACCES
            } else if (t.indexOf("w") !== -1 && !(e.mode & 146)) {
                return ERRNO_CODES.EACCES
            } else if (t.indexOf("x") !== -1 && !(e.mode & 73)) {
                return ERRNO_CODES.EACCES
            }
            return 0
        },
        mayLookup: function(e) {
            var t = FS.nodePermissions(e, "x");
            if (t) return t;
            if (!e.node_ops.lookup) return ERRNO_CODES.EACCES;
            return 0
        },
        mayCreate: function(e, t) {
            try {
                var n = FS.lookupNode(e, t);
                return ERRNO_CODES.EEXIST
            } catch (r) {}
            return FS.nodePermissions(e, "wx")
        },
        mayDelete: function(e, t, n) {
            var r;
            try {
                r = FS.lookupNode(e, t)
            } catch (i) {
                return i.errno
            }
            var s = FS.nodePermissions(e, "wx");
            if (s) {
                return s
            }
            if (n) {
                if (!FS.isDir(r.mode)) {
                    return ERRNO_CODES.ENOTDIR
                }
                if (FS.isRoot(r) || FS.getPath(r) === FS.cwd()) {
                    return ERRNO_CODES.EBUSY
                }
            } else {
                if (FS.isDir(r.mode)) {
                    return ERRNO_CODES.EISDIR
                }
            }
            return 0
        },
        mayOpen: function(e, t) {
            if (!e) {
                return ERRNO_CODES.ENOENT
            }
            if (FS.isLink(e.mode)) {
                return ERRNO_CODES.ELOOP
            } else if (FS.isDir(e.mode)) {
                if ((t & 2097155) !== 0 || t & 512) {
                    return ERRNO_CODES.EISDIR
                }
            }
            return FS.nodePermissions(e, FS.flagsToPermissionString(t))
        },
        MAX_OPEN_FDS: 4096,
        nextfd: function(e, t) {
            e = e || 0;
            t = t || FS.MAX_OPEN_FDS;
            for (var n = e; n <= t; n++) {
                if (!FS.streams[n]) {
                    return n
                }
            }
            throw new FS.ErrnoError(ERRNO_CODES.EMFILE)
        },
        getStream: function(e) {
            return FS.streams[e]
        },
        createStream: function(e, t, n) {
            if (!FS.FSStream) {
                FS.FSStream = function() {};
                FS.FSStream.prototype = {};
                Object.defineProperties(FS.FSStream.prototype, {
                    object: {
                        get: function() {
                            return this.node
                        },
                        set: function(e) {
                            this.node = e
                        }
                    },
                    isRead: {
                        get: function() {
                            return (this.flags & 2097155) !== 1
                        }
                    },
                    isWrite: {
                        get: function() {
                            return (this.flags & 2097155) !== 0
                        }
                    },
                    isAppend: {
                        get: function() {
                            return this.flags & 1024
                        }
                    }
                })
            }
            var r = new FS.FSStream;
            for (var i in e) {
                r[i] = e[i]
            }
            e = r;
            var s = FS.nextfd(t, n);
            e.fd = s;
            FS.streams[s] = e;
            return e
        },
        closeStream: function(e) {
            FS.streams[e] = null
        },
        getStreamFromPtr: function(e) {
            return FS.streams[e - 1]
        },
        getPtrForStream: function(e) {
            return e ? e.fd + 1 : 0
        },
        chrdev_stream_ops: {
            open: function(e) {
                var t = FS.getDevice(e.node.rdev);
                e.stream_ops = t.stream_ops;
                if (e.stream_ops.open) {
                    e.stream_ops.open(e)
                }
            },
            llseek: function() {
                throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
            }
        },
        major: function(e) {
            return e >> 8
        },
        minor: function(e) {
            return e & 255
        },
        makedev: function(e, t) {
            return e << 8 | t
        },
        registerDevice: function(e, t) {
            FS.devices[e] = {
                stream_ops: t
            }
        },
        getDevice: function(e) {
            return FS.devices[e]
        },
        getMounts: function(e) {
            var t = [];
            var n = [e];
            while (n.length) {
                var r = n.pop();
                t.push(r);
                n.push.apply(n, r.mounts)
            }
            return t
        },
        syncfs: function(e, t) {
            function i(e) {
                if (e) {
                    if (!i.errored) {
                        i.errored = true;
                        return t(e)
                    }
                    return
                }
                if (++r >= n.length) {
                    t(null)
                }
            }
            if (typeof e === "function") {
                t = e;
                e = false
            }
            var n = FS.getMounts(FS.root.mount);
            var r = 0;
            n.forEach(function(t) {
                if (!t.type.syncfs) {
                    return i(null)
                }
                t.type.syncfs(t, e, i)
            })
        },
        mount: function(e, t, n) {
            var r = n === "/";
            var i = !n;
            var s;
            if (r && FS.root) {
                throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
            } else if (!r && !i) {
                var o = FS.lookupPath(n, {
                    follow_mount: false
                });
                n = o.path;
                s = o.node;
                if (FS.isMountpoint(s)) {
                    throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
                }
                if (!FS.isDir(s.mode)) {
                    throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)
                }
            }
            var u = {
                type: e,
                opts: t,
                mountpoint: n,
                mounts: []
            };
            var a = e.mount(u);
            a.mount = u;
            u.root = a;
            if (r) {
                FS.root = a
            } else if (s) {
                s.mounted = u;
                if (s.mount) {
                    s.mount.mounts.push(u)
                }
            }
            return a
        },
        unmount: function(e) {
            var t = FS.lookupPath(e, {
                follow_mount: false
            });
            if (!FS.isMountpoint(t.node)) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            var n = t.node;
            var r = n.mounted;
            var i = FS.getMounts(r);
            Object.keys(FS.nameTable).forEach(function(e) {
                var t = FS.nameTable[e];
                while (t) {
                    var n = t.name_next;
                    if (i.indexOf(t.mount) !== -1) {
                        FS.destroyNode(t)
                    }
                    t = n
                }
            });
            n.mounted = null;
            var s = n.mount.mounts.indexOf(r);
            assert(s !== -1);
            n.mount.mounts.splice(s, 1)
        },
        lookup: function(e, t) {
            return e.node_ops.lookup(e, t)
        },
        mknod: function(e, t, n) {
            var r = FS.lookupPath(e, {
                parent: true
            });
            var i = r.node;
            var s = PATH.basename(e);
            if (!s || s === "." || s === "..") {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            var o = FS.mayCreate(i, s);
            if (o) {
                throw new FS.ErrnoError(o)
            }
            if (!i.node_ops.mknod) {
                throw new FS.ErrnoError(ERRNO_CODES.EPERM)
            }
            return i.node_ops.mknod(i, s, t, n)
        },
        create: function(e, t) {
            t = t !== undefined ? t : 438;
            t &= 4095;
            t |= 32768;
            return FS.mknod(e, t, 0)
        },
        mkdir: function(e, t) {
            t = t !== undefined ? t : 511;
            t &= 511 | 512;
            t |= 16384;
            return FS.mknod(e, t, 0)
        },
        mkdev: function(e, t, n) {
            if (typeof n === "undefined") {
                n = t;
                t = 438
            }
            t |= 8192;
            return FS.mknod(e, t, n)
        },
        symlink: function(e, t) {
            if (!PATH.resolve(e)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
            }
            var n = FS.lookupPath(t, {
                parent: true
            });
            var r = n.node;
            if (!r) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
            }
            var i = PATH.basename(t);
            var s = FS.mayCreate(r, i);
            if (s) {
                throw new FS.ErrnoError(s)
            }
            if (!r.node_ops.symlink) {
                throw new FS.ErrnoError(ERRNO_CODES.EPERM)
            }
            return r.node_ops.symlink(r, i, e)
        },
        rename: function(e, t) {
            var n = PATH.dirname(e);
            var r = PATH.dirname(t);
            var i = PATH.basename(e);
            var s = PATH.basename(t);
            var o, u, a;
            try {
                o = FS.lookupPath(e, {
                    parent: true
                });
                u = o.node;
                o = FS.lookupPath(t, {
                    parent: true
                });
                a = o.node
            } catch (f) {
                throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
            }
            if (!u || !a) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
            if (u.mount !== a.mount) {
                throw new FS.ErrnoError(ERRNO_CODES.EXDEV)
            }
            var l = FS.lookupNode(u, i);
            var c = PATH.relative(e, r);
            if (c.charAt(0) !== ".") {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            c = PATH.relative(t, n);
            if (c.charAt(0) !== ".") {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)
            }
            var h;
            try {
                h = FS.lookupNode(a, s)
            } catch (f) {}
            if (l === h) {
                return
            }
            var p = FS.isDir(l.mode);
            var d = FS.mayDelete(u, i, p);
            if (d) {
                throw new FS.ErrnoError(d)
            }
            d = h ? FS.mayDelete(a, s, p) : FS.mayCreate(a, s);
            if (d) {
                throw new FS.ErrnoError(d)
            }
            if (!u.node_ops.rename) {
                throw new FS.ErrnoError(ERRNO_CODES.EPERM)
            }
            if (FS.isMountpoint(l) || h && FS.isMountpoint(h)) {
                throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
            }
            if (a !== u) {
                d = FS.nodePermissions(u, "w");
                if (d) {
                    throw new FS.ErrnoError(d)
                }
            }
            try {
                if (FS.trackingDelegate["willMovePath"]) {
                    FS.trackingDelegate["willMovePath"](e, t)
                }
            } catch (f) {
                console.log("FS.trackingDelegate['willMovePath']('" + e + "', '" + t + "') threw an exception: " + f.message)
            }
            FS.hashRemoveNode(l);
            try {
                u.node_ops.rename(l, a, s)
            } catch (f) {
                throw f
            } finally {
                FS.hashAddNode(l)
            }
            try {
                if (FS.trackingDelegate["onMovePath"]) FS.trackingDelegate["onMovePath"](e, t)
            } catch (f) {
                console.log("FS.trackingDelegate['onMovePath']('" + e + "', '" + t + "') threw an exception: " + f.message)
            }
        },
        rmdir: function(e) {
            var t = FS.lookupPath(e, {
                parent: true
            });
            var n = t.node;
            var r = PATH.basename(e);
            var i = FS.lookupNode(n, r);
            var s = FS.mayDelete(n, r, true);
            if (s) {
                throw new FS.ErrnoError(s)
            }
            if (!n.node_ops.rmdir) {
                throw new FS.ErrnoError(ERRNO_CODES.EPERM)
            }
            if (FS.isMountpoint(i)) {
                throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
            }
            try {
                if (FS.trackingDelegate["willDeletePath"]) {
                    FS.trackingDelegate["willDeletePath"](e)
                }
            } catch (o) {
                console.log("FS.trackingDelegate['willDeletePath']('" + e + "') threw an exception: " + o.message)
            }
            n.node_ops.rmdir(n, r);
            FS.destroyNode(i);
            try {
                if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](e)
            } catch (o) {
                console.log("FS.trackingDelegate['onDeletePath']('" + e + "') threw an exception: " + o.message)
            }
        },
        readdir: function(e) {
            var t = FS.lookupPath(e, {
                follow: true
            });
            var n = t.node;
            if (!n.node_ops.readdir) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)
            }
            return n.node_ops.readdir(n)
        },
        unlink: function(e) {
            var t = FS.lookupPath(e, {
                parent: true
            });
            var n = t.node;
            var r = PATH.basename(e);
            var i = FS.lookupNode(n, r);
            var s = FS.mayDelete(n, r, false);
            if (s) {
                if (s === ERRNO_CODES.EISDIR) s = ERRNO_CODES.EPERM;
                throw new FS.ErrnoError(s)
            }
            if (!n.node_ops.unlink) {
                throw new FS.ErrnoError(ERRNO_CODES.EPERM)
            }
            if (FS.isMountpoint(i)) {
                throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
            }
            try {
                if (FS.trackingDelegate["willDeletePath"]) {
                    FS.trackingDelegate["willDeletePath"](e)
                }
            } catch (o) {
                console.log("FS.trackingDelegate['willDeletePath']('" + e + "') threw an exception: " + o.message)
            }
            n.node_ops.unlink(n, r);
            FS.destroyNode(i);
            try {
                if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](e)
            } catch (o) {
                console.log("FS.trackingDelegate['onDeletePath']('" + e + "') threw an exception: " + o.message)
            }
        },
        readlink: function(e) {
            var t = FS.lookupPath(e);
            var n = t.node;
            if (!n) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
            }
            if (!n.node_ops.readlink) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            return n.node_ops.readlink(n)
        },
        stat: function(e, t) {
            var n = FS.lookupPath(e, {
                follow: !t
            });
            var r = n.node;
            if (!r) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
            }
            if (!r.node_ops.getattr) {
                throw new FS.ErrnoError(ERRNO_CODES.EPERM)
            }
            return r.node_ops.getattr(r)
        },
        lstat: function(e) {
            return FS.stat(e, true)
        },
        chmod: function(e, t, n) {
            var r;
            if (typeof e === "string") {
                var i = FS.lookupPath(e, {
                    follow: !n
                });
                r = i.node
            } else {
                r = e
            }
            if (!r.node_ops.setattr) {
                throw new FS.ErrnoError(ERRNO_CODES.EPERM)
            }
            r.node_ops.setattr(r, {
                mode: t & 4095 | r.mode & ~4095,
                timestamp: Date.now()
            })
        },
        lchmod: function(e, t) {
            FS.chmod(e, t, true)
        },
        fchmod: function(e, t) {
            var n = FS.getStream(e);
            if (!n) {
                throw new FS.ErrnoError(ERRNO_CODES.EBADF)
            }
            FS.chmod(n.node, t)
        },
        chown: function(e, t, n, r) {
            var i;
            if (typeof e === "string") {
                var s = FS.lookupPath(e, {
                    follow: !r
                });
                i = s.node
            } else {
                i = e
            }
            if (!i.node_ops.setattr) {
                throw new FS.ErrnoError(ERRNO_CODES.EPERM)
            }
            i.node_ops.setattr(i, {
                timestamp: Date.now()
            })
        },
        lchown: function(e, t, n) {
            FS.chown(e, t, n, true)
        },
        fchown: function(e, t, n) {
            var r = FS.getStream(e);
            if (!r) {
                throw new FS.ErrnoError(ERRNO_CODES.EBADF)
            }
            FS.chown(r.node, t, n)
        },
        truncate: function(e, t) {
            if (t < 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            var n;
            if (typeof e === "string") {
                var r = FS.lookupPath(e, {
                    follow: true
                });
                n = r.node
            } else {
                n = e
            }
            if (!n.node_ops.setattr) {
                throw new FS.ErrnoError(ERRNO_CODES.EPERM)
            }
            if (FS.isDir(n.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.EISDIR)
            }
            if (!FS.isFile(n.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            var i = FS.nodePermissions(n, "w");
            if (i) {
                throw new FS.ErrnoError(i)
            }
            n.node_ops.setattr(n, {
                size: t,
                timestamp: Date.now()
            })
        },
        ftruncate: function(e, t) {
            var n = FS.getStream(e);
            if (!n) {
                throw new FS.ErrnoError(ERRNO_CODES.EBADF)
            }
            if ((n.flags & 2097155) === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            FS.truncate(n.node, t)
        },
        utime: function(e, t, n) {
            var r = FS.lookupPath(e, {
                follow: true
            });
            var i = r.node;
            i.node_ops.setattr(i, {
                timestamp: Math.max(t, n)
            })
        },
        open: function(e, t, n, r, i) {
            if (e === "") {
                throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
            }
            t = typeof t === "string" ? FS.modeStringToFlags(t) : t;
            n = typeof n === "undefined" ? 438 : n;
            if (t & 64) {
                n = n & 4095 | 32768
            } else {
                n = 0
            }
            var s;
            if (typeof e === "object") {
                s = e
            } else {
                e = PATH.normalize(e);
                try {
                    var o = FS.lookupPath(e, {
                        follow: !(t & 131072)
                    });
                    s = o.node
                } catch (u) {}
            }
            var a = false;
            if (t & 64) {
                if (s) {
                    if (t & 128) {
                        throw new FS.ErrnoError(ERRNO_CODES.EEXIST)
                    }
                } else {
                    s = FS.mknod(e, n, 0);
                    a = true
                }
            }
            if (!s) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
            }
            if (FS.isChrdev(s.mode)) {
                t &= ~512
            }
            if (!a) {
                var f = FS.mayOpen(s, t);
                if (f) {
                    throw new FS.ErrnoError(f)
                }
            }
            if (t & 512) {
                FS.truncate(s, 0)
            }
            t &= ~(128 | 512);
            var l = FS.createStream({
                node: s,
                path: FS.getPath(s),
                flags: t,
                seekable: true,
                position: 0,
                stream_ops: s.stream_ops,
                ungotten: [],
                error: false
            }, r, i);
            if (l.stream_ops.open) {
                l.stream_ops.open(l)
            }
            if (Module["logReadFiles"] && !(t & 1)) {
                if (!FS.readFiles) FS.readFiles = {};
                if (!(e in FS.readFiles)) {
                    FS.readFiles[e] = 1;
                    Module["printErr"]("read file: " + e)
                }
            }
            try {
                if (FS.trackingDelegate["onOpenFile"]) {
                    var c = 0;
                    if ((t & 2097155) !== 1) {
                        c |= FS.tracking.openFlags.READ
                    }
                    if ((t & 2097155) !== 0) {
                        c |= FS.tracking.openFlags.WRITE
                    }
                    FS.trackingDelegate["onOpenFile"](e, c)
                }
            } catch (u) {
                console.log("FS.trackingDelegate['onOpenFile']('" + e + "', flags) threw an exception: " + u.message)
            }
            return l
        },
        close: function(e) {
            try {
                if (e.stream_ops.close) {
                    e.stream_ops.close(e)
                }
            } catch (t) {
                throw t
            } finally {
                FS.closeStream(e.fd)
            }
        },
        llseek: function(e, t, n) {
            if (!e.seekable || !e.stream_ops.llseek) {
                throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
            }
            return e.stream_ops.llseek(e, t, n)
        },
        read: function(e, t, n, r, i) {
            if (r < 0 || i < 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            if ((e.flags & 2097155) === 1) {
                throw new FS.ErrnoError(ERRNO_CODES.EBADF)
            }
            if (FS.isDir(e.node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.EISDIR)
            }
            if (!e.stream_ops.read) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            var s = true;
            if (typeof i === "undefined") {
                i = e.position;
                s = false
            } else if (!e.seekable) {
                throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
            }
            var o = e.stream_ops.read(e, t, n, r, i);
            if (!s) e.position += o;
            return o
        },
        write: function(e, t, n, r, i, s) {
            if (r < 0 || i < 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            if ((e.flags & 2097155) === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EBADF)
            }
            if (FS.isDir(e.node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.EISDIR)
            }
            if (!e.stream_ops.write) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            if (e.flags & 1024) {
                FS.llseek(e, 0, 2)
            }
            var o = true;
            if (typeof i === "undefined") {
                i = e.position;
                o = false
            } else if (!e.seekable) {
                throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
            }
            var u = e.stream_ops.write(e, t, n, r, i, s);
            if (!o) e.position += u;
            try {
                if (e.path && FS.trackingDelegate["onWriteToFile"]) FS.trackingDelegate["onWriteToFile"](e.path)
            } catch (a) {
                console.log("FS.trackingDelegate['onWriteToFile']('" + path + "') threw an exception: " + a.message)
            }
            return u
        },
        allocate: function(e, t, n) {
            if (t < 0 || n <= 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            if ((e.flags & 2097155) === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EBADF)
            }
            if (!FS.isFile(e.node.mode) && !FS.isDir(node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
            }
            if (!e.stream_ops.allocate) {
                throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)
            }
            e.stream_ops.allocate(e, t, n)
        },
        mmap: function(e, t, n, r, i, s, o) {
            if ((e.flags & 2097155) === 1) {
                throw new FS.ErrnoError(ERRNO_CODES.EACCES)
            }
            if (!e.stream_ops.mmap) {
                throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
            }
            return e.stream_ops.mmap(e, t, n, r, i, s, o)
        },
        ioctl: function(e, t, n) {
            if (!e.stream_ops.ioctl) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTTY)
            }
            return e.stream_ops.ioctl(e, t, n)
        },
        readFile: function(e, t) {
            t = t || {};
            t.flags = t.flags || "r";
            t.encoding = t.encoding || "binary";
            if (t.encoding !== "utf8" && t.encoding !== "binary") {
                throw new Error('Invalid encoding type "' + t.encoding + '"')
            }
            var n;
            var r = FS.open(e, t.flags);
            var i = FS.stat(e);
            var s = i.size;
            var o = new Uint8Array(s);
            FS.read(r, o, 0, s, 0);
            if (t.encoding === "utf8") {
                n = "";
                var u = new Runtime.UTF8Processor;
                for (var a = 0; a < s; a++) {
                    n += u.processCChar(o[a])
                }
            } else if (t.encoding === "binary") {
                n = o
            }
            FS.close(r);
            return n
        },
        writeFile: function(e, t, n) {
            n = n || {};
            n.flags = n.flags || "w";
            n.encoding = n.encoding || "utf8";
            if (n.encoding !== "utf8" && n.encoding !== "binary") {
                throw new Error('Invalid encoding type "' + n.encoding + '"')
            }
            var r = FS.open(e, n.flags, n.mode);
            if (n.encoding === "utf8") {
                var i = new Runtime.UTF8Processor;
                var s = new Uint8Array(i.processJSString(t));
                FS.write(r, s, 0, s.length, 0, n.canOwn)
            } else if (n.encoding === "binary") {
                FS.write(r, t, 0, t.length, 0, n.canOwn)
            }
            FS.close(r)
        },
        cwd: function() {
            return FS.currentPath
        },
        chdir: function(e) {
            var t = FS.lookupPath(e, {
                follow: true
            });
            if (!FS.isDir(t.node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)
            }
            var n = FS.nodePermissions(t.node, "x");
            if (n) {
                throw new FS.ErrnoError(n)
            }
            FS.currentPath = t.path
        },
        createDefaultDirectories: function() {
            FS.mkdir("/tmp");
            FS.mkdir("/home");
            FS.mkdir("/home/web_user")
        },
        createDefaultDevices: function() {
            FS.mkdir("/dev");
            FS.registerDevice(FS.makedev(1, 3), {
                read: function() {
                    return 0
                },
                write: function() {
                    return 0
                }
            });
            FS.mkdev("/dev/null", FS.makedev(1, 3));
            TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
            TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
            FS.mkdev("/dev/tty", FS.makedev(5, 0));
            FS.mkdev("/dev/tty1", FS.makedev(6, 0));
            var e;
            if (typeof crypto !== "undefined") {
                var t = new Uint8Array(1);
                e = function() {
                    crypto.getRandomValues(t);
                    return t[0]
                }
            } else if (ENVIRONMENT_IS_NODE) {
                e = function() {
                    return require("crypto").randomBytes(1)[0]
                }
            } else {
                e = function() {
                    return Math.random() * 256 | 0
                }
            }
            FS.createDevice("/dev", "random", e);
            FS.createDevice("/dev", "urandom", e);
            FS.mkdir("/dev/shm");
            FS.mkdir("/dev/shm/tmp")
        },
        createStandardStreams: function() {
            if (Module["stdin"]) {
                FS.createDevice("/dev", "stdin", Module["stdin"])
            } else {
                FS.symlink("/dev/tty", "/dev/stdin")
            }
            if (Module["stdout"]) {
                FS.createDevice("/dev", "stdout", null, Module["stdout"])
            } else {
                FS.symlink("/dev/tty", "/dev/stdout")
            }
            if (Module["stderr"]) {
                FS.createDevice("/dev", "stderr", null, Module["stderr"])
            } else {
                FS.symlink("/dev/tty1", "/dev/stderr")
            }
            var e = FS.open("/dev/stdin", "r");
            HEAP32[_stdin >> 2] = FS.getPtrForStream(e);
            assert(e.fd === 0, "invalid handle for stdin (" + e.fd + ")");
            var t = FS.open("/dev/stdout", "w");
            HEAP32[_stdout >> 2] = FS.getPtrForStream(t);
            assert(t.fd === 1, "invalid handle for stdout (" + t.fd + ")");
            var n = FS.open("/dev/stderr", "w");
            HEAP32[_stderr >> 2] = FS.getPtrForStream(n);
            assert(n.fd === 2, "invalid handle for stderr (" + n.fd + ")")
        },
        ensureErrnoError: function() {
            if (FS.ErrnoError) return;
            FS.ErrnoError = function(t, n) {
                this.node = n;
                this.setErrno = function(e) {
                    this.errno = e;
                    for (var t in ERRNO_CODES) {
                        if (ERRNO_CODES[t] === e) {
                            this.code = t;
                            break
                        }
                    }
                };
                this.setErrno(t);
                this.message = ERRNO_MESSAGES[t]
            };
            FS.ErrnoError.prototype = new Error;
            FS.ErrnoError.prototype.constructor = FS.ErrnoError;
            [ERRNO_CODES.ENOENT].forEach(function(e) {
                FS.genericErrors[e] = new FS.ErrnoError(e);
                FS.genericErrors[e].stack = "<generic error, no stack>"
            })
        },
        staticInit: function() {
            FS.ensureErrnoError();
            FS.nameTable = new Array(4096);
            FS.mount(MEMFS, {}, "/");
            FS.createDefaultDirectories();
            FS.createDefaultDevices()
        },
        init: function(e, t, n) {
            assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
            FS.init.initialized = true;
            FS.ensureErrnoError();
            Module["stdin"] = e || Module["stdin"];
            Module["stdout"] = t || Module["stdout"];
            Module["stderr"] = n || Module["stderr"];
            FS.createStandardStreams()
        },
        quit: function() {
            FS.init.initialized = false;
            for (var e = 0; e < FS.streams.length; e++) {
                var t = FS.streams[e];
                if (!t) {
                    continue
                }
                FS.close(t)
            }
        },
        getMode: function(e, t) {
            var n = 0;
            if (e) n |= 292 | 73;
            if (t) n |= 146;
            return n
        },
        joinPath: function(e, t) {
            var n = PATH.join.apply(null, e);
            if (t && n[0] == "/") n = n.substr(1);
            return n
        },
        absolutePath: function(e, t) {
            return PATH.resolve(t, e)
        },
        standardizePath: function(e) {
            return PATH.normalize(e)
        },
        findObject: function(e, t) {
            var n = FS.analyzePath(e, t);
            if (n.exists) {
                return n.object
            } else {
                ___setErrNo(n.error);
                return null
            }
        },
        analyzePath: function(e, t) {
            try {
                var n = FS.lookupPath(e, {
                    follow: !t
                });
                e = n.path
            } catch (r) {}
            var i = {
                isRoot: false,
                exists: false,
                error: 0,
                name: null,
                path: null,
                object: null,
                parentExists: false,
                parentPath: null,
                parentObject: null
            };
            try {
                var n = FS.lookupPath(e, {
                    parent: true
                });
                i.parentExists = true;
                i.parentPath = n.path;
                i.parentObject = n.node;
                i.name = PATH.basename(e);
                n = FS.lookupPath(e, {
                    follow: !t
                });
                i.exists = true;
                i.path = n.path;
                i.object = n.node;
                i.name = n.node.name;
                i.isRoot = n.path === "/"
            } catch (r) {
                i.error = r.errno
            }
            return i
        },
        createFolder: function(e, t, n, r) {
            var i = PATH.join2(typeof e === "string" ? e : FS.getPath(e), t);
            var s = FS.getMode(n, r);
            return FS.mkdir(i, s)
        },
        createPath: function(e, t, n, r) {
            e = typeof e === "string" ? e : FS.getPath(e);
            var i = t.split("/").reverse();
            while (i.length) {
                var s = i.pop();
                if (!s) continue;
                var o = PATH.join2(e, s);
                try {
                    FS.mkdir(o)
                } catch (u) {}
                e = o
            }
            return o
        },
        createFile: function(e, t, n, r, i) {
            var s = PATH.join2(typeof e === "string" ? e : FS.getPath(e), t);
            var o = FS.getMode(r, i);
            return FS.create(s, o)
        },
        createDataFile: function(e, t, n, r, i, s) {
            var o = t ? PATH.join2(typeof e === "string" ? e : FS.getPath(e), t) : e;
            var u = FS.getMode(r, i);
            var a = FS.create(o, u);
            if (n) {
                if (typeof n === "string") {
                    var f = new Array(n.length);
                    for (var l = 0, c = n.length; l < c; ++l) f[l] = n.charCodeAt(l);
                    n = f
                }
                FS.chmod(a, u | 146);
                var h = FS.open(a, "w");
                FS.write(h, n, 0, n.length, 0, s);
                FS.close(h);
                FS.chmod(a, u)
            }
            return a
        },
        createDevice: function(e, t, n, r) {
            var i = PATH.join2(typeof e === "string" ? e : FS.getPath(e), t);
            var s = FS.getMode(!!n, !!r);
            if (!FS.createDevice.major) FS.createDevice.major = 64;
            var o = FS.makedev(FS.createDevice.major++, 0);
            FS.registerDevice(o, {
                open: function(e) {
                    e.seekable = false
                },
                close: function(e) {
                    if (r && r.buffer && r.buffer.length) {
                        r(10)
                    }
                },
                read: function(e, t, r, i, s) {
                    var o = 0;
                    for (var u = 0; u < i; u++) {
                        var a;
                        try {
                            a = n()
                        } catch (f) {
                            throw new FS.ErrnoError(ERRNO_CODES.EIO)
                        }
                        if (a === undefined && o === 0) {
                            throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)
                        }
                        if (a === null || a === undefined) break;
                        o++;
                        t[r + u] = a
                    }
                    if (o) {
                        e.node.timestamp = Date.now()
                    }
                    return o
                },
                write: function(e, t, n, i, s) {
                    for (var o = 0; o < i; o++) {
                        try {
                            r(t[n + o])
                        } catch (u) {
                            throw new FS.ErrnoError(ERRNO_CODES.EIO)
                        }
                    }
                    if (i) {
                        e.node.timestamp = Date.now()
                    }
                    return o
                }
            });
            return FS.mkdev(i, s, o)
        },
        createLink: function(e, t, n, r, i) {
            var s = PATH.join2(typeof e === "string" ? e : FS.getPath(e), t);
            return FS.symlink(n, s)
        },
        forceLoadFile: function(e) {
            if (e.isDevice || e.isFolder || e.link || e.contents) return true;
            var t = true;
            if (typeof XMLHttpRequest !== "undefined") {
                throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")
            } else if (Module["read"]) {
                try {
                    e.contents = intArrayFromString(Module["read"](e.url), true);
                    e.usedBytes = e.contents.length
                } catch (n) {
                    t = false
                }
            } else {
                throw new Error("Cannot load without read() or XMLHttpRequest.")
            }
            if (!t) ___setErrNo(ERRNO_CODES.EIO);
            return t
        },
        createLazyFile: function(e, t, n, r, i) {
            function s() {
                this.lengthKnown = false;
                this.chunks = []
            }
            s.prototype.get = function(t) {
                if (t > this.length - 1 || t < 0) {
                    return undefined
                }
                var n = t % this.chunkSize;
                var r = t / this.chunkSize | 0;
                return this.getter(r)[n]
            };
            s.prototype.setDataGetter = function(t) {
                this.getter = t
            };
            s.prototype.cacheLength = function() {
                var t = new XMLHttpRequest;
                t.open("HEAD", n, false);
                t.send(null);
                if (!(t.status >= 200 && t.status < 300 || t.status === 304)) throw new Error("Couldn't load " + n + ". Status: " + t.status);
                var r = Number(t.getResponseHeader("Content-length"));
                var i;
                var s = (i = t.getResponseHeader("Accept-Ranges")) && i === "bytes";
                var o = 1024 * 1024;
                if (!s) o = r;
                var u = function(e, t) {
                    if (e > t) throw new Error("invalid range (" + e + ", " + t + ") or no bytes requested!");
                    if (t > r - 1) throw new Error("only " + r + " bytes available! programmer error!");
                    var i = new XMLHttpRequest;
                    i.open("GET", n, false);
                    if (r !== o) i.setRequestHeader("Range", "bytes=" + e + "-" + t);
                    if (typeof Uint8Array != "undefined") i.responseType = "arraybuffer";
                    if (i.overrideMimeType) {
                        i.overrideMimeType("text/plain; charset=x-user-defined")
                    }
                    i.send(null);
                    if (!(i.status >= 200 && i.status < 300 || i.status === 304)) throw new Error("Couldn't load " + n + ". Status: " + i.status);
                    if (i.response !== undefined) {
                        return new Uint8Array(i.response || [])
                    } else {
                        return intArrayFromString(i.responseText || "", true)
                    }
                };
                var a = this;
                a.setDataGetter(function(e) {
                    var t = e * o;
                    var n = (e + 1) * o - 1;
                    n = Math.min(n, r - 1);
                    if (typeof a.chunks[e] === "undefined") {
                        a.chunks[e] = u(t, n)
                    }
                    if (typeof a.chunks[e] === "undefined") throw new Error("doXHR failed!");
                    return a.chunks[e]
                });
                this._length = r;
                this._chunkSize = o;
                this.lengthKnown = true
            };
            if (typeof XMLHttpRequest !== "undefined") {
                if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
                var o = new s;
                Object.defineProperty(o, "length", {
                    get: function() {
                        if (!this.lengthKnown) {
                            this.cacheLength()
                        }
                        return this._length
                    }
                });
                Object.defineProperty(o, "chunkSize", {
                    get: function() {
                        if (!this.lengthKnown) {
                            this.cacheLength()
                        }
                        return this._chunkSize
                    }
                });
                var u = {
                    isDevice: false,
                    contents: o
                }
            } else {
                var u = {
                    isDevice: false,
                    url: n
                }
            }
            var a = FS.createFile(e, t, u, r, i);
            if (u.contents) {
                a.contents = u.contents
            } else if (u.url) {
                a.contents = null;
                a.url = u.url
            }
            Object.defineProperty(a, "usedBytes", {
                get: function() {
                    return this.contents.length
                }
            });
            var f = {};
            var l = Object.keys(a.stream_ops);
            l.forEach(function(e) {
                var t = a.stream_ops[e];
                f[e] = function() {
                    if (!FS.forceLoadFile(a)) {
                        throw new FS.ErrnoError(ERRNO_CODES.EIO)
                    }
                    return t.apply(null, arguments)
                }
            });
            f.read = function(t, n, r, i, s) {
                if (!FS.forceLoadFile(a)) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO)
                }
                var o = t.node.contents;
                if (s >= o.length) return 0;
                var u = Math.min(o.length - s, i);
                assert(u >= 0);
                if (o.slice) {
                    for (var f = 0; f < u; f++) {
                        n[r + f] = o[s + f]
                    }
                } else {
                    for (var f = 0; f < u; f++) {
                        n[r + f] = o.get(s + f)
                    }
                }
                return u
            };
            a.stream_ops = f;
            return a
        },
        createPreloadedFile: function(e, t, n, r, i, s, o, u, a) {
            function l(n) {
                function l(n) {
                    if (!u) {
                        FS.createDataFile(e, t, n, r, i, a)
                    }
                    if (s) s();
                    removeRunDependency("cp " + f)
                }
                var c = false;
                Module["preloadPlugins"].forEach(function(e) {
                    if (c) return;
                    if (e["canHandle"](f)) {
                        e["handle"](n, f, l, function() {
                            if (o) o();
                            removeRunDependency("cp " + f)
                        });
                        c = true
                    }
                });
                if (!c) l(n)
            }
            Browser.init();
            var f = t ? PATH.resolve(PATH.join2(e, t)) : e;
            addRunDependency("cp " + f);
            if (typeof n == "string") {
                Browser.asyncLoad(n, function(e) {
                    l(e)
                }, o)
            } else {
                l(n)
            }
        },
        indexedDB: function() {
            return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB
        },
        DB_NAME: function() {
            return "EM_FS_" + window.location.pathname
        },
        DB_VERSION: 20,
        DB_STORE_NAME: "FILE_DATA",
        saveFilesToDB: function(e, t, n) {
            t = t || function() {};
            n = n || function() {};
            var r = FS.indexedDB();
            try {
                var i = r.open(FS.DB_NAME(), FS.DB_VERSION)
            } catch (s) {
                return n(s)
            }
            i.onupgradeneeded = function() {
                console.log("creating db");
                var t = i.result;
                t.createObjectStore(FS.DB_STORE_NAME)
            };
            i.onsuccess = function() {
                function c() {
                    if (f == 0) t();
                    else n()
                }
                var s = i.result;
                var o = s.transaction([FS.DB_STORE_NAME], "readwrite");
                var u = o.objectStore(FS.DB_STORE_NAME);
                var a = 0,
                    f = 0,
                    l = e.length;
                e.forEach(function(e) {
                    var t = u.put(FS.analyzePath(e).object.contents, e);
                    t.onsuccess = function() {
                        a++;
                        if (a + f == l) c()
                    };
                    t.onerror = function() {
                        f++;
                        if (a + f == l) c()
                    }
                });
                o.onerror = n
            };
            i.onerror = n
        },
        loadFilesFromDB: function(e, t, n) {
            t = t || function() {};
            n = n || function() {};
            var r = FS.indexedDB();
            try {
                var i = r.open(FS.DB_NAME(), FS.DB_VERSION)
            } catch (s) {
                return n(s)
            }
            i.onupgradeneeded = n;
            i.onsuccess = function() {
                function h() {
                    if (l == 0) t();
                    else n()
                }
                var s = i.result;
                try {
                    var o = s.transaction([FS.DB_STORE_NAME], "readonly")
                } catch (u) {
                    n(u);
                    return
                }
                var a = o.objectStore(FS.DB_STORE_NAME);
                var f = 0,
                    l = 0,
                    c = e.length;
                e.forEach(function(e) {
                    var t = a.get(e);
                    t.onsuccess = function() {
                        if (FS.analyzePath(e).exists) {
                            FS.unlink(e)
                        }
                        FS.createDataFile(PATH.dirname(e), PATH.basename(e), t.result, true, true, true);
                        f++;
                        if (f + l == c) h()
                    };
                    t.onerror = function() {
                        l++;
                        if (f + l == c) h()
                    }
                });
                o.onerror = n
            };
            i.onerror = n
        }
    };
    Module["_bitshift64Shl"] = _bitshift64Shl;
    var SOCKFS = {
        mount: function(e) {
            Module["websocket"] = Module["websocket"] && "object" === typeof Module["websocket"] ? Module["websocket"] : {};
            Module["websocket"]._callbacks = {};
            Module["websocket"]["on"] = function(e, t) {
                if ("function" === typeof t) {
                    this._callbacks[e] = t
                }
                return this
            };
            Module["websocket"].emit = function(e, t) {
                if ("function" === typeof this._callbacks[e]) {
                    this._callbacks[e].call(this, t)
                }
            };
            return FS.createNode(null, "/", 16384 | 511, 0)
        },
        createSocket: function(e, t, n) {
            var r = t == 1;
            if (n) {
                assert(r == (n == 6))
            }
            var i = {
                family: e,
                type: t,
                protocol: n,
                server: null,
                error: null,
                peers: {},
                pending: [],
                recv_queue: [],
                sock_ops: SOCKFS.websocket_sock_ops
            };
            var s = SOCKFS.nextname();
            var o = FS.createNode(SOCKFS.root, s, 49152, 0);
            o.sock = i;
            var u = FS.createStream({
                path: s,
                node: o,
                flags: FS.modeStringToFlags("r+"),
                seekable: false,
                stream_ops: SOCKFS.stream_ops
            });
            i.stream = u;
            return i
        },
        getSocket: function(e) {
            var t = FS.getStream(e);
            if (!t || !FS.isSocket(t.node.mode)) {
                return null
            }
            return t.node.sock
        },
        stream_ops: {
            poll: function(e) {
                var t = e.node.sock;
                return t.sock_ops.poll(t)
            },
            ioctl: function(e, t, n) {
                var r = e.node.sock;
                return r.sock_ops.ioctl(r, t, n)
            },
            read: function(e, t, n, r, i) {
                var s = e.node.sock;
                var o = s.sock_ops.recvmsg(s, r);
                if (!o) {
                    return 0
                }
                t.set(o.buffer, n);
                return o.buffer.length
            },
            write: function(e, t, n, r, i) {
                var s = e.node.sock;
                return s.sock_ops.sendmsg(s, t, n, r)
            },
            close: function(e) {
                var t = e.node.sock;
                t.sock_ops.close(t)
            }
        },
        nextname: function() {
            if (!SOCKFS.nextname.current) {
                SOCKFS.nextname.current = 0
            }
            return "socket[" + SOCKFS.nextname.current++ +"]"
        },
        websocket_sock_ops: {
            createPeer: function(e, t, n) {
                var r;
                if (typeof t === "object") {
                    r = t;
                    t = null;
                    n = null
                }
                if (r) {
                    if (r._socket) {
                        t = r._socket.remoteAddress;
                        n = r._socket.remotePort
                    } else {
                        var i = /ws[s]?:\/\/([^:]+):(\d+)/.exec(r.url);
                        if (!i) {
                            throw new Error("WebSocket URL must be in the format ws(s)://address:port")
                        }
                        t = i[1];
                        n = parseInt(i[2], 10)
                    }
                } else {
                    try {
                        var s = Module["websocket"] && "object" === typeof Module["websocket"];
                        var o = "ws:#".replace("#", "//");
                        if (s) {
                            if ("string" === typeof Module["websocket"]["url"]) {
                                o = Module["websocket"]["url"]
                            }
                        }
                        if (o === "ws://" || o === "wss://") {
                            var u = t.split("/");
                            o = o + u[0] + ":" + n + "/" + u.slice(1).join("/")
                        }
                        var a = "binary";
                        if (s) {
                            if ("string" === typeof Module["websocket"]["subprotocol"]) {
                                a = Module["websocket"]["subprotocol"]
                            }
                        }
                        a = a.replace(/^ +| +$/g, "").split(/ *, */);
                        var f = ENVIRONMENT_IS_NODE ? {
                            protocol: a.toString()
                        } : a;
                        var l = ENVIRONMENT_IS_NODE ? require("ws") : window["WebSocket"];
                        r = new l(o, f);
                        r.binaryType = "arraybuffer"
                    } catch (c) {
                        throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH)
                    }
                }
                var h = {
                    addr: t,
                    port: n,
                    socket: r,
                    dgram_send_queue: []
                };
                SOCKFS.websocket_sock_ops.addPeer(e, h);
                SOCKFS.websocket_sock_ops.handlePeerEvents(e, h);
                if (e.type === 2 && typeof e.sport !== "undefined") {
                    h.dgram_send_queue.push(new Uint8Array([255, 255, 255, 255, "p".charCodeAt(0), "o".charCodeAt(0), "r".charCodeAt(0), "t".charCodeAt(0), (e.sport & 65280) >> 8, e.sport & 255]))
                }
                return h
            },
            getPeer: function(e, t, n) {
                return e.peers[t + ":" + n]
            },
            addPeer: function(e, t) {
                e.peers[t.addr + ":" + t.port] = t
            },
            removePeer: function(e, t) {
                delete e.peers[t.addr + ":" + t.port]
            },
            handlePeerEvents: function(e, t) {
                function i(r) {
                    assert(typeof r !== "string" && r.byteLength !== undefined);
                    r = new Uint8Array(r);
                    var i = n;
                    n = false;
                    if (i && r.length === 10 && r[0] === 255 && r[1] === 255 && r[2] === 255 && r[3] === 255 && r[4] === "p".charCodeAt(0) && r[5] === "o".charCodeAt(0) && r[6] === "r".charCodeAt(0) && r[7] === "t".charCodeAt(0)) {
                        var s = r[8] << 8 | r[9];
                        SOCKFS.websocket_sock_ops.removePeer(e, t);
                        t.port = s;
                        SOCKFS.websocket_sock_ops.addPeer(e, t);
                        return
                    }
                    e.recv_queue.push({
                        addr: t.addr,
                        port: t.port,
                        data: r
                    });
                    Module["websocket"].emit("message", e.stream.fd)
                }
                var n = true;
                var r = function() {
                    Module["websocket"].emit("open", e.stream.fd);
                    try {
                        var n = t.dgram_send_queue.shift();
                        while (n) {
                            t.socket.send(n);
                            n = t.dgram_send_queue.shift()
                        }
                    } catch (r) {
                        t.socket.close()
                    }
                };
                if (ENVIRONMENT_IS_NODE) {
                    t.socket.on("open", r);
                    t.socket.on("message", function(e, t) {
                        if (!t.binary) {
                            return
                        }
                        i((new Uint8Array(e)).buffer)
                    });
                    t.socket.on("close", function() {
                        Module["websocket"].emit("close", e.stream.fd)
                    });
                    t.socket.on("error", function(t) {
                        e.error = ERRNO_CODES.ECONNREFUSED;
                        Module["websocket"].emit("error", [e.stream.fd, e.error, "ECONNREFUSED: Connection refused"])
                    })
                } else {
                    t.socket.onopen = r;
                    t.socket.onclose = function() {
                        Module["websocket"].emit("close", e.stream.fd)
                    };
                    t.socket.onmessage = function(t) {
                        i(t.data)
                    };
                    t.socket.onerror = function(t) {
                        e.error = ERRNO_CODES.ECONNREFUSED;
                        Module["websocket"].emit("error", [e.stream.fd, e.error, "ECONNREFUSED: Connection refused"])
                    }
                }
            },
            poll: function(e) {
                if (e.type === 1 && e.server) {
                    return e.pending.length ? 64 | 1 : 0
                }
                var t = 0;
                var n = e.type === 1 ? SOCKFS.websocket_sock_ops.getPeer(e, e.daddr, e.dport) : null;
                if (e.recv_queue.length || !n || n && n.socket.readyState === n.socket.CLOSING || n && n.socket.readyState === n.socket.CLOSED) {
                    t |= 64 | 1
                }
                if (!n || n && n.socket.readyState === n.socket.OPEN) {
                    t |= 4
                }
                if (n && n.socket.readyState === n.socket.CLOSING || n && n.socket.readyState === n.socket.CLOSED) {
                    t |= 16
                }
                return t
            },
            ioctl: function(e, t, n) {
                switch (t) {
                    case 21531:
                        var r = 0;
                        if (e.recv_queue.length) {
                            r = e.recv_queue[0].data.length
                        }
                        HEAP32[n >> 2] = r;
                        return 0;
                    default:
                        return ERRNO_CODES.EINVAL
                }
            },
            close: function(e) {
                if (e.server) {
                    try {
                        e.server.close()
                    } catch (t) {}
                    e.server = null
                }
                var n = Object.keys(e.peers);
                for (var r = 0; r < n.length; r++) {
                    var i = e.peers[n[r]];
                    try {
                        i.socket.close()
                    } catch (t) {}
                    SOCKFS.websocket_sock_ops.removePeer(e, i)
                }
                return 0
            },
            bind: function(e, t, n) {
                if (typeof e.saddr !== "undefined" || typeof e.sport !== "undefined") {
                    throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
                }
                e.saddr = t;
                e.sport = n || _mkport();
                if (e.type === 2) {
                    if (e.server) {
                        e.server.close();
                        e.server = null
                    }
                    try {
                        e.sock_ops.listen(e, 0)
                    } catch (r) {
                        if (!(r instanceof FS.ErrnoError)) throw r;
                        if (r.errno !== ERRNO_CODES.EOPNOTSUPP) throw r
                    }
                }
            },
            connect: function(e, t, n) {
                if (e.server) {
                    throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)
                }
                if (typeof e.daddr !== "undefined" && typeof e.dport !== "undefined") {
                    var r = SOCKFS.websocket_sock_ops.getPeer(e, e.daddr, e.dport);
                    if (r) {
                        if (r.socket.readyState === r.socket.CONNECTING) {
                            throw new FS.ErrnoError(ERRNO_CODES.EALREADY)
                        } else {
                            throw new FS.ErrnoError(ERRNO_CODES.EISCONN)
                        }
                    }
                }
                var i = SOCKFS.websocket_sock_ops.createPeer(e, t, n);
                e.daddr = i.addr;
                e.dport = i.port;
                throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS)
            },
            listen: function(e, t) {
                if (!ENVIRONMENT_IS_NODE) {
                    throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)
                }
                if (e.server) {
                    throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
                }
                var n = require("ws").Server;
                var r = e.saddr;
                e.server = new n({
                    host: r,
                    port: e.sport
                });
                Module["websocket"].emit("listen", e.stream.fd);
                e.server.on("connection", function(t) {
                    if (e.type === 1) {
                        var n = SOCKFS.createSocket(e.family, e.type, e.protocol);
                        var r = SOCKFS.websocket_sock_ops.createPeer(n, t);
                        n.daddr = r.addr;
                        n.dport = r.port;
                        e.pending.push(n);
                        Module["websocket"].emit("connection", n.stream.fd)
                    } else {
                        SOCKFS.websocket_sock_ops.createPeer(e, t);
                        Module["websocket"].emit("connection", e.stream.fd)
                    }
                });
                e.server.on("closed", function() {
                    Module["websocket"].emit("close", e.stream.fd);
                    e.server = null
                });
                e.server.on("error", function(t) {
                    e.error = ERRNO_CODES.EHOSTUNREACH;
                    Module["websocket"].emit("error", [e.stream.fd, e.error, "EHOSTUNREACH: Host is unreachable"])
                })
            },
            accept: function(e) {
                if (!e.server) {
                    throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
                }
                var t = e.pending.shift();
                t.stream.flags = e.stream.flags;
                return t
            },
            getname: function(e, t) {
                var n, r;
                if (t) {
                    if (e.daddr === undefined || e.dport === undefined) {
                        throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)
                    }
                    n = e.daddr;
                    r = e.dport
                } else {
                    n = e.saddr || 0;
                    r = e.sport || 0
                }
                return {
                    addr: n,
                    port: r
                }
            },
            sendmsg: function(e, t, n, r, i, s) {
                if (e.type === 2) {
                    if (i === undefined || s === undefined) {
                        i = e.daddr;
                        s = e.dport
                    }
                    if (i === undefined || s === undefined) {
                        throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ)
                    }
                } else {
                    i = e.daddr;
                    s = e.dport
                }
                var o = SOCKFS.websocket_sock_ops.getPeer(e, i, s);
                if (e.type === 1) {
                    if (!o || o.socket.readyState === o.socket.CLOSING || o.socket.readyState === o.socket.CLOSED) {
                        throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)
                    } else if (o.socket.readyState === o.socket.CONNECTING) {
                        throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)
                    }
                }
                var u;
                if (t instanceof Array || t instanceof ArrayBuffer) {
                    u = t.slice(n, n + r)
                } else {
                    u = t.buffer.slice(t.byteOffset + n, t.byteOffset + n + r)
                }
                if (e.type === 2) {
                    if (!o || o.socket.readyState !== o.socket.OPEN) {
                        if (!o || o.socket.readyState === o.socket.CLOSING || o.socket.readyState === o.socket.CLOSED) {
                            o = SOCKFS.websocket_sock_ops.createPeer(e, i, s)
                        }
                        o.dgram_send_queue.push(u);
                        return r
                    }
                }
                try {
                    o.socket.send(u);
                    return r
                } catch (a) {
                    throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
                }
            },
            recvmsg: function(e, t) {
                if (e.type === 1 && e.server) {
                    throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)
                }
                var n = e.recv_queue.shift();
                if (!n) {
                    if (e.type === 1) {
                        var r = SOCKFS.websocket_sock_ops.getPeer(e, e.daddr, e.dport);
                        if (!r) {
                            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)
                        } else if (r.socket.readyState === r.socket.CLOSING || r.socket.readyState === r.socket.CLOSED) {
                            return null
                        } else {
                            throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)
                        }
                    } else {
                        throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)
                    }
                }
                var i = n.data.byteLength || n.data.length;
                var s = n.data.byteOffset || 0;
                var o = n.data.buffer || n.data;
                var u = Math.min(t, i);
                var a = {
                    buffer: new Uint8Array(o, s, u),
                    addr: n.addr,
                    port: n.port
                };
                if (e.type === 1 && u < i) {
                    var f = i - u;
                    n.data = new Uint8Array(o, s + u, f);
                    e.recv_queue.unshift(n)
                }
                return a
            }
        }
    };
    Module["_strlen"] = _strlen;
    var ___DEFAULT_POLLMASK = 5;
    Module["_i64Add"] = _i64Add;
    var Browser = {
        mainLoop: {
            scheduler: null,
            method: "",
            currentlyRunningMainloop: 0,
            func: null,
            arg: 0,
            timingMode: 0,
            timingValue: 0,
            currentFrameNumber: 0,
            queue: [],
            pause: function() {
                Browser.mainLoop.scheduler = null;
                Browser.mainLoop.currentlyRunningMainloop++
            },
            resume: function() {
                Browser.mainLoop.currentlyRunningMainloop++;
                var e = Browser.mainLoop.timingMode;
                var t = Browser.mainLoop.timingValue;
                var n = Browser.mainLoop.func;
                Browser.mainLoop.func = null;
                _emscripten_set_main_loop(n, 0, false, Browser.mainLoop.arg);
                _emscripten_set_main_loop_timing(e, t)
            },
            updateStatus: function() {
                if (Module["setStatus"]) {
                    var e = Module["statusMessage"] || "Please wait...";
                    var t = Browser.mainLoop.remainingBlockers;
                    var n = Browser.mainLoop.expectedBlockers;
                    if (t) {
                        if (t < n) {
                            Module["setStatus"](e + " (" + (n - t) + "/" + n + ")")
                        } else {
                            Module["setStatus"](e)
                        }
                    } else {
                        Module["setStatus"]("")
                    }
                }
            },
            runIter: function(e) {
                if (ABORT) return;
                if (Module["preMainLoop"]) {
                    var t = Module["preMainLoop"]();
                    if (t === false) {
                        return
                    }
                }
                try {
                    e()
                } catch (n) {
                    if (n instanceof ExitStatus) {
                        return
                    } else {
                        if (n && typeof n === "object" && n.stack) Module.printErr("exception thrown: " + [n, n.stack]);
                        throw n
                    }
                }
                if (Module["postMainLoop"]) Module["postMainLoop"]()
            }
        },
        isFullScreen: false,
        pointerLock: false,
        moduleContextCreatedCallbacks: [],
        workers: [],
        init: function() {
            function i() {
                Browser.pointerLock = document["pointerLockElement"] === r || document["mozPointerLockElement"] === r || document["webkitPointerLockElement"] === r || document["msPointerLockElement"] === r
            }
            if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
            if (Browser.initted) return;
            Browser.initted = true;
            try {
                new Blob;
                Browser.hasBlobConstructor = true
            } catch (e) {
                Browser.hasBlobConstructor = false;
                console.log("warning: no blob constructor, cannot create blobs with mimetypes")
            }
            Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null;
            Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : undefined;
            if (!Module.noImageDecoding && typeof Browser.URLObject === "undefined") {
                console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
                Module.noImageDecoding = true
            }
            var t = {};
            t["canHandle"] = function(t) {
                return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(t)
            };
            t["handle"] = function(t, n, r, i) {
                var s = null;
                if (Browser.hasBlobConstructor) {
                    try {
                        s = new Blob([t], {
                            type: Browser.getMimetype(n)
                        });
                        if (s.size !== t.length) {
                            s = new Blob([(new Uint8Array(t)).buffer], {
                                type: Browser.getMimetype(n)
                            })
                        }
                    } catch (o) {
                        Runtime.warnOnce("Blob constructor present but fails: " + o + "; falling back to blob builder")
                    }
                }
                if (!s) {
                    var u = new Browser.BlobBuilder;
                    u.append((new Uint8Array(t)).buffer);
                    s = u.getBlob()
                }
                var a = Browser.URLObject.createObjectURL(s);
                var f = new Image;
                f.onload = function() {
                    assert(f.complete, "Image " + n + " could not be decoded");
                    var i = document.createElement("canvas");
                    i.width = f.width;
                    i.height = f.height;
                    var s = i.getContext("2d");
                    s.drawImage(f, 0, 0);
                    Module["preloadedImages"][n] = i;
                    Browser.URLObject.revokeObjectURL(a);
                    if (r) r(t)
                };
                f.onerror = function(t) {
                    console.log("Image " + a + " could not be decoded");
                    if (i) i()
                };
                f.src = a
            };
            Module["preloadPlugins"].push(t);
            var n = {};
            n["canHandle"] = function(t) {
                return !Module.noAudioDecoding && t.substr(-4) in {
                    ".ogg": 1,
                    ".wav": 1,
                    ".mp3": 1
                }
            };
            n["handle"] = function(t, n, r, i) {
                function o(e) {
                    if (s) return;
                    s = true;
                    Module["preloadedAudios"][n] = e;
                    if (r) r(t)
                }

                function u() {
                    if (s) return;
                    s = true;
                    Module["preloadedAudios"][n] = new Audio;
                    if (i) i()
                }
                var s = false;
                if (Browser.hasBlobConstructor) {
                    try {
                        var a = new Blob([t], {
                            type: Browser.getMimetype(n)
                        })
                    } catch (f) {
                        return u()
                    }
                    var l = Browser.URLObject.createObjectURL(a);
                    var c = new Audio;
                    c.addEventListener("canplaythrough", function() {
                        o(c)
                    }, false);
                    c.onerror = function(r) {
                        function i(e) {
                            var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                            var n = "=";
                            var r = "";
                            var i = 0;
                            var s = 0;
                            for (var o = 0; o < e.length; o++) {
                                i = i << 8 | e[o];
                                s += 8;
                                while (s >= 6) {
                                    var u = i >> s - 6 & 63;
                                    s -= 6;
                                    r += t[u]
                                }
                            }
                            if (s == 2) {
                                r += t[(i & 3) << 4];
                                r += n + n
                            } else if (s == 4) {
                                r += t[(i & 15) << 2];
                                r += n
                            }
                            return r
                        }
                        if (s) return;
                        console.log("warning: browser could not fully decode audio " + n + ", trying slower base64 approach");
                        c.src = "data:audio/x-" + n.substr(-3) + ";base64," + i(t);
                        o(c)
                    };
                    c.src = l;
                    Browser.safeSetTimeout(function() {
                        o(c)
                    }, 1e4)
                } else {
                    return u()
                }
            };
            Module["preloadPlugins"].push(n);
            var r = Module["canvas"];
            if (r) {
                r.requestPointerLock = r["requestPointerLock"] || r["mozRequestPointerLock"] || r["webkitRequestPointerLock"] || r["msRequestPointerLock"] || function() {};
                r.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || function() {};
                r.exitPointerLock = r.exitPointerLock.bind(document);
                document.addEventListener("pointerlockchange", i, false);
                document.addEventListener("mozpointerlockchange", i, false);
                document.addEventListener("webkitpointerlockchange", i, false);
                document.addEventListener("mspointerlockchange", i, false);
                if (Module["elementPointerLock"]) {
                    r.addEventListener("click", function(e) {
                        if (!Browser.pointerLock && r.requestPointerLock) {
                            r.requestPointerLock();
                            e.preventDefault()
                        }
                    }, false)
                }
            }
        },
        createContext: function(e, t, n, r) {
            if (t && Module.ctx && e == Module.canvas) return Module.ctx;
            var i;
            var s;
            if (t) {
                var o = {
                    antialias: false,
                    alpha: false
                };
                if (r) {
                    for (var u in r) {
                        o[u] = r[u]
                    }
                }
                s = GL.createContext(e, o);
                if (s) {
                    i = GL.getContext(s).GLctx
                }
                e.style.backgroundColor = "black"
            } else {
                i = e.getContext("2d")
            }
            if (!i) return null;
            if (n) {
                if (!t) assert(typeof GLctx === "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
                Module.ctx = i;
                if (t) GL.makeContextCurrent(s);
                Module.useWebGL = t;
                Browser.moduleContextCreatedCallbacks.forEach(function(e) {
                    e()
                });
                Browser.init()
            }
            return i
        },
        destroyContext: function(e, t, n) {},
        fullScreenHandlersInstalled: false,
        lockPointer: undefined,
        resizeCanvas: undefined,
        requestFullScreen: function(e, t) {
            function r() {
                Browser.isFullScreen = false;
                var e = n.parentNode;
                if ((document["webkitFullScreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["mozFullscreenElement"] || document["fullScreenElement"] || document["fullscreenElement"] || document["msFullScreenElement"] || document["msFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === e) {
                    n.cancelFullScreen = document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["webkitCancelFullScreen"] || document["msExitFullscreen"] || document["exitFullscreen"] || function() {};
                    n.cancelFullScreen = n.cancelFullScreen.bind(document);
                    if (Browser.lockPointer) n.requestPointerLock();
                    Browser.isFullScreen = true;
                    if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize()
                } else {
                    e.parentNode.insertBefore(n, e);
                    e.parentNode.removeChild(e);
                    if (Browser.resizeCanvas) Browser.setWindowedCanvasSize()
                }
                if (Module["onFullScreen"]) Module["onFullScreen"](Browser.isFullScreen);
                Browser.updateCanvasDimensions(n)
            }
            Browser.lockPointer = e;
            Browser.resizeCanvas = t;
            if (typeof Browser.lockPointer === "undefined") Browser.lockPointer = true;
            if (typeof Browser.resizeCanvas === "undefined") Browser.resizeCanvas = false;
            var n = Module["canvas"];
            if (!Browser.fullScreenHandlersInstalled) {
                Browser.fullScreenHandlersInstalled = true;
                document.addEventListener("fullscreenchange", r, false);
                document.addEventListener("mozfullscreenchange", r, false);
                document.addEventListener("webkitfullscreenchange", r, false);
                document.addEventListener("MSFullscreenChange", r, false)
            }
            var i = document.createElement("div");
            n.parentNode.insertBefore(i, n);
            i.appendChild(n);
            i.requestFullScreen = i["requestFullScreen"] || i["mozRequestFullScreen"] || i["msRequestFullscreen"] || (i["webkitRequestFullScreen"] ? function() {
                i["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"])
            } : null);
            i.requestFullScreen()
        },
        nextRAF: 0,
        fakeRequestAnimationFrame: function(e) {
            var t = Date.now();
            if (Browser.nextRAF === 0) {
                Browser.nextRAF = t + 1e3 / 60
            } else {
                while (t + 2 >= Browser.nextRAF) {
                    Browser.nextRAF += 1e3 / 60
                }
            }
            var n = Math.max(Browser.nextRAF - t, 0);
            setTimeout(e, n)
        },
        requestAnimationFrame: function(t) {
            if (typeof window === "undefined") {
                Browser.fakeRequestAnimationFrame(t)
            } else {
                if (!window.requestAnimationFrame) {
                    window.requestAnimationFrame = window["requestAnimationFrame"] || window["mozRequestAnimationFrame"] || window["webkitRequestAnimationFrame"] || window["msRequestAnimationFrame"] || window["oRequestAnimationFrame"] || Browser.fakeRequestAnimationFrame
                }
                window.requestAnimationFrame(t)
            }
        },
        safeCallback: function(e) {
            return function() {
                if (!ABORT) return e.apply(null, arguments)
            }
        },
        safeRequestAnimationFrame: function(e) {
            return Browser.requestAnimationFrame(function() {
                if (!ABORT) e()
            })
        },
        safeSetTimeout: function(e, t) {
            Module["noExitRuntime"] = true;
            return setTimeout(function() {
                if (!ABORT) e()
            }, t)
        },
        safeSetInterval: function(e, t) {
            Module["noExitRuntime"] = true;
            return setInterval(function() {
                if (!ABORT) e()
            }, t)
        },
        getMimetype: function(e) {
            return {
                jpg: "image/jpeg",
                jpeg: "image/jpeg",
                png: "image/png",
                bmp: "image/bmp",
                ogg: "audio/ogg",
                wav: "audio/wav",
                mp3: "audio/mpeg"
            }[e.substr(e.lastIndexOf(".") + 1)]
        },
        getUserMedia: function(e) {
            if (!window.getUserMedia) {
                window.getUserMedia = navigator["getUserMedia"] || navigator["mozGetUserMedia"]
            }
            window.getUserMedia(e)
        },
        getMovementX: function(e) {
            return e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || 0
        },
        getMovementY: function(e) {
            return e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || 0
        },
        getMouseWheelDelta: function(e) {
            var t = 0;
            switch (e.type) {
                case "DOMMouseScroll":
                    t = e.detail;
                    break;
                case "mousewheel":
                    t = e.wheelDelta;
                    break;
                case "wheel":
                    t = e["deltaY"];
                    break;
                default:
                    throw "unrecognized mouse wheel event: " + e.type
            }
            return t
        },
        mouseX: 0,
        mouseY: 0,
        mouseMovementX: 0,
        mouseMovementY: 0,
        touches: {},
        lastTouches: {},
        calculateMouseEvent: function(e) {
            if (Browser.pointerLock) {
                if (e.type != "mousemove" && "mozMovementX" in e) {
                    Browser.mouseMovementX = Browser.mouseMovementY = 0
                } else {
                    Browser.mouseMovementX = Browser.getMovementX(e);
                    Browser.mouseMovementY = Browser.getMovementY(e)
                }
                if (typeof SDL != "undefined") {
                    Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
                    Browser.mouseY = SDL.mouseY + Browser.mouseMovementY
                } else {
                    Browser.mouseX += Browser.mouseMovementX;
                    Browser.mouseY += Browser.mouseMovementY
                }
            } else {
                var t = Module["canvas"].getBoundingClientRect();
                var n = Module["canvas"].width;
                var r = Module["canvas"].height;
                var i = typeof window.scrollX !== "undefined" ? window.scrollX : window.pageXOffset;
                var s = typeof window.scrollY !== "undefined" ? window.scrollY : window.pageYOffset;
                if (e.type === "touchstart" || e.type === "touchend" || e.type === "touchmove") {
                    var o = e.touch;
                    if (o === undefined) {
                        return
                    }
                    var u = o.pageX - (i + t.left);
                    var a = o.pageY - (s + t.top);
                    u = u * (n / t.width);
                    a = a * (r / t.height);
                    var f = {
                        x: u,
                        y: a
                    };
                    if (e.type === "touchstart") {
                        Browser.lastTouches[o.identifier] = f;
                        Browser.touches[o.identifier] = f
                    } else if (e.type === "touchend" || e.type === "touchmove") {
                        Browser.lastTouches[o.identifier] = Browser.touches[o.identifier];
                        Browser.touches[o.identifier] = {
                            x: u,
                            y: a
                        }
                    }
                    return
                }
                var l = e.pageX - (i + t.left);
                var c = e.pageY - (s + t.top);
                l = l * (n / t.width);
                c = c * (r / t.height);
                Browser.mouseMovementX = l - Browser.mouseX;
                Browser.mouseMovementY = c - Browser.mouseY;
                Browser.mouseX = l;
                Browser.mouseY = c
            }
        },
        xhrLoad: function(e, t, n) {
            var r = new XMLHttpRequest;
            r.open("GET", e, true);
            r.responseType = "arraybuffer";
            r.onload = function() {
                if (r.status == 200 || r.status == 0 && r.response) {
                    t(r.response)
                } else {
                    n()
                }
            };
            r.onerror = n;
            r.send(null)
        },
        asyncLoad: function(e, t, n, r) {
            Browser.xhrLoad(e, function(n) {
                assert(n, 'Loading data file "' + e + '" failed (no arrayBuffer).');
                t(new Uint8Array(n));
                if (!r) removeRunDependency("al " + e)
            }, function(t) {
                if (n) {
                    n()
                } else {
                    throw 'Loading data file "' + e + '" failed.'
                }
            });
            if (!r) addRunDependency("al " + e)
        },
        resizeListeners: [],
        updateResizeListeners: function() {
            var e = Module["canvas"];
            Browser.resizeListeners.forEach(function(t) {
                t(e.width, e.height)
            })
        },
        setCanvasSize: function(e, t, n) {
            var r = Module["canvas"];
            Browser.updateCanvasDimensions(r, e, t);
            if (!n) Browser.updateResizeListeners()
        },
        windowedWidth: 0,
        windowedHeight: 0,
        setFullScreenCanvasSize: function() {
            if (typeof SDL != "undefined") {
                var e = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
                e = e | 8388608;
                HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = e
            }
            Browser.updateResizeListeners()
        },
        setWindowedCanvasSize: function() {
            if (typeof SDL != "undefined") {
                var e = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
                e = e & ~8388608;
                HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = e
            }
            Browser.updateResizeListeners()
        },
        updateCanvasDimensions: function(e, t, n) {
            if (t && n) {
                e.widthNative = t;
                e.heightNative = n
            } else {
                t = e.widthNative;
                n = e.heightNative
            }
            var r = t;
            var i = n;
            if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) {
                if (r / i < Module["forcedAspectRatio"]) {
                    r = Math.round(i * Module["forcedAspectRatio"])
                } else {
                    i = Math.round(r / Module["forcedAspectRatio"])
                }
            }
            if ((document["webkitFullScreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["mozFullscreenElement"] || document["fullScreenElement"] || document["fullscreenElement"] || document["msFullScreenElement"] || document["msFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === e.parentNode && typeof screen != "undefined") {
                var s = Math.min(screen.width / r, screen.height / i);
                r = Math.round(r * s);
                i = Math.round(i * s)
            }
            if (Browser.resizeCanvas) {
                if (e.width != r) e.width = r;
                if (e.height != i) e.height = i;
                if (typeof e.style != "undefined") {
                    e.style.removeProperty("width");
                    e.style.removeProperty("height")
                }
            } else {
                if (e.width != t) e.width = t;
                if (e.height != n) e.height = n;
                if (typeof e.style != "undefined") {
                    if (r != t || i != n) {
                        e.style.setProperty("width", r + "px", "important");
                        e.style.setProperty("height", i + "px", "important")
                    } else {
                        e.style.removeProperty("width");
                        e.style.removeProperty("height")
                    }
                }
            }
        },
        wgetRequests: {},
        nextWgetRequestHandle: 0,
        getNextWgetRequestHandle: function() {
            var e = Browser.nextWgetRequestHandle;
            Browser.nextWgetRequestHandle++;
            return e
        }
    };
    Module["_bitshift64Ashr"] = _bitshift64Ashr;
    Module["_bitshift64Lshr"] = _bitshift64Lshr;
    var _BDtoILow = true;
    var _BDtoIHigh = true;
    Module["_memcpy"] = _memcpy;
    Module["_memmove"] = _memmove;
    var _BItoD = true;
    Module["_strcpy"] = _strcpy;
    ___errno_state = Runtime.staticAlloc(4);
    HEAP32[___errno_state >> 2] = 0;
    FS.staticInit();
    __ATINIT__.unshift({
        func: function() {
            if (!Module["noFSInit"] && !FS.init.initialized) FS.init()
        }
    });
    __ATMAIN__.push({
        func: function() {
            FS.ignorePermissions = false
        }
    });
    __ATEXIT__.push({
        func: function() {
            FS.quit()
        }
    });
    Module["FS_createFolder"] = FS.createFolder;
    Module["FS_createPath"] = FS.createPath;
    Module["FS_createDataFile"] = FS.createDataFile;
    Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
    Module["FS_createLazyFile"] = FS.createLazyFile;
    Module["FS_createLink"] = FS.createLink;
    Module["FS_createDevice"] = FS.createDevice;
    __ATINIT__.unshift({
        func: function() {
            TTY.init()
        }
    });
    __ATEXIT__.push({
        func: function() {
            TTY.shutdown()
        }
    });
    TTY.utf8 = new Runtime.UTF8Processor;
    if (ENVIRONMENT_IS_NODE) {
        var fs = require("fs");
        NODEFS.staticInit()
    }
    __ATINIT__.push({
        func: function() {
            SOCKFS.root = FS.mount(SOCKFS, {}, null)
        }
    });
    _fputc.ret = allocate([0], "i8", ALLOC_STATIC);
    Module["requestFullScreen"] = function(t, n) {
        Browser.requestFullScreen(t, n)
    };
    Module["requestAnimationFrame"] = function(t) {
        Browser.requestAnimationFrame(t)
    };
    Module["setCanvasSize"] = function(t, n, r) {
        Browser.setCanvasSize(t, n, r)
    };
    Module["pauseMainLoop"] = function() {
        Browser.mainLoop.pause()
    };
    Module["resumeMainLoop"] = function() {
        Browser.mainLoop.resume()
    };
    Module["getUserMedia"] = function() {
        Browser.getUserMedia()
    };
    STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
    staticSealed = true;
    STACK_MAX = STACK_BASE + TOTAL_STACK;
    DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
    assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");
    var ctlz_i8 = allocate([8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "i8", ALLOC_DYNAMIC);
    var cttz_i8 = allocate([8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0], "i8", ALLOC_DYNAMIC);
    Module.asmGlobalArg = {
        Math: Math,
        Int8Array: Int8Array,
        Int16Array: Int16Array,
        Int32Array: Int32Array,
        Uint8Array: Uint8Array,
        Uint16Array: Uint16Array,
        Uint32Array: Uint32Array,
        Float32Array: Float32Array,
        Float64Array: Float64Array
    };
    Module.asmLibraryArg = {
        abort: abort,
        assert: assert,
        min: Math_min,
        invoke_iiii: invoke_iiii,
        invoke_vi: invoke_vi,
        invoke_vii: invoke_vii,
        invoke_ii: invoke_ii,
        invoke_iii: invoke_iii,
        invoke_viiii: invoke_viiii,
        _emscripten_get_now_is_monotonic: _emscripten_get_now_is_monotonic,
        _send: _send,
        _pipe: _pipe,
        _emscripten_set_main_loop_timing: _emscripten_set_main_loop_timing,
        ___assert_fail: ___assert_fail,
        _js_get_height: _js_get_height,
        _usleep: _usleep,
        _fflush: _fflush,
        _clock_gettime: _clock_gettime,
        _pwrite: _pwrite,
        _strerror_r: _strerror_r,
        _open: _open,
        _sbrk: _sbrk,
        _strerror: _strerror,
        _emscripten_get_now: _emscripten_get_now,
        _emscripten_memcpy_big: _emscripten_memcpy_big,
        _fileno: _fileno,
        _perror: _perror,
        _sysconf: _sysconf,
        _close: _close,
        _nanosleep: _nanosleep,
        _js_read_image: _js_read_image,
        _pread: _pread,
        _puts: _puts,
        _mkport: _mkport,
        _fclose: _fclose,
        _poll: _poll,
        __reallyNegative: __reallyNegative,
        _write: _write,
        _fsync: _fsync,
        ___errno_location: ___errno_location,
        _js_get_width: _js_get_width,
        _recv: _recv,
        _fputc: _fputc,
        _read: _read,
        _emscripten_set_main_loop: _emscripten_set_main_loop,
        _abort: _abort,
        _fwrite: _fwrite,
        _time: _time,
        _fprintf: _fprintf,
        _js_output_result: _js_output_result,
        __formatString: __formatString,
        _fputs: _fputs,
        _fopen: _fopen,
        ___setErrNo: ___setErrNo,
        STACKTOP: STACKTOP,
        STACK_MAX: STACK_MAX,
        tempDoublePtr: tempDoublePtr,
        ABORT: ABORT,
        cttz_i8: cttz_i8,
        ctlz_i8: ctlz_i8,
        NaN: NaN,
        Infinity: Infinity,
        _stderr: _stderr
    };
    var asm = function(e, t, n) {
        "use asm";

        function on(e) {
            e = e | 0;
            var t = 0;
            t = c;
            c = c + e | 0;
            c = c + 15 & -16;
            return t | 0
        }

        function un() {
            return c | 0
        }

        function an(e) {
            e = e | 0;
            c = e
        }

        function fn(e, t) {
            e = e | 0;
            t = t | 0;
            if ((y | 0) == 0) {
                y = e;
                b = t
            }
        }

        function ln(e) {
            e = e | 0;
            r[p >> 0] = r[e >> 0];
            r[p + 1 >> 0] = r[e + 1 >> 0];
            r[p + 2 >> 0] = r[e + 2 >> 0];
            r[p + 3 >> 0] = r[e + 3 >> 0]
        }

        function cn(e) {
            e = e | 0;
            r[p >> 0] = r[e >> 0];
            r[p + 1 >> 0] = r[e + 1 >> 0];
            r[p + 2 >> 0] = r[e + 2 >> 0];
            r[p + 3 >> 0] = r[e + 3 >> 0];
            r[p + 4 >> 0] = r[e + 4 >> 0];
            r[p + 5 >> 0] = r[e + 5 >> 0];
            r[p + 6 >> 0] = r[e + 6 >> 0];
            r[p + 7 >> 0] = r[e + 7 >> 0]
        }

        function hn(e) {
            e = e | 0;
            D = e
        }

        function pn() {
            return D | 0
        }

        function dn(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0;
            D = c;
            r = Dn(0) | 0;
            s[8 >> 2] = r;
            i = (r | 0) == (0 | 0);
            if (i) {
                gt(16 | 0, 32 | 0, 33, 64 | 0)
            }
            g = Hn(r, 0, 0) | 0;
            T = (g | 0) == 0;
            if (!T) {
                N = s[8 >> 2] | 0;
                vn(N);
                n = 1;
                c = D;
                return n | 0
            }
            C = yn() | 0;
            k = (C | 0) == (0 | 0);
            if (k) {
                gt(72 | 0, 32 | 0, 40, 64 | 0)
            }
            Nn(C, 808466521);
            L = Wt() | 0;
            A = yt() | 0;
            Cn(C, L, A);
            O = rt(A, L) | 0;
            o = Ms(O) | 0;
            An(C, o, O, 1);
            Pt(o | 0, O | 0) | 0;
            u = s[8 >> 2] | 0;
            In(u, C) | 0;
            a = On(C) | 0;
            f = (a | 0) == (0 | 0);
            if (!f) {
                M = a;
                while (1) {
                    l = Vn(M) | 0;
                    h = (l | 0) == 1;
                    if (!h) {
                        p = Rn(l) | 0;
                        d = Un(l) | 0;
                        v = $n(M) | 0;
                        Zt(p | 0, d | 0, v | 0)
                    }
                    m = Yn(M) | 0;
                    y = (m | 0) == (0 | 0);
                    if (y) {
                        break
                    } else {
                        M = m
                    }
                }
            }
            wn(C);
            b = s[8 >> 2] | 0;
            w = jn(b) | 0;
            E = (w | 0) == 0;
            if (!E) {
                S = s[8 >> 2] | 0;
                Fn(S, -1) | 0
            }
            x = s[8 >> 2] | 0;
            Pn(x);
            n = 0;
            c = D;
            return n | 0
        }

        function vn(e) {
            e = e | 0;
            var t = 0,
                n = 0;
            n = c;
            mn(e, 0) | 0;
            c = n;
            return
        }

        function mn(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0;
            h = c;
            n = s[e >> 2] | 0;
            r = (n | 0) == 1381123450;
            if (r) {
                i = s[g >> 2] | 0;
                o = gn(e, 0) | 0;
                tn(o | 0, i | 0) | 0;
                u = e + 16 | 0;
                a = s[u >> 2] | 0;
                f = 0 - a | 0;
                c = h;
                return f | 0
            } else {
                gt(88 | 0, 120 | 0, 83, 136 | 0)
            }
            return 0 | 0
        }

        function gn(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0;
            var N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0;
            var X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0;
            var ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0;
            var Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0;
            Yt = c;
            c = c + 16 | 0;
            Vt = Yt;
            f = s[e >> 2] | 0;
            l = (f | 0) == 1381123450;
            if (!l) {
                gt(88 | 0, 120 | 0, 107, 200 | 0)
            }
            S = e + 16 | 0;
            D = s[S >> 2] | 0;
            o = D + 2 | 0;
            W = o >>> 0 < 5;
            if (W) {
                tt = 224 + (o << 2) | 0;
                ht = s[tt >> 2] | 0;
                zt = ht
            } else {
                zt = 712
            }
            Tt = e + 4 | 0;
            Bt = s[Tt >> 2] | 0;
            Ft = Bt >>> 0 < 4;
            if (Ft) {
                h = 248 + (Bt << 2) | 0;
                p = s[h >> 2] | 0;
                Ut = p
            } else {
                Ut = 272
            }
            d = e + 24 | 0;
            v = s[d >> 2] | 0;
            m = (v | 0) == (0 | 0);
            n = m ? 272 : v;
            g = e + 20 | 0;
            y = s[g >> 2] | 0;
            b = y >>> 0 < 12;
            if (b) {
                w = 288 + (y << 2) | 0;
                E = s[w >> 2] | 0;
                Xt = E
            } else {
                Xt = 632
            }
            x = no(n | 0) | 0;
            T = x + 77 | 0;
            N = e + 8 | 0;
            C = s[N >> 2] | 0;
            k = Ps(C, T) | 0;
            s[N >> 2] = k;
            s[Vt >> 2] = zt;
            $t = Vt + 4 | 0;
            s[$t >> 2] = Ut;
            Kt = Vt + 8 | 0;
            s[Kt >> 2] = n;
            Qt = Vt + 12 | 0;
            s[Qt >> 2] = Xt;
            L = Ws(k, 168, Vt) | 0;
            A = (L | 0) < 1;
            if (A) {
                i = 272;
                c = Yt;
                return i | 0
            }
            O = e + 28 | 0;
            M = s[O >> 2] | 0;
            _ = (M | 0) == (0 | 0);
            if (_) {
                qt = L
            } else {
                P = no(M | 0) | 0;
                H = P + L | 0;
                B = H + 1 | 0;
                j = Os(M, 160) | 0;
                F = (j | 0) == (0 | 0);
                do {
                    if (F) {
                        Z = Os(M, 352) | 0;
                        et = (Z | 0) == (0 | 0);
                        if (et) {
                            nt = Os(M, 360) | 0;
                            rt = (nt | 0) == (0 | 0);
                            if (rt) {
                                pt = s[N >> 2] | 0;
                                dt = Ps(pt, B) | 0;
                                s[N >> 2] = dt;
                                vt = dt + L | 0;
                                mt = s[O >> 2] | 0;
                                Wt = no(mt | 0) | 0;
                                Rt = Wt + 1 | 0;
                                oo(vt | 0, mt | 0, Rt | 0) | 0;
                                u = Wt;
                                break
                            }
                        }
                        it = s[N >> 2] | 0;
                        st = H + 33 | 0;
                        ot = Ps(it, st) | 0;
                        s[N >> 2] = ot;
                        ut = ot + L | 0;
                        at = s[O >> 2] | 0;
                        ft = e + 36 | 0;
                        lt = s[ft >> 2] | 0;
                        s[Vt >> 2] = lt;
                        ct = Ws(ut, at, Vt) | 0;
                        u = ct
                    } else {
                        I = e + 32 | 0;
                        q = s[I >> 2] | 0;
                        R = (q | 0) == (0 | 0);
                        if (R) {
                            U = As(344) | 0;
                            s[I >> 2] = U;
                            X = U
                        } else {
                            X = q
                        }
                        z = s[N >> 2] | 0;
                        V = no(X | 0) | 0;
                        $ = V + B | 0;
                        J = Ps(z, $) | 0;
                        s[N >> 2] = J;
                        K = J + L | 0;
                        Q = s[O >> 2] | 0;
                        G = s[I >> 2] | 0;
                        s[Vt >> 2] = G;
                        Y = Ws(K, Q, Vt) | 0;
                        u = Y
                    }
                } while (0);
                It = u + L | 0;
                yt = (It | 0) < 1;
                if (yt) {
                    i = 272;
                    c = Yt;
                    return i | 0
                } else {
                    qt = It
                }
            }
            bt = s[g >> 2] | 0;
            wt = (bt | 0) == 5;
            if (wt) {
                Et = e + 12 | 0;
                St = s[Et >> 2] | 0;
                xt = Ct(St | 0) | 0;
                Nt = s[N >> 2] | 0;
                kt = qt + 10 | 0;
                Lt = no(xt | 0) | 0;
                At = kt + Lt | 0;
                Ot = Ps(Nt, At) | 0;
                s[N >> 2] = Ot;
                Mt = Ot + qt | 0;
                _t = s[Et >> 2] | 0;
                s[Vt >> 2] = xt;
                Jt = Vt + 4 | 0;
                s[Jt >> 2] = _t;
                Ws(Mt, 368, Vt) | 0;
                a = s[N >> 2] | 0;
                i = a;
                c = Yt;
                return i | 0
            } else {
                Dt = s[N >> 2] | 0;
                Pt = qt + 2 | 0;
                Ht = Ps(Dt, Pt) | 0;
                s[N >> 2] = Ht;
                jt = Ht + qt | 0;
                r[jt >> 0] = 10 & 255;
                r[jt + 1 >> 0] = 10 >> 8;
                i = Ht;
                c = Yt;
                return i | 0
            }
            return 0 | 0
        }

        function yn() {
            var e = 0,
                t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0;
            a = c;
            e = Ds(1, 68) | 0;
            t = e + 44 | 0;
            n = s[t >> 2] | 0;
            r = n + 1 | 0;
            s[t >> 2] = r;
            i = (n | 0) > -2;
            if (i) {
                o = e + 52 | 0;
                s[o >> 2] = -1;
                c = a;
                return e | 0
            } else {
                gt(984 | 0, 992 | 0, 87, 1008 | 0)
            }
            return 0 | 0
        }

        function bn(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0;
            o = c;
            t = e + 64 | 0;
            n = s[t >> 2] | 0;
            r = (n | 0) == (0 | 0);
            if (!r) {
                Xn(n, -1)
            }
            _s(e);
            c = o;
            return
        }

        function wn(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0;
            y = c;
            t = e + 44 | 0;
            n = s[t >> 2] | 0;
            a = n + -1 | 0;
            s[t >> 2] = a;
            f = (n | 0) > 0;
            if (!f) {
                gt(984 | 0, 992 | 0, 87, 1008 | 0)
            }
            l = (a | 0) == 0;
            if (!l) {
                c = y;
                return
            }
            h = e + 40 | 0;
            p = s[h >> 2] | 0;
            d = (p | 0) == (0 | 0);
            if (!d) {
                _o[p & 7](e)
            }
            v = e + 48 | 0;
            m = s[v >> 2] | 0;
            r = (m | 0) == (0 | 0);
            if (!r) {
                c = y;
                return
            }
            i = e + 64 | 0;
            o = s[i >> 2] | 0;
            u = (o | 0) == (0 | 0);
            if (!u) {
                Xn(o, -1)
            }
            _s(e);
            c = y;
            return
        }

        function En(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0;
            r = c;
            t = s[e >> 2] | 0;
            c = r;
            return t | 0
        }

        function Sn(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            t = e + 4 | 0;
            n = s[t >> 2] | 0;
            c = i;
            return n | 0
        }

        function xn(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            t = e + 8 | 0;
            n = s[t >> 2] | 0;
            c = i;
            return n | 0
        }

        function Tn(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            t = e + 12 | 0;
            n = s[t >> 2] | 0;
            c = i;
            return n | 0
        }

        function Nn(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0;
            r = c;
            s[e >> 2] = t;
            c = r;
            return
        }

        function Cn(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0;
            h = c;
            r = e + 24 | 0;
            s[r >> 2] = 0;
            i = e + 20 | 0;
            s[i >> 2] = 0;
            o = e + 28 | 0;
            s[o >> 2] = t;
            u = e + 4 | 0;
            s[u >> 2] = t;
            a = e + 32 | 0;
            s[a >> 2] = n;
            f = e + 8 | 0;
            s[f >> 2] = n;
            c = h;
            return
        }

        function kn(e, t, n, r, i) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            i = i | 0;
            var o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0;
            var k = 0,
                L = 0;
            L = c;
            l = e + 4 | 0;
            h = s[l >> 2] | 0;
            b = h >>> 0 < t >>> 0;
            a = b ? h : t;
            w = a + r | 0;
            E = w >>> 0 > h >>> 0;
            S = h - a | 0;
            u = E ? S : r;
            x = e + 20 | 0;
            s[x >> 2] = a;
            T = e + 28 | 0;
            s[T >> 2] = u;
            N = e + 8 | 0;
            C = s[N >> 2] | 0;
            p = C >>> 0 < n >>> 0;
            f = p ? C : n;
            d = f + i | 0;
            v = d >>> 0 > C >>> 0;
            m = C - f | 0;
            o = v ? m : i;
            g = e + 24 | 0;
            s[g >> 2] = f;
            y = e + 32 | 0;
            s[y >> 2] = o;
            c = L;
            return
        }

        function Ln(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0;
            var x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0;
            A = c;
            t = (e | 0) == (0 | 0);
            if (t) {
                c = A;
                return
            }
            n = e + 48 | 0;
            v = s[n >> 2] | 0;
            w = (v | 0) == (0 | 0);
            do {
                if (w) {
                    l = e + 40 | 0;
                    h = s[l >> 2] | 0;
                    p = (h | 0) == (0 | 0);
                    if (!p) {
                        d = e + 12 | 0;
                        m = s[d >> 2] | 0;
                        g = (m | 0) == (0 | 0);
                        if (!g) {
                            y = (h | 0) == (1 | 0);
                            if (y) {
                                _s(m);
                                break
                            } else {
                                s[l >> 2] = 1;
                                _o[h & 7](e);
                                break
                            }
                        }
                    }
                } else {
                    E = e + 44 | 0;
                    S = s[E >> 2] | 0;
                    x = (S | 0) == 0;
                    if (x) {
                        gt(744 | 0, 760 | 0, 154, 776 | 0)
                    }
                    T = Ds(1, 68) | 0;
                    N = T + 44 | 0;
                    C = s[N >> 2] | 0;
                    r = C + 1 | 0;
                    s[N >> 2] = r;
                    i = (C | 0) > -2;
                    if (i) {
                        k = T + 0 | 0;
                        O = e + 0 | 0;
                        M = k + 68 | 0;
                        do {
                            s[k >> 2] = s[O >> 2] | 0;
                            k = k + 4 | 0;
                            O = O + 4 | 0
                        } while ((k | 0) < (M | 0));
                        o = T + 40 | 0;
                        u = s[o >> 2] | 0;
                        _o[u & 7](T);
                        a = e + 40 | 0;
                        s[a >> 2] = 0;
                        s[n >> 2] = 0;
                        f = e + 52 | 0;
                        s[f >> 2] = -1;
                        break
                    } else {
                        gt(984 | 0, 992 | 0, 87, 1008 | 0)
                    }
                }
            } while (0);
            b = e + 12 | 0;
            s[b >> 2] = 0;
            c = A;
            return
        }

        function An(e, t, n, r) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            var i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0;
            f = c;
            Ln(e);
            i = e + 12 | 0;
            s[i >> 2] = t;
            o = e + 16 | 0;
            s[o >> 2] = n;
            u = e + 40 | 0;
            s[u >> 2] = r;
            c = f;
            return
        }

        function On(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0;
            f = c;
            t = e + 64 | 0;
            n = s[t >> 2] | 0;
            r = (n | 0) == (0 | 0);
            if (r) {
                u = 0
            } else {
                i = n + 8 | 0;
                o = s[i >> 2] | 0;
                u = o
            }
            c = f;
            return u | 0
        }

        function Mn(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0;
            var k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0;
            var $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0;
            var pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                yt = 0,
                bt = 0;
            bt = c;
            c = c + 32 | 0;
            ut = bt;
            it = bt + 16 | 0;
            n = no(t | 0) | 0;
            o = n + 16 | 0;
            b = Ms(o) | 0;
            ao(b | 0, t | 0) | 0;
            O = s[e >> 2] | 0;
            R = O & 224;
            Y = R >>> 0 > 31;
            if (Y) {
                s[ut >> 2] = t;
                at = ut + 4 | 0;
                s[at >> 2] = e;
                et = zs(b, o, 800, ut) | 0;
                st = et
            } else {
                s[ut >> 2] = t;
                vt = ut + 4 | 0;
                s[vt >> 2] = O;
                tt = zs(b, o, 816, ut) | 0;
                st = tt
            }
            nt = n + 15 | 0;
            rt = (st | 0) < (nt | 0);
            if (!rt) {
                gt(832 | 0, 760 | 0, 256, 848 | 0)
            }
            u = b + nt | 0;
            r[u >> 0] = 0;
            a = s[80 >> 2] | 0;
            f = (a | 0) > 0;
            if (f) {
                l = s[g >> 2] | 0;
                h = s[e >> 2] | 0;
                s[ut >> 2] = 848;
                mt = ut + 4 | 0;
                s[mt >> 2] = e;
                ft = ut + 8 | 0;
                s[ft >> 2] = h;
                lt = ut + 12 | 0;
                s[lt >> 2] = b;
                Yt(l | 0, 872 | 0, ut | 0) | 0
            }
            p = nn(b | 0, 912 | 0) | 0;
            d = (p | 0) == (0 | 0);
            if (d) {
                v = zt() | 0;
                m = s[v >> 2] | 0;
                y = s[80 >> 2] | 0;
                w = (y | 0) > 0;
                if (!w) {
                    ot = m;
                    _s(b);
                    c = bt;
                    return ot | 0
                }
                E = s[g >> 2] | 0;
                S = Ct(m | 0) | 0;
                s[ut >> 2] = 848;
                ct = ut + 4 | 0;
                s[ct >> 2] = b;
                ht = ut + 8 | 0;
                s[ht >> 2] = S;
                Yt(E | 0, 920 | 0, ut | 0) | 0;
                ot = m;
                _s(b);
                c = bt;
                return ot | 0
            }
            s[it >> 2] = 1735223674;
            x = s[e >> 2] | 0;
            T = it + 4 | 0;
            s[T >> 2] = x;
            N = e + 4 | 0;
            C = s[N >> 2] | 0;
            k = C & 65535;
            L = it + 8 | 0;
            i[L >> 1] = k;
            A = e + 8 | 0;
            M = s[A >> 2] | 0;
            _ = M & 65535;
            D = it + 10 | 0;
            i[D >> 1] = _;
            P = e + 16 | 0;
            H = s[P >> 2] | 0;
            B = it + 12 | 0;
            s[B >> 2] = H;
            j = Qt(it | 0, 16, 1, p | 0) | 0;
            F = (j | 0) == 1;
            if (F) {
                I = e + 12 | 0;
                q = s[I >> 2] | 0;
                U = s[P >> 2] | 0;
                z = Qt(q | 0, 1, U | 0, p | 0) | 0;
                W = s[P >> 2] | 0;
                X = (z | 0) == (W | 0);
                if (X) {
                    Z = Ft(p | 0) | 0;
                    ot = Z;
                    _s(b);
                    c = bt;
                    return ot | 0
                }
            }
            V = zt() | 0;
            $ = s[V >> 2] | 0;
            J = s[80 >> 2] | 0;
            K = (J | 0) > 0;
            if (K) {
                Q = s[g >> 2] | 0;
                G = Ct($ | 0) | 0;
                s[ut >> 2] = 848;
                pt = ut + 4 | 0;
                s[pt >> 2] = b;
                dt = ut + 8 | 0;
                s[dt >> 2] = G;
                Yt(Q | 0, 952 | 0, ut | 0) | 0
            }
            Ft(p | 0) | 0;
            ot = $;
            _s(b);
            c = bt;
            return ot | 0
        }

        function _n(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0;
            var N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0;
            var X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0;
            var ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0;
            var _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0;
            var Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                Nn = 0;
            var Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                _n = 0,
                Dn = 0;
            Dn = c;
            c = c + 32 | 0;
            hn = Dn;
            an = Dn + 28 | 0;
            i = e + 80 | 0;
            o = s[i >> 2] | 0;
            N = (t | 0) == (0 | 0);
            do {
                if (N) {
                    r = 0
                } else {
                    B = e + 100 | 0;
                    $ = s[B >> 2] | 0;
                    it = ($ | 0) == 0;
                    if (!it) {
                        vt = e + 48 | 0;
                        kt = s[vt >> 2] | 0;
                        Ft = kt + 40 | 0;
                        Kt = s[Ft >> 2] | 0;
                        Mn(Kt, 1024) | 0;
                        s[B >> 2] = 0
                    }
                    u = En(t) | 0;
                    s[an >> 2] = u;
                    v = s[80 >> 2] | 0;
                    m = (v | 0) > 15;
                    if (m) {
                        y = s[g >> 2] | 0;
                        b = Sn(t) | 0;
                        w = xn(t) | 0;
                        E = Tn(t) | 0;
                        s[hn >> 2] = 1072;
                        pn = hn + 4 | 0;
                        s[pn >> 2] = an;
                        Nn = hn + 8 | 0;
                        s[Nn >> 2] = u;
                        Cn = hn + 12 | 0;
                        s[Cn >> 2] = b;
                        kn = hn + 16 | 0;
                        s[kn >> 2] = w;
                        Ln = hn + 20 | 0;
                        s[Ln >> 2] = E;
                        Yt(y | 0, 1032 | 0, hn | 0) | 0
                    }
                    S = Rr(t, 808466521) | 0;
                    x = (S | 0) == (0 | 0);
                    if (!x) {
                        T = e + 168 | 0;
                        C = s[T >> 2] | 0;
                        k = (C | 0) == (0 | 0);
                        if (!k) {
                            Xn(C, -1);
                            s[T >> 2] = 0
                        }
                        L = e + 52 | 0;
                        A = s[L >> 2] | 0;
                        ri(A, t);
                        O = s[L >> 2] | 0;
                        M = ci(O, S) | 0;
                        _ = t + 64 | 0;
                        D = s[_ >> 2] | 0;
                        P = S + 64 | 0;
                        H = s[P >> 2] | 0;
                        s[_ >> 2] = H;
                        s[P >> 2] = D;
                        wn(S);
                        j = (M | 0) < 0;
                        if (!j) {
                            F = s[L >> 2] | 0;
                            I = li(F) | 0;
                            s[T >> 2] = I;
                            q = (I | 0) == (0 | 0);
                            if (!q) {
                                Xn(I, 1)
                            }
                            R = s[80 >> 2] | 0;
                            U = (R | 0) > 7;
                            if (U) {
                                z = On(t) | 0;
                                W = (z | 0) == (0 | 0);
                                if (!W) {
                                    X = s[g >> 2] | 0;
                                    cn = z;
                                    while (1) {
                                        V = Vn(cn) | 0;
                                        J = Jn(cn) | 0;
                                        K = s[80 >> 2] | 0;
                                        Q = (K | 0) > 7;
                                        if (Q) {
                                            G = Rn(V) | 0;
                                            Y = $n(cn) | 0;
                                            Z = Qn(cn) | 0;
                                            et = Gn(cn) | 0;
                                            tt = Kn(cn) | 0;
                                            nt = (J | 0) < 0;
                                            if (nt) {
                                                ot = 1144
                                            } else {
                                                rt = (J | 0) > 0;
                                                st = rt ? 1160 : 1176;
                                                ot = st
                                            }
                                            s[hn >> 2] = 1072;
                                            An = hn + 4 | 0;
                                            s[An >> 2] = G;
                                            dn = hn + 8 | 0;
                                            s[dn >> 2] = Y;
                                            vn = hn + 12 | 0;
                                            s[vn >> 2] = Z;
                                            gn = hn + 16 | 0;
                                            s[gn >> 2] = et;
                                            yn = hn + 20 | 0;
                                            s[yn >> 2] = tt;
                                            bn = hn + 24 | 0;
                                            s[bn >> 2] = ot;
                                            Yt(X | 0, 1096 | 0, hn | 0) | 0
                                        }
                                        ut = Yn(cn) | 0;
                                        at = (ut | 0) == (0 | 0);
                                        if (at) {
                                            break
                                        } else {
                                            cn = ut
                                        }
                                    }
                                }
                            }
                            ft = (M | 0) == 0;
                            if (!ft) {
                                Nr(e, 2);
                                lt = e + 56 | 0;
                                ct = s[lt >> 2] | 0;
                                ht = (ct | 0) == (0 | 0);
                                if (!ht) {
                                    pt = e + 40 | 0;
                                    dt = s[pt >> 2] | 0;
                                    Do[ct & 0](t, dt)
                                }
                            }
                            mt = (o | 0) == 0;
                            if (mt) {
                                r = t;
                                break
                            }
                            yt = s[_ >> 2] | 0;
                            bt = Rr(t, o) | 0;
                            wt = (bt | 0) == (0 | 0);
                            if (!wt) {
                                Et = bt + 64 | 0;
                                s[Et >> 2] = yt;
                                Xn(yt, 1);
                                r = bt;
                                break
                            }
                        }
                    }
                    on = s[e >> 2] | 0;
                    un = (on | 0) == 1381123450;
                    if (!un) {
                        gt(1816 | 0, 1848 | 0, 150, 1880 | 0)
                    }
                    a = e + 16 | 0;
                    s[a >> 2] = -1;
                    f = e + 20 | 0;
                    s[f >> 2] = 3;
                    l = e + 24 | 0;
                    s[l >> 2] = 1072;
                    h = e + 28 | 0;
                    s[h >> 2] = 1184;
                    p = s[80 >> 2] | 0;
                    d = (p | 0) > 0;
                    if (!d) {
                        n = -1;
                        c = Dn;
                        return n | 0
                    }
                    mn(e, 0) | 0;
                    n = -1;
                    c = Dn;
                    return n | 0
                }
            } while (0);
            St = e + 48 | 0;
            xt = s[St >> 2] | 0;
            Tt = (xt | 0) == (0 | 0);
            if (Tt) {
                ln = 0
            } else {
                Nt = gr(xt, r) | 0;
                Ct = (Nt | 0) == 0;
                do {
                    if (!Ct) {
                        Lt = s[St >> 2] | 0;
                        At = s[e >> 2] | 0;
                        Ot = (At | 0) == 1381123450;
                        if (!Ot) {
                            gt(1896 | 0, 1848 | 0, 129, 1928 | 0)
                        }
                        Mt = s[Lt >> 2] | 0;
                        _t = (Mt | 0) == 1381123450;
                        if (_t) {
                            Dt = Lt + 12 | 0;
                            Pt = s[Dt >> 2] | 0;
                            Ht = e + 12 | 0;
                            s[Ht >> 2] = Pt;
                            Bt = Lt + 16 | 0;
                            jt = s[Bt >> 2] | 0;
                            It = e + 16 | 0;
                            s[It >> 2] = jt;
                            qt = Lt + 20 | 0;
                            Rt = s[qt >> 2] | 0;
                            Ut = e + 20 | 0;
                            s[Ut >> 2] = Rt;
                            zt = Lt + 24 | 0;
                            Wt = s[zt >> 2] | 0;
                            Xt = e + 24 | 0;
                            s[Xt >> 2] = Wt;
                            Vt = Lt + 28 | 0;
                            $t = s[Vt >> 2] | 0;
                            Jt = e + 28 | 0;
                            s[Jt >> 2] = $t;
                            Qt = Lt + 32 | 0;
                            Gt = s[Qt >> 2] | 0;
                            Zt = e + 32 | 0;
                            s[Zt >> 2] = Gt;
                            s[Qt >> 2] = 0;
                            en = Lt + 36 | 0;
                            tn = s[en >> 2] | 0;
                            nn = e + 36 | 0;
                            s[nn >> 2] = tn;
                            break
                        } else {
                            gt(1944 | 0, 1848 | 0, 130, 1928 | 0)
                        }
                    }
                } while (0);
                Er(e) | 0;
                ln = Nt
            }
            rn = (o | 0) == 0;
            sn = (r | 0) == (0 | 0);
            fn = rn | sn;
            if (fn) {
                n = ln;
                c = Dn;
                return n | 0
            }
            wn(r);
            n = ln;
            c = Dn;
            return n | 0
        }

        function Dn(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0;
            h = c;
            n = Ds(1, 200) | 0;
            r = (n | 0) == (0 | 0);
            if (r) {
                t = 0;
                c = h;
                return t | 0
            }
            s[n >> 2] = 1381123450;
            i = n + 4 | 0;
            s[i >> 2] = 0;
            o = oi() | 0;
            u = n + 52 | 0;
            s[u >> 2] = o;
            a = (o | 0) == (0 | 0);
            if (a) {
                _s(n);
                t = 0;
                c = h;
                return t | 0
            } else {
                f = n + 88 | 0;
                s[f >> 2] = 0;
                _r(n) | 0;
                t = n;
                c = h;
                return t | 0
            }
            return 0 | 0
        }

        function Pn(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0;
            var x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0;
            P = c;
            Hn(e, 0, 0) | 0;
            t = e + 168 | 0;
            n = s[t >> 2] | 0;
            v = (n | 0) == (0 | 0);
            if (!v) {
                Xn(n, -1);
                s[t >> 2] = 0
            }
            N = e + 52 | 0;
            C = s[N >> 2] | 0;
            k = (C | 0) == (0 | 0);
            if (!k) {
                ui(C);
                s[N >> 2] = 0
            }
            Hr(e) | 0;
            L = e + 180 | 0;
            A = s[L >> 2] | 0;
            O = (A | 0) == (0 | 0);
            if (!O) {
                gt(1208 | 0, 1232 | 0, 303, 1256 | 0)
            }
            M = e + 184 | 0;
            r = s[M >> 2] | 0;
            i = (r | 0) == (0 | 0);
            if (!i) {
                gt(1280 | 0, 1232 | 0, 304, 1256 | 0)
            }
            o = e + 188 | 0;
            u = s[o >> 2] | 0;
            a = (u | 0) == (0 | 0);
            if (!a) {
                gt(1304 | 0, 1232 | 0, 305, 1256 | 0)
            }
            f = e + 192 | 0;
            l = s[f >> 2] | 0;
            h = (l | 0) == (0 | 0);
            if (!h) {
                _ = l;
                while (1) {
                    p = s[_ >> 2] | 0;
                    d = _ + 4 | 0;
                    Lr(d);
                    _s(_);
                    m = (p | 0) == (0 | 0);
                    if (m) {
                        break
                    } else {
                        _ = p
                    }
                }
            }
            g = s[e >> 2] | 0;
            y = (g | 0) == 1381123450;
            if (!y) {
                gt(1816 | 0, 1848 | 0, 218, 1864 | 0)
            }
            b = e + 8 | 0;
            w = s[b >> 2] | 0;
            E = (w | 0) == (0 | 0);
            if (!E) {
                _s(w);
                s[b >> 2] = 0
            }
            S = e + 32 | 0;
            x = s[S >> 2] | 0;
            T = (x | 0) == (0 | 0);
            if (T) {
                _s(e);
                c = P;
                return
            }
            _s(x);
            _s(e);
            c = P;
            return
        }

        function Hn(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0;
            var V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0;
            var ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0;
            var Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Gt = 0,
                Zt = 0,
                en = 0,
                tn = 0;
            var nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0,
                xn = 0;
            var Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0;
            var Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                rr = 0,
                sr = 0,
                pr = 0,
                dr = 0,
                gr = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                Nr = 0,
                Cr = 0;
            var kr = 0,
                Lr = 0,
                Ar = 0,
                Or = 0,
                Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                Wr = 0,
                Xr = 0,
                Vr = 0,
                $r = 0;
            var Jr = 0,
                Kr = 0,
                Qr = 0,
                Gr = 0,
                Yr = 0,
                Zr = 0,
                ei = 0,
                ti = 0,
                ni = 0;
            ni = c;
            c = c + 16 | 0;
            Yr = ni;
            u = e + 44 | 0;
            a = s[u >> 2] | 0;
            Vt = (a | 0) == (0 | 0);
            if (!Vt) {
                Bn(e, 0) | 0
            }
            on = e + 48 | 0;
            yn = s[on >> 2] | 0;
            An = (yn | 0) == (0 | 0);
            if (!An) {
                Rn = e + 116 | 0;
                Yn = s[Rn >> 2] | 0;
                Nr = (Yn | 0) == 0;
                if (Nr) {
                    br(e) | 0
                }
            }
            xr(e) | 0;
            Br = s[on >> 2] | 0;
            f = (Br | 0) == (0 | 0);
            if (!f) {
                mr(Br);
                s[on >> 2] = 0
            }
            S = s[u >> 2] | 0;
            D = (S | 0) == (0 | 0);
            if (!D) {
                nr(S);
                s[u >> 2] = 0
            }
            W = (t | 0) != (0 | 0);
            r = W ^ 1;
            tt = (n | 0) == 0;
            Qr = tt & r;
            if (Qr) {
                Gr = 0;
                Tr(e, 0) | 0;
                c = ni;
                return Gr | 0
            }
            if (!tt) {
                ht = vr() | 0;
                s[on >> 2] = ht;
                Tt = (ht | 0) == (0 | 0);
                if (Tt) {
                    Ht = s[e >> 2] | 0;
                    Wt = (Ht | 0) == 1381123450;
                    if (!Wt) {
                        gt(1816 | 0, 1848 | 0, 150, 1880 | 0)
                    }
                    Xt = e + 16 | 0;
                    s[Xt >> 2] = -2;
                    $t = e + 20 | 0;
                    s[$t >> 2] = 1;
                    Jt = e + 24 | 0;
                    s[Jt >> 2] = 1328;
                    Kt = e + 28 | 0;
                    s[Kt >> 2] = 1352;
                    Gt = s[80 >> 2] | 0;
                    Zt = (Gt | 0) > 0;
                    if (!Zt) {
                        Gr = -1;
                        Tr(e, 0) | 0;
                        c = ni;
                        return Gr | 0
                    }
                    mn(e, 0) | 0;
                    Gr = -1;
                    Tr(e, 0) | 0;
                    c = ni;
                    return Gr | 0
                }
            }
            do {
                if (W) {
                    en = tr() | 0;
                    s[u >> 2] = en;
                    tn = (en | 0) == (0 | 0);
                    if (tn) {
                        nn = s[e >> 2] | 0;
                        rn = (nn | 0) == 1381123450;
                        if (!rn) {
                            gt(1816 | 0, 1848 | 0, 150, 1880 | 0)
                        }
                        sn = e + 16 | 0;
                        s[sn >> 2] = -2;
                        un = e + 20 | 0;
                        s[un >> 2] = 1;
                        an = e + 24 | 0;
                        s[an >> 2] = 1328;
                        fn = e + 28 | 0;
                        s[fn >> 2] = 1384;
                        ln = s[80 >> 2] | 0;
                        cn = (ln | 0) > 0;
                        if (!cn) {
                            Gr = -1;
                            Tr(e, 0) | 0;
                            c = ni;
                            return Gr | 0
                        }
                        mn(e, 0) | 0;
                        Gr = -1;
                        Tr(e, 0) | 0;
                        c = ni;
                        return Gr | 0
                    }
                    hn = e + 60 | 0;
                    pn = s[hn >> 2] | 0;
                    dn = e + 64 | 0;
                    vn = s[dn >> 2] | 0;
                    gn = pn | vn;
                    bn = (gn | 0) == 0;
                    if (!bn) {
                        ur(en, pn, vn) | 0
                    }
                    wn = e + 68 | 0;
                    En = s[wn >> 2] | 0;
                    Sn = (En | 0) == 0;
                    if (!Sn) {
                        xn = s[u >> 2] | 0;
                        ar(xn, En) | 0
                    }
                    Tn = e + 72 | 0;
                    Nn = s[Tn >> 2] | 0;
                    Cn = (Nn | 0) == 0;
                    if (Cn) {
                        ti = 29
                    } else {
                        kn = s[u >> 2] | 0;
                        Ln = fr(kn, Nn) | 0;
                        On = (Ln | 0) == 0;
                        if (On) {
                            ti = 29
                        }
                    }
                    if ((ti | 0) == 29) {
                        Mn = s[u >> 2] | 0;
                        _n = ir(Mn, t) | 0;
                        Dn = (_n | 0) == 0;
                        if (Dn) {
                            break
                        }
                    }
                    Pn = s[u >> 2] | 0;
                    Hn = s[e >> 2] | 0;
                    jn = (Hn | 0) == 1381123450;
                    if (!jn) {
                        gt(1896 | 0, 1848 | 0, 129, 1928 | 0)
                    }
                    Fn = s[Pn >> 2] | 0;
                    In = (Fn | 0) == 1381123450;
                    if (!In) {
                        gt(1944 | 0, 1848 | 0, 130, 1928 | 0)
                    }
                    qn = Pn + 12 | 0;
                    Un = s[qn >> 2] | 0;
                    zn = e + 12 | 0;
                    s[zn >> 2] = Un;
                    Wn = Pn + 16 | 0;
                    Xn = s[Wn >> 2] | 0;
                    Vn = e + 16 | 0;
                    s[Vn >> 2] = Xn;
                    $n = Pn + 20 | 0;
                    Jn = s[$n >> 2] | 0;
                    Kn = e + 20 | 0;
                    s[Kn >> 2] = Jn;
                    Qn = Pn + 24 | 0;
                    Gn = s[Qn >> 2] | 0;
                    Zn = e + 24 | 0;
                    s[Zn >> 2] = Gn;
                    er = Pn + 28 | 0;
                    rr = s[er >> 2] | 0;
                    sr = e + 28 | 0;
                    s[sr >> 2] = rr;
                    pr = Pn + 32 | 0;
                    dr = s[pr >> 2] | 0;
                    gr = e + 32 | 0;
                    s[gr >> 2] = dr;
                    s[pr >> 2] = 0;
                    wr = Pn + 36 | 0;
                    Er = s[wr >> 2] | 0;
                    Sr = e + 36 | 0;
                    s[Sr >> 2] = Er;
                    Gr = -1;
                    Tr(e, 0) | 0;
                    c = ni;
                    return Gr | 0
                }
            } while (0);
            Cr = e + 88 | 0;
            kr = s[Cr >> 2] | 0;
            Lr = (kr | 0) == 0;
            e: do {
                if (!Lr) {
                    Ar = s[u >> 2] | 0;
                    Or = (Ar | 0) == (0 | 0);
                    do {
                        if (!Or) {
                            Mr = or(Ar) | 0;
                            _r = (Mr | 0) < 0;
                            if (!_r) {
                                i = s[Cr >> 2] | 0;
                                Vr = (i | 0) == 0;
                                if (Vr) {
                                    break e
                                } else {
                                    break
                                }
                            }
                            Dr = s[e >> 2] | 0;
                            Pr = (Dr | 0) == 1381123450;
                            if (!Pr) {
                                gt(1816 | 0, 1848 | 0, 150, 1880 | 0)
                            }
                            Hr = zt() | 0;
                            jr = s[Hr >> 2] | 0;
                            Fr = e + 12 | 0;
                            s[Fr >> 2] = jr;
                            Ir = e + 16 | 0;
                            s[Ir >> 2] = -1;
                            qr = e + 20 | 0;
                            s[qr >> 2] = 5;
                            Rr = e + 24 | 0;
                            s[Rr >> 2] = 1328;
                            Ur = e + 28 | 0;
                            s[Ur >> 2] = 1416;
                            Wr = s[80 >> 2] | 0;
                            Xr = (Wr | 0) > 0;
                            if (!Xr) {
                                Gr = -1;
                                Tr(e, 0) | 0;
                                c = ni;
                                return Gr | 0
                            }
                            mn(e, 0) | 0;
                            Gr = -1;
                            Tr(e, 0) | 0;
                            c = ni;
                            return Gr | 0
                        }
                    } while (0);
                    $r = s[on >> 2] | 0;
                    l = ($r | 0) == (0 | 0);
                    if (l) {
                        h = s[u >> 2] | 0;
                        Kr = (h | 0) == (0 | 0);
                        if (Kr) {
                            break
                        }
                    }
                    p = s[e >> 2] | 0;
                    d = (p | 0) == 1381123450;
                    if (!d) {
                        gt(1816 | 0, 1848 | 0, 150, 1880 | 0)
                    }
                    v = zt() | 0;
                    m = s[v >> 2] | 0;
                    y = e + 12 | 0;
                    s[y >> 2] = m;
                    b = e + 16 | 0;
                    s[b >> 2] = -1;
                    w = e + 20 | 0;
                    s[w >> 2] = 5;
                    E = e + 24 | 0;
                    s[E >> 2] = 1328;
                    x = e + 28 | 0;
                    s[x >> 2] = 1440;
                    T = s[80 >> 2] | 0;
                    N = (T | 0) > 0;
                    if (!N) {
                        Gr = -1;
                        Tr(e, 0) | 0;
                        c = ni;
                        return Gr | 0
                    }
                    mn(e, 0) | 0;
                    Gr = -1;
                    Tr(e, 0) | 0;
                    c = ni;
                    return Gr | 0
                }
            } while (0);
            C = s[on >> 2] | 0;
            k = (C | 0) == (0 | 0);
            if (!k) {
                L = s[u >> 2] | 0;
                A = (L | 0) == (0 | 0);
                if (A) {
                    Jr = 480;
                    ei = 640
                } else {
                    O = lr(L) | 0;
                    M = s[u >> 2] | 0;
                    _ = cr(M) | 0;
                    Jr = _;
                    ei = O
                }
                P = yr(e, 1792, ei, Jr) | 0;
                H = (P | 0) == 0;
                if (!H) {
                    Gr = P;
                    Tr(e, 0) | 0;
                    c = ni;
                    return Gr | 0
                }
            }
            B = s[u >> 2] | 0;
            j = (B | 0) == (0 | 0);
            if (j) {
                Gr = 0;
                Tr(e, 0) | 0;
                c = ni;
                return Gr | 0
            }
            F = e + 76 | 0;
            I = s[F >> 2] | 0;
            q = (I | 0) == 0;
            if (!q) {
                R = hr(B, I) | 0;
                U = (R | 0) == 0;
                if (U) {
                    Gr = 0;
                    Tr(e, 0) | 0;
                    c = ni;
                    return Gr | 0
                }
                z = s[u >> 2] | 0;
                X = s[e >> 2] | 0;
                V = (X | 0) == 1381123450;
                if (!V) {
                    gt(1896 | 0, 1848 | 0, 129, 1928 | 0)
                }
                $ = s[z >> 2] | 0;
                J = ($ | 0) == 1381123450;
                if (!J) {
                    gt(1944 | 0, 1848 | 0, 130, 1928 | 0)
                }
                K = z + 12 | 0;
                Q = s[K >> 2] | 0;
                G = e + 12 | 0;
                s[G >> 2] = Q;
                Y = z + 16 | 0;
                Z = s[Y >> 2] | 0;
                et = e + 16 | 0;
                s[et >> 2] = Z;
                nt = z + 20 | 0;
                rt = s[nt >> 2] | 0;
                it = e + 20 | 0;
                s[it >> 2] = rt;
                st = z + 24 | 0;
                ot = s[st >> 2] | 0;
                ut = e + 24 | 0;
                s[ut >> 2] = ot;
                at = z + 28 | 0;
                ft = s[at >> 2] | 0;
                lt = e + 28 | 0;
                s[lt >> 2] = ft;
                ct = z + 32 | 0;
                pt = s[ct >> 2] | 0;
                dt = e + 32 | 0;
                s[dt >> 2] = pt;
                s[ct >> 2] = 0;
                vt = z + 36 | 0;
                mt = s[vt >> 2] | 0;
                yt = e + 36 | 0;
                s[yt >> 2] = mt;
                Gr = -1;
                Tr(e, 0) | 0;
                c = ni;
                return Gr | 0
            }
            bt = s[on >> 2] | 0;
            wt = (bt | 0) == (0 | 0);
            do {
                if (wt) {
                    Nt = B
                } else {
                    Et = zr(B, bt) | 0;
                    St = (Et | 0) == 0;
                    if (St) {
                        Gr = 0;
                        Tr(e, 0) | 0;
                        c = ni;
                        return Gr | 0
                    } else {
                        xt = s[g >> 2] | 0;
                        Qt(1464 | 0, 83, 1, xt | 0) | 0;
                        o = s[u >> 2] | 0;
                        Nt = o;
                        break
                    }
                }
            } while (0);
            Ct = zr(Nt, 0) | 0;
            kt = (Ct | 0) == 0;
            if (kt) {
                Gr = 0;
                Tr(e, 0) | 0;
                c = ni;
                return Gr | 0
            }
            Lt = s[80 >> 2] | 0;
            At = (Lt | 0) > 0;
            if (At) {
                Ot = s[g >> 2] | 0;
                Mt = s[u >> 2] | 0;
                _t = (Mt | 0) != (0 | 0);
                Dt = _t ? 1592 : 1608;
                s[Yr >> 2] = 1328;
                Zr = Yr + 4 | 0;
                s[Zr >> 2] = Dt;
                Yt(Ot | 0, 1552 | 0, Yr | 0) | 0
            }
            Pt = s[e >> 2] | 0;
            Bt = (Pt | 0) == 1381123450;
            if (!Bt) {
                gt(1816 | 0, 1848 | 0, 150, 1880 | 0)
            }
            jt = e + 16 | 0;
            s[jt >> 2] = -1;
            Ft = e + 20 | 0;
            s[Ft >> 2] = 3;
            It = e + 24 | 0;
            s[It >> 2] = 1328;
            qt = e + 28 | 0;
            s[qt >> 2] = 1624;
            Rt = s[80 >> 2] | 0;
            Ut = (Rt | 0) > 0;
            if (!Ut) {
                Gr = -1;
                Tr(e, 0) | 0;
                c = ni;
                return Gr | 0
            }
            mn(e, 0) | 0;
            Gr = -1;
            Tr(e, 0) | 0;
            c = ni;
            return Gr | 0
        }

        function Bn(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0;
            var W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0;
            var lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0;
            var Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0;
            Rt = c;
            xr(e) | 0;
            i = e + 44 | 0;
            o = s[i >> 2] | 0;
            y = (o | 0) == (0 | 0);
            if (y) {
                A = s[e >> 2] | 0;
                q = (A | 0) == 1381123450;
                if (!q) {
                    gt(1816 | 0, 1848 | 0, 150, 1880 | 0)
                }
                G = e + 16 | 0;
                s[G >> 2] = -1;
                at = e + 20 | 0;
                s[at >> 2] = 4;
                wt = e + 24 | 0;
                s[wt >> 2] = 1728;
                Mt = e + 28 | 0;
                s[Mt >> 2] = 1760;
                Pt = s[80 >> 2] | 0;
                u = (Pt | 0) > 0;
                if (!u) {
                    It = -1;
                    Tr(e, 0) | 0;
                    c = Rt;
                    return It | 0
                }
                mn(e, 0) | 0;
                It = -1;
                Tr(e, 0) | 0;
                c = Rt;
                return It | 0
            }
            a = e + 52 | 0;
            f = s[a >> 2] | 0;
            fi(f, t);
            l = s[i >> 2] | 0;
            h = sr(l, t) | 0;
            p = (h | 0) == 0;
            do {
                if (p) {
                    d = e + 96 | 0;
                    s[d >> 2] = t;
                    v = Br(e) | 0;
                    r = d;
                    Bt = v
                } else {
                    m = s[i >> 2] | 0;
                    g = s[e >> 2] | 0;
                    b = (g | 0) == 1381123450;
                    if (!b) {
                        gt(1896 | 0, 1848 | 0, 129, 1928 | 0)
                    }
                    w = s[m >> 2] | 0;
                    E = (w | 0) == 1381123450;
                    if (E) {
                        S = m + 12 | 0;
                        x = s[S >> 2] | 0;
                        T = e + 12 | 0;
                        s[T >> 2] = x;
                        N = m + 16 | 0;
                        C = s[N >> 2] | 0;
                        k = e + 16 | 0;
                        s[k >> 2] = C;
                        L = m + 20 | 0;
                        O = s[L >> 2] | 0;
                        M = e + 20 | 0;
                        s[M >> 2] = O;
                        _ = m + 24 | 0;
                        D = s[_ >> 2] | 0;
                        P = e + 24 | 0;
                        s[P >> 2] = D;
                        H = m + 28 | 0;
                        B = s[H >> 2] | 0;
                        j = e + 28 | 0;
                        s[j >> 2] = B;
                        F = m + 32 | 0;
                        I = s[F >> 2] | 0;
                        R = e + 32 | 0;
                        s[R >> 2] = I;
                        s[F >> 2] = 0;
                        U = m + 36 | 0;
                        z = s[U >> 2] | 0;
                        W = e + 36 | 0;
                        s[W >> 2] = z;
                        n = e + 96 | 0;
                        r = n;
                        Bt = h;
                        break
                    } else {
                        gt(1944 | 0, 1848 | 0, 130, 1928 | 0)
                    }
                }
            } while (0);
            X = s[r >> 2] | 0;
            V = (X | 0) == 0;
            if (V) {
                $ = e + 48 | 0;
                J = s[$ >> 2] | 0;
                K = (J | 0) == (0 | 0);
                if (K) {
                    Ft = Bt
                } else {
                    Q = gr(J, 0) | 0;
                    Y = (Q | 0) != 0;
                    Z = (Bt | 0) == 0;
                    Ht = Y & Z;
                    do {
                        if (Ht) {
                            et = s[$ >> 2] | 0;
                            tt = s[e >> 2] | 0;
                            nt = (tt | 0) == 1381123450;
                            if (!nt) {
                                gt(1896 | 0, 1848 | 0, 129, 1928 | 0)
                            }
                            rt = s[et >> 2] | 0;
                            it = (rt | 0) == 1381123450;
                            if (it) {
                                st = et + 12 | 0;
                                ot = s[st >> 2] | 0;
                                ut = e + 12 | 0;
                                s[ut >> 2] = ot;
                                ft = et + 16 | 0;
                                lt = s[ft >> 2] | 0;
                                ct = e + 16 | 0;
                                s[ct >> 2] = lt;
                                ht = et + 20 | 0;
                                pt = s[ht >> 2] | 0;
                                dt = e + 20 | 0;
                                s[dt >> 2] = pt;
                                vt = et + 24 | 0;
                                mt = s[vt >> 2] | 0;
                                yt = e + 24 | 0;
                                s[yt >> 2] = mt;
                                bt = et + 28 | 0;
                                Et = s[bt >> 2] | 0;
                                St = e + 28 | 0;
                                s[St >> 2] = Et;
                                xt = et + 32 | 0;
                                Tt = s[xt >> 2] | 0;
                                Nt = e + 32 | 0;
                                s[Nt >> 2] = Tt;
                                s[xt >> 2] = 0;
                                Ct = et + 36 | 0;
                                kt = s[Ct >> 2] | 0;
                                Lt = e + 36 | 0;
                                s[Lt >> 2] = kt;
                                jt = -1;
                                break
                            } else {
                                gt(1944 | 0, 1848 | 0, 130, 1928 | 0)
                            }
                        } else {
                            jt = Bt
                        }
                    } while (0);
                    Er(e) | 0;
                    Ft = jt
                }
            } else {
                Ft = Bt
            }
            At = e + 144 | 0;
            Ot = s[At >> 2] | 0;
            _t = (Ot | 0) == 0;
            if (_t) {
                It = Ft;
                Tr(e, 0) | 0;
                c = Rt;
                return It | 0
            }
            Dt = e + 152 | 0;
            Ar(Dt);
            It = Ft;
            Tr(e, 0) | 0;
            c = Rt;
            return It | 0
        }

        function jn(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0;
            h = c;
            xr(e) | 0;
            t = e + 48 | 0;
            n = s[t >> 2] | 0;
            r = (n | 0) == (0 | 0);
            if (r) {
                f = 0
            } else {
                i = e + 92 | 0;
                o = s[i >> 2] | 0;
                u = (o | 0) != 0;
                f = u
            }
            a = f & 1;
            Tr(e, 0) | 0;
            c = h;
            return a | 0
        }

        function Fn(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0;
            U = c;
            c = c + 16 | 0;
            q = U;
            xr(e) | 0;
            i = e + 92 | 0;
            o = s[i >> 2] | 0;
            y = (o | 0) == 0;
            if (y) {
                A = e + 96 | 0;
                M = s[A >> 2] | 0;
                _ = (M | 0) != 0;
                D = (t | 0) > -1;
                j = _ | D;
                if (j) {
                    R = 3
                }
            } else {
                R = 3
            }
            if ((R | 0) == 3) {
                P = (t | 0) < 0;
                if (P) {
                    n = 0
                } else {
                    Et(0, q | 0) | 0;
                    H = (t | 0) % 1e3 & -1;
                    B = H * 1e6 | 0;
                    u = q + 4 | 0;
                    a = s[u >> 2] | 0;
                    f = a + B | 0;
                    l = (t | 0) / 1e3 & -1;
                    h = (f | 0) / 1e9 & -1;
                    p = h + l | 0;
                    d = s[q >> 2] | 0;
                    v = p + d | 0;
                    s[q >> 2] = v;
                    m = (f | 0) % 1e9 & -1;
                    s[u >> 2] = m;
                    n = q
                }
                g = Cr(e, 1, n) | 0;
                r = s[i >> 2] | 0;
                F = (r | 0) == 0;
                if (!F) {
                    k = (g | 0) > 0;
                    if (!k) {
                        I = g;
                        Tr(e, 0) | 0;
                        c = U;
                        return I | 0
                    }
                    L = e + 84 | 0;
                    O = s[L >> 2] | 0;
                    I = O;
                    Tr(e, 0) | 0;
                    c = U;
                    return I | 0
                }
            }
            b = s[e >> 2] | 0;
            w = (b | 0) == 1381123450;
            if (!w) {
                gt(1816 | 0, 1848 | 0, 150, 1880 | 0)
            }
            E = e + 16 | 0;
            s[E >> 2] = 1;
            S = e + 20 | 0;
            s[S >> 2] = 10;
            x = e + 24 | 0;
            s[x >> 2] = 1656;
            T = e + 28 | 0;
            s[T >> 2] = 1688;
            N = s[80 >> 2] | 0;
            C = (N | 0) > 0;
            if (!C) {
                I = -1;
                Tr(e, 0) | 0;
                c = U;
                return I | 0
            }
            mn(e, 0) | 0;
            I = -1;
            Tr(e, 0) | 0;
            c = U;
            return I | 0
        }

        function In(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0;
            E = c;
            xr(e) | 0;
            n = (t | 0) == (0 | 0);
            if (n) {
                w = 4
            } else {
                r = e + 48 | 0;
                l = s[r >> 2] | 0;
                h = (l | 0) == (0 | 0);
                if (h) {
                    w = 4
                } else {
                    p = Sn(t) | 0;
                    d = xn(t) | 0;
                    v = wr(e, p, d) | 0;
                    m = (v | 0) == 0;
                    if (m) {
                        w = 4
                    } else {
                        b = v
                    }
                }
            }
            if ((w | 0) == 4) {
                g = e + 52 | 0;
                y = s[g >> 2] | 0;
                fi(y, 0);
                i = _n(e, t) | 0;
                o = e + 96 | 0;
                u = s[o >> 2] | 0;
                a = (u | 0) == 0;
                if (a) {
                    b = i
                } else {
                    f = s[g >> 2] | 0;
                    fi(f, 1);
                    b = i
                }
            }
            Tr(e, 0) | 0;
            c = E;
            return b | 0
        }

        function qn() {
            var e = 0,
                t = 0;
            t = c;
            c = t;
            return
        }

        function Rn(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            n = e & 255;
            do {
                switch (n | 0) {
                    case 34:
                        {
                            t = 2064;
                            break
                        };
                    case 10:
                        {
                            t = 2008;
                            break
                        };
                    case 15:
                        {
                            t = 2040;
                            break
                        };
                    case 5:
                        {
                            t = 1984;
                            break
                        };
                    case 64:
                        {
                            t = 2136;
                            break
                        };
                    case 8:
                        {
                            t = 1992;
                            break
                        };
                    case 14:
                        {
                            t = 2032;
                            break
                        };
                    case 38:
                        {
                            t = 2088;
                            break
                        };
                    case 35:
                        {
                            t = 2072;
                            break
                        };
                    case 25:
                        {
                            t = 2056;
                            break
                        };
                    case 12:
                        {
                            t = 2016;
                            break
                        };
                    case 9:
                        {
                            t = 2e3;
                            break
                        };
                    case 93:
                        {
                            t = 2104;
                            break
                        };
                    case 13:
                        {
                            t = 2024;
                            break
                        };
                    case 39:
                        {
                            t = 2096;
                            break
                        };
                    case 2:
                        {
                            t = 1976;
                            break
                        };
                    case 128:
                        {
                            t = 2112;
                            break
                        };
                    case 57:
                        {
                            t = 2128;
                            break
                        };
                    default:
                        {
                            t = 2144
                        }
                }
            } while (0);
            c = i;
            return t | 0
        }

        function Un(e) {
            e = e | 0;
            var t = 0,
                n = 0;
            n = c;
            c = n;
            return 2152 | 0
        }

        function zn(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                i = 0,
                s = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0;
            var x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0;
            A = c;
            n = e & 31;
            i = 2160 + n | 0;
            m = r[i >> 0] | 0;
            E = m & 255;
            S = e >>> 4;
            x = S & 31;
            T = x ^ 31;
            N = 2160 + T | 0;
            C = r[N >> 0] | 0;
            k = C & 255;
            s = -25102353 >>> n;
            o = s & 1;
            u = (o | 0) == 0;
            if (u) {
                gt(2192 | 0, 2216 | 0, 109, 2232 | 0)
            }
            a = -25102353 >>> T;
            f = a & 1;
            l = (f | 0) == 0;
            if (l) {
                gt(2192 | 0, 2216 | 0, 109, 2232 | 0)
            }
            h = 25102352 >>> n;
            p = h & 1;
            d = (p | 0) == 0;
            if (!d) {
                t = 0;
                c = A;
                return t | 0
            }
            v = 25102352 >>> T;
            g = v & 1;
            y = (g | 0) == 0;
            if (!y) {
                t = 0;
                c = A;
                return t | 0
            }
            b = k + E | 0;
            w = b & 31;
            t = w;
            c = A;
            return t | 0
        }

        function Wn(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0;
            m = c;
            t = e + 48 | 0;
            n = s[t >> 2] | 0;
            o = (n | 0) == (0 | 0);
            if (!o) {
                Xn(n, -1);
                s[t >> 2] = 0
            }
            u = e + 32 | 0;
            a = s[u >> 2] | 0;
            f = (a | 0) == (0 | 0);
            if (!f) {
                _s(a)
            }
            l = e + 12 | 0;
            h = s[l >> 2] | 0;
            p = (h | 0) == 0;
            if (p) {
                _s(e);
                c = m;
                return
            }
            d = e + 20 | 0;
            r = s[d >> 2] | 0;
            i = (r | 0) == (0 | 0);
            if (i) {
                _s(e);
                c = m;
                return
            }
            _s(r);
            _s(e);
            c = m;
            return
        }

        function Xn(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0;
            H = c;
            n = s[e >> 2] | 0;
            r = n + t | 0;
            s[e >> 2] = r;
            m = (r | 0) > -1;
            if (!m) {
                gt(2256 | 0, 2264 | 0, 87, 2280 | 0)
            }
            N = (r | 0) == 0;
            C = (t | 0) < 1;
            _ = N & C;
            if (!_) {
                c = H;
                return
            }
            k = e + 8 | 0;
            L = s[k >> 2] | 0;
            A = (L | 0) == (0 | 0);
            e: do {
                if (!A) {
                    D = L;
                    while (1) {
                        O = D + 44 | 0;
                        M = s[O >> 2] | 0;
                        s[O >> 2] = 0;
                        i = D + 40 | 0;
                        o = s[i >> 2] | 0;
                        u = o + -1 | 0;
                        s[i >> 2] = u;
                        a = (o | 0) > 0;
                        if (!a) {
                            break
                        }
                        f = (u | 0) == 0;
                        if (f) {
                            l = D + 48 | 0;
                            h = s[l >> 2] | 0;
                            p = (h | 0) == (0 | 0);
                            if (!p) {
                                Xn(h, -1);
                                s[l >> 2] = 0
                            }
                            d = D + 32 | 0;
                            v = s[d >> 2] | 0;
                            g = (v | 0) == (0 | 0);
                            if (!g) {
                                _s(v)
                            }
                            y = D + 12 | 0;
                            b = s[y >> 2] | 0;
                            w = (b | 0) == 0;
                            if (!w) {
                                E = D + 20 | 0;
                                S = s[E >> 2] | 0;
                                x = (S | 0) == (0 | 0);
                                if (!x) {
                                    _s(S)
                                }
                            }
                            _s(D)
                        }
                        T = (M | 0) == (0 | 0);
                        if (T) {
                            break e
                        } else {
                            D = M
                        }
                    }
                    gt(2256 | 0, 2264 | 0, 87, 2280 | 0)
                }
            } while (0);
            _s(e);
            c = H;
            return
        }

        function Vn(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0;
            r = c;
            t = s[e >> 2] | 0;
            c = r;
            return t | 0
        }

        function $n(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            t = e + 20 | 0;
            n = s[t >> 2] | 0;
            c = i;
            return n | 0
        }

        function Jn(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            t = e + 56 | 0;
            n = s[t >> 2] | 0;
            c = i;
            return n | 0
        }

        function Kn(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            t = e + 60 | 0;
            n = s[t >> 2] | 0;
            c = i;
            return n | 0
        }

        function Qn(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            t = e + 28 | 0;
            n = s[t >> 2] | 0;
            c = i;
            return n | 0
        }

        function Gn(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            t = e + 36 | 0;
            n = s[t >> 2] | 0;
            c = i;
            return n | 0
        }

        function Yn(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0;
            u = c;
            t = (e | 0) == (0 | 0);
            if (t) {
                i = 0
            } else {
                n = e + 44 | 0;
                r = s[n >> 2] | 0;
                i = r
            }
            c = u;
            return i | 0
        }

        function Zn() {
            var e = 0,
                t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0;
            o = c;
            e = Ds(1, 16) | 0;
            t = s[e >> 2] | 0;
            n = t + 1 | 0;
            s[e >> 2] = n;
            r = (t | 0) > -2;
            if (r) {
                c = o;
                return e | 0
            } else {
                gt(2256 | 0, 2264 | 0, 87, 2280 | 0)
            }
            return 0 | 0
        }

        function er(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0;
            var x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0;
            L = c;
            t = e + 8 | 0;
            n = s[t >> 2] | 0;
            v = (n | 0) == (0 | 0);
            if (v) {
                _s(e);
                c = L;
                return
            } else {
                C = n
            }
            while (1) {
                b = C + 44 | 0;
                w = s[b >> 2] | 0;
                s[b >> 2] = 0;
                E = C + 40 | 0;
                S = s[E >> 2] | 0;
                x = S + -1 | 0;
                s[E >> 2] = x;
                T = (S | 0) > 0;
                if (!T) {
                    k = 3;
                    break
                }
                N = (x | 0) == 0;
                if (N) {
                    i = C + 48 | 0;
                    o = s[i >> 2] | 0;
                    u = (o | 0) == (0 | 0);
                    if (!u) {
                        Xn(o, -1);
                        s[i >> 2] = 0
                    }
                    a = C + 32 | 0;
                    f = s[a >> 2] | 0;
                    l = (f | 0) == (0 | 0);
                    if (!l) {
                        _s(f)
                    }
                    h = C + 12 | 0;
                    p = s[h >> 2] | 0;
                    d = (p | 0) == 0;
                    if (!d) {
                        m = C + 20 | 0;
                        g = s[m >> 2] | 0;
                        y = (g | 0) == (0 | 0);
                        if (!y) {
                            _s(g)
                        }
                    }
                    _s(C)
                }
                r = (w | 0) == (0 | 0);
                if (r) {
                    k = 14;
                    break
                } else {
                    C = w
                }
            }
            if ((k | 0) == 3) {
                gt(2256 | 0, 2264 | 0, 87, 2280 | 0)
            } else if ((k | 0) == 14) {
                _s(e);
                c = L;
                return
            }
        }

        function tr() {
            var e = 0,
                t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0;
            var S = 0,
                x = 0;
            x = c;
            t = Ds(1, 140) | 0;
            n = (t | 0) == (0 | 0);
            if (n) {
                e = 0;
                c = x;
                return e | 0
            }
            s[t >> 2] = 1381123450;
            p = t + 4 | 0;
            s[p >> 2] = 1;
            d = t + 40 | 0;
            s[d >> 2] = -1;
            v = t + 92 | 0;
            s[v >> 2] = 4;
            m = Ds(4, 4) | 0;
            g = t + 96 | 0;
            s[g >> 2] = m;
            y = (m | 0) == (0 | 0);
            if (y) {
                nr(t);
                e = 0;
                c = x;
                return e | 0
            } else {
                E = 0
            }
            while (1) {
                b = yn() | 0;
                w = s[g >> 2] | 0;
                r = w + (E << 2) | 0;
                s[r >> 2] = b;
                i = (b | 0) == (0 | 0);
                if (i) {
                    break
                }
                o = b + 44 | 0;
                s[o >> 2] = 0;
                u = b + 40 | 0;
                s[u >> 2] = 2;
                a = b + 52 | 0;
                s[a >> 2] = E;
                f = b + 48 | 0;
                s[f >> 2] = t;
                l = E + 1 | 0;
                h = (l | 0) < 4;
                if (h) {
                    E = l
                } else {
                    e = t;
                    S = 7;
                    break
                }
            }
            if ((S | 0) == 7) {
                c = x;
                return e | 0
            }
            nr(t);
            e = 0;
            c = x;
            return e | 0
        }

        function nr(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0;
            var N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0;
            var X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0;
            var ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0;
            var _t = 0,
                Dt = 0,
                Pt = 0;
            Pt = c;
            c = c + 16 | 0;
            Mt = Pt;
            a = e + 52 | 0;
            f = s[a >> 2] | 0;
            S = (f | 0) == 0;
            do {
                if (!S) {
                    D = e + 60 | 0;
                    W = r[D >> 0] | 0;
                    tt = W & 2;
                    ht = tt << 24 >> 24 == 0;
                    if (!ht) {
                        Tt = W & -3;
                        r[D >> 0] = Tt;
                        kt = e + 92 | 0;
                        Lt = s[kt >> 2] | 0;
                        l = (Lt | 0) > 0;
                        if (l) {
                            h = e + 96 | 0;
                            Ot = 0;
                            while (1) {
                                p = s[h >> 2] | 0;
                                d = p + (Ot << 2) | 0;
                                v = s[d >> 2] | 0;
                                m = v + 56 | 0;
                                s[m >> 2] = 0;
                                y = Ot + 1 | 0;
                                At = (y | 0) == (Lt | 0);
                                if (At) {
                                    break
                                } else {
                                    Ot = y
                                }
                            }
                        }
                        b = e + 104 | 0;
                        s[b >> 2] = 0;
                        w = e + 100 | 0;
                        s[w >> 2] = 0;
                        E = e + 128 | 0;
                        x = s[E >> 2] | 0;
                        Po[x & 0](e) | 0;
                        u = s[a >> 2] | 0;
                        T = (u | 0) == 0;
                        if (T) {
                            break
                        }
                    }
                    N = e + 120 | 0;
                    C = s[N >> 2] | 0;
                    k = (C | 0) == (0 | 0);
                    if (!k) {
                        Po[C & 0](e) | 0;
                        s[N >> 2] = 0
                    }
                    L = s[80 >> 2] | 0;
                    A = (L | 0) > 0;
                    if (A) {
                        O = s[g >> 2] | 0;
                        M = e + 40 | 0;
                        _ = s[M >> 2] | 0;
                        s[Mt >> 2] = 2328;
                        _t = Mt + 4 | 0;
                        s[_t >> 2] = _;
                        Yt(O | 0, 2296 | 0, Mt | 0) | 0
                    }
                    s[a >> 2] = 0
                }
            } while (0);
            P = e + 96 | 0;
            H = s[P >> 2] | 0;
            B = (H | 0) == (0 | 0);
            if (!B) {
                j = s[H >> 2] | 0;
                F = (j | 0) == (0 | 0);
                if (F) {
                    q = H
                } else {
                    bn(j);
                    t = s[P >> 2] | 0;
                    q = t
                }
                I = q + 4 | 0;
                R = s[I >> 2] | 0;
                U = (R | 0) == (0 | 0);
                if (U) {
                    yt = q
                } else {
                    bn(R);
                    n = s[P >> 2] | 0;
                    yt = n
                }
                mt = yt + 8 | 0;
                bt = s[mt >> 2] | 0;
                wt = (bt | 0) == (0 | 0);
                if (wt) {
                    St = yt
                } else {
                    bn(bt);
                    i = s[P >> 2] | 0;
                    St = i
                }
                Et = St + 12 | 0;
                xt = s[Et >> 2] | 0;
                Nt = (xt | 0) == (0 | 0);
                if (Nt) {
                    Ct = St
                } else {
                    bn(xt);
                    o = s[P >> 2] | 0;
                    Ct = o
                }
                _s(Ct)
            }
            z = e + 108 | 0;
            X = s[z >> 2] | 0;
            V = (X | 0) == (0 | 0);
            if (!V) {
                J = X;
                while (1) {
                    $ = J + 56 | 0;
                    K = s[$ >> 2] | 0;
                    s[z >> 2] = K;
                    Q = J + 12 | 0;
                    G = s[Q >> 2] | 0;
                    _s(G);
                    _s(J);
                    Y = s[z >> 2] | 0;
                    Z = (Y | 0) == (0 | 0);
                    if (Z) {
                        break
                    } else {
                        J = Y
                    }
                }
            }
            et = e + 84 | 0;
            nt = s[et >> 2] | 0;
            rt = (nt | 0) == (0 | 0);
            if (!rt) {
                _s(nt)
            }
            it = e + 72 | 0;
            st = s[it >> 2] | 0;
            ot = (st | 0) == (0 | 0);
            if (!ot) {
                _s(st)
            }
            ut = s[e >> 2] | 0;
            at = (ut | 0) == 1381123450;
            if (!at) {
                gt(3208 | 0, 3240 | 0, 218, 3272 | 0)
            }
            ft = e + 8 | 0;
            lt = s[ft >> 2] | 0;
            ct = (lt | 0) == (0 | 0);
            if (!ct) {
                _s(lt);
                s[ft >> 2] = 0
            }
            pt = e + 32 | 0;
            dt = s[pt >> 2] | 0;
            vt = (dt | 0) == (0 | 0);
            if (vt) {
                _s(e);
                c = Pt;
                return
            }
            _s(dt);
            _s(e);
            c = Pt;
            return
        }

        function rr(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0;
            S = c;
            t = e + 48 | 0;
            n = s[t >> 2] | 0;
            p = (n | 0) == (0 | 0);
            if (p) {
                gt(2960 | 0, 2880 | 0, 36, 3288 | 0)
            }
            d = e + 52 | 0;
            v = s[d >> 2] | 0;
            m = (v | 0) > -1;
            if (!m) {
                gt(3320 | 0, 2880 | 0, 37, 3288 | 0)
            }
            g = n + 96 | 0;
            y = s[g >> 2] | 0;
            b = y + (v << 2) | 0;
            w = s[b >> 2] | 0;
            i = (w | 0) == (e | 0);
            if (!i) {
                s[b >> 2] = e
            }
            o = n + 60 | 0;
            u = r[o >> 0] | 0;
            a = u & 2;
            f = a << 24 >> 24 == 0;
            if (f) {
                c = S;
                return
            }
            l = n + 132 | 0;
            h = s[l >> 2] | 0;
            Ho[h & 7](n, e) | 0;
            c = S;
            return
        }

        function ir(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0;
            var V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0;
            Y = c;
            c = c + 16 | 0;
            K = Y;
            i = e + 60 | 0;
            o = r[i >> 0] | 0;
            b = o & 2;
            O = b << 24 >> 24 == 0;
            if (!O) {
                R = o & -3;
                r[i >> 0] = R;
                U = e + 92 | 0;
                z = s[U >> 2] | 0;
                W = (z | 0) > 0;
                if (W) {
                    X = e + 96 | 0;
                    J = 0;
                    while (1) {
                        V = s[X >> 2] | 0;
                        u = V + (J << 2) | 0;
                        a = s[u >> 2] | 0;
                        f = a + 56 | 0;
                        s[f >> 2] = 0;
                        l = J + 1 | 0;
                        $ = (l | 0) == (z | 0);
                        if ($) {
                            break
                        } else {
                            J = l
                        }
                    }
                }
                h = e + 104 | 0;
                s[h >> 2] = 0;
                p = e + 100 | 0;
                s[p >> 2] = 0;
                d = e + 128 | 0;
                v = s[d >> 2] | 0;
                Po[v & 0](e) | 0
            }
            m = e + 52 | 0;
            y = s[m >> 2] | 0;
            w = (y | 0) == 0;
            if (!w) {
                E = e + 120 | 0;
                S = s[E >> 2] | 0;
                x = (S | 0) == (0 | 0);
                if (!x) {
                    Po[S & 0](e) | 0;
                    s[E >> 2] = 0
                }
                T = s[80 >> 2] | 0;
                N = (T | 0) > 0;
                if (N) {
                    C = s[g >> 2] | 0;
                    k = e + 40 | 0;
                    L = s[k >> 2] | 0;
                    s[K >> 2] = 2328;
                    Q = K + 4 | 0;
                    s[Q >> 2] = L;
                    Yt(C | 0, 2296 | 0, K | 0) | 0
                }
                s[m >> 2] = 0
            }
            A = (t | 0) == (0 | 0);
            if (A) {
                n = 0;
                c = Y;
                return n | 0
            }
            M = r[t >> 0] | 0;
            _ = (M & 255) < 16;
            if (!_) {
                D = Fr(e, t) | 0;
                n = D;
                c = Y;
                return n | 0
            }
            P = M & 255;
            H = As(2344) | 0;
            B = P + 48 | 0;
            j = B & 255;
            F = H + 10 | 0;
            r[F >> 0] = j;
            I = Fr(e, H) | 0;
            q = (H | 0) == (0 | 0);
            if (q) {
                n = I;
                c = Y;
                return n | 0
            }
            _s(H);
            n = I;
            c = Y;
            return n | 0
        }

        function sr(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0;
            var N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0;
            var X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0;
            var ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                yt = 0;
            yt = c;
            o = e + 60 | 0;
            u = r[o >> 0] | 0;
            b = (u & 255) >>> 1;
            O = b & 1;
            R = O & 255;
            Y = (R | 0) == (t | 0);
            if (Y) {
                n = 0;
                c = yt;
                return n | 0
            }
            ft = (t | 0) == 0;
            if (ft) {
                $ = u & -3;
                r[o >> 0] = $;
                J = e + 92 | 0;
                K = s[J >> 2] | 0;
                Q = (K | 0) > 0;
                if (Q) {
                    G = e + 96 | 0;
                    vt = 0;
                    while (1) {
                        Z = s[G >> 2] | 0;
                        et = Z + (vt << 2) | 0;
                        tt = s[et >> 2] | 0;
                        nt = tt + 56 | 0;
                        s[nt >> 2] = 0;
                        rt = vt + 1 | 0;
                        it = (rt | 0) < (K | 0);
                        if (it) {
                            vt = rt
                        } else {
                            break
                        }
                    }
                }
                st = e + 104 | 0;
                s[st >> 2] = 0;
                ot = e + 100 | 0;
                s[ot >> 2] = 0;
                ut = e + 128 | 0;
                at = s[ut >> 2] | 0;
                lt = Po[at & 0](e) | 0;
                n = lt;
                c = yt;
                return n | 0
            }
            ct = e + 52 | 0;
            ht = s[ct >> 2] | 0;
            pt = (ht | 0) == 0;
            if (pt) {
                a = s[e >> 2] | 0;
                f = (a | 0) == 1381123450;
                if (!f) {
                    gt(3208 | 0, 3240 | 0, 150, 3256 | 0)
                }
                l = e + 16 | 0;
                s[l >> 2] = -1;
                h = e + 20 | 0;
                s[h >> 2] = 4;
                p = e + 24 | 0;
                s[p >> 2] = 2848;
                d = e + 28 | 0;
                s[d >> 2] = 2384;
                v = s[80 >> 2] | 0;
                m = (v | 0) > 0;
                if (!m) {
                    n = -1;
                    c = yt;
                    return n | 0
                }
                mn(e, 0) | 0;
                n = -1;
                c = yt;
                return n | 0
            }
            g = u & 1;
            y = g << 24 >> 24 == 0;
            do {
                if (y) {
                    w = zr(e, 0) | 0;
                    E = (w | 0) == 0;
                    if (E) {
                        i = r[o >> 0] | 0;
                        C = i;
                        break
                    } else {
                        n = -1;
                        c = yt;
                        return n | 0
                    }
                } else {
                    C = u
                }
            } while (0);
            S = t & 255;
            x = S << 1 & 255;
            T = x & 2;
            N = C & -3;
            k = N | T;
            r[o >> 0] = k;
            L = e + 92 | 0;
            A = s[L >> 2] | 0;
            M = (A | 0) > 0;
            e: do {
                if (M) {
                    _ = e + 132 | 0;
                    D = e + 96 | 0;
                    dt = 0;
                    while (1) {
                        j = s[_ >> 2] | 0;
                        F = s[D >> 2] | 0;
                        I = F + (dt << 2) | 0;
                        q = s[I >> 2] | 0;
                        U = Ho[j & 7](e, q) | 0;
                        z = (U | 0) == 0;
                        H = dt + 1 | 0;
                        if (!z) {
                            n = -1;
                            break
                        }
                        P = s[L >> 2] | 0;
                        B = (H | 0) < (P | 0);
                        if (B) {
                            dt = H
                        } else {
                            break e
                        }
                    }
                    c = yt;
                    return n | 0
                }
            } while (0);
            W = e + 124 | 0;
            X = s[W >> 2] | 0;
            V = Po[X & 0](e) | 0;
            n = V;
            c = yt;
            return n | 0
        }

        function or(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0;
            var x = 0,
                T = 0,
                N = 0;
            N = c;
            n = e + 52 | 0;
            r = s[n >> 2] | 0;
            if ((r | 0) == 0) {
                m = s[e >> 2] | 0;
                g = (m | 0) == 1381123450;
                if (!g) {
                    gt(3208 | 0, 3240 | 0, 150, 3256 | 0)
                }
                y = e + 16 | 0;
                s[y >> 2] = -1;
                b = e + 20 | 0;
                s[b >> 2] = 4;
                w = e + 24 | 0;
                s[w >> 2] = 2360;
                E = e + 28 | 0;
                s[E >> 2] = 2384;
                S = s[80 >> 2] | 0;
                x = (S | 0) > 0;
                if (!x) {
                    t = -1;
                    c = N;
                    return t | 0
                }
                mn(e, 0) | 0;
                t = -1;
                c = N;
                return t | 0
            } else if ((r | 0) == 2) {
                d = e + 40 | 0;
                v = s[d >> 2] | 0;
                t = v;
                c = N;
                return t | 0
            } else {
                i = s[e >> 2] | 0;
                o = (i | 0) == 1381123450;
                if (!o) {
                    gt(3208 | 0, 3240 | 0, 150, 3256 | 0)
                }
                u = e + 16 | 0;
                s[u >> 2] = 1;
                a = e + 20 | 0;
                s[a >> 2] = 3;
                f = e + 24 | 0;
                s[f >> 2] = 2360;
                l = e + 28 | 0;
                s[l >> 2] = 2408;
                h = s[80 >> 2] | 0;
                p = (h | 0) > 0;
                if (!p) {
                    t = -1;
                    c = N;
                    return t | 0
                }
                mn(e, 0) | 0;
                t = -1;
                c = N;
                return t | 0
            }
            return 0 | 0
        }

        function ur(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0;
            var k = 0,
                L = 0,
                A = 0;
            A = c;
            c = c + 16 | 0;
            N = A;
            o = e + 60 | 0;
            u = r[o >> 0] | 0;
            m = u & 1;
            y = m << 24 >> 24 == 0;
            if (y) {
                l = e + 44 | 0;
                s[l >> 2] = t;
                h = e + 48 | 0;
                s[h >> 2] = n;
                p = s[80 >> 2] | 0;
                d = (p | 0) > 0;
                if (!d) {
                    i = 0;
                    c = A;
                    return i | 0
                }
                v = s[g >> 2] | 0;
                s[N >> 2] = 2448;
                C = N + 4 | 0;
                s[C >> 2] = t;
                k = N + 8 | 0;
                s[k >> 2] = n;
                Yt(v | 0, 2512 | 0, N | 0) | 0;
                i = 0;
                c = A;
                return i | 0
            }
            b = s[e >> 2] | 0;
            w = (b | 0) == 1381123450;
            if (!w) {
                gt(3208 | 0, 3240 | 0, 150, 3256 | 0)
            }
            E = e + 16 | 0;
            s[E >> 2] = -1;
            S = e + 20 | 0;
            s[S >> 2] = 4;
            x = e + 24 | 0;
            s[x >> 2] = 2448;
            T = e + 28 | 0;
            s[T >> 2] = 2472;
            a = s[80 >> 2] | 0;
            f = (a | 0) > 0;
            if (!f) {
                i = -1;
                c = A;
                return i | 0
            }
            mn(e, 0) | 0;
            i = -1;
            c = A;
            return i | 0
        }

        function ar(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            x = c;
            c = c + 16 | 0;
            w = x;
            r = e + 52 | 0;
            i = s[r >> 2] | 0;
            l = (i | 0) == 0;
            if (l) {
                s[r >> 2] = t;
                u = s[80 >> 2] | 0;
                a = (u | 0) > 0;
                if (!a) {
                    n = 0;
                    c = x;
                    return n | 0
                }
                f = s[g >> 2] | 0;
                s[w >> 2] = 2544;
                E = w + 4 | 0;
                s[E >> 2] = t;
                Yt(f | 0, 2632 | 0, w | 0) | 0;
                n = 0;
                c = x;
                return n | 0
            }
            h = s[e >> 2] | 0;
            p = (h | 0) == 1381123450;
            if (!p) {
                gt(3208 | 0, 3240 | 0, 150, 3256 | 0)
            }
            d = e + 16 | 0;
            s[d >> 2] = -1;
            v = e + 20 | 0;
            s[v >> 2] = 4;
            m = e + 24 | 0;
            s[m >> 2] = 2544;
            y = e + 28 | 0;
            s[y >> 2] = 2576;
            b = s[80 >> 2] | 0;
            o = (b | 0) > 0;
            if (!o) {
                n = -1;
                c = x;
                return n | 0
            }
            mn(e, 0) | 0;
            n = -1;
            c = x;
            return n | 0
        }

        function fr(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0;
            k = c;
            r = e + 52 | 0;
            i = s[r >> 2] | 0;
            g = (i | 0) == 0;
            if (!g) {
                b = s[e >> 2] | 0;
                w = (b | 0) == 1381123450;
                if (!w) {
                    gt(3208 | 0, 3240 | 0, 150, 3256 | 0)
                }
                E = e + 16 | 0;
                s[E >> 2] = -1;
                S = e + 20 | 0;
                s[S >> 2] = 4;
                x = e + 24 | 0;
                s[x >> 2] = 2672;
                T = e + 28 | 0;
                s[T >> 2] = 2704;
                N = s[80 >> 2] | 0;
                o = (N | 0) > 0;
                if (!o) {
                    n = -1;
                    c = k;
                    return n | 0
                }
                mn(e, 0) | 0;
                n = -1;
                c = k;
                return n | 0
            }
            u = t >>> 0 > 3;
            if (!u) {
                y = e + 56 | 0;
                s[y >> 2] = t;
                n = 0;
                c = k;
                return n | 0
            }
            a = s[e >> 2] | 0;
            f = (a | 0) == 1381123450;
            if (!f) {
                gt(3208 | 0, 3240 | 0, 150, 3256 | 0)
            }
            l = e + 16 | 0;
            s[l >> 2] = -1;
            h = e + 20 | 0;
            s[h >> 2] = 4;
            p = e + 24 | 0;
            s[p >> 2] = 2672;
            d = e + 28 | 0;
            s[d >> 2] = 2752;
            v = s[80 >> 2] | 0;
            m = (v | 0) > 0;
            if (!m) {
                n = -1;
                c = k;
                return n | 0
            }
            mn(e, 0) | 0;
            n = -1;
            c = k;
            return n | 0
        }

        function lr(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            t = e + 44 | 0;
            n = s[t >> 2] | 0;
            c = i;
            return n | 0
        }

        function cr(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            t = e + 48 | 0;
            n = s[t >> 2] | 0;
            c = i;
            return n | 0
        }

        function hr(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0;
            var V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0;
            var pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0;
            var Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0;
            Ft = c;
            c = c + 16 | 0;
            Mt = Ft;
            u = e + 60 | 0;
            a = r[u >> 0] | 0;
            E = a & 1;
            _ = E << 24 >> 24 == 0;
            if (!_) {
                z = s[e >> 2] | 0;
                et = (z | 0) == 1381123450;
                if (!et) {
                    gt(3208 | 0, 3240 | 0, 150, 3256 | 0)
                }
                ht = e + 16 | 0;
                s[ht >> 2] = -1;
                Tt = e + 20 | 0;
                s[Tt >> 2] = 4;
                Lt = e + 24 | 0;
                s[Lt >> 2] = 2784;
                At = e + 28 | 0;
                s[At >> 2] = 2800;
                f = s[80 >> 2] | 0;
                l = (f | 0) > 0;
                if (!l) {
                    n = -1;
                    c = Ft;
                    return n | 0
                }
                mn(e, 0) | 0;
                n = -1;
                c = Ft;
                return n | 0
            }
            h = e + 116 | 0;
            p = s[h >> 2] | 0;
            d = Ho[p & 7](e, t) | 0;
            v = (d | 0) == 0;
            if (!v) {
                n = -1;
                c = Ft;
                return n | 0
            }
            m = e + 64 | 0;
            s[m >> 2] = t;
            y = e + 76 | 0;
            b = s[y >> 2] | 0;
            w = (b | 0) == 0;
            if (w) {
                gt(3024 | 0, 2880 | 0, 232, 3040 | 0)
            }
            S = e + 56 | 0;
            x = s[S >> 2] | 0;
            T = (x | 0) == 2;
            do {
                if (T) {
                    i = e + 92 | 0;
                    o = i
                } else {
                    N = e + 84 | 0;
                    C = s[N >> 2] | 0;
                    k = (C | 0) == (0 | 0);
                    if (!k) {
                        gt(3064 | 0, 2880 | 0, 234, 3040 | 0)
                    }
                    L = e + 92 | 0;
                    A = s[L >> 2] | 0;
                    O = rt(A, b) | 0;
                    M = e + 80 | 0;
                    s[M >> 2] = O;
                    D = Ds(1, O) | 0;
                    s[N >> 2] = D;
                    P = (D | 0) == (0 | 0);
                    if (!P) {
                        W = s[80 >> 2] | 0;
                        X = (W | 0) > 0;
                        if (!X) {
                            o = L;
                            break
                        }
                        V = s[g >> 2] | 0;
                        $ = (x | 0) == 1;
                        J = $ ? 3168 : 3176;
                        s[Mt >> 2] = 3040;
                        _t = Mt + 4 | 0;
                        s[_t >> 2] = A;
                        Dt = Mt + 8 | 0;
                        s[Dt >> 2] = J;
                        Pt = Mt + 12 | 0;
                        s[Pt >> 2] = O;
                        Yt(V | 0, 3120 | 0, Mt | 0) | 0;
                        o = L;
                        break
                    }
                    H = s[e >> 2] | 0;
                    B = (H | 0) == 1381123450;
                    if (!B) {
                        gt(3208 | 0, 3240 | 0, 150, 3256 | 0)
                    }
                    j = e + 16 | 0;
                    s[j >> 2] = -2;
                    F = e + 20 | 0;
                    s[F >> 2] = 1;
                    I = e + 24 | 0;
                    s[I >> 2] = 3040;
                    q = e + 28 | 0;
                    s[q >> 2] = 3080;
                    R = s[80 >> 2] | 0;
                    U = (R | 0) > 0;
                    if (!U) {
                        n = -1;
                        c = Ft;
                        return n | 0
                    }
                    mn(e, 0) | 0;
                    n = -1;
                    c = Ft;
                    return n | 0
                }
            } while (0);
            K = s[o >> 2] | 0;
            Q = (K | 0) > 0;
            if (Q) {
                G = e + 96 | 0;
                Y = e + 44 | 0;
                Z = e + 48 | 0;
                tt = e + 84 | 0;
                nt = s[g >> 2] | 0;
                Ot = 0;
                while (1) {
                    it = s[G >> 2] | 0;
                    st = it + (Ot << 2) | 0;
                    ot = s[st >> 2] | 0;
                    ut = s[m >> 2] | 0;
                    s[ot >> 2] = ut;
                    at = s[Y >> 2] | 0;
                    ft = s[Z >> 2] | 0;
                    Cn(ot, at, ft);
                    lt = s[S >> 2] | 0;
                    ct = (lt | 0) == 2;
                    if (!ct) {
                        pt = s[y >> 2] | 0;
                        dt = rt(pt, Ot) | 0;
                        vt = ot + 16 | 0;
                        s[vt >> 2] = pt;
                        mt = s[tt >> 2] | 0;
                        yt = mt + dt | 0;
                        bt = ot + 12 | 0;
                        s[bt >> 2] = yt;
                        wt = s[80 >> 2] | 0;
                        Et = (wt | 0) > 1;
                        if (Et) {
                            s[Mt >> 2] = 3040;
                            Ht = Mt + 4 | 0;
                            s[Ht >> 2] = Ot;
                            Bt = Mt + 8 | 0;
                            s[Bt >> 2] = dt;
                            Yt(nt | 0, 3184 | 0, Mt | 0) | 0
                        }
                    }
                    St = Ot + 1 | 0;
                    xt = s[o >> 2] | 0;
                    Nt = (St | 0) < (xt | 0);
                    if (Nt) {
                        Ot = St
                    } else {
                        break
                    }
                }
            }
            Ct = r[u >> 0] | 0;
            kt = Ct | 1;
            r[u >> 0] = kt;
            n = 0;
            c = Ft;
            return n | 0
        }

        function pr(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0;
            var W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0;
            var lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0;
            St = c;
            o = e + 60 | 0;
            u = r[o >> 0] | 0;
            b = u & 2;
            O = b << 24 >> 24 == 0;
            if (O) {
                t = 0;
                c = St;
                return t | 0
            }
            R = e + 88 | 0;
            Y = s[R >> 2] | 0;
            ft = Y + 1 | 0;
            s[R >> 2] = ft;
            vt = e + 136 | 0;
            mt = s[vt >> 2] | 0;
            yt = Po[mt & 0](e) | 0;
            a = (yt | 0) == (0 | 0);
            if (a) {
                t = 0;
                c = St;
                return t | 0
            }
            f = yt + 60 | 0;
            s[f >> 2] = Y;
            l = e + 92 | 0;
            h = s[l >> 2] | 0;
            p = (h | 0) < 2;
            if (p) {
                d = e + 108 | 0;
                v = s[d >> 2] | 0;
                m = (v | 0) == (0 | 0);
                do {
                    if (m) {
                        s[d >> 2] = 0;
                        w = yn() | 0;
                        E = (w | 0) == (0 | 0);
                        if (E) {
                            gt(2872 | 0, 2880 | 0, 364, 2896 | 0)
                        } else {
                            S = w + 44 | 0;
                            s[S >> 2] = 0;
                            x = w + 48 | 0;
                            s[x >> 2] = e;
                            T = e + 64 | 0;
                            N = s[T >> 2] | 0;
                            s[w >> 2] = N;
                            C = e + 44 | 0;
                            k = s[C >> 2] | 0;
                            L = e + 48 | 0;
                            A = s[L >> 2] | 0;
                            Cn(w, k, A);
                            M = e + 76 | 0;
                            _ = s[M >> 2] | 0;
                            D = w + 16 | 0;
                            s[D >> 2] = _;
                            P = s[M >> 2] | 0;
                            H = Ms(P) | 0;
                            B = w + 12 | 0;
                            s[B >> 2] = H;
                            W = H;
                            bt = w;
                            break
                        }
                    } else {
                        g = v + 56 | 0;
                        y = s[g >> 2] | 0;
                        s[d >> 2] = y;
                        n = v + 12 | 0;
                        i = s[n >> 2] | 0;
                        W = i;
                        bt = v
                    }
                } while (0);
                j = bt + 40 | 0;
                s[j >> 2] = 3;
                F = bt + 60 | 0;
                s[F >> 2] = Y;
                I = yt + 12 | 0;
                q = s[I >> 2] | 0;
                U = bt + 16 | 0;
                z = s[U >> 2] | 0;
                oo(W | 0, q | 0, z | 0) | 0;
                X = yt + 48 | 0;
                V = s[X >> 2] | 0;
                $ = (V | 0) == (0 | 0);
                if ($) {
                    gt(2960 | 0, 2880 | 0, 36, 3288 | 0)
                }
                J = yt + 52 | 0;
                K = s[J >> 2] | 0;
                Q = (K | 0) > -1;
                if (!Q) {
                    gt(3320 | 0, 2880 | 0, 37, 3288 | 0)
                }
                G = V + 96 | 0;
                Z = s[G >> 2] | 0;
                et = Z + (K << 2) | 0;
                tt = s[et >> 2] | 0;
                nt = (tt | 0) == (yt | 0);
                if (!nt) {
                    s[et >> 2] = yt
                }
                rt = V + 60 | 0;
                it = r[rt >> 0] | 0;
                st = it & 2;
                ot = st << 24 >> 24 == 0;
                if (ot) {
                    wt = bt
                } else {
                    ut = V + 132 | 0;
                    at = s[ut >> 2] | 0;
                    Ho[at & 7](V, yt) | 0;
                    wt = bt
                }
            } else {
                lt = yt + 40 | 0;
                s[lt >> 2] = 2;
                wt = yt
            }
            ct = wt + 44 | 0;
            ht = s[ct >> 2] | 0;
            pt = ht + 1 | 0;
            s[ct >> 2] = pt;
            dt = (ht | 0) > -2;
            if (dt) {
                t = wt;
                c = St;
                return t | 0
            } else {
                gt(2920 | 0, 2928 | 0, 87, 2944 | 0)
            }
            return 0 | 0
        }

        function dr(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0;
            p = c;
            t = e + 48 | 0;
            n = s[t >> 2] | 0;
            r = (n | 0) == (0 | 0);
            if (r) {
                gt(2960 | 0, 2880 | 0, 50, 2968 | 0)
            }
            i = e + 52 | 0;
            o = s[i >> 2] | 0;
            u = (o | 0) == -1;
            if (u) {
                a = n + 108 | 0;
                f = s[a >> 2] | 0;
                l = e + 56 | 0;
                s[l >> 2] = f;
                s[a >> 2] = e;
                c = p;
                return
            } else {
                gt(3e3 | 0, 2880 | 0, 51, 2968 | 0)
            }
        }

        function vr() {
            var e = 0,
                t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0;
            u = c;
            t = Ds(1, 148) | 0;
            n = (t | 0) == (0 | 0);
            if (n) {
                e = 0;
                c = u;
                return e | 0
            }
            s[t >> 2] = 1381123450;
            r = t + 4 | 0;
            s[r >> 2] = 2;
            i = t + 44 | 0;
            s[i >> 2] = 1;
            e = t;
            c = u;
            return e | 0
        }

        function mr(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0;
            var x = 0,
                T = 0,
                N = 0,
                C = 0;
            C = c;
            gr(e, 0) | 0;
            t = e + 144 | 0;
            n = s[t >> 2] | 0;
            v = (n | 0) == (0 | 0);
            if (!v) {
                Po[n & 0](e) | 0;
                s[t >> 2] = 0;
                y = e + 140 | 0;
                s[y >> 2] = 0
            }
            b = e + 112 | 0;
            w = s[b >> 2] | 0;
            E = (w | 0) == (0 | 0);
            if (!E) {
                _s(w);
                s[b >> 2] = 0
            }
            S = e + 68 | 0;
            x = e + 108 | 0;
            s[x >> 2] = 0;
            T = e + 104 | 0;
            s[T >> 2] = 0;
            r = e + 64 | 0;
            s[S + 0 >> 2] = 0 | 0;
            s[S + 4 >> 2] = 0 | 0;
            s[S + 8 >> 2] = 0 | 0;
            s[S + 12 >> 2] = 0 | 0;
            s[S + 16 >> 2] = 0 | 0;
            s[r >> 2] = 32768;
            i = e + 60 | 0;
            s[i >> 2] = 32768;
            o = e + 92 | 0;
            s[o >> 2] = 1;
            u = e + 88 | 0;
            s[u >> 2] = 1;
            Sr(e, 0, 0) | 0;
            a = s[e >> 2] | 0;
            f = (a | 0) == 1381123450;
            if (!f) {
                gt(3384 | 0, 3416 | 0, 218, 3432 | 0)
            }
            l = e + 8 | 0;
            h = s[l >> 2] | 0;
            p = (h | 0) == (0 | 0);
            if (!p) {
                _s(h);
                s[l >> 2] = 0
            }
            d = e + 32 | 0;
            m = s[d >> 2] | 0;
            g = (m | 0) == (0 | 0);
            if (g) {
                _s(e);
                c = C;
                return
            }
            _s(m);
            _s(e);
            c = C;
            return
        }

        function gr(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0;
            I = c;
            r = e + 140 | 0;
            i = s[r >> 2] | 0;
            g = (i | 0) == (0 | 0);
            n = g ? 0 : t;
            L = (n | 0) == (0 | 0);
            do {
                if (!L) {
                    _ = n + 44 | 0;
                    D = s[_ >> 2] | 0;
                    P = D + 1 | 0;
                    s[_ >> 2] = P;
                    H = (D | 0) > -2;
                    if (!H) {
                        gt(3344 | 0, 3352 | 0, 87, 3368 | 0)
                    }
                    B = n + 4 | 0;
                    j = s[B >> 2] | 0;
                    o = e + 72 | 0;
                    u = s[o >> 2] | 0;
                    a = (j | 0) == (u | 0);
                    if (a) {
                        f = n + 8 | 0;
                        l = s[f >> 2] | 0;
                        h = e + 76 | 0;
                        p = s[h >> 2] | 0;
                        d = (l | 0) == (p | 0);
                        if (d) {
                            break
                        }
                    }
                    v = e + 80 | 0;
                    s[v >> 2] = 0
                }
            } while (0);
            m = e + 40 | 0;
            y = s[m >> 2] | 0;
            b = (y | 0) == (0 | 0);
            if (b) {
                s[m >> 2] = n;
                c = I;
                return 0
            }
            w = y + 44 | 0;
            E = s[w >> 2] | 0;
            S = E + -1 | 0;
            s[w >> 2] = S;
            x = (E | 0) > 0;
            if (!x) {
                gt(3344 | 0, 3352 | 0, 87, 3368 | 0)
            }
            T = (S | 0) == 0;
            if (!T) {
                s[m >> 2] = n;
                c = I;
                return 0
            }
            N = y + 40 | 0;
            C = s[N >> 2] | 0;
            k = (C | 0) == (0 | 0);
            if (!k) {
                _o[C & 7](y)
            }
            A = y + 48 | 0;
            O = s[A >> 2] | 0;
            M = (O | 0) == (0 | 0);
            if (!M) {
                s[m >> 2] = n;
                c = I;
                return 0
            }
            bn(y);
            s[m >> 2] = n;
            c = I;
            return 0
        }

        function yr(e, t, n, r) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            var i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0;
            v = c;
            i = s[e >> 2] | 0;
            o = (i | 0) == 1381123450;
            if (!o) {
                gt(3600 | 0, 3632 | 0, 150, 3648 | 0)
            }
            u = e + 16 | 0;
            s[u >> 2] = -1;
            a = e + 20 | 0;
            s[a >> 2] = 3;
            f = e + 24 | 0;
            s[f >> 2] = 3448;
            l = e + 28 | 0;
            s[l >> 2] = 3560;
            h = s[80 >> 2] | 0;
            p = (h | 0) > 0;
            if (!p) {
                c = v;
                return -1
            }
            mn(e, 0) | 0;
            c = v;
            return -1
        }

        function br(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0;
            h = c;
            t = s[e >> 2] | 0;
            n = (t | 0) == 1381123450;
            if (!n) {
                gt(3600 | 0, 3632 | 0, 150, 3648 | 0)
            }
            r = e + 16 | 0;
            s[r >> 2] = -1;
            i = e + 20 | 0;
            s[i >> 2] = 3;
            o = e + 24 | 0;
            s[o >> 2] = 3472;
            u = e + 28 | 0;
            s[u >> 2] = 3560;
            a = s[80 >> 2] | 0;
            f = (a | 0) > 0;
            if (!f) {
                c = h;
                return -1
            }
            mn(e, 0) | 0;
            c = h;
            return -1
        }

        function wr(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0;
            d = c;
            r = s[e >> 2] | 0;
            i = (r | 0) == 1381123450;
            if (!i) {
                gt(3600 | 0, 3632 | 0, 150, 3648 | 0)
            }
            o = e + 16 | 0;
            s[o >> 2] = -1;
            u = e + 20 | 0;
            s[u >> 2] = 3;
            a = e + 24 | 0;
            s[a >> 2] = 3496;
            f = e + 28 | 0;
            s[f >> 2] = 3560;
            l = s[80 >> 2] | 0;
            h = (l | 0) > 0;
            if (!h) {
                c = d;
                return -1
            }
            mn(e, 0) | 0;
            c = d;
            return -1
        }

        function Er(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0;
            h = c;
            t = s[e >> 2] | 0;
            n = (t | 0) == 1381123450;
            if (!n) {
                gt(3600 | 0, 3632 | 0, 150, 3648 | 0)
            }
            r = e + 16 | 0;
            s[r >> 2] = -1;
            i = e + 20 | 0;
            s[i >> 2] = 3;
            o = e + 24 | 0;
            s[o >> 2] = 3528;
            u = e + 28 | 0;
            s[u >> 2] = 3560;
            a = s[80 >> 2] | 0;
            f = (a | 0) > 0;
            if (!f) {
                c = h;
                return -1
            }
            mn(e, 0) | 0;
            c = h;
            return -1
        }

        function Sr(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0;
            d = c;
            r = s[e >> 2] | 0;
            i = (r | 0) == 1381123450;
            if (!i) {
                gt(3728 | 0, 3760 | 0, 150, 3776 | 0)
            }
            o = e + 16 | 0;
            s[o >> 2] = -1;
            u = e + 20 | 0;
            s[u >> 2] = 3;
            a = e + 24 | 0;
            s[a >> 2] = 3664;
            f = e + 28 | 0;
            s[f >> 2] = 3688;
            l = s[80 >> 2] | 0;
            h = (l | 0) > 0;
            if (!h) {
                c = d;
                return -1
            }
            mn(e, 0) | 0;
            c = d;
            return -1
        }

        function xr(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0;
            f = c;
            t = e + 172 | 0;
            n = s[t >> 2] | 0;
            r = (n | 0) == 0;
            if (r) {
                i = e + 176 | 0;
                s[i >> 2] = 0;
                u = 1
            } else {
                o = n + 1 | 0;
                u = o
            }
            s[t >> 2] = u;
            c = f;
            return 0
        }

        function Tr(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0;
            F = c;
            n = e + 172 | 0;
            r = s[n >> 2] | 0;
            m = (r | 0) > 0;
            if (!m) {
                gt(3792 | 0, 3816 | 0, 126, 3840 | 0)
            }
            x = (t | 0) == 0;
            T = r + -1 | 0;
            _ = x ? T : 0;
            s[n >> 2] = _;
            N = (_ | 0) == 0;
            if (!N) {
                c = F;
                return 0
            }
            C = e + 188 | 0;
            k = s[C >> 2] | 0;
            L = (k | 0) == (0 | 0);
            A = e + 180 | 0;
            P = L ? A : k;
            H = s[P >> 2] | 0;
            i = (H | 0) == (0 | 0);
            if (i) {
                c = F;
                return 0
            } else {
                O = k;
                B = H
            }
            while (1) {
                o = B + 16 | 0;
                u = s[o >> 2] | 0;
                a = u & 3;
                f = (a | 0) == 0;
                if (f) {
                    break
                }
                s[C >> 2] = B;
                D = s[B >> 2] | 0;
                l = (D | 0) == (0 | 0);
                if (l) {
                    j = 14;
                    break
                } else {
                    M = B;
                    B = D;
                    O = M
                }
            }
            if ((j | 0) == 14) {
                c = F;
                return 0
            }
            h = (O | 0) == (0 | 0);
            p = s[B >> 2] | 0;
            if (h) {
                s[A >> 2] = p
            } else {
                s[O >> 2] = p
            }
            d = s[B >> 2] | 0;
            v = (d | 0) == (0 | 0);
            if (v) {
                g = e + 184 | 0;
                s[g >> 2] = O
            }
            s[B >> 2] = 0;
            s[n >> 2] = 1;
            y = B + 12 | 0;
            b = s[y >> 2] | 0;
            w = e + 176 | 0;
            s[w >> 2] = b;
            E = (B | 0) == (0 | 0);
            if (E) {
                c = F;
                return 0
            }
            S = B + 4 | 0;
            Ar(S);
            c = F;
            return 0
        }

        function Nr(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0;
            U = c;
            n = e + 188 | 0;
            s[n >> 2] = 0;
            r = e + 180 | 0;
            j = s[r >> 2] | 0;
            m = (j | 0) == (0 | 0);
            if (!m) {
                C = t ^ -1;
                k = t & 128;
                F = j;
                while (1) {
                    L = F + 16 | 0;
                    A = s[L >> 2] | 0;
                    O = A & C;
                    M = O | k;
                    s[L >> 2] = M;
                    H = s[F >> 2] | 0;
                    _ = (H | 0) == (0 | 0);
                    if (_) {
                        break
                    } else {
                        F = H
                    }
                }
            }
            i = e + 172 | 0;
            o = s[i >> 2] | 0;
            u = (o | 0) == 0;
            if (!u) {
                c = U;
                return
            }
            I = s[r >> 2] | 0;
            a = (I | 0) == (0 | 0);
            if (a) {
                c = U;
                return
            } else {
                D = 0;
                q = I
            }
            while (1) {
                f = q + 16 | 0;
                l = s[f >> 2] | 0;
                h = l & 3;
                p = (h | 0) == 0;
                if (p) {
                    break
                }
                s[n >> 2] = q;
                B = s[q >> 2] | 0;
                d = (B | 0) == (0 | 0);
                if (d) {
                    R = 15;
                    break
                } else {
                    P = q;
                    q = B;
                    D = P
                }
            }
            if ((R | 0) == 15) {
                c = U;
                return
            }
            v = (D | 0) == (0 | 0);
            g = s[q >> 2] | 0;
            if (v) {
                s[r >> 2] = g
            } else {
                s[D >> 2] = g
            }
            y = s[q >> 2] | 0;
            b = (y | 0) == (0 | 0);
            if (b) {
                w = e + 184 | 0;
                s[w >> 2] = D
            }
            s[q >> 2] = 0;
            s[i >> 2] = 1;
            E = q + 12 | 0;
            S = s[E >> 2] | 0;
            x = e + 176 | 0;
            s[x >> 2] = S;
            T = (q | 0) == (0 | 0);
            if (T) {
                c = U;
                return
            }
            N = q + 4 | 0;
            Ar(N);
            c = U;
            return
        }

        function Cr(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0;
            var N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0;
            var X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0;
            var ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0;
            var Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0;
            var Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0;
            var En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0;
            var Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0;
            $n = c;
            c = c + 16 | 0;
            kn = $n;
            o = e + 172 | 0;
            u = s[o >> 2] | 0;
            z = e + 192 | 0;
            et = s[z >> 2] | 0;
            ct = (et | 0) == (0 | 0);
            if (ct) {
                Vt = Ds(1, 20) | 0;
                rn = Vt + 4 | 0;
                kr(rn) | 0;
                Rn = Vt
            } else {
                Tt = s[et >> 2] | 0;
                s[z >> 2] = Tt;
                Ht = et + 16 | 0;
                s[Ht >> 2] = 0;
                Rn = et
            }
            s[Rn >> 2] = 0;
            vn = Rn + 12 | 0;
            s[vn >> 2] = 0;
            a = e + 180 | 0;
            w = s[a >> 2] | 0;
            M = (w | 0) == (0 | 0);
            if (M) {
                s[a >> 2] = Rn;
                r = e + 184 | 0;
                i = r
            } else {
                B = e + 184 | 0;
                j = s[B >> 2] | 0;
                s[j >> 2] = Rn;
                i = B
            }
            s[i >> 2] = Rn;
            F = t & 3;
            I = Rn + 16 | 0;
            s[I >> 2] = F;
            Tr(e, 1) | 0;
            q = e + 88 | 0;
            R = s[q >> 2] | 0;
            U = (R | 0) == 0;
            e: do {
                if (U) {
                    W = e + 96 | 0;
                    X = s[W >> 2] | 0;
                    V = (X | 0) == 0;
                    do {
                        if (V) {
                            $ = (n | 0) == (0 | 0);
                            J = n + 4 | 0;
                            K = kn + 4 | 0;
                            if ($) {
                                P = kn;
                                Vn = 20
                            } else {
                                H = kn;
                                $t = n;
                                Kt = kn;
                                Zt = J;
                                tn = K;
                                Vn = 19
                            }
                        } else {
                            Q = e + 44 | 0;
                            G = s[Q >> 2] | 0;
                            Y = or(G) | 0;
                            Z = (Y | 0) < 0;
                            tt = (n | 0) == (0 | 0);
                            nt = n + 4 | 0;
                            rt = kn + 4 | 0;
                            if (!Z) {
                                if (tt) {
                                    P = kn;
                                    Vn = 20;
                                    break
                                } else {
                                    H = kn;
                                    $t = n;
                                    Kt = kn;
                                    Zt = nt;
                                    tn = rt;
                                    Vn = 19;
                                    break
                                }
                            }
                            if (tt) {
                                Hn = 1;
                                while (1) {
                                    it = s[I >> 2] | 0;
                                    st = it & 3;
                                    ot = (st | 0) == 0;
                                    if (ot) {
                                        Fn = Hn;
                                        Vn = 26;
                                        break e
                                    }
                                    ut = s[Q >> 2] | 0;
                                    at = pr(ut) | 0;
                                    ft = (at | 0) == (0 | 0);
                                    if (ft) {
                                        jn = -1;
                                        Vn = 27;
                                        break e
                                    }
                                    _n(e, at) | 0;
                                    wn(at);
                                    lt = Mr(e, 0, 15) | 0;
                                    ht = (lt | 0) > 0;
                                    if (ht) {
                                        Hn = lt
                                    } else {
                                        jn = lt;
                                        Vn = 27;
                                        break e
                                    }
                                }
                            } else {
                                Pn = 1;
                                while (1) {
                                    pt = s[I >> 2] | 0;
                                    dt = pt & 3;
                                    vt = (dt | 0) == 0;
                                    if (vt) {
                                        Fn = Pn;
                                        Vn = 26;
                                        break e
                                    }
                                    mt = s[Q >> 2] | 0;
                                    yt = pr(mt) | 0;
                                    bt = (yt | 0) == (0 | 0);
                                    if (bt) {
                                        jn = -1;
                                        Vn = 27;
                                        break e
                                    }
                                    _n(e, yt) | 0;
                                    wn(yt);
                                    Et(0, kn | 0) | 0;
                                    wt = s[n >> 2] | 0;
                                    St = s[kn >> 2] | 0;
                                    xt = wt - St | 0;
                                    Nt = xt * 1e3 | 0;
                                    Ct = s[nt >> 2] | 0;
                                    kt = s[rt >> 2] | 0;
                                    Lt = Ct - kt | 0;
                                    At = (Lt | 0) / 1e6 & -1;
                                    Ot = At + Nt | 0;
                                    Mt = (Ot | 0) < 0;
                                    _t = Mt ? 0 : Ot;
                                    Dt = _t >>> 0 > 15;
                                    qn = Dt ? 15 : _t;
                                    Pt = Mr(e, 0, qn) | 0;
                                    Bt = (Pt | 0) > 0;
                                    if (Bt) {
                                        Pn = Pt
                                    } else {
                                        jn = Pt;
                                        Vn = 27;
                                        break e
                                    }
                                }
                            }
                        }
                    } while (0);
                    if ((Vn | 0) == 19) {
                        Dn = 1;
                        while (1) {
                            Ut = s[I >> 2] | 0;
                            zt = Ut & 3;
                            Wt = (zt | 0) == 0;
                            if (Wt) {
                                Fn = Dn;
                                Vn = 26;
                                break e
                            }
                            Et(0, kn | 0) | 0;
                            Xt = s[$t >> 2] | 0;
                            Jt = s[Kt >> 2] | 0;
                            Qt = Xt - Jt | 0;
                            Gt = Qt * 1e3 | 0;
                            Yt = s[Zt >> 2] | 0;
                            en = s[tn >> 2] | 0;
                            nn = Yt - en | 0;
                            sn = (nn | 0) / 1e6 & -1;
                            on = sn + Gt | 0;
                            un = (on | 0) < 0;
                            an = un ? 0 : on;
                            fn = Mr(e, 0, an) | 0;
                            ln = (fn | 0) > 0;
                            if (ln) {
                                Dn = fn
                            } else {
                                jn = fn;
                                Vn = 27;
                                break
                            }
                        }
                    } else if ((Vn | 0) == 20) {
                        Bn = 1;
                        while (1) {
                            jt = s[I >> 2] | 0;
                            Ft = jt & 3;
                            It = (Ft | 0) == 0;
                            if (It) {
                                Fn = Bn;
                                Vn = 26;
                                break e
                            }
                            qt = Mr(e, 0, -1) | 0;
                            Rt = (qt | 0) > 0;
                            if (Rt) {
                                Bn = qt
                            } else {
                                jn = qt;
                                Vn = 27;
                                break
                            }
                        }
                    }
                } else {
                    cn = Rn + 4 | 0;
                    hn = e + 172 | 0;
                    pn = Or(cn, hn, n) | 0;
                    dn = (pn | 0) < 1;
                    if (dn) {
                        jn = pn;
                        Vn = 27
                    } else {
                        Fn = pn;
                        Vn = 26
                    }
                }
            } while (0);
            if ((Vn | 0) == 26) {
                mn = s[q >> 2] | 0;
                gn = (mn | 0) == 0;
                if (gn) {
                    jn = Fn;
                    Vn = 27
                } else {
                    Mn = Fn
                }
            }
            do {
                if ((Vn | 0) == 27) {
                    yn = s[I >> 2] | 0;
                    bn = yn & 128;
                    s[I >> 2] = bn;
                    En = e + 188 | 0;
                    s[En >> 2] = 0;
                    Sn = s[o >> 2] | 0;
                    xn = (Sn | 0) == 0;
                    if (!xn) {
                        x = Rn + 4 | 0;
                        T = e + 172 | 0;
                        Or(x, T, 0) | 0;
                        Mn = jn;
                        break
                    }
                    Wn = s[a >> 2] | 0;
                    Tn = (Wn | 0) == (0 | 0);
                    t: do {
                        if (Tn) {
                            zn = 0
                        } else {
                            Ln = 0;
                            Xn = Wn;
                            while (1) {
                                Nn = Xn + 16 | 0;
                                Cn = s[Nn >> 2] | 0;
                                f = Cn & 3;
                                l = (f | 0) == 0;
                                if (l) {
                                    break
                                }
                                s[En >> 2] = Xn;
                                Un = s[Xn >> 2] | 0;
                                h = (Un | 0) == (0 | 0);
                                if (h) {
                                    zn = 0;
                                    break t
                                } else {
                                    An = Xn;
                                    Xn = Un;
                                    Ln = An
                                }
                            }
                            p = (Ln | 0) == (0 | 0);
                            d = s[Xn >> 2] | 0;
                            if (p) {
                                s[a >> 2] = d
                            } else {
                                s[Ln >> 2] = d
                            }
                            v = s[Xn >> 2] | 0;
                            m = (v | 0) == (0 | 0);
                            if (m) {
                                g = e + 184 | 0;
                                s[g >> 2] = Ln
                            }
                            s[Xn >> 2] = 0;
                            s[o >> 2] = 1;
                            y = Xn + 12 | 0;
                            b = s[y >> 2] | 0;
                            E = e + 176 | 0;
                            s[E >> 2] = b;
                            zn = Xn
                        }
                    } while (0);
                    S = (zn | 0) == (Rn | 0);
                    if (S) {
                        Mn = jn
                    } else {
                        gt(3864 | 0, 3816 | 0, 212, 3880 | 0)
                    }
                }
            } while (0);
            N = (Mn | 0) > 0;
            if (N) {
                C = s[I >> 2] | 0;
                k = C & 128;
                L = (k | 0) == 0;
                On = L ? Mn : -1;
                In = On
            } else {
                In = Mn
            }
            A = s[o >> 2] | 0;
            O = (A | 0) == 1;
            if (!O) {
                gt(3904 | 0, 3816 | 0, 220, 3880 | 0)
            }
            s[o >> 2] = u;
            _ = (Rn | 0) == (0 | 0);
            if (_) {
                c = $n;
                return In | 0
            }
            D = s[z >> 2] | 0;
            s[Rn >> 2] = D;
            s[z >> 2] = Rn;
            c = $n;
            return In | 0
        }

        function kr(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0;
            r = c;
            s[e >> 2] = 0;
            t = e + 4 | 0;
            s[t >> 2] = -1;
            c = r;
            return 0
        }

        function Lr(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0;
            r = c;
            s[e >> 2] = -1;
            t = e + 4 | 0;
            s[t >> 2] = -1;
            c = r;
            return
        }

        function Ar(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0;
            f = c;
            c = c + 16 | 0;
            u = f;
            s[e >> 2] = 1;
            t = e + 4 | 0;
            n = s[t >> 2] | 0;
            r = (n | 0) > -1;
            if (!r) {
                c = f;
                return
            }
            s[u >> 2] = 0;
            i = Rt(n | 0, u | 0, 4) | 0;
            o = (i | 0) < 0;
            if (o) {
                Ot(3928 | 0)
            }
            s[t >> 2] = -1;
            c = f;
            return
        }

        function Or(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0;
            var N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0;
            var X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0;
            G = c;
            c = c + 16 | 0;
            K = G + 8 | 0;
            J = G;
            i = s[e >> 2] | 0;
            o = (i | 0) == 0;
            e: do {
                if (o) {
                    y = (n | 0) == (0 | 0);
                    if (y) {
                        r = -1;
                        c = G;
                        return r | 0
                    }
                    Et(0, K | 0) | 0;
                    A = s[n >> 2] | 0;
                    q = s[K >> 2] | 0;
                    z = A - q | 0;
                    W = z * 1e3 | 0;
                    X = n + 4 | 0;
                    V = s[X >> 2] | 0;
                    $ = K + 4 | 0;
                    u = s[$ >> 2] | 0;
                    a = V - u | 0;
                    f = (a | 0) / 1e6 & -1;
                    l = f + W | 0;
                    h = (l | 0) < 0;
                    p = h ? 0 : l;
                    d = (p | 0) == 0;
                    if (!d) {
                        v = (p | 0) > 0;
                        if (!v) {
                            gt(4312 | 0, 4088 | 0, 33, 4328 | 0)
                        }
                        m = (p | 0) / 1e3 & -1;
                        s[K >> 2] = m;
                        g = (p | 0) % 1e3 & -1;
                        b = g * 1e6 | 0;
                        w = K + 4 | 0;
                        s[w >> 2] = b;
                        E = Dt(K | 0, J | 0) | 0;
                        S = (E | 0) == 0;
                        if (!S) {
                            x = zt() | 0;
                            while (1) {
                                T = s[x >> 2] | 0;
                                N = (T | 0) == 4;
                                if (!N) {
                                    break e
                                }
                                C = J;
                                k = C;
                                L = s[k >> 2] | 0;
                                O = C + 4 | 0;
                                M = O;
                                _ = s[M >> 2] | 0;
                                D = K;
                                P = D;
                                s[P >> 2] = L;
                                H = D + 4 | 0;
                                B = H;
                                s[B >> 2] = _;
                                j = Dt(K | 0, J | 0) | 0;
                                F = (j | 0) == 0;
                                if (F) {
                                    break
                                }
                            }
                        }
                    }
                }
            } while (0);
            I = s[e >> 2] | 0;
            R = (I | 0) == 0;
            U = R & 1;
            s[e >> 2] = 0;
            r = U;
            c = G;
            return r | 0
        }

        function Mr(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0;
            var V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0;
            var ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                yt = 0;
            yt = c;
            c = c + 16 | 0;
            vt = yt + 8 | 0;
            dt = yt;
            u = e + 196 | 0;
            a = s[u >> 2] | 0;
            w = a + 12 | 0;
            M = s[w >> 2] | 0;
            U = (M | 0) == 0;
            if (U) {
                H = (n | 0) == 0;
                if (H) {
                    r = -1;
                    c = yt;
                    return r | 0
                }
                B = (n | 0) > 0;
                if (!B) {
                    gt(4312 | 0, 4088 | 0, 33, 4328 | 0)
                }
                j = (n | 0) / 1e3 & -1;
                s[vt >> 2] = j;
                F = (n | 0) % 1e3 & -1;
                I = F * 1e6 | 0;
                q = vt + 4 | 0;
                s[q >> 2] = I;
                R = Dt(vt | 0, dt | 0) | 0;
                z = (R | 0) == 0;
                if (z) {
                    r = 1;
                    c = yt;
                    return r | 0
                }
                W = zt() | 0;
                while (1) {
                    X = s[W >> 2] | 0;
                    V = (X | 0) == 4;
                    if (!V) {
                        r = 1;
                        mt = 25;
                        break
                    }
                    $ = dt;
                    J = $;
                    K = s[J >> 2] | 0;
                    Q = $ + 4 | 0;
                    G = Q;
                    Y = s[G >> 2] | 0;
                    et = vt;
                    tt = et;
                    s[tt >> 2] = K;
                    nt = et + 4 | 0;
                    rt = nt;
                    s[rt >> 2] = Y;
                    it = Dt(vt | 0, dt | 0) | 0;
                    st = (it | 0) == 0;
                    if (st) {
                        r = 1;
                        mt = 25;
                        break
                    }
                }
                if ((mt | 0) == 25) {
                    c = yt;
                    return r | 0
                }
            }
            Z = (t | 0) == (0 | 0);
            if (!Z) {
                ot = a + 28 | 0;
                ut = s[ot >> 2] | 0;
                at = t + 4 | 0;
                s[at >> 2] = ut
            }
            ft = a + 32 | 0;
            f = s[ft >> 2] | 0;
            l = (f | 0) == (0 | 0);
            if (!l) {
                Ho[f & 7](e, -1) | 0
            }
            h = s[w >> 2] | 0;
            p = (h | 0) == 0;
            if (p) {
                gt(4272 | 0, 4088 | 0, 240, 4280 | 0)
            }
            d = a + 16 | 0;
            v = s[d >> 2] | 0;
            m = It(v | 0, h | 0, n | 0) | 0;
            g = (m | 0) < 1;
            if (g) {
                r = m;
                c = yt;
                return r | 0
            }
            y = s[w >> 2] | 0;
            b = a + 20 | 0;
            ht = y;
            pt = m;
            e: while (1) {
                ct = ht;
                while (1) {
                    lt = ct + -1 | 0;
                    E = (ct | 0) > 0;
                    if (!E) {
                        break e
                    }
                    S = s[d >> 2] | 0;
                    x = (S + (lt << 3) | 0) + 6 | 0;
                    T = i[x >> 1] | 0;
                    N = T << 16 >> 16 == 0;
                    if (N) {
                        ct = lt
                    } else {
                        break
                    }
                }
                C = s[b >> 2] | 0;
                k = C + (lt << 2) | 0;
                L = s[k >> 2] | 0;
                A = (L | 0) == (0 | 0);
                if (A) {
                    _ = S
                } else {
                    Ho[L & 7](e, lt) | 0;
                    o = s[d >> 2] | 0;
                    _ = o
                }
                O = (_ + (lt << 3) | 0) + 6 | 0;
                i[O >> 1] = 0;
                D = pt + -1 | 0;
                ht = lt;
                pt = D
            }
            P = (pt | 0) == 0;
            if (P) {
                r = 1;
                c = yt;
                return r | 0
            } else {
                gt(4304 | 0, 4088 | 0, 253, 4280 | 0)
            }
            return 0 | 0
        }

        function _r(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0;
            var x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0;
            var z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0;
            $ = c;
            n = Ds(1, 36) | 0;
            r = e + 196 | 0;
            s[r >> 2] = n;
            m = n + 24 | 0;
            k = n + 28 | 0;
            s[k >> 2] = -1;
            s[m >> 2] = -1;
            F = e + 88 | 0;
            R = s[F >> 2] | 0;
            U = (R | 0) == 0;
            if (U) {
                t = 0;
                c = $;
                return t | 0
            }
            z = vt(m | 0) | 0;
            W = (z | 0) == 0;
            if (W) {
                g = s[m >> 2] | 0;
                Dr(e, g, 1);
                y = s[r >> 2] | 0;
                b = s[y >> 2] | 0;
                w = y + 12 | 0;
                s[w >> 2] = b;
                E = y + 16 | 0;
                S = s[E >> 2] | 0;
                x = s[w >> 2] | 0;
                T = x << 3;
                N = Ps(S, T) | 0;
                s[E >> 2] = N;
                C = y + 20 | 0;
                L = s[C >> 2] | 0;
                A = s[w >> 2] | 0;
                O = A << 2;
                M = Ps(L, O) | 0;
                s[C >> 2] = M;
                _ = s[E >> 2] | 0;
                D = y + 4 | 0;
                P = s[D >> 2] | 0;
                H = b << 3;
                oo(_ | 0, P | 0, H | 0) | 0;
                B = s[C >> 2] | 0;
                j = y + 8 | 0;
                I = s[j >> 2] | 0;
                q = b << 2;
                oo(B | 0, I | 0, q | 0) | 0;
                t = 0;
                c = $;
                return t | 0
            }
            X = s[e >> 2] | 0;
            i = (X | 0) == 1381123450;
            if (!i) {
                gt(4208 | 0, 4240 | 0, 150, 4256 | 0)
            }
            o = zt() | 0;
            u = s[o >> 2] | 0;
            a = e + 12 | 0;
            s[a >> 2] = u;
            f = e + 16 | 0;
            s[f >> 2] = -2;
            l = e + 20 | 0;
            s[l >> 2] = 5;
            h = e + 24 | 0;
            s[h >> 2] = 3936;
            p = e + 28 | 0;
            s[p >> 2] = 3960;
            d = s[80 >> 2] | 0;
            v = (d | 0) > 0;
            if (!v) {
                t = -1;
                c = $;
                return t | 0
            }
            mn(e, 0) | 0;
            t = -1;
            c = $;
            return t | 0
        }

        function Dr(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0;
            var k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0;
            var $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0;
            rt = c;
            c = c + 32 | 0;
            Y = rt;
            G = rt + 16 | 0;
            r = e + 196 | 0;
            o = s[r >> 2] | 0;
            b = s[o >> 2] | 0;
            O = b + 1 | 0;
            s[o >> 2] = O;
            s[G >> 2] = b;
            R = s[80 >> 2] | 0;
            V = (R | 0) > 4;
            if (V) {
                $ = s[g >> 2] | 0;
                s[Y >> 2] = 4144;
                Z = Y + 4 | 0;
                s[Z >> 2] = b;
                et = Y + 8 | 0;
                s[et >> 2] = t;
                tt = Y + 12 | 0;
                s[tt >> 2] = n;
                Yt($ | 0, 4112 | 0, Y | 0) | 0
            }
            J = o + 4 | 0;
            K = s[J >> 2] | 0;
            Q = s[o >> 2] | 0;
            u = Q << 3;
            a = Ps(K, u) | 0;
            s[J >> 2] = a;
            f = o + 8 | 0;
            l = s[f >> 2] | 0;
            h = s[o >> 2] | 0;
            p = h << 2;
            d = Ps(l, p) | 0;
            s[f >> 2] = d;
            v = s[G >> 2] | 0;
            m = s[J >> 2] | 0;
            y = m + (v << 3) | 0;
            w = y;
            E = w;
            s[E >> 2] = 0;
            S = w + 4 | 0;
            x = S;
            s[x >> 2] = 0;
            T = s[J >> 2] | 0;
            N = T + (v << 3) | 0;
            s[N >> 2] = t;
            C = (T + (v << 3) | 0) + 4 | 0;
            i[C >> 1] = 1;
            k = s[f >> 2] | 0;
            L = k + (v << 2) | 0;
            s[L >> 2] = n;
            A = e + 116 | 0;
            M = s[A >> 2] | 0;
            _ = (M | 0) == 0;
            if (!_) {
                D = o + 28 | 0;
                P = s[D >> 2] | 0;
                H = (P | 0) > -1;
                if (H) {
                    Rt(P | 0, G | 0, 4) | 0;
                    c = rt;
                    return
                } else {
                    gt(4160 | 0, 4184 | 0, 85, 4144 | 0)
                }
            }
            B = e + 88 | 0;
            j = s[B >> 2] | 0;
            F = (j | 0) == 0;
            if (!F) {
                c = rt;
                return
            }
            I = s[o >> 2] | 0;
            q = o + 12 | 0;
            s[q >> 2] = I;
            U = s[J >> 2] | 0;
            z = o + 16 | 0;
            s[z >> 2] = U;
            W = s[f >> 2] | 0;
            X = o + 20 | 0;
            s[X >> 2] = W;
            c = rt;
            return
        }

        function Pr(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0;
            var N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0;
            U = c;
            c = c + 16 | 0;
            I = U;
            F = U + 8 | 0;
            n = e + 196 | 0;
            r = s[n >> 2] | 0;
            m = s[80 >> 2] | 0;
            L = (m | 0) > 4;
            if (L) {
                _ = s[g >> 2] | 0;
                D = s[r >> 2] | 0;
                s[I >> 2] = 4048;
                q = I + 4 | 0;
                s[q >> 2] = D;
                Yt(_ | 0, 4024 | 0, I | 0) | 0
            }
            P = r + 24 | 0;
            H = s[P >> 2] | 0;
            B = $t(H | 0, F | 0, 8) | 0;
            j = e + 88 | 0;
            i = s[j >> 2] | 0;
            o = (i | 0) == 0;
            if (o) {
                gt(4072 | 0, 4088 | 0, 225, 4048 | 0)
            } else {
                u = s[n >> 2] | 0;
                a = s[u >> 2] | 0;
                f = u + 12 | 0;
                s[f >> 2] = a;
                l = u + 16 | 0;
                h = s[l >> 2] | 0;
                p = s[f >> 2] | 0;
                d = p << 3;
                v = Ps(h, d) | 0;
                s[l >> 2] = v;
                y = u + 20 | 0;
                b = s[y >> 2] | 0;
                w = s[f >> 2] | 0;
                E = w << 2;
                S = Ps(b, E) | 0;
                s[y >> 2] = S;
                x = s[l >> 2] | 0;
                T = u + 4 | 0;
                N = s[T >> 2] | 0;
                C = a << 3;
                oo(x | 0, N | 0, C | 0) | 0;
                k = s[y >> 2] | 0;
                A = u + 8 | 0;
                O = s[A >> 2] | 0;
                M = a << 2;
                oo(k | 0, O | 0, M | 0) | 0;
                c = U;
                return B | 0
            }
            return 0 | 0
        }

        function Hr(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0;
            var x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0;
            _ = c;
            t = e + 196 | 0;
            n = s[t >> 2] | 0;
            v = e + 88 | 0;
            T = s[v >> 2] | 0;
            N = (T | 0) == 0;
            if (!N) {
                C = n + 24 | 0;
                k = s[C >> 2] | 0;
                _t(k | 0) | 0;
                L = n + 28 | 0;
                A = s[L >> 2] | 0;
                _t(A | 0) | 0;
                s[L >> 2] = -1;
                s[C >> 2] = -1
            }
            O = n + 4 | 0;
            r = s[O >> 2] | 0;
            i = (r | 0) == (0 | 0);
            if (!i) {
                _s(r);
                s[O >> 2] = 0;
                o = s[v >> 2] | 0;
                u = (o | 0) == 0;
                if (u) {
                    a = n + 16 | 0;
                    s[a >> 2] = 0
                }
            }
            f = n + 8 | 0;
            l = s[f >> 2] | 0;
            h = (l | 0) == (0 | 0);
            if (!h) {
                _s(l);
                s[f >> 2] = 0;
                p = s[v >> 2] | 0;
                d = (p | 0) == 0;
                if (d) {
                    m = n + 20 | 0;
                    s[m >> 2] = 0
                }
            }
            g = n + 16 | 0;
            y = s[g >> 2] | 0;
            b = (y | 0) == (0 | 0);
            if (!b) {
                _s(y);
                s[g >> 2] = 0
            }
            w = n + 20 | 0;
            E = s[w >> 2] | 0;
            S = (E | 0) == (0 | 0);
            if (S) {
                x = s[t >> 2] | 0;
                _s(x);
                s[t >> 2] = 0;
                c = _;
                return 0
            }
            _s(E);
            s[w >> 2] = 0;
            x = s[t >> 2] | 0;
            _s(x);
            s[t >> 2] = 0;
            c = _;
            return 0
        }

        function Br(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0;
            var W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0;
            var lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0;
            yt = c;
            c = c + 32 | 0;
            pt = yt;
            lt = yt + 16 | 0;
            o = e + 44 | 0;
            u = s[o >> 2] | 0;
            w = or(u) | 0;
            M = (w | 0) < 0;
            if (M) {
                c = yt;
                return 0
            }
            U = e + 96 | 0;
            Z = s[U >> 2] | 0;
            ot = (Z | 0) == 0;
            if (!ot) {
                Dr(e, w, 2);
                c = yt;
                return 0
            }
            ut = e + 196 | 0;
            at = s[ut >> 2] | 0;
            ft = s[at >> 2] | 0;
            a = at + 4 | 0;
            ht = ft;
            while (1) {
                ct = ht + -1 | 0;
                f = (ht | 0) > 0;
                if (!f) {
                    t = 0;
                    break
                }
                l = s[a >> 2] | 0;
                h = l + (ct << 3) | 0;
                p = s[h >> 2] | 0;
                d = (p | 0) == (w | 0);
                if (d) {
                    t = 1;
                    break
                } else {
                    ht = ct
                }
            }
            s[lt >> 2] = ct;
            v = s[80 >> 2] | 0;
            m = (v | 0) > 4;
            if (m) {
                y = s[g >> 2] | 0;
                s[pt >> 2] = 4008;
                dt = pt + 4 | 0;
                s[dt >> 2] = ct;
                vt = pt + 8 | 0;
                s[vt >> 2] = w;
                mt = pt + 12 | 0;
                s[mt >> 2] = ft;
                Yt(y | 0, 3984 | 0, pt | 0) | 0
            }
            if (t) {
                b = s[at >> 2] | 0;
                E = (ht | 0) < (b | 0);
                if (E) {
                    S = b - ct | 0;
                    x = S + -1 | 0;
                    T = s[a >> 2] | 0;
                    N = T + (ct << 3) | 0;
                    C = T + (ht << 3) | 0;
                    k = x << 3;
                    uo(N | 0, C | 0, k | 0) | 0;
                    L = at + 8 | 0;
                    A = s[L >> 2] | 0;
                    O = A + (ct << 2) | 0;
                    _ = A + (ht << 2) | 0;
                    uo(O | 0, _ | 0, x | 0) | 0;
                    n = s[at >> 2] | 0;
                    r = L;
                    P = n
                } else {
                    i = at + 8 | 0;
                    r = i;
                    P = b
                }
                D = P + -1 | 0;
                s[at >> 2] = D;
                H = s[a >> 2] | 0;
                B = s[at >> 2] | 0;
                j = B << 3;
                F = Ps(H, j) | 0;
                s[a >> 2] = F;
                I = s[r >> 2] | 0;
                q = s[at >> 2] | 0;
                R = q << 2;
                z = Ps(I, R) | 0;
                s[r >> 2] = z;
                s[lt >> 2] = 0
            }
            W = e + 116 | 0;
            X = s[W >> 2] | 0;
            V = (X | 0) == 0;
            if (!V) {
                $ = at + 28 | 0;
                J = s[$ >> 2] | 0;
                Rt(J | 0, lt | 0, 4) | 0;
                c = yt;
                return 0
            }
            K = e + 88 | 0;
            Q = s[K >> 2] | 0;
            G = (Q | 0) == 0;
            if (!G) {
                c = yt;
                return 0
            }
            Y = s[at >> 2] | 0;
            et = at + 12 | 0;
            s[et >> 2] = Y;
            tt = s[a >> 2] | 0;
            nt = at + 16 | 0;
            s[nt >> 2] = tt;
            rt = at + 8 | 0;
            it = s[rt >> 2] | 0;
            st = at + 20 | 0;
            s[st >> 2] = it;
            c = yt;
            return 0
        }

        function jr(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0;
            h = c;
            xr(e) | 0;
            n = e + 96 | 0;
            r = s[n >> 2] | 0;
            i = (r | 0) == 0;
            if (!i) {
                o = e + 44 | 0;
                u = s[o >> 2] | 0;
                a = pr(u) | 0;
                f = (a | 0) == (0 | 0);
                if (!f) {
                    _n(e, a) | 0;
                    Tr(e, 0) | 0;
                    wn(a);
                    c = h;
                    return 0
                }
            }
            Tr(e, 0) | 0;
            c = h;
            return 0
        }

        function Fr(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0;
            p = c;
            n = s[e >> 2] | 0;
            r = (n | 0) == 1381123450;
            if (!r) {
                gt(4408 | 0, 4440 | 0, 150, 4456 | 0)
            }
            i = e + 16 | 0;
            s[i >> 2] = -1;
            o = e + 20 | 0;
            s[o >> 2] = 3;
            u = e + 24 | 0;
            s[u >> 2] = 4344;
            a = e + 28 | 0;
            s[a >> 2] = 4368;
            f = s[80 >> 2] | 0;
            l = (f | 0) > 0;
            if (!l) {
                c = p;
                return -1
            }
            mn(e, 0) | 0;
            c = p;
            return -1
        }

        function Ir(e, t, n, r) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            var i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0;
            var V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0;
            var pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0;
            var Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0;
            var en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0;
            sn = c;
            f = yn() | 0;
            s[f >> 2] = t;
            l = f + 4 | 0;
            s[l >> 2] = n;
            S = f + 8 | 0;
            s[S >> 2] = r;
            D = e + 20 | 0;
            W = s[D >> 2] | 0;
            tt = e + 24 | 0;
            pt = s[tt >> 2] | 0;
            Nt = e + 28 | 0;
            Bt = s[Nt >> 2] | 0;
            $t = e + 32 | 0;
            h = s[$t >> 2] | 0;
            kn(f, W, pt, Bt, h);
            p = s[e >> 2] | 0;
            d = (p | 0) == (t | 0);
            if (d) {
                v = e + 4 | 0;
                m = s[v >> 2] | 0;
                g = (m | 0) == (n | 0);
                if (g) {
                    y = e + 8 | 0;
                    b = s[y >> 2] | 0;
                    w = (b | 0) == (r | 0);
                    if (w) {
                        E = s[l >> 2] | 0;
                        x = (E | 0) == (n | 0);
                        T = s[S >> 2] | 0;
                        N = (T | 0) == (r | 0);
                        tn = x & N;
                        if (!tn) {
                            I = rt(T, E) | 0;
                            ei(f, e, I);
                            u = f;
                            c = sn;
                            return u | 0
                        }
                        C = e + 12 | 0;
                        k = s[C >> 2] | 0;
                        L = f + 12 | 0;
                        s[L >> 2] = k;
                        A = e + 16 | 0;
                        O = s[A >> 2] | 0;
                        M = f + 16 | 0;
                        s[M >> 2] = O;
                        _ = f + 40 | 0;
                        s[_ >> 2] = 4;
                        P = f + 56 | 0;
                        s[P >> 2] = e;
                        H = e + 44 | 0;
                        B = s[H >> 2] | 0;
                        j = B + 1 | 0;
                        s[H >> 2] = j;
                        F = (B | 0) > -2;
                        if (F) {
                            u = f;
                            c = sn;
                            return u | 0
                        } else {
                            gt(5904 | 0, 5912 | 0, 87, 5928 | 0)
                        }
                    } else {
                        Yt = 0
                    }
                } else {
                    Yt = 0
                }
            } else {
                Yt = 0
            }
            while (1) {
                q = 5944 + (Yt * 12 | 0) | 0;
                R = s[q >> 2] | 0;
                U = (R | 0) == (p | 0);
                if (U) {
                    a = q;
                    break
                }
                z = Yt << 1;
                X = z | 1;
                V = R >>> 0 < p >>> 0;
                $ = V & 1;
                i = $ + X | 0;
                J = (i | 0) < 31;
                if (J) {
                    Yt = i
                } else {
                    a = 0;
                    break
                }
            }
            K = s[f >> 2] | 0;
            Zt = 0;
            while (1) {
                Q = 5944 + (Zt * 12 | 0) | 0;
                G = s[Q >> 2] | 0;
                Y = (G | 0) == (K | 0);
                if (Y) {
                    break
                }
                Z = Zt << 1;
                et = Z | 1;
                nt = G >>> 0 < K >>> 0;
                it = nt & 1;
                o = it + et | 0;
                st = (o | 0) < 31;
                if (st) {
                    Zt = o
                } else {
                    u = 0;
                    rn = 24;
                    break
                }
            }
            if ((rn | 0) == 24) {
                c = sn;
                return u | 0
            }
            ot = (a | 0) == (0 | 0);
            ut = (Q | 0) == (0 | 0);
            en = ot | ut;
            if (en) {
                u = 0;
                c = sn;
                return u | 0
            }
            at = a + 4 | 0;
            ft = s[at >> 2] | 0;
            lt = (5944 + (Zt * 12 | 0) | 0) + 4 | 0;
            ct = s[lt >> 2] | 0;
            ht = (ft | 0) == (ct | 0);
            if (ht) {
                dt = a + 8 | 0;
                vt = s[dt >> 2] | 0;
                mt = (5944 + (Zt * 12 | 0) | 0) + 8 | 0;
                yt = s[mt >> 2] | 0;
                bt = (vt | 0) == (yt | 0);
                if (bt) {
                    wt = e + 4 | 0;
                    Et = s[wt >> 2] | 0;
                    St = (Et | 0) == (n | 0);
                    if (St) {
                        xt = e + 8 | 0;
                        Tt = s[xt >> 2] | 0;
                        Ct = (Tt | 0) == (r | 0);
                        if (Ct) {
                            kt = s[l >> 2] | 0;
                            Lt = (kt | 0) == (n | 0);
                            At = s[S >> 2] | 0;
                            Ot = (At | 0) == (r | 0);
                            nn = Lt & Ot;
                            if (!nn) {
                                Wt = rt(At, kt) | 0;
                                ei(f, e, Wt);
                                u = f;
                                c = sn;
                                return u | 0
                            }
                            Mt = e + 12 | 0;
                            _t = s[Mt >> 2] | 0;
                            Dt = f + 12 | 0;
                            s[Dt >> 2] = _t;
                            Pt = e + 16 | 0;
                            Ht = s[Pt >> 2] | 0;
                            jt = f + 16 | 0;
                            s[jt >> 2] = Ht;
                            Ft = f + 40 | 0;
                            s[Ft >> 2] = 4;
                            It = f + 56 | 0;
                            s[It >> 2] = e;
                            qt = e + 44 | 0;
                            Rt = s[qt >> 2] | 0;
                            Ut = Rt + 1 | 0;
                            s[qt >> 2] = Ut;
                            zt = (Rt | 0) > -2;
                            if (zt) {
                                u = f;
                                c = sn;
                                return u | 0
                            } else {
                                gt(5904 | 0, 5912 | 0, 87, 5928 | 0)
                            }
                        }
                    }
                }
            }
            Xt = ((4624 + (ft * 48 | 0) | 0) + (ct << 3) | 0) + 4 | 0;
            Vt = s[Xt >> 2] | 0;
            Jt = f + 40 | 0;
            s[Jt >> 2] = 1;
            Bo[Vt & 15](f, Q, e, a);
            Kt = f + 12 | 0;
            Qt = s[Kt >> 2] | 0;
            Gt = (Qt | 0) == (0 | 0);
            if (!Gt) {
                u = f;
                c = sn;
                return u | 0
            }
            wn(f);
            u = 0;
            c = sn;
            return u | 0
        }

        function qr(e, t, n, r) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            var i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0;
            D = c;
            u = n + 4 | 0;
            a = s[u >> 2] | 0;
            w = e + 4 | 0;
            N = s[w >> 2] | 0;
            C = (a | 0) == (N | 0);
            if (C) {
                k = n + 8 | 0;
                L = s[k >> 2] | 0;
                A = e + 8 | 0;
                O = s[A >> 2] | 0;
                M = (L | 0) == (O | 0);
                if (M) {
                    f = n + 12 | 0;
                    l = s[f >> 2] | 0;
                    h = e + 12 | 0;
                    s[h >> 2] = l;
                    p = n + 16 | 0;
                    d = s[p >> 2] | 0;
                    v = e + 16 | 0;
                    s[v >> 2] = d;
                    m = e + 40 | 0;
                    s[m >> 2] = 4;
                    g = e + 56 | 0;
                    s[g >> 2] = n;
                    y = n + 44 | 0;
                    b = s[y >> 2] | 0;
                    E = b + 1 | 0;
                    s[y >> 2] = E;
                    S = (b | 0) > -2;
                    if (S) {
                        c = D;
                        return
                    } else {
                        gt(5904 | 0, 5912 | 0, 87, 5928 | 0)
                    }
                } else {
                    T = O
                }
            } else {
                i = e + 8 | 0;
                o = s[i >> 2] | 0;
                T = o
            }
            x = rt(T, N) | 0;
            ei(e, n, x);
            c = D;
            return
        }

        function Rr(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0;
            f = c;
            n = e + 4 | 0;
            r = s[n >> 2] | 0;
            i = e + 8 | 0;
            o = s[i >> 2] | 0;
            u = Ir(e, t, r, o) | 0;
            c = f;
            return u | 0
        }

        function Ur(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0;
            var V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0;
            var ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0;
            var _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Zt = 0;
            var en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0;
            var En = 0;
            En = c;
            c = c + 16 | 0;
            hn = En;
            p = En + 12 | 0;
            s[p >> 2] = e;
            d = (t | 0) != (0 | 0);
            if (d) {
                s[t >> 2] = 0
            }
            C = (n | 0) == (0 | 0);
            if (C) {
                u = -1;
                c = En;
                return u | 0
            }
            j = s[n >> 2] | 0;
            J = (j | 0) == 0;
            e: do {
                if (J) {
                    Qt = 0
                } else {
                    l = n;
                    Ft = j;
                    while (1) {
                        Wt = (Ft | 0) == (e | 0);
                        mt = l + 4 | 0;
                        if (Wt) {
                            break
                        }
                        st = s[mt >> 2] | 0;
                        kt = (st | 0) == 0;
                        if (kt) {
                            Qt = 0;
                            break e
                        } else {
                            l = mt;
                            Ft = st
                        }
                    }
                    v = s[80 >> 2] | 0;
                    m = (v | 0) > 7;
                    if (m) {
                        y = s[g >> 2] | 0;
                        s[hn >> 2] = 4944;
                        pn = hn + 4 | 0;
                        s[pn >> 2] = p;
                        Yt(y | 0, 4912 | 0, hn | 0) | 0
                    }
                    if (!d) {
                        u = 0;
                        c = En;
                        return u | 0
                    }
                    b = s[p >> 2] | 0;
                    s[t >> 2] = b;
                    u = 0;
                    c = En;
                    return u | 0
                }
            } while (0);
            while (1) {
                w = 5944 + (Qt * 12 | 0) | 0;
                E = s[w >> 2] | 0;
                S = (E | 0) == (e | 0);
                if (S) {
                    break
                }
                x = Qt << 1;
                T = x | 1;
                N = E >>> 0 < e >>> 0;
                k = N & 1;
                o = k + T | 0;
                L = (o | 0) < 31;
                if (L) {
                    Qt = o
                } else {
                    u = -1;
                    wn = 43;
                    break
                }
            }
            if ((wn | 0) == 43) {
                c = En;
                return u | 0
            }
            A = (w | 0) == (0 | 0);
            if (A) {
                u = -1;
                c = En;
                return u | 0
            }
            O = s[80 >> 2] | 0;
            M = (O | 0) > 7;
            if (M) {
                _ = s[g >> 2] | 0;
                s[hn >> 2] = 4944;
                yn = hn + 4 | 0;
                s[yn >> 2] = p;
                bn = hn + 8 | 0;
                s[bn >> 2] = e;
                Yt(_ | 0, 4968 | 0, hn | 0) | 0;
                h = s[n >> 2] | 0;
                D = h
            } else {
                D = j
            }
            P = (D | 0) == 0;
            t: do {
                if (P) {
                    Gt = -1
                } else {
                    H = (5944 + (Qt * 12 | 0) | 0) + 4 | 0;
                    B = (5944 + (Qt * 12 | 0) | 0) + 8 | 0;
                    F = s[g >> 2] | 0;
                    if (d) {
                        a = n;
                        vt = D;
                        tn = -1
                    } else {
                        f = n;
                        U = D;
                        nn = -1;
                        while (1) {
                            Kt = 0;
                            while (1) {
                                I = 5944 + (Kt * 12 | 0) | 0;
                                q = s[I >> 2] | 0;
                                R = (q | 0) == (U | 0);
                                if (R) {
                                    wn = 21;
                                    break
                                }
                                z = Kt << 1;
                                W = z | 1;
                                X = q >>> 0 < U >>> 0;
                                V = X & 1;
                                i = V + W | 0;
                                $ = (i | 0) < 31;
                                if ($) {
                                    Kt = i
                                } else {
                                    sn = nn;
                                    break
                                }
                            }
                            if ((wn | 0) == 21) {
                                wn = 0;
                                K = (I | 0) == (0 | 0);
                                if (K) {
                                    sn = nn
                                } else {
                                    Q = s[H >> 2] | 0;
                                    G = (5944 + (Kt * 12 | 0) | 0) + 4 | 0;
                                    Y = s[G >> 2] | 0;
                                    Z = (Q | 0) == (Y | 0);
                                    if (Z) {
                                        et = s[B >> 2] | 0;
                                        tt = (5944 + (Kt * 12 | 0) | 0) + 8 | 0;
                                        nt = s[tt >> 2] | 0;
                                        rt = (et | 0) == (nt | 0);
                                        if (rt) {
                                            $t = 0
                                        } else {
                                            wn = 24
                                        }
                                    } else {
                                        wn = 24
                                    }
                                    if ((wn | 0) == 24) {
                                        wn = 0;
                                        it = (4624 + (Q * 48 | 0) | 0) + (Y << 3) | 0;
                                        ot = s[it >> 2] | 0;
                                        $t = ot
                                    }
                                    ut = s[80 >> 2] | 0;
                                    at = (ut | 0) > 7;
                                    if (at) {
                                        s[hn >> 2] = f;
                                        dn = hn + 4 | 0;
                                        s[dn >> 2] = U;
                                        vn = hn + 8 | 0;
                                        s[vn >> 2] = $t;
                                        Yt(F | 0, 4992 | 0, hn | 0) | 0
                                    }
                                    un = ($t | 0) < 0;
                                    fn = nn >>> 0 <= $t >>> 0;
                                    cn = fn | un;
                                    en = cn ? nn : $t;
                                    sn = en
                                }
                            }
                            ft = f + 4 | 0;
                            lt = s[ft >> 2] | 0;
                            ct = (lt | 0) == 0;
                            if (ct) {
                                Gt = sn;
                                break t
                            } else {
                                f = ft;
                                U = lt;
                                nn = sn
                            }
                        }
                    }
                    while (1) {
                        Jt = 0;
                        while (1) {
                            ht = 5944 + (Jt * 12 | 0) | 0;
                            pt = s[ht >> 2] | 0;
                            dt = (pt | 0) == (vt | 0);
                            if (dt) {
                                wn = 32;
                                break
                            }
                            gt = Jt << 1;
                            yt = gt | 1;
                            bt = pt >>> 0 < vt >>> 0;
                            wt = bt & 1;
                            r = wt + yt | 0;
                            Et = (r | 0) < 31;
                            if (Et) {
                                Jt = r
                            } else {
                                rn = tn;
                                break
                            }
                        }
                        if ((wn | 0) == 32) {
                            wn = 0;
                            St = (ht | 0) == (0 | 0);
                            if (St) {
                                rn = tn
                            } else {
                                xt = s[H >> 2] | 0;
                                Tt = (5944 + (Jt * 12 | 0) | 0) + 4 | 0;
                                Nt = s[Tt >> 2] | 0;
                                Ct = (xt | 0) == (Nt | 0);
                                if (Ct) {
                                    Lt = s[B >> 2] | 0;
                                    At = (5944 + (Jt * 12 | 0) | 0) + 8 | 0;
                                    Ot = s[At >> 2] | 0;
                                    Mt = (Lt | 0) == (Ot | 0);
                                    if (Mt) {
                                        Xt = 0
                                    } else {
                                        wn = 35
                                    }
                                } else {
                                    wn = 35
                                }
                                if ((wn | 0) == 35) {
                                    wn = 0;
                                    _t = (4624 + (xt * 48 | 0) | 0) + (Nt << 3) | 0;
                                    Dt = s[_t >> 2] | 0;
                                    Xt = Dt
                                }
                                Pt = s[80 >> 2] | 0;
                                Ht = (Pt | 0) > 7;
                                if (Ht) {
                                    s[hn >> 2] = a;
                                    mn = hn + 4 | 0;
                                    s[mn >> 2] = vt;
                                    gn = hn + 8 | 0;
                                    s[gn >> 2] = Xt;
                                    Yt(F | 0, 4992 | 0, hn | 0) | 0
                                }
                                on = (Xt | 0) < 0;
                                an = tn >>> 0 <= Xt >>> 0;
                                ln = an | on;
                                Zt = ln ? tn : Xt;
                                if (ln) {
                                    rn = Zt
                                } else {
                                    Bt = s[a >> 2] | 0;
                                    s[t >> 2] = Bt;
                                    rn = Xt
                                }
                            }
                        }
                        jt = a + 4 | 0;
                        It = s[jt >> 2] | 0;
                        qt = (It | 0) == 0;
                        if (qt) {
                            Gt = rn;
                            break
                        } else {
                            a = jt;
                            vt = It;
                            tn = rn
                        }
                    }
                }
            } while (0);
            Rt = s[80 >> 2] | 0;
            Ut = (Rt | 0) > 7;
            if (!Ut) {
                u = Gt;
                c = En;
                return u | 0
            }
            zt = s[g >> 2] | 0;
            Vt(10, zt | 0) | 0;
            u = Gt;
            c = En;
            return u | 0
        }

        function zr(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0;
            var N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0;
            var X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0;
            var ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0;
            var _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Gt = 0,
                Zt = 0;
            var en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0;
            dn = c;
            c = c + 32 | 0;
            en = dn;
            Gt = dn + 28 | 0;
            hn = dn + 24 | 0;
            s[Gt >> 2] = 0;
            a = (e | 0) != (0 | 0);
            i = a ^ 1;
            f = (t | 0) == (0 | 0);
            Zt = f & i;
            if (Zt) {
                n = 0;
                c = dn;
                return n | 0
            }
            S = (t | 0) != (0 | 0);
            D = a ? e : t;
            Vt = 0;
            while (1) {
                W = Vt << 1;
                tt = W | 1;
                ht = (tt | 0) < 31;
                if (ht) {
                    Tt = 5944 + (Vt * 12 | 0) | 0;
                    Ht = s[Tt >> 2] | 0;
                    zt = 5944 + (tt * 12 | 0) | 0;
                    l = s[zt >> 2] | 0;
                    h = Ht >>> 0 < l >>> 0;
                    if (h) {
                        break
                    }
                }
                p = tt + 1 | 0;
                d = (p | 0) < 31;
                if (d) {
                    v = 5944 + (p * 12 | 0) | 0;
                    m = s[v >> 2] | 0;
                    y = 5944 + (Vt * 12 | 0) | 0;
                    b = s[y >> 2] | 0;
                    w = m >>> 0 < b >>> 0;
                    if (w) {
                        Xt = Vt;
                        pn = 8;
                        break
                    }
                }
                E = Vt + 1 | 0;
                x = (E | 0) < 31;
                if (x) {
                    Vt = E
                } else {
                    Xt = E;
                    pn = 8;
                    break
                }
            }
            if ((pn | 0) == 8) {
                T = (Xt | 0) == 31;
                if (T) {
                    if (a) {
                        H = e + 72 | 0;
                        B = s[H >> 2] | 0;
                        j = (B | 0) == (0 | 0);
                        if (!j) {
                            pn = 15
                        }
                    } else {
                        pn = 15
                    }
                    do {
                        if ((pn | 0) == 15) {
                            if (S) {
                                F = t + 112 | 0;
                                I = s[F >> 2] | 0;
                                q = (I | 0) == (0 | 0);
                                if (q) {
                                    break
                                }
                            }
                            if (a) {
                                Q = e + 72 | 0;
                                G = s[Q >> 2] | 0;
                                it = G
                            } else {
                                it = 5008
                            }
                            if (S) {
                                Y = t + 112 | 0;
                                Z = s[Y >> 2] | 0;
                                ct = Z
                            } else {
                                ct = 5008
                            }
                            et = s[g >> 2] | 0;
                            Wt = 4472;
                            $t = -1;
                            e: while (1) {
                                s[hn >> 2] = 0;
                                nt = s[Wt >> 2] | 0;
                                rt = s[it >> 2] | 0;
                                st = (rt | 0) == 0;
                                t: do {
                                    if (st) {
                                        Jt = $t
                                    } else {
                                        r = it;
                                        ft = rt;
                                        while (1) {
                                            lt = (ft | 0) == (nt | 0);
                                            ut = r + 4 | 0;
                                            if (lt) {
                                                break
                                            }
                                            ot = s[ut >> 2] | 0;
                                            at = (ot | 0) == 0;
                                            if (at) {
                                                Jt = $t;
                                                break t
                                            } else {
                                                r = ut;
                                                ft = ot
                                            }
                                        }
                                        pt = Ur(nt, hn, ct) | 0;
                                        dt = (pt | 0) < 0;
                                        vt = s[80 >> 2] | 0;
                                        mt = (vt | 0) > 3;
                                        if (dt) {
                                            if (!mt) {
                                                Jt = $t;
                                                break
                                            }
                                            yt = s[Wt >> 2] | 0;
                                            s[en >> 2] = 5016;
                                            tn = en + 4 | 0;
                                            s[tn >> 2] = Wt;
                                            un = en + 8 | 0;
                                            s[un >> 2] = yt;
                                            Yt(et | 0, 5120 | 0, en | 0) | 0;
                                            Jt = $t;
                                            break
                                        }
                                        if (mt) {
                                            bt = s[Wt >> 2] | 0;
                                            wt = s[hn >> 2] | 0;
                                            s[en >> 2] = 5016;
                                            an = en + 4 | 0;
                                            s[an >> 2] = Wt;
                                            fn = en + 8 | 0;
                                            s[fn >> 2] = bt;
                                            ln = en + 12 | 0;
                                            s[ln >> 2] = hn;
                                            cn = en + 16 | 0;
                                            s[cn >> 2] = wt;
                                            nn = en + 20 | 0;
                                            s[nn >> 2] = pt;
                                            Yt(et | 0, 5160 | 0, en | 0) | 0
                                        }
                                        Et = $t >>> 0 > pt >>> 0;
                                        if (Et) {
                                            St = s[Wt >> 2] | 0;
                                            s[Gt >> 2] = St;
                                            xt = (pt | 0) == 0;
                                            if (xt) {
                                                Lt = St;
                                                Kt = 0;
                                                break e
                                            } else {
                                                Jt = pt
                                            }
                                        } else {
                                            Jt = $t
                                        }
                                    }
                                } while (0);
                                Nt = Wt + 4 | 0;
                                Ct = s[Nt >> 2] | 0;
                                kt = (Ct | 0) == 0;
                                if (kt) {
                                    pn = 37;
                                    break
                                } else {
                                    Wt = Nt;
                                    $t = Jt
                                }
                            }
                            if ((pn | 0) == 37) {
                                u = s[Gt >> 2] | 0;
                                Lt = u;
                                Kt = Jt
                            }
                            At = (Lt | 0) == 0;
                            if (At) {
                                Ot = s[D >> 2] | 0;
                                Mt = (Ot | 0) == 1381123450;
                                if (!Mt) {
                                    gt(5288 | 0, 5320 | 0, 150, 5336 | 0)
                                }
                                _t = D + 16 | 0;
                                s[_t >> 2] = -1;
                                Dt = D + 20 | 0;
                                s[Dt >> 2] = 3;
                                Pt = D + 24 | 0;
                                s[Pt >> 2] = 5016;
                                Bt = D + 28 | 0;
                                s[Bt >> 2] = 5200;
                                jt = s[80 >> 2] | 0;
                                Ft = (jt | 0) > 0;
                                if (!Ft) {
                                    n = -1;
                                    c = dn;
                                    return n | 0
                                }
                                mn(D, 0) | 0;
                                n = -1;
                                c = dn;
                                return n | 0
                            } else {
                                if (!a) {
                                    n = 0;
                                    c = dn;
                                    return n | 0
                                }
                                It = s[80 >> 2] | 0;
                                qt = (It | 0) > 1;
                                if (qt) {
                                    s[en >> 2] = 5016;
                                    rn = en + 4 | 0;
                                    s[rn >> 2] = Gt;
                                    sn = en + 8 | 0;
                                    s[sn >> 2] = Lt;
                                    on = en + 12 | 0;
                                    s[on >> 2] = Kt;
                                    Yt(et | 0, 5240 | 0, en | 0) | 0;
                                    o = s[Gt >> 2] | 0;
                                    Rt = o
                                } else {
                                    Rt = Lt
                                }
                                Ut = hr(e, Rt) | 0;
                                n = Ut;
                                c = dn;
                                return n | 0
                            }
                        }
                    } while (0);
                    R = s[D >> 2] | 0;
                    U = (R | 0) == 1381123450;
                    if (!U) {
                        gt(5288 | 0, 5320 | 0, 150, 5336 | 0)
                    }
                    z = D + 16 | 0;
                    s[z >> 2] = -1;
                    X = D + 20 | 0;
                    s[X >> 2] = 3;
                    V = D + 24 | 0;
                    s[V >> 2] = 5016;
                    $ = D + 28 | 0;
                    s[$ >> 2] = 5080;
                    J = s[80 >> 2] | 0;
                    K = (J | 0) > 0;
                    if (!K) {
                        n = -1;
                        c = dn;
                        return n | 0
                    }
                    mn(D, 0) | 0;
                    n = -1;
                    c = dn;
                    return n | 0
                }
            }
            N = s[g >> 2] | 0;
            Qt(5352 | 0, 41, 1, N | 0) | 0;
            C = s[D >> 2] | 0;
            k = (C | 0) == 1381123450;
            if (!k) {
                gt(5288 | 0, 5320 | 0, 150, 5336 | 0)
            }
            L = D + 16 | 0;
            s[L >> 2] = -2;
            A = D + 20 | 0;
            s[A >> 2] = 2;
            O = D + 24 | 0;
            s[O >> 2] = 5016;
            M = D + 28 | 0;
            s[M >> 2] = 5040;
            _ = s[80 >> 2] | 0;
            P = (_ | 0) > 0;
            if (!P) {
                n = -1;
                c = dn;
                return n | 0
            }
            mn(D, 0) | 0;
            n = -1;
            c = dn;
            return n | 0
        }

        function Wr(e, t, n, i) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            i = i | 0;
            var o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0;
            var L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0;
            var J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0;
            var vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0;
            _t = c;
            c = c + 32 | 0;
            xt = _t;
            p = t + 4 | 0;
            d = s[p >> 2] | 0;
            C = (d | 0) == 0;
            if (C) {
                u = e + 4 | 0;
                l = s[u >> 2] | 0;
                a = e + 8 | 0;
                h = s[a >> 2] | 0;
                o = 0;
                V = l;
                $ = h
            } else {
                j = t + 8 | 0;
                J = r[j >> 0] | 0;
                ot = J & 255;
                yt = 1 << ot;
                bt = yt + -1 | 0;
                wt = e + 4 | 0;
                Et = s[wt >> 2] | 0;
                v = bt & Et;
                m = (v | 0) == 0;
                if (m) {
                    F = Et
                } else {
                    y = bt + Et | 0;
                    b = 0 - yt | 0;
                    w = y & b;
                    s[wt >> 2] = w;
                    F = w
                }
                E = j + 1 | 0;
                S = r[E >> 0] | 0;
                x = S & 255;
                T = 1 << x;
                N = T + -1 | 0;
                k = e + 8 | 0;
                L = s[k >> 2] | 0;
                A = N & L;
                O = (A | 0) == 0;
                if (O) {
                    U = L
                } else {
                    M = N + L | 0;
                    _ = 0 - T | 0;
                    D = M & _;
                    s[k >> 2] = D;
                    U = D
                }
                P = r[j >> 0] | 0;
                H = P & 255;
                B = F >>> H;
                I = r[E >> 0] | 0;
                q = I & 255;
                R = U >>> q;
                z = B << 1;
                St = rt(z, R) | 0;
                o = St;
                V = F;
                $ = U
            }
            W = e + 16 | 0;
            X = rt($, V) | 0;
            K = X + o | 0;
            s[W >> 2] = K;
            Q = n + 16 | 0;
            G = s[Q >> 2] | 0;
            Y = n + 4 | 0;
            Z = s[Y >> 2] | 0;
            et = n + 8 | 0;
            tt = s[et >> 2] | 0;
            nt = rt(tt, Z) | 0;
            it = G >>> 0 < nt >>> 0;
            if (it) {
                gt(5792 | 0, 5464 | 0, 373, 5840 | 0)
            }
            st = s[80 >> 2] | 0;
            ut = (st | 0) > 23;
            if (ut) {
                at = s[g >> 2] | 0;
                s[xt >> 2] = 5840;
                Tt = xt + 4 | 0;
                s[Tt >> 2] = V;
                Nt = xt + 8 | 0;
                s[Nt >> 2] = $;
                Ct = xt + 12 | 0;
                s[Ct >> 2] = X;
                kt = xt + 16 | 0;
                s[kt >> 2] = K;
                Lt = xt + 20 | 0;
                s[Lt >> 2] = Z;
                At = xt + 24 | 0;
                s[At >> 2] = tt;
                Ot = xt + 28 | 0;
                s[Ot >> 2] = G;
                Yt(at | 0, 5864 | 0, xt | 0) | 0;
                f = s[W >> 2] | 0;
                ft = f
            } else {
                ft = K
            }
            lt = Ms(ft) | 0;
            ct = e + 12 | 0;
            s[ct >> 2] = lt;
            ht = (lt | 0) == (0 | 0);
            if (ht) {
                c = _t;
                return
            }
            ei(e, n, X);
            pt = s[ct >> 2] | 0;
            dt = pt + X | 0;
            vt = s[W >> 2] | 0;
            mt = vt - X | 0;
            eo(dt | 0, -128, mt | 0) | 0;
            c = _t;
            return
        }

        function Xr(e, t, n, i) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            i = i | 0;
            var o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0;
            var k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0;
            var $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0;
            var dt = 0,
                vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0;
            var Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0;
            var tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0;
            var Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0;
            var Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0,
                ur = 0;
            var ar = 0,
                fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0,
                Tr = 0,
                Nr = 0,
                Cr = 0,
                kr = 0;
            var Lr = 0,
                Ar = 0,
                Or = 0,
                Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0,
                Wr = 0,
                Xr = 0,
                Vr = 0,
                $r = 0;
            var Jr = 0,
                Kr = 0,
                Qr = 0,
                Gr = 0,
                Yr = 0,
                Zr = 0,
                ei = 0,
                ti = 0;
            ti = c;
            g = t + 4 | 0;
            y = s[g >> 2] | 0;
            Nt = (y | 0) == 0;
            if (Nt) {
                Bt = e + 4 | 0;
                $t = s[Bt >> 2] | 0;
                sn = e + 8 | 0;
                mn = s[sn >> 2] | 0;
                kn = rt(mn, $t) | 0;
                a = 0;
                _ = Bt;
                Gt = kn;
                Zn = sn
            } else {
                Fn = t + 8 | 0;
                Kn = r[Fn >> 0] | 0;
                b = Kn & 255;
                O = 1 << b;
                R = O + -1 | 0;
                Y = e + 4 | 0;
                lt = s[Y >> 2] | 0;
                wt = R & lt;
                Et = (wt | 0) == 0;
                if (Et) {
                    qt = lt
                } else {
                    St = R + lt | 0;
                    xt = 0 - O | 0;
                    Tt = St & xt;
                    s[Y >> 2] = Tt;
                    qt = Tt
                }
                Ct = Fn + 1 | 0;
                kt = r[Ct >> 0] | 0;
                Lt = kt & 255;
                At = 1 << Lt;
                Ot = At + -1 | 0;
                Mt = e + 8 | 0;
                _t = s[Mt >> 2] | 0;
                Dt = Ot & _t;
                Pt = (Dt | 0) == 0;
                if (Pt) {
                    Rt = _t
                } else {
                    Ht = Ot + _t | 0;
                    jt = 0 - At | 0;
                    Ft = Ht & jt;
                    s[Mt >> 2] = Ft;
                    Rt = Ft
                }
                It = rt(Rt, qt) | 0;
                Ut = r[Fn >> 0] | 0;
                zt = Ut & 255;
                Wt = qt >>> zt;
                Xt = r[Ct >> 0] | 0;
                Vt = Xt & 255;
                Jt = Rt >>> Vt;
                Kt = Wt << 1;
                lr = rt(Kt, Jt) | 0;
                a = lr;
                _ = Y;
                Gt = It;
                Zn = Mt
            }
            Qt = a + Gt | 0;
            Yt = e + 16 | 0;
            s[Yt >> 2] = Qt;
            Zt = Ms(Qt) | 0;
            en = e + 12 | 0;
            s[en >> 2] = Zt;
            tn = (Zt | 0) == (0 | 0);
            if (tn) {
                c = ti;
                return
            }
            nn = i + 4 | 0;
            rn = s[nn >> 2] | 0;
            on = (rn | 0) == 0;
            l = n + 4 | 0;
            d = s[l >> 2] | 0;
            if (on) {
                h = n + 8 | 0;
                v = s[h >> 2] | 0;
                u = 0;
                Sn = v
            } else {
                un = i + 8 | 0;
                an = r[un >> 0] | 0;
                fn = an & 255;
                ln = d >>> fn;
                cn = n + 8 | 0;
                hn = s[cn >> 2] | 0;
                pn = un + 1 | 0;
                dn = r[pn >> 0] | 0;
                vn = dn & 255;
                gn = hn >>> vn;
                yn = rt(gn, ln) | 0;
                u = yn;
                Sn = hn
            }
            bn = n + 4 | 0;
            wn = n + 8 | 0;
            En = rt(Sn, d) | 0;
            xn = n + 16 | 0;
            Tn = s[xn >> 2] | 0;
            Nn = En * 3 | 0;
            Cn = Tn >>> 0 < Nn >>> 0;
            if (Cn) {
                gt(5736 | 0, 5464 | 0, 403, 5768 | 0)
            }
            Ln = t + 8 | 0;
            An = Ln + 2 | 0;
            On = r[An >> 0] | 0;
            Mn = i + 8 | 0;
            _n = Mn + 2 | 0;
            Dn = r[_n >> 0] | 0;
            Pn = Dn ^ On;
            Hn = n + 12 | 0;
            Bn = s[Hn >> 2] | 0;
            jn = Pn & 1;
            In = jn << 24 >> 24 == 0;
            qn = Bn + En | 0;
            m = En + u | 0;
            Rn = Bn + m | 0;
            Un = r[Mn >> 0] | 0;
            zn = Un & 255;
            Wn = 1 << zn;
            Xn = Wn + -1 | 0;
            Vn = Mn + 1 | 0;
            $n = r[Vn >> 0] | 0;
            Jn = $n & 255;
            Qn = 1 << Jn;
            Gn = Qn + -1 | 0;
            Yn = s[Zn >> 2] | 0;
            er = Yn >>> 0 > 3;
            if (!er) {
                c = ti;
                return
            }
            tr = d >>> zn;
            f = In ? Rn : qn;
            o = In ? qn : Rn;
            nr = 0 - tr | 0;
            rr = On & 2;
            ir = rr << 24 >> 24 == 0;
            S = d;
            or = Zt;
            cr = o;
            br = f;
            kr = Bn;
            Pr = -128;
            Fr = -128;
            Xr = 0;
            Vr = 0;
            Qr = 0;
            while (1) {
                sr = s[wn >> 2] | 0;
                w = Xr >>> 0 < sr >>> 0;
                if (w) {
                    C = Xr & Gn;
                    k = (C | 0) == 0;
                    if (k) {
                        pr = cr;
                        Er = br;
                        Ar = kr
                    } else {
                        L = cr + nr | 0;
                        A = br + nr | 0;
                        pr = L;
                        Er = A;
                        Ar = kr
                    }
                } else {
                    E = 0 - S | 0;
                    x = kr + E | 0;
                    T = cr + nr | 0;
                    N = br + nr | 0;
                    pr = T;
                    Er = N;
                    Ar = x
                }
                M = s[_ >> 2] | 0;
                D = M >>> 0 > 3;
                if (D) {
                    ar = or;
                    dr = pr;
                    Sr = Er;
                    Or = Ar;
                    Br = Pr;
                    qr = Fr;
                    zr = 0;
                    Jr = Vr;
                    Yr = Qr;
                    while (1) {
                        P = s[bn >> 2] | 0;
                        H = zr >>> 0 < P >>> 0;
                        if (H) {
                            B = Or + 1 | 0;
                            j = r[Or >> 0] | 0;
                            F = Or + 2 | 0;
                            I = r[B >> 0] | 0;
                            q = zr & Xn;
                            U = (q | 0) == 0;
                            if (U) {
                                z = dr + 1 | 0;
                                W = r[dr >> 0] | 0;
                                X = Sr + 1 | 0;
                                V = r[Sr >> 0] | 0;
                                vr = z;
                                xr = X;
                                Mr = F;
                                jr = W;
                                Rr = V;
                                Kr = j;
                                Zr = I
                            } else {
                                vr = dr;
                                xr = Sr;
                                Mr = F;
                                jr = Br;
                                Rr = qr;
                                Kr = j;
                                Zr = I
                            }
                        } else {
                            vr = dr;
                            xr = Sr;
                            Mr = Or;
                            jr = Br;
                            Rr = qr;
                            Kr = Jr;
                            Zr = Yr
                        }
                        $ = ar + 1 | 0;
                        if (ir) {
                            r[ar >> 0] = Kr;
                            Q = ar + 2 | 0;
                            r[$ >> 0] = jr;
                            G = ar + 3 | 0;
                            r[Q >> 0] = Zr;
                            r[G >> 0] = Rr
                        } else {
                            r[ar >> 0] = jr;
                            J = ar + 2 | 0;
                            r[$ >> 0] = Kr;
                            K = ar + 3 | 0;
                            r[J >> 0] = Rr;
                            r[K >> 0] = Zr
                        }
                        fr = ar + 4 | 0;
                        Z = zr + 2 | 0;
                        et = s[_ >> 2] | 0;
                        tt = et & -4;
                        nt = Z >>> 0 < tt >>> 0;
                        if (nt) {
                            ar = fr;
                            dr = vr;
                            Sr = xr;
                            Or = Mr;
                            Br = jr;
                            qr = Rr;
                            zr = Z;
                            Jr = Kr;
                            Yr = Zr
                        } else {
                            break
                        }
                    }
                    p = s[bn >> 2] | 0;
                    st = p;
                    ur = fr;
                    hr = vr;
                    wr = xr;
                    Lr = Mr;
                    Hr = jr;
                    Ir = Rr;
                    Ur = Z;
                    $r = Kr;
                    Gr = Zr
                } else {
                    st = S;
                    ur = or;
                    hr = pr;
                    wr = Er;
                    Lr = Ar;
                    Hr = Pr;
                    Ir = Fr;
                    Ur = 0;
                    $r = Vr;
                    Gr = Qr
                }
                it = st & -4;
                ot = Ur >>> 0 < it >>> 0;
                if (ot) {
                    gr = hr;
                    Nr = wr;
                    Dr = Lr;
                    Wr = Ur;
                    while (1) {
                        ut = Dr + 2 | 0;
                        at = Wr & Xn;
                        ft = (at | 0) == 0;
                        if (ft) {
                            ct = gr + 1 | 0;
                            ht = Nr + 1 | 0;
                            yr = ct;
                            Cr = ht
                        } else {
                            yr = gr;
                            Cr = Nr
                        }
                        pt = Wr + 2 | 0;
                        dt = pt >>> 0 < it >>> 0;
                        if (dt) {
                            gr = yr;
                            Nr = Cr;
                            Dr = ut;
                            Wr = pt
                        } else {
                            mr = yr;
                            Tr = Cr;
                            _r = ut;
                            break
                        }
                    }
                } else {
                    mr = hr;
                    Tr = wr;
                    _r = Lr
                }
                vt = Xr + 1 | 0;
                mt = s[Zn >> 2] | 0;
                yt = mt & -4;
                bt = vt >>> 0 < yt >>> 0;
                if (bt) {
                    S = st;
                    or = ur;
                    cr = mr;
                    br = Tr;
                    kr = _r;
                    Pr = Hr;
                    Fr = Ir;
                    Xr = vt;
                    Vr = $r;
                    Qr = Gr
                } else {
                    break
                }
            }
            c = ti;
            return
        }

        function Vr(e, t, n, o) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            o = o | 0;
            var u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0;
            var L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0;
            var J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0;
            var vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0;
            var Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0;
            var nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0;
            var xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0;
            Ln = c;
            d = e + 4 | 0;
            v = s[d >> 2] | 0;
            k = e + 8 | 0;
            F = s[k >> 2] | 0;
            K = rt(F, v) | 0;
            ut = t + 8 | 0;
            bt = r[ut >> 0] | 0;
            Ot = bt & 255;
            Rt = rt(K, Ot) | 0;
            Yt = e + 16 | 0;
            s[Yt >> 2] = Rt;
            m = Ms(Rt) | 0;
            y = e + 12 | 0;
            s[y >> 2] = m;
            b = (m | 0) == (0 | 0);
            if (b) {
                c = Ln;
                return
            }
            w = ut + 1 | 0;
            E = r[w >> 0] | 0;
            S = E & 255;
            x = S >>> 5;
            T = S & 31;
            N = ut + 2 | 0;
            C = r[N >> 0] | 0;
            L = C & 255;
            A = L >>> 5;
            O = L & 31;
            M = ut + 3 | 0;
            _ = r[M >> 0] | 0;
            D = _ & 255;
            P = D >>> 5;
            H = D & 31;
            B = o + 4 | 0;
            j = s[B >> 2] | 0;
            I = (j | 0) == 0;
            f = n + 4 | 0;
            h = s[f >> 2] | 0;
            if (I) {
                l = n + 8 | 0;
                p = s[l >> 2] | 0;
                u = 0;
                tt = p
            } else {
                q = o + 8 | 0;
                R = r[q >> 0] | 0;
                U = R & 255;
                z = h >>> U;
                W = n + 8 | 0;
                X = s[W >> 2] | 0;
                V = q + 1 | 0;
                $ = r[V >> 0] | 0;
                J = $ & 255;
                Q = X >>> J;
                G = z << 1;
                gn = rt(G, Q) | 0;
                u = gn;
                tt = X
            }
            Y = n + 4 | 0;
            Z = n + 8 | 0;
            et = rt(tt, h) | 0;
            nt = n + 16 | 0;
            it = s[nt >> 2] | 0;
            st = et + u | 0;
            ot = it >>> 0 < st >>> 0;
            if (ot) {
                gt(5680 | 0, 5464 | 0, 599, 5712 | 0)
            }
            at = F >>> 0 > 3;
            if (!at) {
                c = Ln;
                return
            }
            ft = n + 12 | 0;
            lt = s[ft >> 2] | 0;
            dt = h;
            mt = v;
            ln = m;
            pn = 0;
            yn = lt;
            Cn = 0;
            while (1) {
                ct = s[Z >> 2] | 0;
                ht = Cn >>> 0 < ct >>> 0;
                if (ht) {
                    wn = yn
                } else {
                    pt = 0 - dt | 0;
                    vt = yn + pt | 0;
                    wn = vt
                }
                yt = mt >>> 0 > 3;
                wt = (dt | 0) != 0;
                if (yt) {
                    fn = wt;
                    hn = ln;
                    vn = pn;
                    En = wn;
                    Nn = 0;
                    while (1) {
                        if (fn) {
                            Et = En + 1 | 0;
                            St = r[En >> 0] | 0;
                            xt = St & 255;
                            Tt = xt >>> x;
                            Nt = Tt << T;
                            Ct = xt >>> A;
                            kt = Ct << O;
                            Lt = Nt | kt;
                            At = xt >>> P;
                            Mt = At << H;
                            _t = Lt | Mt;
                            mn = _t;
                            Sn = Et
                        } else {
                            mn = vn;
                            Sn = En
                        }
                        Dt = r[ut >> 0] | 0;
                        Pt = Dt & 255;
                        if ((Pt | 0) == 4) {
                            s[hn >> 2] = mn
                        } else if ((Pt | 0) == 3) {
                            Ht = mn & 255;
                            r[hn >> 0] = Ht;
                            Bt = mn >>> 8;
                            jt = Bt & 255;
                            Ft = hn + 1 | 0;
                            r[Ft >> 0] = jt;
                            It = mn >>> 16;
                            qt = It & 255;
                            Ut = hn + 2 | 0;
                            r[Ut >> 0] = qt
                        } else if ((Pt | 0) == 2) {
                            zt = mn & 65535;
                            i[hn >> 1] = zt
                        } else {
                            Wt = mn & 255;
                            r[hn >> 0] = Wt
                        }
                        Xt = r[ut >> 0] | 0;
                        Vt = Xt & 255;
                        $t = hn + Vt | 0;
                        Jt = Nn + 1 | 0;
                        Kt = s[d >> 2] | 0;
                        Qt = Kt & -4;
                        Gt = Jt >>> 0 < Qt >>> 0;
                        Zt = s[Y >> 2] | 0;
                        en = Jt >>> 0 < Zt >>> 0;
                        if (Gt) {
                            fn = en;
                            hn = $t;
                            vn = mn;
                            En = Sn;
                            Nn = Jt
                        } else {
                            a = en;
                            g = Kt;
                            nn = Zt;
                            cn = $t;
                            dn = mn;
                            bn = Sn;
                            Tn = Jt;
                            break
                        }
                    }
                } else {
                    a = wt;
                    g = mt;
                    nn = dt;
                    cn = ln;
                    dn = pn;
                    bn = wn;
                    Tn = 0
                }
                if (a) {
                    tn = nn - Tn | 0;
                    rn = bn + tn | 0;
                    xn = rn
                } else {
                    xn = bn
                }
                sn = Cn + 1 | 0;
                on = s[k >> 2] | 0;
                un = on & -4;
                an = sn >>> 0 < un >>> 0;
                if (an) {
                    dt = nn;
                    mt = g;
                    ln = cn;
                    pn = dn;
                    yn = xn;
                    Cn = sn
                } else {
                    break
                }
            }
            c = Ln;
            return
        }

        function $r(e, t, n, i) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            i = i | 0;
            var o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0;
            var k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0;
            var $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0;
            at = c;
            u = t + 4 | 0;
            a = s[u >> 2] | 0;
            w = (a | 0) == 0;
            if (w) {
                M = e + 4 | 0;
                U = s[M >> 2] | 0;
                Z = e + 8 | 0;
                tt = s[Z >> 2] | 0;
                nt = rt(tt, U) | 0;
                o = 0;
                V = nt
            } else {
                it = t + 8 | 0;
                st = r[it >> 0] | 0;
                f = st & 255;
                l = 1 << f;
                h = l + -1 | 0;
                p = e + 4 | 0;
                d = s[p >> 2] | 0;
                v = h & d;
                m = (v | 0) == 0;
                if (m) {
                    H = d
                } else {
                    g = h + d | 0;
                    y = 0 - l | 0;
                    b = g & y;
                    s[p >> 2] = b;
                    H = b
                }
                E = it + 1 | 0;
                S = r[E >> 0] | 0;
                x = S & 255;
                T = 1 << x;
                N = T + -1 | 0;
                C = e + 8 | 0;
                k = s[C >> 2] | 0;
                L = N & k;
                A = (L | 0) == 0;
                if (A) {
                    B = k
                } else {
                    O = N + k | 0;
                    _ = 0 - T | 0;
                    D = O & _;
                    s[C >> 2] = D;
                    B = D
                }
                P = rt(B, H) | 0;
                j = r[it >> 0] | 0;
                F = j & 255;
                I = H >>> F;
                q = r[E >> 0] | 0;
                R = q & 255;
                z = B >>> R;
                W = I << 1;
                ot = rt(W, z) | 0;
                o = ot;
                V = P
            }
            X = o + V | 0;
            $ = e + 16 | 0;
            s[$ >> 2] = X;
            J = Ms(X) | 0;
            K = e + 12 | 0;
            s[K >> 2] = J;
            Q = (J | 0) == (0 | 0);
            if (Q) {
                c = at;
                return
            }
            ei(e, n, V);
            G = (o | 0) == 0;
            if (G) {
                c = at;
                return
            }
            Y = s[K >> 2] | 0;
            et = Y + V | 0;
            eo(et | 0, -128, o | 0) | 0;
            c = at;
            return
        }

        function Jr(e, t, n, i) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            i = i | 0;
            var o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0;
            var k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0;
            var $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0;
            var dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0;
            var Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0;
            var en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0;
            var En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0;
            Ln = c;
            f = t + 4 | 0;
            l = s[f >> 2] | 0;
            T = (l | 0) == 0;
            if (T) {
                H = e + 4 | 0;
                V = s[H >> 2] | 0;
                it = e + 8 | 0;
                vt = s[it >> 2] | 0;
                Ct = rt(vt, V) | 0;
                u = 0;
                Q = Ct;
                ct = it;
                Pt = H
            } else {
                jt = t + 8 | 0;
                Jt = r[jt >> 0] | 0;
                h = Jt & 255;
                v = 1 << h;
                m = v + -1 | 0;
                g = e + 4 | 0;
                y = s[g >> 2] | 0;
                b = m & y;
                w = (b | 0) == 0;
                if (w) {
                    I = y
                } else {
                    E = m + y | 0;
                    S = 0 - v | 0;
                    x = E & S;
                    s[g >> 2] = x;
                    I = x
                }
                N = jt + 1 | 0;
                C = r[N >> 0] | 0;
                k = C & 255;
                L = 1 << k;
                A = L + -1 | 0;
                O = e + 8 | 0;
                M = s[O >> 2] | 0;
                _ = A & M;
                D = (_ | 0) == 0;
                if (D) {
                    q = M
                } else {
                    P = A + M | 0;
                    B = 0 - L | 0;
                    j = P & B;
                    s[O >> 2] = j;
                    q = j
                }
                F = rt(q, I) | 0;
                R = r[jt >> 0] | 0;
                U = R & 255;
                z = I >>> U;
                W = r[N >> 0] | 0;
                X = W & 255;
                $ = q >>> X;
                J = z << 1;
                fn = rt(J, $) | 0;
                u = fn;
                Q = F;
                ct = O;
                Pt = g
            }
            K = u + Q | 0;
            G = e + 16 | 0;
            s[G >> 2] = K;
            Y = Ms(K) | 0;
            Z = e + 12 | 0;
            s[Z >> 2] = Y;
            et = (Y | 0) == (0 | 0);
            if (et) {
                c = Ln;
                return
            }
            tt = (u | 0) == 0;
            if (!tt) {
                nt = Y + Q | 0;
                eo(nt | 0, -128, u | 0) | 0
            }
            st = i + 8 | 0;
            ot = n + 12 | 0;
            ut = s[ot >> 2] | 0;
            at = n + 4 | 0;
            ft = s[at >> 2] | 0;
            lt = s[ct >> 2] | 0;
            ht = lt >>> 0 > 3;
            if (!ht) {
                c = Ln;
                return
            }
            pt = t + 8 | 0;
            dt = pt + 2 | 0;
            mt = st + 2 | 0;
            gt = r[dt >> 0] | 0;
            yt = r[mt >> 0] | 0;
            bt = r[st >> 0] | 0;
            wt = gt ^ yt;
            Et = bt & 255;
            St = wt & 2;
            xt = ft >>> Et;
            Tt = ut + 1 | 0;
            Nt = St << 24 >> 24 == 0;
            kt = ft + xt | 0;
            o = Nt ? ut : Tt;
            Lt = n + 8 | 0;
            At = 0 - kt | 0;
            Bt = ft;
            on = Y;
            ln = o;
            yn = 0;
            bn = 0;
            xn = 0;
            while (1) {
                Ot = s[Lt >> 2] | 0;
                Mt = yn >>> 0 < Ot >>> 0;
                if (Mt) {
                    hn = ln
                } else {
                    _t = ln + At | 0;
                    hn = _t
                }
                Dt = s[Pt >> 2] | 0;
                Ht = Dt >>> 0 > 3;
                Ft = (Bt | 0) != 0;
                if (Ht) {
                    d = Ft;
                    an = on;
                    pn = hn;
                    gn = 0;
                    En = bn;
                    Nn = xn;
                    while (1) {
                        if (d) {
                            It = r[pn >> 0] | 0;
                            qt = pn + 2 | 0;
                            Rt = r[qt >> 0] | 0;
                            Ut = pn + 4 | 0;
                            dn = Ut;
                            Sn = It;
                            Cn = Rt
                        } else {
                            dn = pn;
                            Sn = En;
                            Cn = Nn
                        }
                        zt = an + 1 | 0;
                        r[an >> 0] = Sn;
                        Wt = an + 2 | 0;
                        r[zt >> 0] = Cn;
                        Xt = gn + 2 | 0;
                        Vt = s[Pt >> 2] | 0;
                        $t = Vt & -4;
                        Kt = Xt >>> 0 < $t >>> 0;
                        Qt = s[at >> 2] | 0;
                        Gt = Xt >>> 0 < Qt >>> 0;
                        if (Kt) {
                            d = Gt;
                            an = Wt;
                            pn = dn;
                            gn = Xt;
                            En = Sn;
                            Nn = Cn
                        } else {
                            a = Gt;
                            Zt = Qt;
                            un = Wt;
                            cn = dn;
                            mn = Xt;
                            wn = Sn;
                            Tn = Cn;
                            break
                        }
                    }
                } else {
                    a = Ft;
                    Zt = Bt;
                    un = on;
                    cn = hn;
                    mn = 0;
                    wn = bn;
                    Tn = xn
                }
                if (a) {
                    Yt = Zt - mn | 0;
                    en = Yt << 1;
                    tn = cn + en | 0;
                    vn = tn
                } else {
                    vn = cn
                }
                nn = yn + 1 | 0;
                rn = s[ct >> 2] | 0;
                sn = rn & -4;
                p = nn >>> 0 < sn >>> 0;
                if (p) {
                    Bt = Zt;
                    on = un;
                    ln = vn;
                    yn = nn;
                    bn = wn;
                    xn = Tn
                } else {
                    break
                }
            }
            c = Ln;
            return
        }

        function Kr(e, t, n, i) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            i = i | 0;
            var o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0;
            var k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0;
            var $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0;
            var dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0;
            var Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0;
            var en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0;
            var En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0;
            var Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0;
            Yn = c;
            d = t + 4 | 0;
            v = s[d >> 2] | 0;
            H = (v | 0) == 0;
            if (H) {
                V = e + 4 | 0;
                it = s[V >> 2] | 0;
                vt = e + 8 | 0;
                Ct = s[vt >> 2] | 0;
                jt = rt(Ct, it) | 0;
                u = 0;
                at = jt;
                Et = vt;
                Ut = V
            } else {
                Jt = t + 8 | 0;
                on = r[Jt >> 0] | 0;
                m = on & 255;
                C = 1 << m;
                k = C + -1 | 0;
                L = e + 4 | 0;
                A = s[L >> 2] | 0;
                O = k & A;
                M = (O | 0) == 0;
                if (M) {
                    Q = A
                } else {
                    _ = k + A | 0;
                    D = 0 - C | 0;
                    P = _ & D;
                    s[L >> 2] = P;
                    Q = P
                }
                B = Jt + 1 | 0;
                j = r[B >> 0] | 0;
                F = j & 255;
                I = 1 << F;
                q = I + -1 | 0;
                R = e + 8 | 0;
                U = s[R >> 2] | 0;
                z = q & U;
                W = (z | 0) == 0;
                if (W) {
                    G = U
                } else {
                    X = q + U | 0;
                    $ = 0 - I | 0;
                    J = X & $;
                    s[R >> 2] = J;
                    G = J
                }
                K = rt(G, Q) | 0;
                Y = r[Jt >> 0] | 0;
                Z = Y & 255;
                et = Q >>> Z;
                tt = r[B >> 0] | 0;
                nt = tt & 255;
                st = G >>> nt;
                ot = et << 1;
                En = rt(ot, st) | 0;
                u = En;
                at = K;
                Et = R;
                Ut = L
            }
            ut = u + at | 0;
            ft = e + 16 | 0;
            s[ft >> 2] = ut;
            lt = Ms(ut) | 0;
            ct = e + 12 | 0;
            s[ct >> 2] = lt;
            ht = (lt | 0) == (0 | 0);
            if (ht) {
                c = Yn;
                return
            }
            pt = i + 8 | 0;
            dt = pt + 2 | 0;
            mt = t + 8 | 0;
            gt = mt + 2 | 0;
            yt = n + 4 | 0;
            bt = s[yt >> 2] | 0;
            wt = s[Et >> 2] | 0;
            St = wt >>> 0 > 3;
            if (!St) {
                c = Yn;
                return
            }
            xt = r[pt >> 0] | 0;
            Tt = xt & 255;
            Nt = bt >>> Tt;
            kt = n + 12 | 0;
            Lt = r[gt >> 0] | 0;
            At = r[dt >> 0] | 0;
            Ot = bt + Nt | 0;
            Mt = s[kt >> 2] | 0;
            _t = Lt ^ At;
            Dt = n + 8 | 0;
            Pt = 0 - Ot | 0;
            Ht = _t & 1;
            Bt = Ht << 24 >> 24 == 0;
            Wt = bt;
            gn = lt;
            Sn = Mt;
            An = -128;
            Dn = -128;
            Rn = 0;
            Un = 0;
            Vn = 0;
            while (1) {
                Ft = s[Dt >> 2] | 0;
                It = Rn >>> 0 < Ft >>> 0;
                if (It) {
                    Tn = Sn
                } else {
                    qt = Sn + Pt | 0;
                    Tn = qt
                }
                Rt = s[Ut >> 2] | 0;
                zt = Rt >>> 0 > 3;
                Xt = (Wt | 0) != 0;
                if (zt) {
                    N = Xt;
                    bn = gn;
                    Nn = Tn;
                    Mn = An;
                    Hn = Dn;
                    qn = 0;
                    Wn = Un;
                    Jn = Vn;
                    while (1) {
                        if (N) {
                            Vt = r[dt >> 0] | 0;
                            $t = Vt & 2;
                            Kt = $t << 24 >> 24 == 0;
                            Qt = Nn + 1 | 0;
                            Gt = r[Nn >> 0] | 0;
                            Yt = Nn + 2 | 0;
                            Zt = r[Qt >> 0] | 0;
                            en = Nn + 3 | 0;
                            o = Kt ? Gt : Zt;
                            a = Kt ? Yt : en;
                            f = Kt ? Zt : Gt;
                            h = Kt ? en : Yt;
                            Cn = Nn + 4 | 0;
                            Bn = r[h >> 0] | 0;
                            Kn = r[a >> 0] | 0;
                            l = Bt ? f : Bn;
                            jn = Bt ? Bn : f;
                            kn = Cn;
                            _n = l;
                            Fn = jn;
                            Xn = o;
                            Qn = Kn
                        } else {
                            kn = Nn;
                            _n = Mn;
                            Fn = Hn;
                            Xn = Wn;
                            Qn = Jn
                        }
                        tn = r[gt >> 0] | 0;
                        nn = tn & 2;
                        rn = nn << 24 >> 24 == 0;
                        sn = bn + 1 | 0;
                        if (rn) {
                            r[bn >> 0] = Xn;
                            un = bn + 2 | 0;
                            r[sn >> 0] = _n;
                            an = bn + 3 | 0;
                            r[un >> 0] = Qn;
                            r[an >> 0] = Fn
                        } else {
                            r[bn >> 0] = _n;
                            fn = bn + 2 | 0;
                            r[sn >> 0] = Xn;
                            ln = bn + 3 | 0;
                            r[fn >> 0] = Fn;
                            r[ln >> 0] = Qn
                        }
                        wn = bn + 4 | 0;
                        cn = qn + 2 | 0;
                        hn = s[Ut >> 2] | 0;
                        pn = hn & -4;
                        dn = cn >>> 0 < pn >>> 0;
                        vn = s[yt >> 2] | 0;
                        mn = cn >>> 0 < vn >>> 0;
                        if (dn) {
                            N = mn;
                            bn = wn;
                            Nn = kn;
                            Mn = _n;
                            Hn = Fn;
                            qn = cn;
                            Wn = Xn;
                            Jn = Qn
                        } else {
                            p = mn;
                            y = vn;
                            yn = wn;
                            xn = kn;
                            On = _n;
                            Pn = Fn;
                            In = cn;
                            zn = Xn;
                            $n = Qn;
                            break
                        }
                    }
                } else {
                    p = Xt;
                    y = Wt;
                    yn = gn;
                    xn = Tn;
                    On = An;
                    Pn = Dn;
                    In = 0;
                    zn = Un;
                    $n = Vn
                }
                if (p) {
                    g = y - In | 0;
                    b = g << 1;
                    w = xn + b | 0;
                    Ln = w
                } else {
                    Ln = xn
                }
                E = Rn + 1 | 0;
                S = s[Et >> 2] | 0;
                x = S & -4;
                T = E >>> 0 < x >>> 0;
                if (T) {
                    Wt = y;
                    gn = yn;
                    Sn = Ln;
                    An = On;
                    Dn = Pn;
                    Rn = E;
                    Un = zn;
                    Vn = $n
                } else {
                    break
                }
            }
            c = Yn;
            return
        }

        function Qr(e, t, n, o) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            o = o | 0;
            var u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0;
            var L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0;
            var J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0;
            var vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0;
            var Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0;
            var nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0;
            var xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0;
            var zn = 0,
                Wn = 0;
            Wn = c;
            h = e + 4 | 0;
            p = s[h >> 2] | 0;
            R = e + 8 | 0;
            Y = s[R >> 2] | 0;
            lt = rt(Y, p) | 0;
            St = t + 8 | 0;
            Dt = r[St >> 0] | 0;
            Wt = Dt & 255;
            tn = rt(lt, Wt) | 0;
            pn = e + 16 | 0;
            s[pn >> 2] = tn;
            d = Ms(tn) | 0;
            N = e + 12 | 0;
            s[N >> 2] = d;
            D = (d | 0) == (0 | 0);
            if (D) {
                c = Wn;
                return
            }
            P = St + 1 | 0;
            H = r[P >> 0] | 0;
            B = H & 255;
            j = B >>> 5;
            F = B & 31;
            I = St + 2 | 0;
            q = r[I >> 0] | 0;
            U = q & 255;
            z = U >>> 5;
            W = U & 31;
            X = St + 3 | 0;
            V = r[X >> 0] | 0;
            $ = V & 255;
            J = $ >>> 5;
            K = $ & 31;
            Q = n + 16 | 0;
            G = s[Q >> 2] | 0;
            Z = n + 4 | 0;
            et = s[Z >> 2] | 0;
            tt = n + 8 | 0;
            nt = s[tt >> 2] | 0;
            it = rt(nt, et) | 0;
            st = o + 4 | 0;
            ot = s[st >> 2] | 0;
            ut = (ot | 0) == 0;
            if (ut) {
                a = 0
            } else {
                at = o + 8 | 0;
                ft = r[at >> 0] | 0;
                ct = ft & 255;
                ht = et >>> ct;
                pt = at + 1 | 0;
                dt = r[pt >> 0] | 0;
                vt = dt & 255;
                mt = nt >>> vt;
                yt = ht << 1;
                _n = rt(yt, mt) | 0;
                a = _n
            }
            bt = a + it | 0;
            wt = G >>> 0 < bt >>> 0;
            if (wt) {
                gt(5552 | 0, 5464 | 0, 707, 5624 | 0)
            }
            Et = n + 12 | 0;
            xt = s[Et >> 2] | 0;
            Tt = o + 8 | 0;
            Nt = r[Tt >> 0] | 0;
            Ct = Nt << 24 >> 24 == 1;
            if (!Ct) {
                gt(5648 | 0, 5464 | 0, 712, 5624 | 0)
            }
            kt = Y >>> 0 > 3;
            if (!kt) {
                c = Wn;
                return
            }
            Lt = Tt + 2 | 0;
            At = r[Lt >> 0] | 0;
            Ot = At & 2;
            Mt = et >>> 1;
            _t = Ot << 24 >> 24 == 0;
            Pt = xt + 1 | 0;
            Ht = et + Mt | 0;
            u = _t ? xt : Pt;
            Bt = 0 - Ht | 0;
            Ft = nt;
            qt = p;
            Ut = et;
            Tn = d;
            kn = 0;
            Dn = u;
            Rn = 0;
            while (1) {
                jt = Rn >>> 0 < Ft >>> 0;
                if (jt) {
                    Hn = Dn
                } else {
                    It = Dn + Bt | 0;
                    Hn = It
                }
                Rt = qt >>> 0 > 3;
                zt = (Ut | 0) != 0;
                if (Rt) {
                    M = zt;
                    Cn = Tn;
                    An = kn;
                    Bn = Hn;
                    qn = 0;
                    while (1) {
                        if (M) {
                            Xt = r[Bn >> 0] | 0;
                            Vt = Bn + 2 | 0;
                            $t = Xt & 255;
                            Jt = (Xt & 255) < 17;
                            if (Jt) {
                                Un = 0
                            } else {
                                Kt = (Xt & 255) > 234;
                                if (Kt) {
                                    Un = 255
                                } else {
                                    Qt = $t + 65520 | 0;
                                    Gt = Qt & 65535;
                                    Yt = Gt * 255 | 0;
                                    Zt = (Yt >>> 0) / 219 & -1;
                                    Mn = Zt & 255;
                                    Un = Mn
                                }
                            }
                            en = Un >>> j;
                            nn = en << F;
                            rn = Un >>> z;
                            sn = rn << W;
                            on = nn | sn;
                            un = Un >>> J;
                            an = un << K;
                            fn = on | an;
                            On = fn;
                            jn = Vt
                        } else {
                            On = An;
                            jn = Bn
                        }
                        ln = r[St >> 0] | 0;
                        cn = ln & 255;
                        if ((cn | 0) == 3) {
                            hn = On & 255;
                            r[Cn >> 0] = hn;
                            dn = On >>> 8;
                            vn = dn & 255;
                            mn = Cn + 1 | 0;
                            r[mn >> 0] = vn;
                            gn = On >>> 16;
                            yn = gn & 255;
                            bn = Cn + 2 | 0;
                            r[bn >> 0] = yn
                        } else if ((cn | 0) == 4) {
                            s[Cn >> 2] = On
                        } else if ((cn | 0) == 2) {
                            wn = On & 65535;
                            i[Cn >> 1] = wn
                        } else {
                            En = On & 255;
                            r[Cn >> 0] = En
                        }
                        Sn = r[St >> 0] | 0;
                        xn = Sn & 255;
                        v = Cn + xn | 0;
                        m = qn + 1 | 0;
                        g = s[h >> 2] | 0;
                        y = g & -4;
                        b = m >>> 0 < y >>> 0;
                        w = s[Z >> 2] | 0;
                        E = m >>> 0 < w >>> 0;
                        if (b) {
                            M = E;
                            Cn = v;
                            An = On;
                            Bn = jn;
                            qn = m
                        } else {
                            f = E;
                            x = w;
                            _ = g;
                            Nn = v;
                            Ln = On;
                            Pn = jn;
                            In = m;
                            break
                        }
                    }
                } else {
                    f = zt;
                    x = Ut;
                    _ = qt;
                    Nn = Tn;
                    Ln = kn;
                    Pn = Hn;
                    In = 0
                }
                if (f) {
                    S = x - In | 0;
                    T = S << 1;
                    C = Pn + T | 0;
                    Fn = C
                } else {
                    Fn = Pn
                }
                k = Rn + 1 | 0;
                L = s[R >> 2] | 0;
                A = L & -4;
                O = k >>> 0 < A >>> 0;
                if (!O) {
                    break
                }
                l = s[tt >> 2] | 0;
                Ft = l;
                qt = _;
                Ut = x;
                Tn = Nn;
                kn = Ln;
                Dn = Fn;
                Rn = k
            }
            c = Wn;
            return
        }

        function Gr(e, t, n, o) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            o = o | 0;
            var u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0;
            var L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0;
            var J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0;
            var vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0;
            var Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0;
            var nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0;
            var xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0;
            var zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0,
                ur = 0,
                ar = 0;
            var fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0;
            yr = c;
            l = t + 4 | 0;
            h = s[l >> 2] | 0;
            mt = (h | 0) == 0;
            if (mt) {
                Lt = e + 4 | 0;
                It = s[Lt >> 2] | 0;
                Qt = e + 8 | 0;
                an = s[Qt >> 2] | 0;
                bn = rt(an, It) | 0;
                u = 0;
                zt = bn;
                Ln = Qt;
                In = Lt
            } else {
                On = t + 8 | 0;
                Rn = r[On >> 0] | 0;
                p = Rn & 255;
                T = 1 << p;
                H = T + -1 | 0;
                V = e + 4 | 0;
                it = s[V >> 2] | 0;
                ct = H & it;
                ht = (ct | 0) == 0;
                if (ht) {
                    _t = it
                } else {
                    pt = H + it | 0;
                    dt = 0 - T | 0;
                    vt = pt & dt;
                    s[V >> 2] = vt;
                    _t = vt
                }
                yt = On + 1 | 0;
                bt = r[yt >> 0] | 0;
                wt = bt & 255;
                Et = 1 << wt;
                St = Et + -1 | 0;
                xt = e + 8 | 0;
                Tt = s[xt >> 2] | 0;
                Nt = St & Tt;
                Ct = (Nt | 0) == 0;
                if (Ct) {
                    Dt = Tt
                } else {
                    kt = St + Tt | 0;
                    At = 0 - Et | 0;
                    Ot = kt & At;
                    s[xt >> 2] = Ot;
                    Dt = Ot
                }
                Mt = rt(Dt, _t) | 0;
                Pt = r[On >> 0] | 0;
                Ht = Pt & 255;
                Bt = _t >>> Ht;
                jt = r[yt >> 0] | 0;
                Ft = jt & 255;
                qt = Dt >>> Ft;
                Rt = Bt << 1;
                rr = rt(Rt, qt) | 0;
                u = rr;
                zt = Mt;
                Ln = xt;
                In = V
            }
            Ut = u + zt | 0;
            Wt = e + 16 | 0;
            s[Wt >> 2] = Ut;
            Xt = Ms(Ut) | 0;
            Vt = e + 12 | 0;
            s[Vt >> 2] = Xt;
            $t = (Xt | 0) == (0 | 0);
            if ($t) {
                c = yr;
                return
            }
            Jt = (u | 0) == 0;
            if (!Jt) {
                Kt = Xt + zt | 0;
                eo(Kt | 0, -128, u | 0) | 0
            }
            Gt = n + 16 | 0;
            Yt = s[Gt >> 2] | 0;
            Zt = n + 4 | 0;
            en = s[Zt >> 2] | 0;
            tn = n + 8 | 0;
            nn = s[tn >> 2] | 0;
            rn = rt(nn, en) | 0;
            sn = o + 8 | 0;
            on = r[sn >> 0] | 0;
            un = on & 255;
            fn = rt(rn, un) | 0;
            ln = Yt >>> 0 < fn >>> 0;
            if (ln) {
                gt(5400 | 0, 5464 | 0, 646, 5528 | 0)
            }
            cn = sn + 1 | 0;
            hn = r[cn >> 0] | 0;
            pn = hn & 255;
            dn = pn >>> 5;
            vn = pn & 31;
            mn = sn + 2 | 0;
            gn = r[mn >> 0] | 0;
            yn = gn & 255;
            wn = yn >>> 5;
            En = yn & 31;
            Sn = sn + 3 | 0;
            xn = r[Sn >> 0] | 0;
            Tn = xn & 255;
            Nn = Tn >>> 5;
            Cn = Tn & 31;
            kn = s[Ln >> 2] | 0;
            An = kn >>> 0 > 3;
            if (!An) {
                c = yr;
                return
            }
            Mn = n + 12 | 0;
            _n = s[Mn >> 2] | 0;
            Dn = 0 - en | 0;
            Pn = rt(un, Dn) | 0;
            Bn = nn;
            Un = en;
            Yn = Xt;
            ir = _n;
            hr = 0;
            pr = 0;
            while (1) {
                Hn = hr >>> 0 < Bn >>> 0;
                if (Hn) {
                    or = ir
                } else {
                    jn = ir + Pn | 0;
                    or = jn
                }
                Fn = s[In >> 2] | 0;
                qn = Fn >>> 0 > 3;
                zn = (Un | 0) != 0;
                if (qn) {
                    lt = zn;
                    er = Yn;
                    ur = or;
                    cr = 0;
                    vr = pr;
                    while (1) {
                        if (lt) {
                            Wn = r[sn >> 0] | 0;
                            Xn = Wn & 255;
                            if ((Xn | 0) == 3) {
                                Vn = r[ur >> 0] | 0;
                                $n = Vn & 255;
                                Jn = ur + 1 | 0;
                                Kn = r[Jn >> 0] | 0;
                                Qn = Kn & 255;
                                Gn = Qn << 8;
                                d = Gn | $n;
                                v = ur + 2 | 0;
                                m = r[v >> 0] | 0;
                                g = m & 255;
                                y = g << 16;
                                b = d | y;
                                nr = b
                            } else if ((Xn | 0) == 2) {
                                E = i[ur >> 1] | 0;
                                S = E & 65535;
                                nr = S
                            } else if ((Xn | 0) == 4) {
                                w = s[ur >> 2] | 0;
                                nr = w
                            } else {
                                x = r[ur >> 0] | 0;
                                N = x & 255;
                                nr = N
                            }
                            C = ur + Xn | 0;
                            k = nr >>> vn;
                            L = k << dn;
                            A = nr >>> En;
                            O = A << wn;
                            M = nr >>> Cn;
                            _ = M << Nn;
                            D = L & 255;
                            P = D * 77 | 0;
                            B = O & 255;
                            j = B * 150 | 0;
                            F = _ & 255;
                            I = F * 29 | 0;
                            q = j + 128 | 0;
                            R = q + P | 0;
                            U = R + I | 0;
                            z = U >>> 8;
                            tr = z & 255;
                            ar = C;
                            mr = tr
                        } else {
                            ar = ur;
                            mr = vr
                        }
                        W = er + 1 | 0;
                        r[er >> 0] = mr;
                        X = cr + 1 | 0;
                        $ = s[In >> 2] | 0;
                        J = $ & -4;
                        K = X >>> 0 < J >>> 0;
                        Q = s[Zt >> 2] | 0;
                        G = X >>> 0 < Q >>> 0;
                        if (K) {
                            lt = G;
                            er = W;
                            ur = ar;
                            cr = X;
                            vr = mr
                        } else {
                            a = G;
                            Z = Q;
                            Zn = W;
                            sr = ar;
                            lr = X;
                            dr = mr;
                            break
                        }
                    }
                } else {
                    a = zn;
                    Z = Un;
                    Zn = Yn;
                    sr = or;
                    lr = 0;
                    dr = pr
                }
                if (a) {
                    Y = Z - lr | 0;
                    et = r[sn >> 0] | 0;
                    tt = et & 255;
                    nt = rt(tt, Y) | 0;
                    st = sr + nt | 0;
                    fr = st
                } else {
                    fr = sr
                }
                ot = hr + 1 | 0;
                ut = s[Ln >> 2] | 0;
                at = ut & -4;
                ft = ot >>> 0 < at >>> 0;
                if (!ft) {
                    break
                }
                f = s[tn >> 2] | 0;
                Bn = f;
                Un = Z;
                Yn = Zn;
                ir = fr;
                hr = ot;
                pr = dr
            }
            c = yr;
            return
        }

        function Yr(e, t, n, o) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            o = o | 0;
            var u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0;
            var L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0;
            var J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0;
            var vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0;
            var Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0;
            var nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0;
            var xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0;
            var zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0,
                ur = 0,
                ar = 0;
            var fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0,
                Tr = 0;
            Tr = c;
            h = t + 4 | 0;
            p = s[h >> 2] | 0;
            Et = (p | 0) == 0;
            if (Et) {
                _t = e + 4 | 0;
                zt = s[_t >> 2] | 0;
                en = e + 8 | 0;
                hn = s[en >> 2] | 0;
                xn = rt(hn, zt) | 0;
                u = 0;
                $t = xn;
                Dn = en;
                $n = _t
            } else {
                Pn = t + 8 | 0;
                Xn = r[Pn >> 0] | 0;
                d = Xn & 255;
                N = 1 << d;
                B = N + -1 | 0;
                $ = e + 4 | 0;
                st = s[$ >> 2] | 0;
                vt = B & st;
                mt = (vt | 0) == 0;
                if (mt) {
                    Bt = st
                } else {
                    yt = B + st | 0;
                    bt = 0 - N | 0;
                    wt = yt & bt;
                    s[$ >> 2] = wt;
                    Bt = wt
                }
                St = Pn + 1 | 0;
                xt = r[St >> 0] | 0;
                Tt = xt & 255;
                Nt = 1 << Tt;
                Ct = Nt + -1 | 0;
                kt = e + 8 | 0;
                Lt = s[kt >> 2] | 0;
                At = Ct & Lt;
                Ot = (At | 0) == 0;
                if (Ot) {
                    jt = Lt
                } else {
                    Mt = Ct + Lt | 0;
                    Dt = 0 - Nt | 0;
                    Pt = Mt & Dt;
                    s[kt >> 2] = Pt;
                    jt = Pt
                }
                Ht = rt(jt, Bt) | 0;
                Ft = r[Pn >> 0] | 0;
                It = Ft & 255;
                qt = Bt >>> It;
                Rt = r[St >> 0] | 0;
                Ut = Rt & 255;
                Wt = jt >>> Ut;
                Xt = qt << 1;
                ar = rt(Xt, Wt) | 0;
                u = ar;
                $t = Ht;
                Dn = kt;
                $n = $
            }
            Vt = u + $t | 0;
            Jt = e + 16 | 0;
            s[Jt >> 2] = Vt;
            Kt = Ms(Vt) | 0;
            Qt = e + 12 | 0;
            s[Qt >> 2] = Kt;
            Gt = (Kt | 0) == (0 | 0);
            if (Gt) {
                c = Tr;
                return
            }
            Yt = t + 8 | 0;
            Zt = Yt + 2 | 0;
            tn = r[Zt >> 0] | 0;
            nn = n + 16 | 0;
            rn = s[nn >> 2] | 0;
            sn = n + 4 | 0;
            on = s[sn >> 2] | 0;
            un = n + 8 | 0;
            an = s[un >> 2] | 0;
            fn = rt(an, on) | 0;
            ln = o + 8 | 0;
            cn = r[ln >> 0] | 0;
            pn = cn & 255;
            dn = rt(fn, pn) | 0;
            vn = rn >>> 0 < dn >>> 0;
            if (vn) {
                gt(5400 | 0, 5464 | 0, 762, 5504 | 0)
            }
            mn = ln + 1 | 0;
            gn = r[mn >> 0] | 0;
            yn = gn & 255;
            bn = yn >>> 5;
            wn = yn & 31;
            En = ln + 2 | 0;
            Sn = r[En >> 0] | 0;
            Tn = Sn & 255;
            Nn = Tn >>> 5;
            Cn = Tn & 31;
            kn = ln + 3 | 0;
            Ln = r[kn >> 0] | 0;
            An = Ln & 255;
            On = An >>> 5;
            Mn = An & 31;
            _n = s[Dn >> 2] | 0;
            Hn = _n >>> 0 > 3;
            if (!Hn) {
                c = Tr;
                return
            }
            Bn = n + 12 | 0;
            jn = s[Bn >> 2] | 0;
            Fn = 0 - on | 0;
            In = rt(pn, Fn) | 0;
            qn = tn & 2;
            Rn = qn << 24 >> 24 == 0;
            zn = an;
            Kn = on;
            nr = Kt;
            fr = jn;
            gr = 0;
            yr = 0;
            while (1) {
                Un = gr >>> 0 < zn >>> 0;
                if (Un) {
                    cr = fr
                } else {
                    Wn = fr + In | 0;
                    cr = Wn
                }
                Vn = s[$n >> 2] | 0;
                Jn = Vn >>> 0 > 3;
                Qn = (Kn | 0) != 0;
                if (Jn) {
                    dt = Qn;
                    ir = nr;
                    hr = cr;
                    mr = 0;
                    wr = yr;
                    while (1) {
                        if (dt) {
                            Gn = r[ln >> 0] | 0;
                            Yn = Gn & 255;
                            if ((Yn | 0) == 2) {
                                C = i[hr >> 1] | 0;
                                k = C & 65535;
                                ur = k
                            } else if ((Yn | 0) == 4) {
                                T = s[hr >> 2] | 0;
                                ur = T
                            } else if ((Yn | 0) == 3) {
                                Zn = r[hr >> 0] | 0;
                                er = Zn & 255;
                                tr = hr + 1 | 0;
                                v = r[tr >> 0] | 0;
                                m = v & 255;
                                g = m << 8;
                                y = g | er;
                                b = hr + 2 | 0;
                                w = r[b >> 0] | 0;
                                E = w & 255;
                                S = E << 16;
                                x = y | S;
                                ur = x
                            } else {
                                L = r[hr >> 0] | 0;
                                A = L & 255;
                                ur = A
                            }
                            O = hr + Yn | 0;
                            M = ur >>> wn;
                            _ = M << bn;
                            D = ur >>> Cn;
                            P = D << Nn;
                            H = ur >>> Mn;
                            j = H << On;
                            F = _ & 255;
                            I = F * 77 | 0;
                            q = P & 255;
                            R = q * 150 | 0;
                            U = j & 255;
                            z = U * 29 | 0;
                            W = R + 128 | 0;
                            X = W + I | 0;
                            V = X + z | 0;
                            J = V >>> 8;
                            or = J & 255;
                            pr = O;
                            Er = or
                        } else {
                            pr = hr;
                            Er = wr
                        }
                        K = ir + 1 | 0;
                        Sr = Rn ? Er : -128;
                        l = Rn ? -128 : Er;
                        r[ir >> 0] = Sr;
                        r[K >> 0] = l;
                        sr = ir + 2 | 0;
                        Q = mr + 1 | 0;
                        G = s[$n >> 2] | 0;
                        Y = G & -4;
                        Z = Q >>> 0 < Y >>> 0;
                        et = s[sn >> 2] | 0;
                        tt = Q >>> 0 < et >>> 0;
                        if (Z) {
                            dt = tt;
                            ir = sr;
                            hr = pr;
                            mr = Q;
                            wr = Er
                        } else {
                            a = tt;
                            it = et;
                            rr = sr;
                            lr = pr;
                            vr = Q;
                            br = Er;
                            break
                        }
                    }
                } else {
                    a = Qn;
                    it = Kn;
                    rr = nr;
                    lr = cr;
                    vr = 0;
                    br = yr
                }
                if (a) {
                    nt = it - vr | 0;
                    ot = r[ln >> 0] | 0;
                    ut = ot & 255;
                    at = rt(ut, nt) | 0;
                    ft = lr + at | 0;
                    dr = ft
                } else {
                    dr = lr
                }
                lt = gr + 1 | 0;
                ct = s[Dn >> 2] | 0;
                ht = ct & -4;
                pt = lt >>> 0 < ht >>> 0;
                if (!pt) {
                    break
                }
                f = s[un >> 2] | 0;
                zn = f;
                Kn = it;
                nr = rr;
                fr = dr;
                gr = lt;
                yr = br
            }
            c = Tr;
            return
        }

        function Zr(e, t, n, o) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            o = o | 0;
            var u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0;
            var L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0;
            var J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0;
            var vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0;
            var Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0;
            var nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0;
            var xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0;
            var zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0;
            sr = c;
            h = e + 4 | 0;
            p = s[h >> 2] | 0;
            st = e + 8 | 0;
            mt = s[st >> 2] | 0;
            Lt = rt(mt, p) | 0;
            It = t + 8 | 0;
            Qt = r[It >> 0] | 0;
            an = Qt & 255;
            bn = rt(Lt, an) | 0;
            On = e + 16 | 0;
            s[On >> 2] = bn;
            d = Ms(bn) | 0;
            N = e + 12 | 0;
            s[N >> 2] = d;
            B = (d | 0) == (0 | 0);
            if (B) {
                c = sr;
                return
            }
            $ = It + 1 | 0;
            Y = r[$ >> 0] | 0;
            Z = Y & 255;
            et = Z >>> 5;
            tt = Z & 31;
            nt = It + 2 | 0;
            it = r[nt >> 0] | 0;
            ot = it & 255;
            ut = ot >>> 5;
            at = ot & 31;
            ft = It + 3 | 0;
            lt = r[ft >> 0] | 0;
            ct = lt & 255;
            ht = ct >>> 5;
            pt = ct & 31;
            dt = n + 16 | 0;
            vt = s[dt >> 2] | 0;
            yt = n + 4 | 0;
            bt = s[yt >> 2] | 0;
            wt = n + 8 | 0;
            Et = s[wt >> 2] | 0;
            St = rt(Et, bt) | 0;
            xt = o + 8 | 0;
            Tt = r[xt >> 0] | 0;
            Nt = Tt & 255;
            Ct = rt(St, Nt) | 0;
            kt = vt >>> 0 < Ct >>> 0;
            if (kt) {
                gt(5400 | 0, 5464 | 0, 828, 5480 | 0)
            }
            At = xt + 1 | 0;
            Ot = r[At >> 0] | 0;
            Mt = Ot & 255;
            _t = Mt >>> 5;
            Dt = Mt & 31;
            Pt = xt + 2 | 0;
            Ht = r[Pt >> 0] | 0;
            Bt = Ht & 255;
            jt = Bt >>> 5;
            Ft = Bt & 31;
            qt = xt + 3 | 0;
            Rt = r[qt >> 0] | 0;
            Ut = Rt & 255;
            zt = Ut >>> 5;
            Wt = Ut & 31;
            Xt = rt(Nt, bt) | 0;
            Vt = mt >>> 0 > 3;
            if (!Vt) {
                c = sr;
                return
            }
            $t = n + 12 | 0;
            Jt = s[$t >> 2] | 0;
            Gt = Et;
            Yt = p;
            en = bt;
            Rn = d;
            Xn = 0;
            Kn = Jt;
            rr = 0;
            while (1) {
                Kt = rr >>> 0 < Gt >>> 0;
                f = 0 - Xt | 0;
                a = Kt ? 0 : f;
                Zt = Yt >>> 0 > 3;
                tn = (en | 0) != 0;
                if (Zt) {
                    Q = tn;
                    zn = Rn;
                    $n = Xn;
                    Gn = Kn;
                    tr = 0;
                    while (1) {
                        if (Q) {
                            nn = r[xt >> 0] | 0;
                            rn = nn & 255;
                            if ((rn | 0) == 3) {
                                sn = r[Gn >> 0] | 0;
                                on = sn & 255;
                                un = Gn + 1 | 0;
                                fn = r[un >> 0] | 0;
                                ln = fn & 255;
                                cn = ln << 8;
                                hn = cn | on;
                                pn = Gn + 2 | 0;
                                dn = r[pn >> 0] | 0;
                                vn = dn & 255;
                                mn = vn << 16;
                                gn = hn | mn;
                                Wn = gn
                            } else if ((rn | 0) == 4) {
                                yn = s[Gn >> 2] | 0;
                                Wn = yn
                            } else if ((rn | 0) == 2) {
                                wn = i[Gn >> 1] | 0;
                                En = wn & 65535;
                                Wn = En
                            } else {
                                Sn = r[Gn >> 0] | 0;
                                xn = Sn & 255;
                                Wn = xn
                            }
                            Tn = Gn + rn | 0;
                            Nn = Wn >>> Dt;
                            Cn = Nn << _t;
                            kn = Wn >>> Ft;
                            Ln = kn << jt;
                            An = Wn >>> Wt;
                            Mn = An << zt;
                            _n = Cn & 255;
                            Dn = _n >>> et;
                            Pn = Dn << tt;
                            Hn = Ln & 255;
                            Bn = Hn >>> ut;
                            jn = Bn << at;
                            Fn = Pn | jn;
                            In = Mn & 255;
                            qn = In >>> ht;
                            v = qn << pt;
                            m = Fn | v;
                            Jn = m;
                            Yn = Tn
                        } else {
                            Jn = $n;
                            Yn = Gn
                        }
                        g = r[It >> 0] | 0;
                        y = g & 255;
                        if ((y | 0) == 2) {
                            k = Jn & 65535;
                            i[zn >> 1] = k
                        } else if ((y | 0) == 4) {
                            s[zn >> 2] = Jn
                        } else if ((y | 0) == 3) {
                            b = Jn & 255;
                            r[zn >> 0] = b;
                            w = Jn >>> 8;
                            E = w & 255;
                            S = zn + 1 | 0;
                            r[S >> 0] = E;
                            x = Jn >>> 16;
                            T = x & 255;
                            C = zn + 2 | 0;
                            r[C >> 0] = T
                        } else {
                            L = Jn & 255;
                            r[zn >> 0] = L
                        }
                        A = r[It >> 0] | 0;
                        O = A & 255;
                        M = zn + O | 0;
                        _ = tr + 1 | 0;
                        D = s[h >> 2] | 0;
                        P = D & -4;
                        H = _ >>> 0 < P >>> 0;
                        j = s[yt >> 2] | 0;
                        F = _ >>> 0 < j >>> 0;
                        if (H) {
                            Q = F;
                            zn = M;
                            $n = Jn;
                            Gn = Yn;
                            tr = _
                        } else {
                            u = F;
                            q = j;
                            G = D;
                            Un = M;
                            Vn = Jn;
                            Qn = Yn;
                            er = _;
                            break
                        }
                    }
                } else {
                    u = tn;
                    q = en;
                    G = Yt;
                    Un = Rn;
                    Vn = Xn;
                    Qn = Kn;
                    er = 0
                }
                if (u) {
                    I = q - er | 0;
                    R = r[xt >> 0] | 0;
                    U = R & 255;
                    z = rt(U, I) | 0;
                    W = Qn + z | 0;
                    Zn = W
                } else {
                    Zn = Qn
                }
                nr = rr + 1 | 0;
                X = nr + a | 0;
                V = s[st >> 2] | 0;
                J = V & -4;
                K = X >>> 0 < J >>> 0;
                if (!K) {
                    break
                }
                l = s[wt >> 2] | 0;
                Gt = l;
                Yt = G;
                en = q;
                Rn = Un;
                Xn = Vn;
                Kn = Zn;
                rr = X
            }
            c = sr;
            return
        }

        function ei(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0;
            var V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0;
            var pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0;
            var Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0;
            Jt = c;
            v = e + 4 | 0;
            m = s[v >> 2] | 0;
            k = t + 4 | 0;
            F = s[k >> 2] | 0;
            K = (m | 0) == (F | 0);
            ut = e + 8 | 0;
            yt = s[ut >> 2] | 0;
            Tt = t + 8 | 0;
            Nt = s[Tt >> 2] | 0;
            Ct = (yt | 0) == (Nt | 0);
            At = K & Ct;
            if (At) {
                g = e + 12 | 0;
                y = s[g >> 2] | 0;
                b = t + 12 | 0;
                w = s[b >> 2] | 0;
                oo(y | 0, w | 0, n | 0) | 0;
                c = Jt;
                return
            }
            E = t + 12 | 0;
            S = s[E >> 2] | 0;
            x = e + 12 | 0;
            T = s[x >> 2] | 0;
            N = m >>> 0 > F >>> 0;
            i = N ? F : m;
            C = m - F | 0;
            L = N ? C : 0;
            A = e + 8 | 0;
            O = yt >>> 0 > Nt >>> 0;
            o = O ? Nt : yt;
            M = o & -4;
            _ = (M | 0) == 0;
            if (_) {
                nt = F;
                ot = yt;
                Ot = T;
                Ht = S;
                Ut = 0
            } else {
                D = (L | 0) == 0;
                d = i + L | 0;
                if (D) {
                    P = M + -1 | 0;
                    H = F ^ -1;
                    B = m ^ -1;
                    j = H >>> 0 > B >>> 0;
                    Rt = j ? H : B;
                    I = Rt ^ -1;
                    q = rt(P, I) | 0;
                    R = q + -1 | 0;
                    U = R - Rt | 0;
                    _t = T;
                    jt = S;
                    Wt = 0;
                    while (1) {
                        oo(_t | 0, jt | 0, i | 0) | 0;
                        z = _t + i | 0;
                        W = s[k >> 2] | 0;
                        X = jt + W | 0;
                        V = Wt + 1 | 0;
                        Lt = (V | 0) == (M | 0);
                        if (Lt) {
                            break
                        } else {
                            _t = z;
                            jt = X;
                            Wt = V
                        }
                    }
                    Ft = T + U | 0;
                    u = W;
                    It = X;
                    qt = Ft
                } else {
                    Mt = T;
                    Bt = S;
                    zt = 0;
                    while (1) {
                        oo(Mt | 0, Bt | 0, i | 0) | 0;
                        $ = Mt + i | 0;
                        J = s[k >> 2] | 0;
                        Q = Bt + J | 0;
                        p = J + -1 | 0;
                        G = Bt + p | 0;
                        Y = r[G >> 0] | 0;
                        eo($ | 0, Y | 0, L | 0) | 0;
                        Z = Mt + d | 0;
                        et = zt + 1 | 0;
                        kt = (et | 0) == (M | 0);
                        if (kt) {
                            break
                        } else {
                            Mt = Z;
                            Bt = Q;
                            zt = et
                        }
                    }
                    a = s[k >> 2] | 0;
                    u = a;
                    It = Q;
                    qt = Z
                }
                f = s[A >> 2] | 0;
                nt = u;
                ot = f;
                Ot = qt;
                Ht = It;
                Ut = M
            }
            tt = 0 - nt | 0;
            it = Ht + tt | 0;
            st = ot & -4;
            at = Ut >>> 0 < st >>> 0;
            if (!at) {
                c = Jt;
                return
            }
            ft = (L | 0) == 0;
            l = nt ^ -1;
            lt = Ht + l | 0;
            h = i + L | 0;
            if (ft) {
                Pt = Ot;
                Vt = Ut;
                while (1) {
                    oo(Pt | 0, it | 0, i | 0) | 0;
                    ct = Pt + i | 0;
                    ht = Vt + 1 | 0;
                    pt = s[A >> 2] | 0;
                    dt = pt & -4;
                    vt = ht >>> 0 < dt >>> 0;
                    if (vt) {
                        Pt = ct;
                        Vt = ht
                    } else {
                        break
                    }
                }
                c = Jt;
                return
            } else {
                Dt = Ot;
                Xt = Ut;
                while (1) {
                    oo(Dt | 0, it | 0, i | 0) | 0;
                    mt = Dt + i | 0;
                    gt = r[lt >> 0] | 0;
                    eo(mt | 0, gt | 0, L | 0) | 0;
                    bt = Dt + h | 0;
                    wt = Xt + 1 | 0;
                    Et = s[A >> 2] | 0;
                    St = Et & -4;
                    xt = wt >>> 0 < St >>> 0;
                    if (xt) {
                        Dt = bt;
                        Xt = wt
                    } else {
                        break
                    }
                }
                c = Jt;
                return
            }
        }

        function ti(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0;
            y = c;
            t = e + 56 | 0;
            n = s[t >> 2] | 0;
            a = (n | 0) == (0 | 0);
            if (a) {
                c = y;
                return
            }
            f = n + 44 | 0;
            l = s[f >> 2] | 0;
            h = l + -1 | 0;
            s[f >> 2] = h;
            p = (l | 0) > 0;
            if (!p) {
                gt(5904 | 0, 5912 | 0, 87, 5928 | 0)
            }
            d = (h | 0) == 0;
            if (!d) {
                c = y;
                return
            }
            v = n + 40 | 0;
            m = s[v >> 2] | 0;
            r = (m | 0) == (0 | 0);
            if (!r) {
                _o[m & 7](n)
            }
            i = n + 48 | 0;
            o = s[i >> 2] | 0;
            u = (o | 0) == (0 | 0);
            if (!u) {
                c = y;
                return
            }
            bn(n);
            c = y;
            return
        }

        function ni(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0;
            var W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0;
            tt = c;
            i = (t | 0) == (0 | 0);
            if (i) {
                c = tt;
                return
            } else {
                n = t
            }
            while (1) {
                o = n + 44 | 0;
                y = s[o >> 2] | 0;
                A = n + 40 | 0;
                q = s[A >> 2] | 0;
                V = (q | 0) == 0;
                if (V) {
                    et = 10
                } else {
                    $ = q + -1 | 0;
                    s[A >> 2] = $;
                    J = (q | 0) > 0;
                    if (!J) {
                        et = 4;
                        break
                    }
                    K = ($ | 0) == 0;
                    if (K) {
                        et = 10
                    } else {
                        Q = n + 12 | 0;
                        u = s[Q >> 2] | 0;
                        a = (u | 0) == 0;
                        if (a) {
                            et = 7;
                            break
                        }
                        s[o >> 2] = 0
                    }
                }
                if ((et | 0) == 10) {
                    et = 0;
                    l = n + 12 | 0;
                    h = s[l >> 2] | 0;
                    p = (h | 0) == 0;
                    if (p) {
                        d = n + 20 | 0;
                        s[d >> 2] = 0;
                        v = n + 16 | 0;
                        s[v >> 2] = 0
                    }
                    m = n + 48 | 0;
                    g = s[m >> 2] | 0;
                    b = (g | 0) == (0 | 0);
                    if (b) {
                        P = h
                    } else {
                        w = s[g >> 2] | 0;
                        E = w + -1 | 0;
                        s[g >> 2] = E;
                        S = (w | 0) > 0;
                        if (!S) {
                            et = 14;
                            break
                        }
                        x = (E | 0) == 0;
                        if (!x) {
                            et = 16;
                            break
                        }
                        T = g + 8 | 0;
                        N = s[T >> 2] | 0;
                        ni(e, N);
                        C = s[m >> 2] | 0;
                        k = C + 8 | 0;
                        s[k >> 2] = 0;
                        L = s[m >> 2] | 0;
                        er(L);
                        s[m >> 2] = 0;
                        r = s[l >> 2] | 0;
                        P = r
                    }
                    Y = 0;
                    while (1) {
                        _ = Y << 1;
                        D = 1 << _;
                        H = P >>> 0 < D >>> 0;
                        O = Y + 1 | 0;
                        if (H) {
                            G = Y;
                            break
                        }
                        M = (O | 0) < 5;
                        if (M) {
                            Y = O
                        } else {
                            G = O;
                            break
                        }
                    }
                    B = (G | 0) == 5;
                    if (B) {
                        j = n + 20 | 0;
                        F = s[j >> 2] | 0;
                        I = (F | 0) == (0 | 0);
                        if (I) {
                            et = 23;
                            break
                        }
                        _s(F);
                        s[j >> 2] = 0;
                        s[l >> 2] = 0;
                        Z = 0
                    } else {
                        Z = G
                    }
                    R = (e + (Z << 3) | 0) + 52 | 0;
                    U = s[R >> 2] | 0;
                    z = U + 1 | 0;
                    s[R >> 2] = z;
                    W = (e + (Z << 3) | 0) + 56 | 0;
                    X = s[W >> 2] | 0;
                    s[o >> 2] = X;
                    s[W >> 2] = n
                }
                f = (y | 0) == (0 | 0);
                if (f) {
                    et = 26;
                    break
                } else {
                    n = y
                }
            }
            if ((et | 0) == 4) {
                gt(7152 | 0, 7160 | 0, 87, 7176 | 0)
            } else if ((et | 0) == 7) {
                gt(6320 | 0, 6336 | 0, 133, 6360 | 0)
            } else if ((et | 0) == 14) {
                gt(7152 | 0, 7160 | 0, 87, 7176 | 0)
            } else if ((et | 0) == 16) {
                gt(6400 | 0, 6336 | 0, 146, 6360 | 0)
            } else if ((et | 0) == 23) {
                gt(6408 | 0, 6336 | 0, 156, 6360 | 0)
            } else if ((et | 0) == 26) {
                c = tt;
                return
            }
        }

        function ri(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0;
            U = c;
            n = e + 48 | 0;
            r = s[n >> 2] | 0;
            m = (r | 0) == (0 | 0);
            do {
                if (!m) {
                    k = s[r >> 2] | 0;
                    H = (k | 0) == 0;
                    if (!H) {
                        B = k + -1 | 0;
                        s[r >> 2] = B;
                        j = (k | 0) > 0;
                        if (!j) {
                            gt(7152 | 0, 7160 | 0, 87, 7176 | 0)
                        }
                        F = (B | 0) == 0;
                        if (F) {
                            o = r + 8 | 0;
                            u = s[o >> 2] | 0;
                            ni(e, u);
                            a = r + 12 | 0;
                            s[a >> 2] = 0;
                            s[o >> 2] = 0;
                            f = r + 4 | 0;
                            s[f >> 2] = 0;
                            l = e + 204 | 0;
                            h = s[l >> 2] | 0;
                            p = h + 1 | 0;
                            s[l >> 2] = p;
                            break
                        } else {
                            I = e + 200 | 0;
                            q = s[I >> 2] | 0;
                            i = q + 1 | 0;
                            s[I >> 2] = i;
                            s[n >> 2] = 0;
                            break
                        }
                    }
                }
            } while (0);
            d = t + 64 | 0;
            v = s[d >> 2] | 0;
            s[d >> 2] = 0;
            g = (v | 0) == (0 | 0);
            if (g) {
                c = U;
                return
            }
            y = s[v >> 2] | 0;
            b = y + -1 | 0;
            s[v >> 2] = b;
            w = (y | 0) > 0;
            if (!w) {
                gt(7152 | 0, 7160 | 0, 87, 7176 | 0)
            }
            E = (b | 0) == 0;
            if (!E) {
                S = e + 208 | 0;
                x = s[S >> 2] | 0;
                T = x + 1 | 0;
                s[S >> 2] = T;
                c = U;
                return
            }
            N = v + 8 | 0;
            C = s[N >> 2] | 0;
            ni(e, C);
            L = v + 12 | 0;
            s[L >> 2] = 0;
            s[N >> 2] = 0;
            A = v + 4 | 0;
            s[A >> 2] = 0;
            O = e + 212 | 0;
            M = s[O >> 2] | 0;
            _ = M + 1 | 0;
            s[O >> 2] = _;
            D = s[n >> 2] | 0;
            P = (D | 0) == (0 | 0);
            if (P) {
                s[n >> 2] = v;
                c = U;
                return
            } else {
                er(v);
                c = U;
                return
            }
        }

        function ii(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0;
            var N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0;
            var X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0;
            it = c;
            et = 0;
            while (1) {
                g = et << 1;
                L = 1 << g;
                I = (L | 0) < (n | 0);
                r = et + 1 | 0;
                if (!I) {
                    rt = 4;
                    break
                }
                i = (r | 0) < 4;
                if (i) {
                    et = r
                } else {
                    tt = r;
                    rt = 6;
                    break
                }
            }
            if ((rt | 0) == 4) {
                K = (et | 0) > 0;
                if (K) {
                    tt = et;
                    rt = 6
                } else {
                    rt = 10
                }
            }
            e: do {
                if ((rt | 0) == 6) {
                    while (1) {
                        rt = 0;
                        Y = (e + (tt << 3) | 0) + 56 | 0;
                        Z = s[Y >> 2] | 0;
                        o = (Z | 0) == (0 | 0);
                        Q = tt + -1 | 0;
                        if (!o) {
                            break
                        }
                        G = (Q | 0) > 0;
                        if (G) {
                            tt = Q;
                            rt = 6
                        } else {
                            rt = 10;
                            break e
                        }
                    }
                    u = (e + (tt << 2) | 0) + 220 | 0;
                    a = s[u >> 2] | 0;
                    f = a + 1 | 0;
                    s[u >> 2] = f;
                    l = Z + 44 | 0;
                    h = s[l >> 2] | 0;
                    s[Y >> 2] = h;
                    s[l >> 2] = 0;
                    p = (e + (tt << 3) | 0) + 52 | 0;
                    d = s[p >> 2] | 0;
                    v = (d | 0) == 0;
                    if (v) {
                        gt(6424 | 0, 6336 | 0, 232, 6448 | 0)
                    } else {
                        m = d + -1 | 0;
                        s[p >> 2] = m;
                        nt = Z;
                        break
                    }
                }
            } while (0);
            if ((rt | 0) == 10) {
                y = Ds(1, 64) | 0;
                b = e + 216 | 0;
                w = s[b >> 2] | 0;
                E = w + 1 | 0;
                s[b >> 2] = E;
                nt = y
            }
            s[nt >> 2] = t;
            S = nt + 60 | 0;
            s[S >> 2] = 1;
            x = nt + 28 | 0;
            s[x >> 2] = 0;
            T = nt + 36 | 0;
            s[T >> 2] = -1;
            N = nt + 56 | 0;
            s[N >> 2] = 0;
            C = e + 20 | 0;
            k = s[C >> 2] | 0;
            A = nt + 52 | 0;
            s[A >> 2] = k;
            O = nt + 48 | 0;
            M = s[O >> 2] | 0;
            _ = (M | 0) == (0 | 0);
            if (!_) {
                gt(6480 | 0, 6336 | 0, 247, 6448 | 0)
            }
            D = (n | 0) > 0;
            if (!D) {
                W = nt + 20 | 0;
                X = s[W >> 2] | 0;
                V = (X | 0) == (0 | 0);
                if (!V) {
                    _s(X)
                }
                s[W >> 2] = 0;
                $ = nt + 12 | 0;
                s[$ >> 2] = 0;
                J = nt + 16 | 0;
                s[J >> 2] = 0;
                c = it;
                return nt | 0
            }
            P = n + -1 | 0;
            H = nt + 16 | 0;
            s[H >> 2] = P;
            B = nt + 12 | 0;
            j = s[B >> 2] | 0;
            F = j >>> 0 < n >>> 0;
            if (!F) {
                c = it;
                return nt | 0
            }
            q = nt + 20 | 0;
            R = s[q >> 2] | 0;
            U = (R | 0) == (0 | 0);
            if (!U) {
                _s(R)
            }
            s[B >> 2] = n;
            z = Ms(n) | 0;
            s[q >> 2] = z;
            c = it;
            return nt | 0
        }

        function si(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0;
            var W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0;
            var lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0;
            var Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0;
            var Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0;
            cn = c;
            l = e + 92 | 0;
            h = s[l >> 2] | 0;
            x = (h | 0) == 0;
            if (x) {
                wt = t + 56 | 0;
                s[wt >> 2] = 0;
                Et = e + 48 | 0;
                St = s[Et >> 2] | 0;
                jt = St;
                ln = 20
            } else {
                P = e + 96 | 0;
                X = s[P >> 2] | 0;
                nt = (X | 0) == (0 | 0);
                u = t + 16 | 0;
                a = t + 20 | 0;
                f = t + 52 | 0;
                e: do {
                    if (nt) {
                        ln = 12
                    } else {
                        nn = X;
                        fn = P;
                        t: while (1) {
                            $t = nn;
                            while (1) {
                                Bt = s[$t >> 2] | 0;
                                p = s[t >> 2] | 0;
                                d = (Bt | 0) == (p | 0);
                                if (d) {
                                    v = $t + 16 | 0;
                                    m = s[v >> 2] | 0;
                                    g = s[u >> 2] | 0;
                                    y = (m | 0) == (g | 0);
                                    if (y) {
                                        b = $t + 20 | 0;
                                        w = s[b >> 2] | 0;
                                        E = s[a >> 2] | 0;
                                        S = Gs(w, E, m) | 0;
                                        T = (S | 0) == 0;
                                        if (T) {
                                            break t
                                        }
                                    }
                                }
                                N = s[f >> 2] | 0;
                                C = $t + 52 | 0;
                                k = s[C >> 2] | 0;
                                L = N - k | 0;
                                A = L >>> 0 > 4e3;
                                O = $t + 44 | 0;
                                pt = s[O >> 2] | 0;
                                if (!A) {
                                    break
                                }
                                s[O >> 2] = 0;
                                M = s[fn >> 2] | 0;
                                ni(e, M);
                                s[fn >> 2] = pt;
                                _ = (pt | 0) == (0 | 0);
                                if (_) {
                                    ln = 12;
                                    break e
                                } else {
                                    $t = pt
                                }
                            }
                            Nt = (pt | 0) == (0 | 0);
                            if (Nt) {
                                ln = 12;
                                break e
                            } else {
                                nn = pt;
                                fn = O
                            }
                        }
                        D = ($t | 0) == (0 | 0);
                        if (D) {
                            ln = 12
                        } else {
                            n = $t + 52 | 0;
                            i = s[n >> 2] | 0;
                            r = $t + 56 | 0;
                            o = s[r >> 2] | 0;
                            ot = i;
                            lt = o;
                            an = $t
                        }
                    }
                } while (0);
                if ((ln | 0) == 12) {
                    H = s[t >> 2] | 0;
                    B = s[u >> 2] | 0;
                    j = B + 1 | 0;
                    F = ii(e, H, j) | 0;
                    I = t + 4 | 0;
                    q = s[I >> 2] | 0;
                    R = F + 4 | 0;
                    s[R >> 2] = q;
                    U = t + 8 | 0;
                    z = s[U >> 2] | 0;
                    W = F + 8 | 0;
                    s[W >> 2] = z;
                    V = F + 20 | 0;
                    $ = s[V >> 2] | 0;
                    J = s[a >> 2] | 0;
                    K = s[u >> 2] | 0;
                    oo($ | 0, J | 0, K | 0) | 0;
                    Q = s[f >> 2] | 0;
                    G = Q + -2e3 | 0;
                    Y = F + 52 | 0;
                    s[Y >> 2] = G;
                    Z = F + 56 | 0;
                    s[Z >> 2] = 0;
                    et = s[P >> 2] | 0;
                    tt = F + 44 | 0;
                    s[tt >> 2] = et;
                    s[P >> 2] = F;
                    ot = G;
                    lt = 0;
                    an = F
                }
                rt = s[f >> 2] | 0;
                it = an + 52 | 0;
                st = rt - ot | 0;
                s[it >> 2] = rt;
                ut = st >>> 0 < 1e3;
                at = st >>> 0 > 1999;
                ft = an + 56 | 0;
                ct = (lt | 0) > -1;
                on = ct | ut;
                rn = on ^ 1;
                un = at | rn;
                if (un) {
                    ht = s[t >> 2] | 0;
                    dt = zn(ht) | 0;
                    vt = (e + (dt << 2) | 0) + 116 | 0;
                    mt = s[vt >> 2] | 0;
                    yt = 0 - mt | 0;
                    s[ft >> 2] = yt;
                    Tt = yt
                } else {
                    sn = ct | ut;
                    if (sn) {
                        bt = lt + 1 | 0;
                        s[ft >> 2] = bt;
                        Tt = bt
                    } else {
                        Tt = lt
                    }
                }
                xt = t + 56 | 0;
                s[xt >> 2] = Tt;
                Ct = e + 48 | 0;
                kt = s[Ct >> 2] | 0;
                Lt = (Tt | 0) == 0;
                if (Lt) {
                    jt = kt;
                    ln = 20
                } else {
                    At = kt + 8 | 0;
                    Ot = s[At >> 2] | 0;
                    Mt = t + 44 | 0;
                    s[Mt >> 2] = Ot;
                    s[At >> 2] = t;
                    _t = kt + 12 | 0;
                    Dt = s[_t >> 2] | 0;
                    Pt = (Dt | 0) == (0 | 0);
                    if (Pt) {
                        s[_t >> 2] = t
                    }
                }
            }
            if ((ln | 0) == 20) {
                Ht = jt + 12 | 0;
                Ft = s[Ht >> 2] | 0;
                It = (Ft | 0) == (0 | 0);
                if (It) {
                    qt = jt + 8 | 0;
                    Rt = s[qt >> 2] | 0;
                    Ut = t + 44 | 0;
                    s[Ut >> 2] = Rt;
                    s[qt >> 2] = t
                } else {
                    zt = Ft + 44 | 0;
                    Wt = s[zt >> 2] | 0;
                    Xt = t + 44 | 0;
                    s[Xt >> 2] = Wt;
                    Vt = s[Ht >> 2] | 0;
                    Jt = Vt + 44 | 0;
                    s[Jt >> 2] = t
                }
                Kt = jt + 4 | 0;
                Qt = s[Kt >> 2] | 0;
                Gt = Qt + 1 | 0;
                s[Kt >> 2] = Gt
            }
            Yt = t + 40 | 0;
            Zt = s[Yt >> 2] | 0;
            en = Zt + 1 | 0;
            s[Yt >> 2] = en;
            tn = (Zt | 0) > -2;
            if (tn) {
                c = cn;
                return
            } else {
                gt(7152 | 0, 7160 | 0, 87, 7176 | 0)
            }
        }

        function oi() {
            var e = 0,
                t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0;
            var S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0;
            var U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0;
            Z = c;
            t = Ds(1, 240) | 0;
            n = (t | 0) == (0 | 0);
            if (n) {
                e = 0;
                c = Z;
                return e | 0
            }
            v = ts() | 0;
            C = t + 4 | 0;
            s[C >> 2] = v;
            j = hi(v) | 0;
            s[t >> 2] = j;
            V = s[C >> 2] | 0;
            $ = (V | 0) == (0 | 0);
            J = (j | 0) == (0 | 0);
            G = $ | J;
            if (G) {
                ui(t);
                e = 0;
                c = Z;
                return e | 0
            } else {
                fs(V, t);
                K = s[C >> 2] | 0;
                as(K, 5) | 0;
                Q = Ei() | 0;
                r = t + 8 | 0;
                s[r >> 2] = Q;
                i = t + 108 | 0;
                s[i >> 2] = 1;
                o = t + 112 | 0;
                s[o >> 2] = 1;
                u = t + 100 | 0;
                a = s[u >> 2] | 0;
                f = a | 1;
                s[u >> 2] = f;
                l = t + 116 | 0;
                s[l >> 2] = 2;
                h = t + 120 | 0;
                s[h >> 2] = 2;
                p = t + 124 | 0;
                s[p >> 2] = 2;
                d = t + 128 | 0;
                s[d >> 2] = 2;
                m = t + 132 | 0;
                s[m >> 2] = 2;
                g = t + 136 | 0;
                s[g >> 2] = 2;
                y = t + 140 | 0;
                s[y >> 2] = 2;
                b = t + 144 | 0;
                s[b >> 2] = 2;
                w = t + 148 | 0;
                s[w >> 2] = 2;
                E = t + 152 | 0;
                s[E >> 2] = 2;
                S = t + 156 | 0;
                s[S >> 2] = 2;
                x = t + 160 | 0;
                s[x >> 2] = 2;
                T = t + 164 | 0;
                s[T >> 2] = 2;
                N = t + 168 | 0;
                s[N >> 2] = 2;
                k = t + 172 | 0;
                s[k >> 2] = 2;
                L = t + 176 | 0;
                s[L >> 2] = 2;
                A = t + 180 | 0;
                s[A >> 2] = 2;
                O = t + 184 | 0;
                s[O >> 2] = 2;
                M = t + 188 | 0;
                s[M >> 2] = 2;
                _ = t + 192 | 0;
                s[_ >> 2] = 2;
                D = zn(64) | 0;
                P = (t + (D << 2) | 0) + 116 | 0;
                s[P >> 2] = 0;
                H = zn(128) | 0;
                B = (t + (H << 2) | 0) + 116 | 0;
                s[B >> 2] = 0;
                F = zn(93) | 0;
                I = (t + (F << 2) | 0) + 116 | 0;
                s[I >> 2] = 0;
                q = zn(39) | 0;
                R = (t + (q << 2) | 0) + 116 | 0;
                s[R >> 2] = 0;
                U = zn(38) | 0;
                z = (t + (U << 2) | 0) + 116 | 0;
                s[z >> 2] = 1;
                W = zn(15) | 0;
                X = (t + (W << 2) | 0) + 116 | 0;
                s[X >> 2] = 0;
                e = t;
                c = Z;
                return e | 0
            }
            return 0 | 0
        }

        function ui(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0;
            var W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0;
            var lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0;
            var Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0;
            var Qt = 0,
                Gt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0;
            sn = c;
            c = c + 16 | 0;
            It = sn;
            l = s[80 >> 2] | 0;
            h = (l | 0) > 0;
            if (h) {
                T = s[g >> 2] | 0;
                H = e + 196 | 0;
                V = s[H >> 2] | 0;
                s[It >> 2] = 6792;
                qt = It + 4 | 0;
                s[qt >> 2] = V;
                Yt(T | 0, 6752 | 0, It | 0) | 0;
                t = s[80 >> 2] | 0;
                rt = (t | 0) > 0;
                if (rt) {
                    dt = e + 200 | 0;
                    Nt = s[dt >> 2] | 0;
                    _t = e + 204 | 0;
                    Dt = s[_t >> 2] | 0;
                    s[It >> 2] = 6792;
                    tn = It + 4 | 0;
                    s[tn >> 2] = Nt;
                    nn = It + 8 | 0;
                    s[nn >> 2] = Dt;
                    Yt(T | 0, 6808 | 0, It | 0) | 0;
                    n = s[80 >> 2] | 0;
                    p = (n | 0) > 0;
                    if (p) {
                        d = e + 208 | 0;
                        v = s[d >> 2] | 0;
                        m = e + 212 | 0;
                        y = s[m >> 2] | 0;
                        s[It >> 2] = 6792;
                        Rt = It + 4 | 0;
                        s[Rt >> 2] = v;
                        Ut = It + 8 | 0;
                        s[Ut >> 2] = y;
                        Yt(T | 0, 6864 | 0, It | 0) | 0;
                        r = s[80 >> 2] | 0;
                        b = (r | 0) > 0;
                        if (b) {
                            w = e + 216 | 0;
                            E = s[w >> 2] | 0;
                            s[It >> 2] = 6792;
                            zt = It + 4 | 0;
                            s[zt >> 2] = E;
                            Yt(T | 0, 6920 | 0, It | 0) | 0;
                            i = s[80 >> 2] | 0;
                            S = (i | 0) > 0;
                            if (S) {
                                x = e + 220 | 0;
                                N = s[x >> 2] | 0;
                                s[It >> 2] = 6792;
                                Wt = It + 4 | 0;
                                s[Wt >> 2] = 0;
                                Xt = It + 8 | 0;
                                s[Xt >> 2] = N;
                                Yt(T | 0, 6960 | 0, It | 0) | 0;
                                o = s[80 >> 2] | 0;
                                C = (o | 0) > 0;
                                if (C) {
                                    k = e + 224 | 0;
                                    L = s[k >> 2] | 0;
                                    s[It >> 2] = 6792;
                                    Vt = It + 4 | 0;
                                    s[Vt >> 2] = 1;
                                    $t = It + 8 | 0;
                                    s[$t >> 2] = L;
                                    Yt(T | 0, 6960 | 0, It | 0) | 0;
                                    u = s[80 >> 2] | 0;
                                    A = (u | 0) > 0;
                                    if (A) {
                                        O = e + 228 | 0;
                                        M = s[O >> 2] | 0;
                                        s[It >> 2] = 6792;
                                        Jt = It + 4 | 0;
                                        s[Jt >> 2] = 2;
                                        Kt = It + 8 | 0;
                                        s[Kt >> 2] = M;
                                        Yt(T | 0, 6960 | 0, It | 0) | 0;
                                        a = s[80 >> 2] | 0;
                                        _ = (a | 0) > 0;
                                        if (_) {
                                            D = e + 232 | 0;
                                            P = s[D >> 2] | 0;
                                            s[It >> 2] = 6792;
                                            Qt = It + 4 | 0;
                                            s[Qt >> 2] = 3;
                                            Gt = It + 8 | 0;
                                            s[Gt >> 2] = P;
                                            Yt(T | 0, 6960 | 0, It | 0) | 0;
                                            f = s[80 >> 2] | 0;
                                            B = (f | 0) > 0;
                                            if (B) {
                                                j = e + 236 | 0;
                                                F = s[j >> 2] | 0;
                                                s[It >> 2] = 6792;
                                                Zt = It + 4 | 0;
                                                s[Zt >> 2] = 4;
                                                en = It + 8 | 0;
                                                s[en >> 2] = F;
                                                Yt(T | 0, 6960 | 0, It | 0) | 0
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            I = e + 48 | 0;
            q = s[I >> 2] | 0;
            R = (q | 0) == (0 | 0);
            if (!R) {
                U = s[q >> 2] | 0;
                z = (U | 0) == 0;
                if (z) {
                    er(q)
                } else {
                    Xn(q, -1)
                }
                s[I >> 2] = 0
            }
            W = s[e >> 2] | 0;
            X = (W | 0) == (0 | 0);
            if (!X) {
                pi(W)
            }
            s[e >> 2] = 0;
            $ = e + 4 | 0;
            J = s[$ >> 2] | 0;
            K = (J | 0) == (0 | 0);
            if (!K) {
                rs(J)
            }
            s[$ >> 2] = 0;
            Q = e + 56 | 0;
            G = s[Q >> 2] | 0;
            Y = (G | 0) == (0 | 0);
            if (!Y) {
                Pt = G;
                while (1) {
                    Z = Pt + 44 | 0;
                    et = s[Z >> 2] | 0;
                    Wn(Pt);
                    tt = (et | 0) == (0 | 0);
                    if (tt) {
                        break
                    } else {
                        Pt = et
                    }
                }
            }
            nt = e + 64 | 0;
            it = s[nt >> 2] | 0;
            st = (it | 0) == (0 | 0);
            if (!st) {
                Ht = it;
                while (1) {
                    ut = Ht + 44 | 0;
                    at = s[ut >> 2] | 0;
                    Wn(Ht);
                    ft = (at | 0) == (0 | 0);
                    if (ft) {
                        break
                    } else {
                        Ht = at
                    }
                }
            }
            lt = e + 72 | 0;
            ct = s[lt >> 2] | 0;
            ht = (ct | 0) == (0 | 0);
            if (!ht) {
                Bt = ct;
                while (1) {
                    pt = Bt + 44 | 0;
                    vt = s[pt >> 2] | 0;
                    Wn(Bt);
                    mt = (vt | 0) == (0 | 0);
                    if (mt) {
                        break
                    } else {
                        Bt = vt
                    }
                }
            }
            gt = e + 80 | 0;
            yt = s[gt >> 2] | 0;
            bt = (yt | 0) == (0 | 0);
            if (!bt) {
                jt = yt;
                while (1) {
                    wt = jt + 44 | 0;
                    Et = s[wt >> 2] | 0;
                    Wn(jt);
                    St = (Et | 0) == (0 | 0);
                    if (St) {
                        break
                    } else {
                        jt = Et
                    }
                }
            }
            xt = e + 88 | 0;
            Tt = s[xt >> 2] | 0;
            Ct = (Tt | 0) == (0 | 0);
            if (!Ct) {
                Ft = Tt;
                while (1) {
                    kt = Ft + 44 | 0;
                    Lt = s[kt >> 2] | 0;
                    Wn(Ft);
                    At = (Lt | 0) == (0 | 0);
                    if (At) {
                        break
                    } else {
                        Ft = Lt
                    }
                }
            }
            Ot = e + 8 | 0;
            ot = s[Ot >> 2] | 0;
            Mt = (ot | 0) == (0 | 0);
            if (Mt) {
                _s(e);
                c = sn;
                return
            }
            Si(ot);
            _s(e);
            c = sn;
            return
        }

        function ai(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0;
            var W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0;
            var ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0;
            var _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0;
            var Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0;
            var wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0;
            var qn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0;
            var ur = 0,
                ar = 0,
                fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0;
            Er = c;
            c = c + 32 | 0;
            ur = Er;
            a = ls(e) | 0;
            f = cs(e) | 0;
            wt = (f | 0) == 64;
            if (wt) {
                Mt = a + 4 | 0;
                Ut = s[Mt >> 2] | 0;
                en = bi(Ut) | 0;
                hn = (en | 0) == (0 | 0);
                if (hn) {
                    gt(7128 | 0, 6336 | 0, 367, 7136 | 0)
                }
                xn = s[a >> 2] | 0;
                Pn = s[en >> 2] | 0;
                Vn = vi(xn, Pn, 2) | 0;
                l = s[a >> 2] | 0;
                x = en + 12 | 0;
                P = s[x >> 2] | 0;
                X = vi(l, P, 2) | 0;
                nt = Vn - X | 0;
                s[x >> 2] = nt;
                dt = s[a >> 2] | 0;
                vt = en + 8 | 0;
                mt = s[vt >> 2] | 0;
                yt = vi(dt, mt, 2) | 0;
                s[vt >> 2] = yt;
                bt = s[a >> 2] | 0;
                Et = en + 16 | 0;
                St = s[Et >> 2] | 0;
                xt = vi(bt, St, 2) | 0;
                Tt = s[vt >> 2] | 0;
                Nt = xt - Tt | 0;
                s[Et >> 2] = Nt;
                Ct = Tt - Vn | 0;
                s[vt >> 2] = Ct;
                kt = a + 40 | 0;
                Lt = s[kt >> 2] | 0;
                At = Lt << 2;
                Ot = a + 36 | 0;
                _t = s[Ot >> 2] | 0;
                Dt = rt(_t, Vn) | 0;
                Pt = Dt + At | 0;
                Ht = (_t | 0) < 0;
                if (Ht) {
                    Bt = s[x >> 2] | 0;
                    s[x >> 2] = Nt;
                    s[Et >> 2] = Bt;
                    jt = Pt - Ct | 0;
                    or = jt
                } else {
                    or = Pt
                }
                Ft = a + 28 | 0;
                It = s[Ft >> 2] | 0;
                qt = (It | 0) != 0;
                Rt = qt & 1;
                zt = Rt ^ 1;
                Wt = en + (zt << 2) | 0;
                s[Wt >> 2] = or;
                Xt = a + 44 | 0;
                Vt = s[Xt >> 2] | 0;
                $t = Vt << 2;
                Jt = $t | 2;
                Kt = en + (Rt << 2) | 0;
                s[Kt >> 2] = Jt;
                Qt = a + 8 | 0;
                Gt = s[Qt >> 2] | 0;
                Ni(Gt, zt, en) | 0;
                c = Er;
                return
            }
            Zt = a + 100 | 0;
            tn = s[Zt >> 2] | 0;
            nn = tn & 1;
            rn = (nn | 0) == 0;
            if (rn) {
                yr = 0;
                br = 0
            } else {
                sn = s[a >> 2] | 0;
                on = di(sn) | 0;
                un = a + 40 | 0;
                an = s[un >> 2] | 0;
                fn = a + 36 | 0;
                ln = s[fn >> 2] | 0;
                cn = s[a >> 2] | 0;
                pn = vi(cn, on, 0) | 0;
                dn = rt(pn, ln) | 0;
                vn = dn + an | 0;
                mn = a + 28 | 0;
                gn = s[mn >> 2] | 0;
                yn = (gn | 0) == 0;
                bn = a + 44 | 0;
                wn = s[bn >> 2] | 0;
                t = yn ? vn : wn;
                n = yn ? wn : vn;
                yr = n;
                br = t
            }
            En = f >>> 0 < 2;
            if (En) {
                Sn = s[80 >> 2] | 0;
                Tn = (Sn | 0) > 255;
                if (!Tn) {
                    c = Er;
                    return
                }
                Nn = s[g >> 2] | 0;
                s[ur >> 2] = 7032;
                ar = ur + 4 | 0;
                s[ar >> 2] = yr;
                pr = ur + 8 | 0;
                s[pr >> 2] = br;
                Yt(Nn | 0, 7e3 | 0, ur | 0) | 0;
                c = Er;
                return
            }
            Cn = ss(e) | 0;
            kn = os(e) | 0;
            Ln = a + 48 | 0;
            An = s[Ln >> 2] | 0;
            On = An + 8 | 0;
            ir = s[On >> 2] | 0;
            Mn = (ir | 0) == (0 | 0);
            e: do {
                if (!Mn) {
                    sr = ir;
                    while (1) {
                        _n = s[sr >> 2] | 0;
                        Dn = (_n | 0) == (f | 0);
                        if (Dn) {
                            Hn = sr + 16 | 0;
                            Bn = s[Hn >> 2] | 0;
                            jn = (Bn | 0) == (kn | 0);
                            if (jn) {
                                Fn = sr + 20 | 0;
                                In = s[Fn >> 2] | 0;
                                qn = Gs(In, Cn, kn) | 0;
                                Un = (qn | 0) == 0;
                                if (Un) {
                                    break
                                }
                            }
                        }
                        S = sr + 44 | 0;
                        rr = s[S >> 2] | 0;
                        T = (rr | 0) == (0 | 0);
                        if (T) {
                            break e
                        } else {
                            sr = rr
                        }
                    }
                    zn = sr + 60 | 0;
                    Wn = s[zn >> 2] | 0;
                    Xn = Wn + 1 | 0;
                    s[zn >> 2] = Xn;
                    $n = s[80 >> 2] | 0;
                    Jn = ($n | 0) > 223;
                    if (Jn) {
                        Kn = s[g >> 2] | 0;
                        Qn = Rn(f) | 0;
                        s[ur >> 2] = 7032;
                        dr = ur + 4 | 0;
                        s[dr >> 2] = yr;
                        vr = ur + 8 | 0;
                        s[vr >> 2] = br;
                        mr = ur + 12 | 0;
                        s[mr >> 2] = Qn;
                        gr = ur + 16 | 0;
                        s[gr >> 2] = Cn;
                        Yt(Kn | 0, 7048 | 0, ur | 0) | 0
                    }
                    Gn = s[Zt >> 2] | 0;
                    Yn = Gn & 1;
                    Zn = (Yn | 0) == 0;
                    if (Zn) {
                        c = Er;
                        return
                    }
                    er = sr + 28 | 0;
                    tr = s[er >> 2] | 0;
                    nr = tr + 1 | 0;
                    s[er >> 2] = nr;
                    h = sr + 24 | 0;
                    p = s[h >> 2] | 0;
                    d = nr >>> 0 < p >>> 0;
                    r = sr + 32 | 0;
                    o = s[r >> 2] | 0;
                    if (d) {
                        w = o
                    } else {
                        v = p + 1 | 0;
                        s[h >> 2] = v;
                        m = v << 3;
                        y = Ps(o, m) | 0;
                        s[r >> 2] = y;
                        w = y
                    }
                    b = w + (tr << 3) | 0;
                    s[b >> 2] = yr;
                    E = (w + (tr << 3) | 0) + 4 | 0;
                    s[E >> 2] = br;
                    c = Er;
                    return
                }
            } while (0);
            N = kn + 1 | 0;
            C = ii(a, f, N) | 0;
            k = ds(e, f) | 0;
            L = C + 4 | 0;
            s[L >> 2] = k;
            A = hs(e) | 0;
            O = C + 8 | 0;
            s[O >> 2] = A;
            M = C + 20 | 0;
            _ = s[M >> 2] | 0;
            oo(_ | 0, Cn | 0, N | 0) | 0;
            D = s[Zt >> 2] | 0;
            H = D & 1;
            B = (H | 0) == 0;
            if (!B) {
                j = s[80 >> 2] | 0;
                F = (j | 0) > 191;
                if (F) {
                    I = s[g >> 2] | 0;
                    q = Rn(f) | 0;
                    s[ur >> 2] = 7032;
                    fr = ur + 4 | 0;
                    s[fr >> 2] = yr;
                    lr = ur + 8 | 0;
                    s[lr >> 2] = br;
                    cr = ur + 12 | 0;
                    s[cr >> 2] = q;
                    hr = ur + 16 | 0;
                    s[hr >> 2] = Cn;
                    Yt(I | 0, 7088 | 0, ur | 0) | 0
                }
                R = C + 28 | 0;
                U = s[R >> 2] | 0;
                z = U + 1 | 0;
                s[R >> 2] = z;
                W = C + 24 | 0;
                V = s[W >> 2] | 0;
                $ = z >>> 0 < V >>> 0;
                i = C + 32 | 0;
                u = s[i >> 2] | 0;
                if ($) {
                    Y = u
                } else {
                    J = V + 1 | 0;
                    s[W >> 2] = J;
                    K = J << 3;
                    Q = Ps(u, K) | 0;
                    s[i >> 2] = Q;
                    Y = Q
                }
                G = Y + (U << 3) | 0;
                s[G >> 2] = yr;
                Z = (Y + (U << 3) | 0) + 4 | 0;
                s[Z >> 2] = br
            }
            et = us(e) | 0;
            tt = (et | 0) == 0;
            if (!tt) {
                it = a + 32 | 0;
                st = s[it >> 2] | 0;
                ot = (st | 0) != 0;
                ut = ot & 1;
                at = a + 36 | 0;
                ft = s[at >> 2] | 0;
                lt = ft ^ et;
                ct = lt & 2;
                ht = ct | ut;
                pt = C + 36 | 0;
                s[pt >> 2] = ht
            }
            si(a, C);
            c = Er;
            return
        }

        function fi(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0;
            l = c;
            n = e + 96 | 0;
            r = s[n >> 2] | 0;
            i = (r | 0) == (0 | 0);
            if (!i) {
                ni(e, r);
                s[n >> 2] = 0
            }
            o = (t | 0) != 0;
            u = o & 1;
            a = e + 92 | 0;
            s[a >> 2] = u;
            c = l;
            return
        }

        function li(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            t = e + 48 | 0;
            n = s[t >> 2] | 0;
            c = i;
            return n | 0
        }

        function ci(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0;
            var V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0;
            var pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0;
            var Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Zt = 0,
                en = 0,
                tn = 0;
            var nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0;
            var xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0;
            var zn = 0,
                Wn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0,
                ur = 0,
                ar = 0,
                fr = 0,
                lr = 0;
            var cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0,
                Tr = 0,
                Nr = 0,
                Cr = 0,
                kr = 0,
                Lr = 0,
                Ar = 0,
                Or = 0;
            var Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0,
                Wr = 0,
                Xr = 0,
                Vr = 0,
                $r = 0,
                Jr = 0,
                Kr = 0,
                Qr = 0;
            var Gr = 0,
                Yr = 0,
                Zr = 0,
                ei = 0,
                ti = 0,
                oi = 0,
                ui = 0,
                ai = 0,
                fi = 0,
                li = 0,
                ci = 0,
                hi = 0,
                pi = 0,
                di = 0,
                vi = 0,
                bi = 0,
                wi = 0,
                Ei = 0,
                Si = 0,
                Ti = 0;
            var Ni = 0,
                ki = 0,
                Li = 0,
                Ai = 0,
                Oi = 0,
                Mi = 0,
                _i = 0,
                Di = 0,
                Pi = 0,
                Hi = 0,
                Bi = 0,
                ji = 0,
                Fi = 0,
                Ii = 0,
                qi = 0,
                Ri = 0,
                Ui = 0,
                zi = 0,
                Wi = 0,
                Xi = 0;
            var Vi = 0,
                $i = 0,
                Ji = 0,
                Ki = 0,
                Qi = 0,
                Gi = 0,
                Yi = 0,
                Zi = 0,
                es = 0,
                ts = 0,
                ns = 0,
                rs = 0,
                is = 0,
                ss = 0,
                os = 0,
                us = 0,
                as = 0,
                fs = 0,
                ls = 0,
                cs = 0;
            var hs = 0,
                ps = 0,
                ds = 0,
                vs = 0,
                ms = 0,
                gs = 0,
                ys = 0,
                bs = 0,
                ws = 0,
                Es = 0,
                Ss = 0,
                xs = 0,
                Ts = 0,
                Ns = 0,
                Cs = 0,
                ks = 0,
                Ls = 0,
                As = 0,
                Os = 0,
                Ms = 0;
            var _s = 0,
                Ds = 0,
                Ps = 0,
                Hs = 0,
                Bs = 0,
                js = 0,
                Fs = 0,
                Is = 0,
                qs = 0,
                Rs = 0,
                Us = 0,
                zs = 0,
                Ws = 0,
                Xs = 0,
                Vs = 0,
                $s = 0,
                Js = 0,
                Ks = 0,
                Qs = 0,
                Ys = 0;
            var Zs = 0,
                eo = 0,
                to = 0,
                no = 0,
                ro = 0,
                io = 0,
                so = 0,
                uo = 0,
                ao = 0,
                fo = 0,
                lo = 0,
                co = 0,
                ho = 0,
                po = 0,
                vo = 0,
                mo = 0,
                go = 0,
                yo = 0,
                bo = 0,
                wo = 0;
            var Eo = 0,
                So = 0,
                xo = 0,
                To = 0,
                No = 0,
                Co = 0,
                ko = 0,
                Lo = 0,
                Ao = 0,
                Oo = 0,
                Mo = 0,
                _o = 0,
                Po = 0,
                Ho = 0,
                Bo = 0,
                jo = 0,
                Fo = 0,
                Io = 0,
                qo = 0,
                Ro = 0;
            var Uo = 0,
                zo = 0,
                Wo = 0,
                Xo = 0,
                Vo = 0,
                $o = 0,
                Jo = 0,
                Ko = 0,
                Qo = 0,
                Go = 0,
                Yo = 0,
                Zo = 0,
                eu = 0,
                tu = 0,
                nu = 0,
                ru = 0,
                iu = 0,
                su = 0,
                ou = 0,
                uu = 0;
            var au = 0,
                fu = 0,
                lu = 0,
                cu = 0,
                hu = 0,
                pu = 0,
                du = 0,
                vu = 0,
                mu = 0,
                gu = 0,
                yu = 0,
                bu = 0,
                wu = 0,
                Eu = 0,
                Su = 0,
                xu = 0,
                Tu = 0,
                Nu = 0,
                Cu = 0,
                ku = 0;
            var Lu = 0,
                Au = 0,
                Ou = 0,
                Mu = 0,
                _u = 0,
                Du = 0,
                Pu = 0,
                Hu = 0,
                Bu = 0,
                ju = 0,
                Fu = 0,
                Iu = 0,
                qu = 0,
                Ru = 0,
                Uu = 0,
                zu = 0,
                Wu = 0,
                Xu = 0,
                Vu = 0,
                $u = 0;
            var Ju = 0,
                Ku = 0,
                Qu = 0,
                Gu = 0,
                Yu = 0,
                Zu = 0,
                ea = 0,
                ta = 0,
                na = 0,
                ra = 0,
                ia = 0,
                sa = 0,
                oa = 0,
                ua = 0,
                aa = 0,
                fa = 0,
                la = 0,
                ca = 0,
                ha = 0,
                pa = 0;
            var da = 0,
                va = 0,
                ma = 0,
                ga = 0,
                ya = 0,
                ba = 0,
                wa = 0,
                Ea = 0,
                Sa = 0,
                xa = 0,
                Ta = 0,
                Na = 0,
                Ca = 0;
            Ca = c;
            c = c + 16 | 0;
            na = Ca;
            S = s[e >> 2] | 0;
            Et(0, na | 0) | 0;
            x = s[na >> 2] | 0;
            Mn = x * 1e3 | 0;
            Xi = na + 4 | 0;
            Js = s[Xi >> 2] | 0;
            uo = (Js | 0) / 1e6 & -1;
            bo = uo + Mn | 0;
            Oo = e + 20 | 0;
            s[Oo >> 2] = bo;
            Uo = e + 8 | 0;
            Zo = s[Uo >> 2] | 0;
            xi(Zo);
            T = s[t >> 2] | 0;
            if (!((T | 0) == 1497715271 | (T | 0) == 808466521)) {
                i = -1;
                c = Ca;
                return i | 0
            }
            H = e + 24 | 0;
            s[H >> 2] = t;
            ri(e, t);
            V = e + 48 | 0;
            it = s[V >> 2] | 0;
            vt = (it | 0) == (0 | 0);
            if (vt) {
                Lt = Zn() | 0;
                s[V >> 2] = Lt;
                It = e + 196 | 0;
                Qt = s[It >> 2] | 0;
                fn = Qt + 1 | 0;
                s[It >> 2] = fn;
                Xn(Lt, 1);
                ta = Lt
            } else {
                Xn(it, 2);
                ta = it
            }
            wn = t + 64 | 0;
            s[wn >> 2] = ta;
            _n = t + 4 | 0;
            zn = s[_n >> 2] | 0;
            nr = t + 8 | 0;
            pr = s[nr >> 2] | 0;
            Tr = t + 20 | 0;
            Hr = s[Tr >> 2] | 0;
            Vr = t + 28 | 0;
            ui = s[Vr >> 2] | 0;
            Ei = ui + Hr | 0;
            Pi = Ei >>> 0 > zn >>> 0;
            if (Pi) {
                gt(6496 | 0, 6336 | 0, 683, 6512 | 0)
            }
            Vi = t + 24 | 0;
            rs = s[Vi >> 2] | 0;
            ds = t + 32 | 0;
            Ns = s[ds >> 2] | 0;
            Bs = Ns + rs | 0;
            zs = Bs >>> 0 > pr >>> 0;
            if (zs) {
                gt(6528 | 0, 6336 | 0, 685, 6512 | 0)
            }
            Ws = t + 12 | 0;
            Xs = s[Ws >> 2] | 0;
            gi(S) | 0;
            Vs = e + 112 | 0;
            $s = s[Vs >> 2] | 0;
            Ks = ($s | 0) > 0;
            e: do {
                if (Ks) {
                    Qs = s[ds >> 2] | 0;
                    Ys = Qs + -1 | 0;
                    Zs = (Ys >>> 0) % ($s >>> 0) & -1;
                    eo = Zs + 1 | 0;
                    to = eo >>> 1;
                    no = Qs >>> 1;
                    ro = to >>> 0 > no >>> 0;
                    n = ro ? no : to;
                    io = s[Vi >> 2] | 0;
                    so = n + io | 0;
                    ao = so >>> 0 > pr >>> 0;
                    if (ao) {
                        gt(6544 | 0, 6336 | 0, 703, 6512 | 0)
                    }
                    fo = e + 32 | 0;
                    s[fo >> 2] = 0;
                    lo = s[Tr >> 2] | 0;
                    co = e + 44 | 0;
                    s[co >> 2] = so;
                    ho = so >>> 0 < Bs >>> 0;
                    if (ho) {
                        po = rt(so, zn) | 0;
                        vo = lo + po | 0;
                        mo = Xs + vo | 0;
                        go = s[g >> 2] | 0;
                        yo = e + 36 | 0;
                        wo = e + 28 | 0;
                        Eo = e + 40 | 0;
                        So = rt($s, zn) | 0;
                        xo = So + -1 | 0;
                        To = So + 1 | 0;
                        Pu = mo;
                        Gu = so;
                        va = lo;
                        while (1) {
                            No = s[Tr >> 2] | 0;
                            Co = s[80 >> 2] | 0;
                            ko = (Co | 0) > 127;
                            if (ko) {
                                s[na >> 2] = 6512;
                                ra = na + 4 | 0;
                                s[ra >> 2] = va;
                                aa = na + 8 | 0;
                                s[aa >> 2] = Gu;
                                ca = na + 12 | 0;
                                s[ca >> 2] = Pu;
                                Yt(go | 0, 6560 | 0, na | 0) | 0
                            }
                            s[yo >> 2] = 1;
                            s[wo >> 2] = 1;
                            s[Eo >> 2] = No;
                            Lo = va >>> 0 < Ei >>> 0;
                            if (Lo) {
                                Bu = Pu;
                                ga = va;
                                while (1) {
                                    Ao = r[Bu >> 0] | 0;
                                    Mo = ga + 1 | 0;
                                    _o = Bu + 1 | 0;
                                    Po = Ao & 255;
                                    yi(S, Po) | 0;
                                    Eu = (Mo | 0) == (Ei | 0);
                                    if (Eu) {
                                        break
                                    } else {
                                        Bu = _o;
                                        ga = Mo
                                    }
                                }
                                Ju = Ei - va | 0;
                                Ku = Pu + Ju | 0;
                                Hu = Ku;
                                ma = Ei
                            } else {
                                Hu = Pu;
                                ma = va
                            }
                            Ho = rt(Gu, zn) | 0;
                            w = ma + Ho | 0;
                            Bo = Xs + w | 0;
                            jo = (Hu | 0) == (Bo | 0);
                            if (!jo) {
                                Na = 20;
                                break
                            }
                            Nu = s[e >> 2] | 0;
                            mi(Nu) | 0;
                            mi(Nu) | 0;
                            gi(Nu) | 0;
                            Fo = ma + -1 | 0;
                            Io = Gu + $s | 0;
                            qo = Hu + xo | 0;
                            s[co >> 2] = Io;
                            Ro = Io >>> 0 < Bs >>> 0;
                            if (!Ro) {
                                break e
                            }
                            zo = s[80 >> 2] | 0;
                            Wo = (zo | 0) > 127;
                            if (Wo) {
                                s[na >> 2] = 6512;
                                ha = na + 4 | 0;
                                s[ha >> 2] = Fo;
                                pa = na + 8 | 0;
                                s[pa >> 2] = Io;
                                da = na + 12 | 0;
                                s[da >> 2] = qo;
                                Yt(go | 0, 6624 | 0, na | 0) | 0
                            }
                            s[yo >> 2] = -1;
                            s[wo >> 2] = -1;
                            s[Eo >> 2] = Ei;
                            Xo = (ma | 0) > (No | 0);
                            if (Xo) {
                                Vo = No - ma | 0;
                                b = xo + Vo | 0;
                                Qu = Hu + b | 0;
                                Fu = qo;
                                ba = Fo;
                                while (1) {
                                    $o = r[Fu >> 0] | 0;
                                    Jo = ba + -1 | 0;
                                    Ko = Fu + -1 | 0;
                                    Qo = $o & 255;
                                    yi(S, Qo) | 0;
                                    Go = (ba | 0) > (No | 0);
                                    if (Go) {
                                        Fu = Ko;
                                        ba = Jo
                                    } else {
                                        break
                                    }
                                }
                                Yo = No + -1 | 0;
                                ju = Qu;
                                ya = Yo
                            } else {
                                ju = qo;
                                ya = Fo
                            }
                            eu = rt(Io, zn) | 0;
                            E = ya + eu | 0;
                            tu = Xs + E | 0;
                            nu = (ju | 0) == (tu | 0);
                            if (!nu) {
                                Na = 29;
                                break
                            }
                            Tu = s[e >> 2] | 0;
                            mi(Tu) | 0;
                            mi(Tu) | 0;
                            gi(Tu) | 0;
                            ru = ya + 1 | 0;
                            iu = Io + $s | 0;
                            su = ju + To | 0;
                            s[co >> 2] = iu;
                            ou = iu >>> 0 < Bs >>> 0;
                            if (ou) {
                                Pu = su;
                                Gu = iu;
                                va = ru
                            } else {
                                break e
                            }
                        }
                        if ((Na | 0) == 20) {
                            gt(6592 | 0, 6336 | 0, 721, 6512 | 0)
                        } else if ((Na | 0) == 29) {
                            gt(6592 | 0, 6336 | 0, 739, 6512 | 0)
                        }
                    }
                }
            } while (0);
            uu = e + 28 | 0;
            s[uu >> 2] = 0;
            au = e + 108 | 0;
            fu = s[au >> 2] | 0;
            N = (fu | 0) > 0;
            t: do {
                if (N) {
                    C = s[Vr >> 2] | 0;
                    k = C + -1 | 0;
                    L = (k >>> 0) % (fu >>> 0) & -1;
                    A = L + 1 | 0;
                    O = A >>> 1;
                    M = C >>> 1;
                    _ = O >>> 0 > M >>> 0;
                    o = _ ? M : O;
                    D = s[Tr >> 2] | 0;
                    P = o + D | 0;
                    B = P >>> 0 > zn >>> 0;
                    if (B) {
                        gt(6656 | 0, 6336 | 0, 759, 6512 | 0)
                    }
                    j = s[Vi >> 2] | 0;
                    F = e + 44 | 0;
                    s[F >> 2] = P;
                    I = P >>> 0 < Ei >>> 0;
                    if (I) {
                        q = rt(j, zn) | 0;
                        R = q + P | 0;
                        U = Xs + R | 0;
                        z = s[g >> 2] | 0;
                        W = e + 36 | 0;
                        X = e + 32 | 0;
                        $ = e + 40 | 0;
                        J = 0 - zn | 0;
                        K = fu - zn | 0;
                        Q = fu + zn | 0;
                        Iu = U;
                        Yu = P;
                        wa = j;
                        while (1) {
                            G = s[Vi >> 2] | 0;
                            Y = s[80 >> 2] | 0;
                            Z = (Y | 0) > 127;
                            if (Z) {
                                s[na >> 2] = 6512;
                                ia = na + 4 | 0;
                                s[ia >> 2] = Yu;
                                sa = na + 8 | 0;
                                s[sa >> 2] = wa;
                                oa = na + 12 | 0;
                                s[oa >> 2] = Iu;
                                Yt(z | 0, 6672 | 0, na | 0) | 0
                            }
                            s[W >> 2] = 1;
                            s[X >> 2] = 1;
                            s[$ >> 2] = G;
                            et = wa >>> 0 < Bs >>> 0;
                            if (et) {
                                tt = Bs - wa | 0;
                                nt = rt(zn, tt) | 0;
                                Ru = Iu;
                                Sa = wa;
                                while (1) {
                                    st = r[Ru >> 0] | 0;
                                    ot = Sa + 1 | 0;
                                    ut = Ru + zn | 0;
                                    at = st & 255;
                                    yi(S, at) | 0;
                                    wu = (ot | 0) == (Bs | 0);
                                    if (wu) {
                                        break
                                    } else {
                                        Ru = ut;
                                        Sa = ot
                                    }
                                }
                                Xu = Iu + nt | 0;
                                qu = Xu;
                                Ea = Bs
                            } else {
                                qu = Iu;
                                Ea = wa
                            }
                            ft = rt(Ea, zn) | 0;
                            m = ft + Yu | 0;
                            lt = Xs + m | 0;
                            ct = (qu | 0) == (lt | 0);
                            if (!ct) {
                                Na = 43;
                                break
                            }
                            xu = s[e >> 2] | 0;
                            mi(xu) | 0;
                            mi(xu) | 0;
                            gi(xu) | 0;
                            ht = Yu + fu | 0;
                            pt = Ea + -1 | 0;
                            dt = qu + K | 0;
                            s[F >> 2] = ht;
                            mt = ht >>> 0 < Ei >>> 0;
                            if (!mt) {
                                break t
                            }
                            yt = s[80 >> 2] | 0;
                            bt = (yt | 0) > 127;
                            if (bt) {
                                s[na >> 2] = 6512;
                                ua = na + 4 | 0;
                                s[ua >> 2] = ht;
                                fa = na + 8 | 0;
                                s[fa >> 2] = pt;
                                la = na + 12 | 0;
                                s[la >> 2] = dt;
                                Yt(z | 0, 6704 | 0, na | 0) | 0
                            }
                            s[W >> 2] = -1;
                            s[X >> 2] = -1;
                            s[$ >> 2] = Bs;
                            wt = (Ea | 0) > (G | 0);
                            if (wt) {
                                St = G + -1 | 0;
                                xt = St - Ea | 0;
                                Tt = rt(zn, xt) | 0;
                                zu = dt;
                                Ta = pt;
                                while (1) {
                                    Nt = r[zu >> 0] | 0;
                                    Ct = Ta + -1 | 0;
                                    kt = zu + J | 0;
                                    At = Nt & 255;
                                    yi(S, At) | 0;
                                    Ot = (Ta | 0) > (G | 0);
                                    if (Ot) {
                                        zu = kt;
                                        Ta = Ct
                                    } else {
                                        break
                                    }
                                }
                                Vu = fu + Tt | 0;
                                $u = qu + Vu | 0;
                                Uu = $u;
                                xa = St
                            } else {
                                Uu = dt;
                                xa = pt
                            }
                            Mt = rt(xa, zn) | 0;
                            y = Mt + ht | 0;
                            _t = Xs + y | 0;
                            Dt = (Uu | 0) == (_t | 0);
                            if (!Dt) {
                                Na = 52;
                                break
                            }
                            Su = s[e >> 2] | 0;
                            mi(Su) | 0;
                            mi(Su) | 0;
                            gi(Su) | 0;
                            Pt = ht + fu | 0;
                            Ht = xa + 1 | 0;
                            Bt = Uu + Q | 0;
                            s[F >> 2] = Pt;
                            jt = Pt >>> 0 < Ei >>> 0;
                            if (jt) {
                                Iu = Bt;
                                Yu = Pt;
                                wa = Ht
                            } else {
                                break t
                            }
                        }
                        if ((Na | 0) == 43) {
                            gt(6592 | 0, 6336 | 0, 775, 6512 | 0)
                        } else if ((Na | 0) == 52) {
                            gt(6592 | 0, 6336 | 0, 793, 6512 | 0)
                        }
                    }
                }
            } while (0);
            Ft = e + 32 | 0;
            s[Ft >> 2] = 0;
            s[H >> 2] = 0;
            qt = s[Uo >> 2] | 0;
            Ci(qt, e, t) | 0;
            Rt = e + 92 | 0;
            Ut = s[Rt >> 2] | 0;
            zt = (Ut | 0) == 0;
            if (zt) {
                Wt = (fu | 0) == 1;
                if (Wt) {
                    tn = 1
                } else {
                    Xt = s[Vs >> 2] | 0;
                    Vt = (Xt | 0) == 1;
                    Wu = Vt & 1;
                    tn = Wu
                }
            } else {
                tn = 0
            }
            $t = ta + 4 | 0;
            Jt = s[$t >> 2] | 0;
            Kt = (Jt | 0) == 0;
            if (Kt) {
                i = 0;
                c = Ca;
                return i | 0
            }
            Gt = ta + 8 | 0;
            Zt = s[Gt >> 2] | 0;
            en = (Zt | 0) == (0 | 0);
            do {
                if (!en) {
                    nn = (tn | 0) == 0;
                    rn = e + 96 | 0;
                    Hs = Zt;
                    ku = 0;
                    Ou = 0;
                    Zu = Gt;
                    n: while (1) {
                        r: do {
                            if (nn) {
                                on = Hs;
                                while (1) {
                                    sn = on + 56 | 0;
                                    un = s[sn >> 2] | 0;
                                    an = (un | 0) < 1;
                                    if (!an) {
                                        Ti = on;
                                        Lu = ku;
                                        Mu = Ou;
                                        break r
                                    }
                                    ln = s[on >> 2] | 0;
                                    f = ln + -2 | 0;
                                    cn = f >>> 0 < 13;
                                    if (cn) {
                                        hi = ln;
                                        js = on;
                                        Na = 98;
                                        break r
                                    }
                                    pu = (ln | 0) == 38;
                                    if (!pu) {
                                        Ti = on;
                                        Lu = ku;
                                        Mu = Ou;
                                        break r
                                    }
                                    hn = on + 60 | 0;
                                    pn = s[hn >> 2] | 0;
                                    dn = (pn | 0) < 4;
                                    if (!dn) {
                                        Ti = on;
                                        Lu = ku;
                                        Mu = Ou;
                                        break r
                                    }
                                    vn = s[Rt >> 2] | 0;
                                    mn = (vn | 0) == 0;
                                    if (!mn) {
                                        gn = s[rn >> 2] | 0;
                                        yn = (gn | 0) == (0 | 0);
                                        if (yn) {
                                            Na = 96;
                                            break n
                                        }
                                        bn = on + 16 | 0;
                                        En = on + 20 | 0;
                                        Sn = on + 52 | 0;
                                        Fs = 38;
                                        Is = gn;
                                        bu = rn;
                                        i: while (1) {
                                            Tn = Is;
                                            Cn = Fs;
                                            while (1) {
                                                xn = s[Tn >> 2] | 0;
                                                Nn = (xn | 0) == (Cn | 0);
                                                do {
                                                    if (Nn) {
                                                        kn = Tn + 16 | 0;
                                                        Ln = s[kn >> 2] | 0;
                                                        An = s[bn >> 2] | 0;
                                                        On = (Ln | 0) == (An | 0);
                                                        if (!On) {
                                                            break
                                                        }
                                                        Dn = Tn + 20 | 0;
                                                        Pn = s[Dn >> 2] | 0;
                                                        Hn = s[En >> 2] | 0;
                                                        Bn = Gs(Pn, Hn, Ln) | 0;
                                                        jn = (Bn | 0) == 0;
                                                        if (jn) {
                                                            break i
                                                        }
                                                    }
                                                } while (0);
                                                Fn = s[Sn >> 2] | 0;
                                                In = Tn + 52 | 0;
                                                qn = s[In >> 2] | 0;
                                                Rn = Fn - qn | 0;
                                                Un = Rn >>> 0 > 4e3;
                                                Wn = Tn + 44 | 0;
                                                Vn = s[Wn >> 2] | 0;
                                                if (!Un) {
                                                    break
                                                }
                                                s[Wn >> 2] = 0;
                                                Jn = s[bu >> 2] | 0;
                                                ni(e, Jn);
                                                s[bu >> 2] = Vn;
                                                Kn = (Vn | 0) == (0 | 0);
                                                if (Kn) {
                                                    Na = 96;
                                                    break n
                                                }
                                                d = s[on >> 2] | 0;
                                                Tn = Vn;
                                                Cn = d
                                            }
                                            $n = (Vn | 0) == (0 | 0);
                                            if ($n) {
                                                Na = 96;
                                                break n
                                            } else {
                                                Fs = Cn;
                                                Is = Vn;
                                                bu = Wn
                                            }
                                        }
                                        Qn = (Tn | 0) == (0 | 0);
                                        if (Qn) {
                                            Na = 96;
                                            break n
                                        }
                                        Gn = Tn + 56 | 0;
                                        Yn = s[Gn >> 2] | 0;
                                        er = Yn + -1 | 0;
                                        s[Gn >> 2] = er
                                    }
                                    tr = on + 44 | 0;
                                    rr = s[tr >> 2] | 0;
                                    s[Zu >> 2] = rr;
                                    ir = s[$t >> 2] | 0;
                                    sr = ir + -1 | 0;
                                    s[$t >> 2] = sr;
                                    s[tr >> 2] = 0;
                                    ni(e, on);
                                    or = s[Zu >> 2] | 0;
                                    ur = (or | 0) == (0 | 0);
                                    if (ur) {
                                        Cu = ku;
                                        Au = Ou;
                                        Na = 103;
                                        break n
                                    } else {
                                        on = or
                                    }
                                }
                            } else {
                                fr = Hs;
                                while (1) {
                                    ar = fr + 56 | 0;
                                    lr = s[ar >> 2] | 0;
                                    cr = (lr | 0) < 1;
                                    if (!cr) {
                                        Ti = fr;
                                        Lu = ku;
                                        Mu = Ou;
                                        break r
                                    }
                                    hr = s[fr >> 2] | 0;
                                    a = hr + -2 | 0;
                                    dr = a >>> 0 < 13;
                                    if (!dr) {
                                        if (!((hr | 0) == 38 | (hr | 0) == 35 | (hr | 0) == 34)) {
                                            Ti = fr;
                                            Lu = ku;
                                            Mu = Ou;
                                            break r
                                        }
                                    }
                                    vr = fr + 60 | 0;
                                    mr = s[vr >> 2] | 0;
                                    gr = (mr | 0) < 4;
                                    if (!gr) {
                                        hi = hr;
                                        js = fr;
                                        Na = 98;
                                        break r
                                    }
                                    yr = s[Rt >> 2] | 0;
                                    br = (yr | 0) == 0;
                                    if (!br) {
                                        wr = s[rn >> 2] | 0;
                                        Er = (wr | 0) == (0 | 0);
                                        if (Er) {
                                            Na = 96;
                                            break n
                                        }
                                        Sr = fr + 16 | 0;
                                        xr = fr + 20 | 0;
                                        Nr = fr + 52 | 0;
                                        qs = hr;
                                        Rs = wr;
                                        yu = rn;
                                        s: while (1) {
                                            Ar = Rs;
                                            Mr = qs;
                                            while (1) {
                                                Lr = s[Ar >> 2] | 0;
                                                Or = (Lr | 0) == (Mr | 0);
                                                do {
                                                    if (Or) {
                                                        _r = Ar + 16 | 0;
                                                        Dr = s[_r >> 2] | 0;
                                                        Pr = s[Sr >> 2] | 0;
                                                        Br = (Dr | 0) == (Pr | 0);
                                                        if (!Br) {
                                                            break
                                                        }
                                                        jr = Ar + 20 | 0;
                                                        Fr = s[jr >> 2] | 0;
                                                        Ir = s[xr >> 2] | 0;
                                                        qr = Gs(Fr, Ir, Dr) | 0;
                                                        Rr = (qr | 0) == 0;
                                                        if (Rr) {
                                                            break s
                                                        }
                                                    }
                                                } while (0);
                                                Ur = s[Nr >> 2] | 0;
                                                zr = Ar + 52 | 0;
                                                Wr = s[zr >> 2] | 0;
                                                Xr = Ur - Wr | 0;
                                                $r = Xr >>> 0 > 4e3;
                                                Jr = Ar + 44 | 0;
                                                Cr = s[Jr >> 2] | 0;
                                                if (!$r) {
                                                    break
                                                }
                                                s[Jr >> 2] = 0;
                                                Kr = s[yu >> 2] | 0;
                                                ni(e, Kr);
                                                s[yu >> 2] = Cr;
                                                Qr = (Cr | 0) == (0 | 0);
                                                if (Qr) {
                                                    Na = 96;
                                                    break n
                                                }
                                                v = s[fr >> 2] | 0;
                                                Ar = Cr;
                                                Mr = v
                                            }
                                            kr = (Cr | 0) == (0 | 0);
                                            if (kr) {
                                                Na = 96;
                                                break n
                                            } else {
                                                qs = Mr;
                                                Rs = Cr;
                                                yu = Jr
                                            }
                                        }
                                        Gr = (Ar | 0) == (0 | 0);
                                        if (Gr) {
                                            Na = 96;
                                            break n
                                        }
                                        Yr = Ar + 56 | 0;
                                        Zr = s[Yr >> 2] | 0;
                                        ei = Zr + -1 | 0;
                                        s[Yr >> 2] = ei
                                    }
                                    ti = fr + 44 | 0;
                                    oi = s[ti >> 2] | 0;
                                    s[Zu >> 2] = oi;
                                    ai = s[$t >> 2] | 0;
                                    fi = ai + -1 | 0;
                                    s[$t >> 2] = fi;
                                    s[ti >> 2] = 0;
                                    ni(e, fr);
                                    li = s[Zu >> 2] | 0;
                                    ci = (li | 0) == (0 | 0);
                                    if (ci) {
                                        Cu = ku;
                                        Au = Ou;
                                        Na = 103;
                                        break n
                                    } else {
                                        fr = li
                                    }
                                }
                            }
                        } while (0);do {
                            if ((Na | 0) == 98) {
                                Na = 0;
                                pi = hi >>> 0 > 14;
                                di = (hi | 0) == 10;
                                _u = pi | di;
                                if (_u) {
                                    Ti = js;
                                    Lu = ku;
                                    Mu = Ou
                                } else {
                                    vi = hi >>> 0 > 5;
                                    if (vi) {
                                        bi = Ou + 1 | 0;
                                        Ti = js;
                                        Lu = ku;
                                        Mu = bi;
                                        break
                                    } else {
                                        wi = ku + 1 | 0;
                                        Ti = js;
                                        Lu = wi;
                                        Mu = Ou;
                                        break
                                    }
                                }
                            }
                        } while (0);Si = Ti + 44 | 0;Ni = s[Si >> 2] | 0;ki = (Ni | 0) == (0 | 0);
                        if (ki) {
                            Cu = Lu;
                            Au = Mu;
                            Na = 103;
                            break
                        } else {
                            Hs = Ni;
                            ku = Lu;
                            Ou = Mu;
                            Zu = Si
                        }
                    }
                    if ((Na | 0) == 96) {
                        gt(6400 | 0, 6336 | 0, 831, 6512 | 0)
                    } else if ((Na | 0) == 103) {
                        Li = (Au | 0) == 1;
                        Ai = (Cu | 0) == 1;
                        Du = Li & Ai;
                        if (!Du) {
                            break
                        }
                        Oi = e + 104 | 0;
                        Mi = s[Oi >> 2] | 0;
                        _i = (Mi | 0) == 0;
                        if (_i) {
                            break
                        }
                        Di = s[Gt >> 2] | 0;
                        Hi = (Di | 0) == (0 | 0);
                        if (Hi) {
                            gt(6736 | 0, 6336 | 0, 871, 6512 | 0)
                        } else {
                            Us = Di;
                            cu = 0;
                            mu = 0;
                            ea = Gt
                        }
                        o: while (1) {
                            Ii = Us;
                            hu = cu;
                            gu = mu;
                            while (1) {
                                Fi = s[Ii >> 2] | 0;
                                l = Fi + -2 | 0;
                                qi = l >>> 0 < 13;
                                Ri = Ii + 44 | 0;
                                Bi = s[Ri >> 2] | 0;
                                if (!qi) {
                                    break
                                }
                                s[ea >> 2] = Bi;
                                Ui = s[$t >> 2] | 0;
                                zi = Ui + -1 | 0;
                                s[$t >> 2] = zi;
                                s[Ri >> 2] = 0;
                                Wi = Fi >>> 0 < 6;
                                du = Wi ? gu : Ii;
                                u = Wi ? Ii : hu;
                                $i = s[ea >> 2] | 0;
                                Ji = ($i | 0) == (0 | 0);
                                if (Ji) {
                                    lu = u;
                                    vu = du;
                                    break o
                                } else {
                                    Ii = $i;
                                    hu = u;
                                    gu = du
                                }
                            }
                            ji = (Bi | 0) == (0 | 0);
                            if (ji) {
                                lu = hu;
                                vu = gu;
                                break
                            } else {
                                Us = Bi;
                                cu = hu;
                                mu = gu;
                                ea = Ri
                            }
                        }
                        Ki = (vu | 0) == (0 | 0);
                        if (Ki) {
                            gt(6736 | 0, 6336 | 0, 871, 6512 | 0)
                        }
                        Qi = (lu | 0) == (0 | 0);
                        if (Qi) {
                            gt(6744 | 0, 6336 | 0, 872, 6512 | 0)
                        } else {
                            Gi = vu + 16 | 0;
                            Yi = s[Gi >> 2] | 0;
                            Zi = lu + 16 | 0;
                            es = s[Zi >> 2] | 0;
                            ts = Yi + 1 | 0;
                            ns = ts + es | 0;
                            is = ii(e, 15, ns) | 0;
                            ss = vu + 36 | 0;
                            os = s[ss >> 2] | 0;
                            us = is + 36 | 0;
                            s[us >> 2] = os;
                            as = Zn() | 0;
                            fs = is + 48 | 0;
                            s[fs >> 2] = as;
                            ls = is + 20 | 0;
                            cs = s[ls >> 2] | 0;
                            hs = vu + 20 | 0;
                            ps = s[hs >> 2] | 0;
                            vs = s[Gi >> 2] | 0;
                            oo(cs | 0, ps | 0, vs | 0) | 0;
                            ms = s[ls >> 2] | 0;
                            gs = s[Gi >> 2] | 0;
                            ys = ms + gs | 0;
                            bs = lu + 20 | 0;
                            ws = s[bs >> 2] | 0;
                            Es = s[Zi >> 2] | 0;
                            Ss = Es + 1 | 0;
                            oo(ys | 0, ws | 0, Ss | 0) | 0;
                            xs = s[fs >> 2] | 0;
                            Ts = xs + 8 | 0;
                            s[Ts >> 2] = vu;
                            Cs = vu + 44 | 0;
                            s[Cs >> 2] = lu;
                            ks = s[fs >> 2] | 0;
                            Ls = ks + 4 | 0;
                            s[Ls >> 2] = 2;
                            si(e, is);
                            break
                        }
                    }
                }
            } while (0);
            h = s[$t >> 2] | 0;
            As = (h | 0) == 0;
            if (As) {
                i = 0;
                c = Ca;
                return i | 0
            }
            Os = e + 16 | 0;
            Ms = s[Os >> 2] | 0;
            _s = (Ms | 0) == (0 | 0);
            if (_s) {
                i = h;
                c = Ca;
                return i | 0
            }
            Ds = e + 12 | 0;
            Ps = s[Ds >> 2] | 0;
            Do[Ms & 0](t, Ps);
            p = s[$t >> 2] | 0;
            i = p;
            c = Ca;
            return i | 0
        }

        function hi(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0;
            f = c;
            t = Ms(48) | 0;
            s[t >> 2] = e;
            n = t + 4 | 0;
            s[n >> 2] = 4;
            r = t + 8 | 0;
            u = r + 0 | 0;
            l = u + 40 | 0;
            do {
                s[u >> 2] = 0 | 0;
                u = u + 4 | 0
            } while ((u | 0) < (l | 0));
            i = t + 32 | 0;
            s[i >> 2] = 4;
            o = (e | 0) == (0 | 0);
            if (o) {
                c = f;
                return t | 0
            }
            ns(e);
            c = f;
            return t | 0
        }

        function pi(e) {
            e = e | 0;
            var t = 0,
                n = 0;
            n = c;
            _s(e);
            c = n;
            return
        }

        function di(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            t = e + 44 | 0;
            n = s[t >> 2] | 0;
            c = i;
            return n | 0
        }

        function vi(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0;
            g = c;
            i = e + 40 | 0;
            o = s[i >> 2] | 0;
            u = o - t | 0;
            a = u + -48 | 0;
            f = 5 - n | 0;
            l = (f | 0) > 0;
            if (l) {
                h = a >>> f;
                r = h
            } else {
                p = (n | 0) == 5;
                if (p) {
                    r = a
                } else {
                    d = 0 - f | 0;
                    v = a << d;
                    r = v
                }
            }
            c = g;
            return r | 0
        }

        function mi(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0;
            var x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0;
            P = c;
            i = e + 28 | 0;
            o = s[i >> 2] | 0;
            y = (o | 0) == 0;
            if (y) {
                t = 0;
                c = P;
                return t | 0
            }
            N = e + 8 | 0;
            C = s[N >> 2] | 0;
            k = C << 5;
            L = k | 16;
            A = e + 36 | 0;
            O = s[A >> 2] | 0;
            M = (O | 0) != (L | 0);
            u = (o | 0) > 0;
            _ = M | u;
            if (!_) {
                E = e + 44 | 0;
                s[E >> 2] = 0;
                s[i >> 2] = 0;
                S = s[e >> 2] | 0;
                x = (S | 0) == (0 | 0);
                if (x) {
                    t = 1;
                    c = P;
                    return t | 0
                }
                T = ps(S, 0) | 0;
                t = T;
                c = P;
                return t | 0
            }
            a = e + 40 | 0;
            f = s[a >> 2] | 0;
            l = (f | 0) == 0;
            if (l) {
                s[a >> 2] = O;
                p = O
            } else {
                p = f
            }
            h = O - p | 0;
            d = e + 44 | 0;
            s[d >> 2] = h;
            s[a >> 2] = O;
            v = s[e >> 2] | 0;
            m = (v | 0) == (0 | 0);
            if (m) {
                n = 1;
                w = o
            } else {
                g = ps(v, h) | 0;
                r = s[i >> 2] | 0;
                n = g;
                w = r
            }
            s[A >> 2] = L;
            b = 0 - w | 0;
            s[i >> 2] = b;
            t = n;
            c = P;
            return t | 0
        }

        function gi(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0;
            var x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0;
            var z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0;
            Q = c;
            f = e + 28 | 0;
            l = s[f >> 2] | 0;
            S = (l | 0) == 0;
            D = e + 8 | 0;
            e: do {
                if (S) {
                    a = e;
                    X = 0
                } else {
                    I = e + 36 | 0;
                    q = e + 40 | 0;
                    R = e + 44 | 0;
                    d = l;
                    V = 0;
                    while (1) {
                        U = s[D >> 2] | 0;
                        z = U << 5;
                        W = z | 16;
                        h = s[I >> 2] | 0;
                        p = (h | 0) != (W | 0);
                        v = (d | 0) > 0;
                        $ = p | v;
                        if ($) {
                            m = s[q >> 2] | 0;
                            g = (m | 0) == 0;
                            if (g) {
                                s[q >> 2] = h;
                                b = h
                            } else {
                                b = m
                            }
                            y = h - b | 0;
                            s[R >> 2] = y;
                            s[q >> 2] = h;
                            w = s[e >> 2] | 0;
                            E = (w | 0) == (0 | 0);
                            if (E) {
                                n = 1;
                                N = d
                            } else {
                                x = ps(w, y) | 0;
                                u = s[f >> 2] | 0;
                                n = x;
                                N = u
                            }
                            s[I >> 2] = W;
                            T = 0 - N | 0;
                            s[f >> 2] = T;
                            t = n;
                            M = T
                        } else {
                            s[R >> 2] = 0;
                            s[f >> 2] = 0;
                            C = s[e >> 2] | 0;
                            k = (C | 0) == (0 | 0);
                            if (k) {
                                break
                            }
                            A = ps(C, 0) | 0;
                            o = s[f >> 2] | 0;
                            t = A;
                            M = o
                        }
                        O = t >>> 0 > V >>> 0;
                        r = O ? t : V;
                        _ = (M | 0) == 0;
                        if (_) {
                            a = e;
                            X = r;
                            break e
                        } else {
                            d = M;
                            V = r
                        }
                    }
                    L = (V | 0) == 0;
                    i = L ? 1 : V;
                    a = e;
                    X = i
                }
            } while (0);
            J = D + 0 | 0;
            G = J + 40 | 0;
            do {
                s[J >> 2] = 0 | 0;
                J = J + 4 | 0
            } while ((J | 0) < (G | 0));
            P = e + 4 | 0;
            H = s[P >> 2] | 0;
            B = e + 32 | 0;
            s[B >> 2] = H;
            j = s[a >> 2] | 0;
            F = (j | 0) == (0 | 0);
            if (F) {
                c = Q;
                return X | 0
            }
            is(j);
            c = Q;
            return X | 0
        }

        function yi(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0;
            var W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0;
            var ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0;
            var Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0;
            var Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0;
            var yn = 0;
            yn = c;
            f = e + 8 | 0;
            l = s[f >> 2] | 0;
            S = l + 3 | 0;
            D = S & 3;
            W = (e + (D << 2) | 0) + 12 | 0;
            tt = s[W >> 2] | 0;
            pt = (l | 0) == 0;
            if (pt) {
                v = e + 24 | 0;
                s[v >> 2] = t;
                m = e + 20 | 0;
                s[m >> 2] = t;
                g = e + 16 | 0;
                s[g >> 2] = t;
                y = e + 12 | 0;
                s[y >> 2] = t;
                dn = t;
                vn = t
            } else {
                Tt = t - tt | 0;
                Ht = Tt * 25 | 0;
                Vt = Ht >> 5;
                h = Vt + tt | 0;
                p = l & 3;
                d = (e + (p << 2) | 0) + 12 | 0;
                s[d >> 2] = h;
                dn = h;
                vn = tt
            }
            b = l + 2 | 0;
            w = b & 3;
            E = (e + (w << 2) | 0) + 12 | 0;
            x = s[E >> 2] | 0;
            T = l + 1 | 0;
            N = T & 3;
            C = (e + (N << 2) | 0) + 12 | 0;
            k = s[C >> 2] | 0;
            L = vn - x | 0;
            A = x - k | 0;
            on = (L | 0) > -1;
            ln = 0 - L | 0;
            O = on ? L : ln;
            un = (A | 0) > -1;
            cn = 0 - A | 0;
            M = un ? A : cn;
            _ = (O | 0) < (M | 0);
            if (_) {
                o = L >>> 31;
                u = A >>> 31;
                P = (o | 0) == (u | 0);
                n = P ? A : L;
                mn = n
            } else {
                mn = L
            }
            H = vn << 1;
            B = dn - H | 0;
            j = B + x | 0;
            F = x << 1;
            I = vn - F | 0;
            q = I + k | 0;
            R = (j | 0) != 0;
            do {
                if (R) {
                    U = (j | 0) > 0;
                    if (U) {
                        z = (q | 0) < 0;
                        if (z) {
                            break
                        } else {
                            sn = 0
                        }
                        s[f >> 2] = T;
                        c = yn;
                        return sn | 0
                    } else {
                        X = (q | 0) > 0;
                        if (X) {
                            break
                        } else {
                            sn = 0
                        }
                        s[f >> 2] = T;
                        c = yn;
                        return sn | 0
                    }
                }
            } while (0);
            V = e + 32 | 0;
            $ = s[V >> 2] | 0;
            J = e + 4 | 0;
            K = s[J >> 2] | 0;
            Q = $ >>> 0 > K >>> 0;
            do {
                if (Q) {
                    G = e + 44 | 0;
                    Y = s[G >> 2] | 0;
                    Z = (Y | 0) == 0;
                    if (Z) {
                        r = K
                    } else {
                        et = s[f >> 2] | 0;
                        nt = et << 5;
                        it = e + 40 | 0;
                        st = s[it >> 2] | 0;
                        ot = nt - st | 0;
                        ut = rt(ot, $) | 0;
                        at = (ut >>> 0) / (Y >>> 0) & -1;
                        ft = at >>> 3;
                        lt = $ >>> 0 > ft >>> 0;
                        if (lt) {
                            ct = $ - ft | 0;
                            ht = ct >>> 0 > K >>> 0;
                            if (ht) {
                                r = ct;
                                break
                            }
                        }
                        s[V >> 2] = K;
                        r = K
                    }
                } else {
                    r = K
                }
            } while (0);
            an = (mn | 0) > -1;
            hn = 0 - mn | 0;
            dt = an ? mn : hn;
            vt = r >>> 0 > dt >>> 0;
            if (vt) {
                sn = 0;
                s[f >> 2] = T;
                c = yn;
                return sn | 0
            }
            mt = e + 28 | 0;
            gt = s[mt >> 2] | 0;
            yt = (gt | 0) > 0;
            bt = (mn | 0) < 0;
            wt = (mn | 0) > 0;
            a = yt ? bt : wt;
            if (a) {
                Et = (gt | 0) == 0;
                if (Et) {
                    St = e + 36 | 0;
                    s[St >> 2] = 48;
                    xt = e + 40 | 0;
                    s[xt >> 2] = 48;
                    _t = 48;
                    Dt = 48
                } else {
                    Nt = e + 40 | 0;
                    Ct = s[Nt >> 2] | 0;
                    kt = (Ct | 0) == 0;
                    Lt = e + 36 | 0;
                    At = s[Lt >> 2] | 0;
                    if (kt) {
                        s[Nt >> 2] = At;
                        _t = At;
                        Dt = At
                    } else {
                        _t = Ct;
                        Dt = At
                    }
                }
                Ot = e + 40 | 0;
                Mt = Dt - _t | 0;
                Pt = e + 44 | 0;
                s[Pt >> 2] = Mt;
                s[Ot >> 2] = Dt;
                Bt = s[e >> 2] | 0;
                jt = (Bt | 0) == (0 | 0);
                if (jt) {
                    rn = 1
                } else {
                    Ft = ps(Bt, Mt) | 0;
                    rn = Ft
                }
            } else {
                fn = (gt | 0) > -1;
                pn = 0 - gt | 0;
                It = fn ? gt : pn;
                qt = (It | 0) < (dt | 0);
                if (qt) {
                    rn = 0
                } else {
                    sn = 0;
                    s[f >> 2] = T;
                    c = yn;
                    return sn | 0
                }
            }
            s[mt >> 2] = mn;
            Rt = dt * 14 | 0;
            Ut = Rt + 16 | 0;
            zt = Ut >>> 5;
            Wt = s[J >> 2] | 0;
            Xt = zt >>> 0 < Wt >>> 0;
            i = Xt ? Wt : zt;
            s[V >> 2] = i;
            $t = j - q | 0;
            Jt = e + 36 | 0;
            s[Jt >> 2] = 32;
            Kt = (j | 0) == (q | 0);
            if (Kt) {
                s[Jt >> 2] = 16;
                nn = 16
            } else {
                if (R) {
                    Qt = j << 5;
                    Gt = Qt | 1;
                    Yt = (Gt | 0) / ($t | 0) & -1;
                    Zt = 32 - Yt | 0;
                    s[Jt >> 2] = Zt;
                    nn = Zt
                } else {
                    nn = 32
                }
            }
            en = l << 5;
            tn = nn + en | 0;
            s[Jt >> 2] = tn;
            sn = rn;
            s[f >> 2] = T;
            c = yn;
            return sn | 0
        }

        function bi(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0;
            r = c;
            t = e + 112 | 0;
            c = r;
            return t | 0
        }

        function wi(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0;
            var W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0;
            var lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0;
            var Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0;
            It = c;
            n = r[e >> 0] | 0;
            i = n & 255;
            g = i + 10 | 0;
            L = g & 15;
            I = (e + (L << 2) | 0) + 4 | 0;
            Q = s[I >> 2] | 0;
            ut = e + 108 | 0;
            yt = s[ut >> 2] | 0;
            At = yt - Q | 0;
            s[ut >> 2] = At;
            Bt = i + 15 | 0;
            o = Bt & 15;
            u = (e + (o << 2) | 0) + 4 | 0;
            a = s[u >> 2] | 0;
            f = a + At | 0;
            s[ut >> 2] = f;
            l = n & 1;
            h = l << 24 >> 24 != 0;
            p = f >>> 0 < 7;
            jt = h | p;
            if (jt) {
                t = 0;
                c = It;
                return t | 0
            }
            d = s[u >> 2] | 0;
            v = i + 14 | 0;
            m = v & 15;
            y = (e + (m << 2) | 0) + 4 | 0;
            b = s[y >> 2] | 0;
            w = b + d | 0;
            E = w * 14 | 0;
            S = E | 1;
            x = (S >>> 0) / (f >>> 0) & -1;
            T = x + 509 | 0;
            N = T & 510;
            C = (N | 0) == 0;
            if (!C) {
                t = 0;
                c = It;
                return t | 0
            }
            k = i + 13 | 0;
            A = k & 15;
            O = (e + (A << 2) | 0) + 4 | 0;
            M = s[O >> 2] | 0;
            _ = M + b | 0;
            D = _ * 14 | 0;
            P = D | 1;
            H = (P >>> 0) / (f >>> 0) & -1;
            B = H + 509 | 0;
            j = B & 510;
            F = (j | 0) == 4;
            if (!F) {
                t = 0;
                c = It;
                return t | 0
            }
            q = i + 12 | 0;
            R = q & 15;
            U = (e + (R << 2) | 0) + 4 | 0;
            z = s[U >> 2] | 0;
            W = z + M | 0;
            X = W * 14 | 0;
            V = X | 1;
            $ = (V >>> 0) / (f >>> 0) & -1;
            J = $ + 509 | 0;
            K = J & 510;
            G = (K | 0) == 4;
            if (!G) {
                t = 0;
                c = It;
                return t | 0
            }
            Y = i + 11 | 0;
            Z = Y & 15;
            et = (e + (Z << 2) | 0) + 4 | 0;
            tt = s[et >> 2] | 0;
            nt = tt + z | 0;
            rt = nt * 14 | 0;
            it = rt | 1;
            st = (it >>> 0) / (f >>> 0) & -1;
            ot = st + 509 | 0;
            at = ot & 510;
            ft = (at | 0) == 0;
            if (!ft) {
                t = 0;
                c = It;
                return t | 0
            }
            lt = i & 15;
            ct = (e + (lt << 2) | 0) + 4 | 0;
            ht = s[ct >> 2] | 0;
            pt = d + 1 | 0;
            dt = pt >>> 1;
            vt = ht + dt | 0;
            mt = e + 128 | 0;
            s[mt >> 2] = vt;
            gt = ht + d | 0;
            bt = s[y >> 2] | 0;
            wt = gt + bt | 0;
            Et = e + 120 | 0;
            s[Et >> 2] = wt;
            St = s[O >> 2] | 0;
            xt = St + wt | 0;
            Tt = e + 112 | 0;
            s[Tt >> 2] = xt;
            Nt = e + 116 | 0;
            s[Nt >> 2] = xt;
            Ct = s[et >> 2] | 0;
            kt = s[U >> 2] | 0;
            Lt = kt + xt | 0;
            Ot = Ct + 1 | 0;
            Mt = Ot >>> 1;
            _t = Lt + Mt | 0;
            Dt = e + 124 | 0;
            s[Dt >> 2] = _t;
            Pt = e + 80 | 0;
            s[Pt >> 2] = 0;
            Ht = e + 92 | 0;
            s[Ht >> 2] = 0;
            t = 64;
            c = It;
            return t | 0
        }

        function Ei() {
            var e = 0,
                t = 0,
                n = 0,
                r = 0;
            r = c;
            e = Ds(1, 2856) | 0;
            t = e + 768 | 0;
            gs(t, 0, 0);
            $i(e, 29);
            c = r;
            return e | 0
        }

        function Si(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0;
            E = c;
            c = c + 16 | 0;
            m = E;
            t = s[80 >> 2] | 0;
            n = (t | 0) > 0;
            if (n) {
                u = s[g >> 2] | 0;
                a = e + 2840 | 0;
                f = s[a >> 2] | 0;
                l = e + 2852 | 0;
                h = s[l >> 2] | 0;
                s[m >> 2] = 7224;
                y = m + 4 | 0;
                s[y >> 2] = f;
                b = m + 8 | 0;
                s[b >> 2] = h;
                Yt(u | 0, 7192 | 0, m | 0) | 0
            }
            p = e + 2832 | 0;
            d = s[p >> 2] | 0;
            v = (d | 0) == (0 | 0);
            if (!v) {
                _s(d)
            }
            r = e + 2844 | 0;
            i = s[r >> 2] | 0;
            o = (i | 0) == (0 | 0);
            if (o) {
                _s(e);
                c = E;
                return
            }
            _s(i);
            _s(e);
            c = E;
            return
        }

        function xi(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            t = e + 2836 | 0;
            s[t >> 2] = 0;
            n = e + 2848 | 0;
            s[n >> 2] = 0;
            c = i;
            return
        }

        function Ti(e, t, n, i, o, u, a) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            i = i | 0;
            o = o | 0;
            u = u | 0;
            a = a | 0;
            var f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0;
            var O = 0,
                M = 0,
                _ = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0;
            var G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0;
            var yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0;
            var Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0;
            var sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0;
            var Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0;
            var Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0,
                ur = 0,
                ar = 0,
                fr = 0,
                lr = 0;
            var cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0,
                Tr = 0,
                Nr = 0,
                Cr = 0,
                kr = 0,
                Lr = 0,
                Ar = 0,
                Or = 0;
            var Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0,
                Wr = 0,
                Xr = 0,
                Vr = 0,
                $r = 0,
                Jr = 0,
                Kr = 0,
                Qr = 0;
            var Gr = 0,
                Yr = 0,
                Zr = 0,
                ei = 0,
                ti = 0,
                ni = 0,
                ri = 0,
                ii = 0,
                si = 0,
                oi = 0,
                ui = 0,
                ai = 0,
                fi = 0,
                li = 0,
                ci = 0,
                hi = 0,
                pi = 0,
                di = 0,
                vi = 0,
                mi = 0;
            var gi = 0,
                yi = 0,
                bi = 0,
                wi = 0,
                Ei = 0,
                Si = 0,
                xi = 0,
                Ni = 0,
                Ci = 0,
                ki = 0,
                Li = 0,
                Ai = 0,
                ji = 0,
                Ii = 0,
                Ri = 0,
                Vi = 0,
                $i = 0,
                Ji = 0,
                Ki = 0,
                Qi = 0;
            var Gi = 0,
                Yi = 0,
                Zi = 0,
                ts = 0,
                ns = 0,
                rs = 0,
                is = 0,
                ss = 0,
                os = 0,
                us = 0,
                as = 0,
                fs = 0,
                ls = 0,
                cs = 0,
                hs = 0,
                ps = 0,
                ds = 0,
                vs = 0,
                ms = 0,
                gs = 0;
            var ys = 0,
                bs = 0,
                ws = 0,
                Es = 0,
                Ss = 0,
                xs = 0,
                Ts = 0,
                Ns = 0,
                Cs = 0,
                ks = 0,
                Ls = 0,
                As = 0,
                Os = 0,
                Hs = 0,
                Bs = 0,
                js = 0,
                Fs = 0,
                Is = 0,
                qs = 0,
                Rs = 0;
            var Us = 0,
                zs = 0,
                Ws = 0,
                Xs = 0,
                Vs = 0,
                $s = 0,
                Js = 0,
                Ks = 0,
                Qs = 0,
                Gs = 0,
                Ys = 0,
                eo = 0,
                to = 0,
                no = 0,
                oo = 0,
                uo = 0,
                ao = 0,
                fo = 0,
                lo = 0,
                co = 0;
            var po = 0,
                mo = 0,
                go = 0,
                yo = 0,
                bo = 0,
                wo = 0,
                Eo = 0,
                So = 0,
                xo = 0,
                To = 0,
                No = 0,
                Co = 0,
                ko = 0,
                Lo = 0,
                Ao = 0,
                Oo = 0,
                Mo = 0,
                _o = 0,
                Do = 0,
                Po = 0;
            var Ho = 0,
                Bo = 0,
                jo = 0,
                Fo = 0,
                Io = 0,
                qo = 0,
                Ro = 0,
                Uo = 0,
                zo = 0,
                Wo = 0,
                Xo = 0,
                Vo = 0,
                $o = 0,
                Jo = 0,
                Ko = 0,
                Qo = 0,
                Go = 0,
                Yo = 0,
                Zo = 0,
                eu = 0;
            var tu = 0,
                nu = 0,
                ru = 0,
                iu = 0,
                su = 0,
                ou = 0,
                uu = 0,
                au = 0,
                fu = 0,
                lu = 0,
                cu = 0,
                hu = 0,
                pu = 0,
                du = 0,
                vu = 0,
                mu = 0,
                gu = 0,
                yu = 0,
                bu = 0,
                wu = 0;
            var Eu = 0,
                Su = 0,
                xu = 0,
                Tu = 0,
                Nu = 0,
                Cu = 0,
                ku = 0,
                Lu = 0,
                Au = 0,
                Ou = 0,
                Mu = 0,
                _u = 0,
                Du = 0,
                Pu = 0,
                Hu = 0,
                Bu = 0,
                ju = 0,
                Fu = 0,
                Iu = 0,
                qu = 0;
            var Ru = 0,
                Uu = 0,
                zu = 0,
                Wu = 0,
                Xu = 0,
                Vu = 0,
                $u = 0,
                Ju = 0,
                Ku = 0,
                Qu = 0,
                Gu = 0,
                Yu = 0,
                Zu = 0,
                ea = 0,
                ta = 0,
                na = 0,
                ra = 0,
                ia = 0,
                sa = 0,
                oa = 0;
            var ua = 0,
                aa = 0,
                fa = 0,
                la = 0,
                ca = 0,
                ha = 0,
                pa = 0,
                da = 0,
                va = 0,
                ma = 0,
                ga = 0,
                ya = 0,
                ba = 0,
                wa = 0,
                Ea = 0,
                Sa = 0,
                xa = 0,
                Ta = 0,
                Na = 0,
                Ca = 0;
            var ka = 0,
                La = 0,
                Aa = 0,
                Oa = 0,
                Ma = 0,
                _a = 0,
                Da = 0,
                Pa = 0,
                Ha = 0,
                Ba = 0,
                ja = 0,
                Fa = 0,
                Ia = 0,
                qa = 0,
                Ra = 0,
                Ua = 0,
                za = 0,
                Wa = 0,
                Xa = 0,
                Va = 0;
            var $a = 0,
                Ja = 0,
                Ka = 0,
                Qa = 0,
                Ga = 0,
                Ya = 0,
                Za = 0,
                ef = 0,
                tf = 0,
                nf = 0,
                rf = 0,
                sf = 0,
                of = 0,
                uf = 0,
                af = 0,
                ff = 0,
                lf = 0,
                cf = 0,
                hf = 0,
                pf = 0;
            var df = 0,
                vf = 0,
                mf = 0,
                gf = 0,
                yf = 0,
                bf = 0,
                wf = 0,
                Ef = 0,
                Sf = 0,
                xf = 0,
                Tf = 0,
                Nf = 0,
                Cf = 0,
                kf = 0,
                Lf = 0,
                Af = 0,
                Of = 0,
                Mf = 0,
                _f = 0,
                Df = 0;
            var Pf = 0,
                Hf = 0,
                Bf = 0,
                jf = 0,
                Ff = 0,
                If = 0,
                qf = 0,
                Rf = 0,
                Uf = 0,
                zf = 0,
                Wf = 0,
                Xf = 0,
                Vf = 0,
                $f = 0,
                Jf = 0,
                Kf = 0,
                Qf = 0,
                Gf = 0,
                Yf = 0,
                Zf = 0;
            var el = 0,
                tl = 0,
                nl = 0,
                rl = 0,
                il = 0,
                sl = 0,
                ol = 0,
                ul = 0,
                al = 0,
                fl = 0,
                ll = 0,
                cl = 0,
                hl = 0,
                pl = 0,
                dl = 0,
                vl = 0,
                ml = 0,
                gl = 0,
                yl = 0,
                bl = 0;
            var wl = 0,
                El = 0,
                Sl = 0,
                xl = 0,
                Tl = 0,
                Nl = 0,
                Cl = 0,
                kl = 0,
                Ll = 0,
                Al = 0,
                Ol = 0,
                Ml = 0,
                _l = 0,
                Dl = 0,
                Pl = 0,
                Hl = 0,
                Bl = 0,
                jl = 0,
                Fl = 0,
                Il = 0;
            var ql = 0,
                Rl = 0,
                Ul = 0,
                zl = 0,
                Wl = 0,
                Xl = 0,
                Vl = 0,
                $l = 0,
                Jl = 0,
                Kl = 0,
                Ql = 0,
                Gl = 0,
                Yl = 0,
                Zl = 0,
                ec = 0,
                tc = 0,
                nc = 0,
                rc = 0,
                ic = 0,
                sc = 0;
            var oc = 0,
                uc = 0,
                ac = 0,
                fc = 0,
                lc = 0,
                cc = 0,
                hc = 0,
                pc = 0,
                dc = 0,
                vc = 0,
                mc = 0,
                gc = 0,
                yc = 0,
                bc = 0,
                wc = 0,
                Ec = 0,
                Sc = 0,
                xc = 0,
                Tc = 0,
                Nc = 0;
            var Cc = 0,
                kc = 0,
                Lc = 0,
                Ac = 0,
                Oc = 0,
                Mc = 0,
                _c = 0,
                Dc = 0,
                Pc = 0,
                Hc = 0,
                Bc = 0,
                jc = 0,
                Fc = 0,
                Ic = 0,
                qc = 0,
                Rc = 0,
                Uc = 0,
                zc = 0,
                Wc = 0,
                Xc = 0;
            var Vc = 0,
                $c = 0,
                Jc = 0,
                Kc = 0,
                Qc = 0,
                Gc = 0,
                Yc = 0,
                Zc = 0,
                eh = 0,
                th = 0,
                nh = 0,
                rh = 0,
                ih = 0,
                sh = 0,
                oh = 0,
                uh = 0,
                ah = 0,
                fh = 0,
                lh = 0,
                ch = 0;
            var hh = 0,
                ph = 0,
                dh = 0,
                vh = 0,
                mh = 0,
                gh = 0,
                yh = 0,
                bh = 0,
                wh = 0,
                Eh = 0,
                Sh = 0,
                xh = 0,
                Th = 0,
                Nh = 0,
                Ch = 0,
                kh = 0,
                Lh = 0,
                Ah = 0,
                Oh = 0,
                Mh = 0;
            var _h = 0,
                Dh = 0,
                Ph = 0,
                Hh = 0,
                Bh = 0,
                jh = 0,
                Fh = 0,
                Ih = 0,
                qh = 0,
                Rh = 0,
                Uh = 0,
                zh = 0,
                Wh = 0,
                Xh = 0,
                Vh = 0,
                $h = 0,
                Jh = 0,
                Kh = 0,
                Qh = 0,
                Gh = 0;
            var Yh = 0,
                Zh = 0,
                ep = 0,
                tp = 0,
                np = 0,
                rp = 0,
                ip = 0,
                sp = 0,
                op = 0,
                up = 0,
                ap = 0,
                fp = 0,
                lp = 0,
                cp = 0,
                hp = 0,
                pp = 0,
                dp = 0,
                vp = 0,
                mp = 0,
                gp = 0;
            var yp = 0,
                bp = 0,
                wp = 0,
                Ep = 0,
                Sp = 0,
                xp = 0,
                Tp = 0,
                Np = 0,
                Cp = 0,
                kp = 0,
                Lp = 0,
                Ap = 0,
                Op = 0,
                Mp = 0,
                _p = 0,
                Dp = 0,
                Pp = 0,
                Hp = 0,
                Bp = 0,
                jp = 0;
            var Fp = 0,
                Ip = 0,
                qp = 0,
                Rp = 0,
                Up = 0,
                zp = 0,
                Wp = 0,
                Xp = 0,
                Vp = 0,
                $p = 0,
                Jp = 0,
                Kp = 0,
                Qp = 0,
                Gp = 0,
                Yp = 0,
                Zp = 0,
                ed = 0,
                td = 0,
                nd = 0,
                rd = 0;
            var id = 0,
                sd = 0,
                od = 0,
                ud = 0,
                ad = 0,
                fd = 0,
                ld = 0,
                cd = 0,
                hd = 0,
                pd = 0,
                dd = 0,
                vd = 0,
                md = 0,
                gd = 0,
                yd = 0,
                bd = 0,
                wd = 0,
                Ed = 0,
                Sd = 0,
                xd = 0;
            var Td = 0,
                Nd = 0,
                Cd = 0,
                kd = 0,
                Ld = 0,
                Ad = 0,
                Od = 0,
                Md = 0,
                _d = 0,
                Dd = 0,
                Pd = 0,
                Hd = 0,
                Bd = 0,
                jd = 0,
                Fd = 0,
                Id = 0,
                qd = 0,
                Rd = 0,
                Ud = 0,
                zd = 0;
            var Wd = 0,
                Xd = 0,
                Vd = 0,
                $d = 0,
                Jd = 0,
                Kd = 0,
                Qd = 0,
                Gd = 0,
                Yd = 0,
                Zd = 0,
                ev = 0,
                tv = 0,
                nv = 0,
                rv = 0,
                iv = 0,
                sv = 0,
                ov = 0,
                uv = 0,
                av = 0,
                fv = 0;
            var lv = 0,
                cv = 0,
                hv = 0,
                pv = 0,
                dv = 0,
                vv = 0,
                mv = 0,
                gv = 0,
                yv = 0,
                bv = 0,
                wv = 0,
                Ev = 0,
                Sv = 0,
                xv = 0,
                Tv = 0,
                Nv = 0,
                Cv = 0,
                kv = 0,
                Lv = 0,
                Av = 0;
            var Ov = 0,
                Mv = 0,
                _v = 0,
                Dv = 0,
                Pv = 0,
                Hv = 0,
                Bv = 0,
                jv = 0,
                Fv = 0,
                Iv = 0,
                qv = 0,
                Rv = 0,
                Uv = 0,
                zv = 0,
                Wv = 0,
                Xv = 0,
                Vv = 0,
                $v = 0,
                Jv = 0,
                Kv = 0;
            var Qv = 0,
                Gv = 0,
                Yv = 0,
                Zv = 0,
                em = 0,
                tm = 0,
                nm = 0,
                rm = 0,
                im = 0,
                sm = 0,
                om = 0,
                um = 0,
                am = 0,
                fm = 0,
                lm = 0,
                cm = 0,
                hm = 0,
                pm = 0,
                dm = 0,
                vm = 0;
            var mm = 0,
                gm = 0,
                ym = 0,
                bm = 0,
                wm = 0,
                Em = 0,
                Sm = 0,
                xm = 0,
                Tm = 0,
                Nm = 0,
                Cm = 0,
                km = 0,
                Lm = 0,
                Am = 0,
                Om = 0,
                Mm = 0,
                _m = 0,
                Dm = 0,
                Pm = 0,
                Hm = 0;
            var Bm = 0,
                jm = 0,
                Fm = 0,
                Im = 0,
                qm = 0,
                Rm = 0,
                Um = 0,
                zm = 0,
                Wm = 0,
                Xm = 0,
                Vm = 0,
                $m = 0,
                Jm = 0,
                Km = 0,
                Qm = 0,
                Gm = 0,
                Ym = 0,
                Zm = 0,
                eg = 0,
                tg = 0;
            var ng = 0,
                rg = 0,
                ig = 0,
                sg = 0,
                og = 0,
                ug = 0,
                ag = 0,
                fg = 0,
                lg = 0,
                cg = 0,
                hg = 0,
                pg = 0,
                dg = 0,
                vg = 0,
                mg = 0,
                gg = 0,
                yg = 0,
                bg = 0,
                wg = 0,
                Eg = 0;
            var Sg = 0,
                xg = 0,
                Tg = 0,
                Ng = 0,
                Cg = 0,
                kg = 0,
                Lg = 0,
                Ag = 0,
                Og = 0,
                Mg = 0,
                _g = 0,
                Dg = 0,
                Pg = 0,
                Hg = 0,
                Bg = 0,
                jg = 0,
                Fg = 0,
                Ig = 0,
                qg = 0,
                Rg = 0;
            var Ug = 0,
                zg = 0,
                Wg = 0,
                Xg = 0,
                Vg = 0,
                $g = 0,
                Jg = 0,
                Kg = 0,
                Qg = 0,
                Gg = 0,
                Yg = 0,
                Zg = 0,
                ey = 0,
                ty = 0,
                ny = 0,
                ry = 0,
                iy = 0,
                sy = 0,
                oy = 0,
                uy = 0;
            var ay = 0,
                fy = 0,
                ly = 0,
                cy = 0,
                hy = 0,
                py = 0,
                dy = 0,
                vy = 0,
                my = 0,
                gy = 0,
                yy = 0,
                by = 0,
                wy = 0,
                Ey = 0,
                Sy = 0,
                xy = 0,
                Ty = 0,
                Ny = 0,
                Cy = 0,
                ky = 0;
            var Ly = 0,
                Ay = 0,
                Oy = 0,
                My = 0,
                _y = 0,
                Dy = 0,
                Py = 0,
                Hy = 0,
                By = 0,
                jy = 0,
                Fy = 0,
                Iy = 0,
                qy = 0,
                Ry = 0,
                Uy = 0,
                zy = 0,
                Wy = 0,
                Xy = 0,
                Vy = 0,
                $y = 0;
            var Jy = 0,
                Ky = 0,
                Qy = 0,
                Gy = 0,
                Yy = 0,
                Zy = 0,
                eb = 0,
                tb = 0,
                nb = 0,
                rb = 0,
                ib = 0,
                sb = 0,
                ob = 0,
                ub = 0,
                ab = 0,
                fb = 0,
                lb = 0,
                cb = 0,
                hb = 0,
                pb = 0;
            var db = 0,
                vb = 0,
                mb = 0,
                gb = 0,
                yb = 0,
                bb = 0,
                wb = 0,
                Eb = 0,
                Sb = 0,
                xb = 0,
                Tb = 0,
                Nb = 0,
                Cb = 0,
                kb = 0,
                Lb = 0,
                Ab = 0,
                Ob = 0,
                Mb = 0,
                _b = 0,
                Db = 0;
            var Pb = 0,
                Hb = 0,
                Bb = 0,
                jb = 0,
                Fb = 0,
                Ib = 0,
                qb = 0,
                Rb = 0,
                Ub = 0,
                zb = 0,
                Wb = 0,
                Xb = 0,
                Vb = 0,
                $b = 0,
                Jb = 0,
                Kb = 0,
                Qb = 0,
                Gb = 0,
                Yb = 0,
                Zb = 0;
            var ew = 0,
                tw = 0,
                nw = 0,
                rw = 0,
                iw = 0,
                sw = 0,
                ow = 0,
                uw = 0,
                aw = 0,
                fw = 0,
                lw = 0,
                cw = 0,
                hw = 0,
                pw = 0,
                dw = 0,
                vw = 0,
                mw = 0,
                gw = 0,
                yw = 0,
                bw = 0;
            var ww = 0,
                Ew = 0,
                Sw = 0,
                xw = 0,
                Tw = 0,
                Nw = 0,
                Cw = 0,
                kw = 0,
                Lw = 0,
                Aw = 0,
                Ow = 0,
                Mw = 0,
                _w = 0,
                Dw = 0,
                Pw = 0,
                Hw = 0,
                Bw = 0,
                jw = 0,
                Fw = 0,
                Iw = 0;
            var qw = 0,
                Rw = 0,
                Uw = 0,
                zw = 0,
                Ww = 0,
                Xw = 0,
                Vw = 0,
                $w = 0,
                Jw = 0,
                Kw = 0,
                Qw = 0,
                Gw = 0,
                Yw = 0,
                Zw = 0,
                eE = 0,
                tE = 0,
                nE = 0,
                rE = 0,
                iE = 0,
                sE = 0;
            var oE = 0,
                uE = 0,
                aE = 0,
                fE = 0,
                lE = 0,
                cE = 0,
                hE = 0,
                pE = 0,
                dE = 0,
                vE = 0,
                mE = 0,
                gE = 0,
                yE = 0,
                bE = 0,
                wE = 0,
                EE = 0,
                SE = 0,
                xE = 0,
                TE = 0,
                NE = 0;
            var CE = 0,
                kE = 0,
                LE = 0,
                AE = 0,
                OE = 0,
                ME = 0,
                _E = 0,
                DE = 0,
                PE = 0,
                HE = 0,
                BE = 0,
                jE = 0,
                FE = 0,
                IE = 0,
                qE = 0,
                RE = 0,
                UE = 0,
                zE = 0,
                WE = 0,
                XE = 0;
            var VE = 0,
                $E = 0,
                JE = 0,
                KE = 0,
                QE = 0,
                GE = 0,
                YE = 0,
                ZE = 0,
                eS = 0,
                tS = 0,
                nS = 0,
                rS = 0,
                iS = 0,
                sS = 0,
                oS = 0,
                uS = 0,
                aS = 0,
                fS = 0,
                lS = 0,
                cS = 0;
            var hS = 0,
                pS = 0,
                dS = 0,
                vS = 0,
                mS = 0,
                gS = 0,
                yS = 0,
                bS = 0,
                wS = 0,
                ES = 0,
                SS = 0,
                xS = 0,
                TS = 0,
                NS = 0,
                CS = 0,
                kS = 0,
                LS = 0,
                AS = 0,
                OS = 0,
                MS = 0;
            var _S = 0,
                DS = 0,
                PS = 0,
                HS = 0,
                BS = 0,
                jS = 0,
                FS = 0,
                IS = 0,
                qS = 0,
                RS = 0,
                US = 0,
                zS = 0,
                WS = 0,
                XS = 0,
                VS = 0,
                $S = 0,
                JS = 0,
                KS = 0,
                QS = 0,
                GS = 0;
            var YS = 0,
                ZS = 0,
                ex = 0,
                tx = 0,
                nx = 0,
                rx = 0,
                ix = 0,
                sx = 0,
                ox = 0,
                ux = 0,
                ax = 0,
                fx = 0,
                lx = 0,
                cx = 0,
                hx = 0,
                px = 0,
                dx = 0,
                vx = 0,
                mx = 0,
                gx = 0;
            var yx = 0,
                bx = 0,
                wx = 0,
                Ex = 0,
                Sx = 0,
                xx = 0,
                Tx = 0,
                Nx = 0,
                Cx = 0,
                kx = 0,
                Lx = 0,
                Ax = 0,
                Ox = 0,
                Mx = 0,
                _x = 0,
                Dx = 0,
                Px = 0,
                Hx = 0,
                Bx = 0,
                jx = 0;
            var Fx = 0,
                Ix = 0,
                qx = 0,
                Rx = 0,
                Ux = 0,
                zx = 0,
                Wx = 0,
                Xx = 0,
                Vx = 0,
                $x = 0,
                Jx = 0,
                Kx = 0,
                Qx = 0,
                Gx = 0,
                Yx = 0,
                Zx = 0,
                eT = 0,
                tT = 0,
                nT = 0,
                rT = 0;
            var iT = 0,
                sT = 0,
                oT = 0,
                uT = 0,
                aT = 0,
                fT = 0,
                lT = 0,
                cT = 0,
                hT = 0,
                pT = 0,
                dT = 0,
                vT = 0,
                mT = 0,
                gT = 0,
                yT = 0,
                bT = 0,
                wT = 0,
                ET = 0,
                ST = 0,
                xT = 0;
            var TT = 0,
                NT = 0,
                CT = 0,
                kT = 0,
                LT = 0,
                AT = 0,
                OT = 0,
                MT = 0,
                _T = 0,
                DT = 0,
                PT = 0,
                HT = 0,
                BT = 0,
                jT = 0,
                FT = 0,
                IT = 0,
                qT = 0,
                RT = 0,
                UT = 0,
                zT = 0;
            var WT = 0,
                XT = 0,
                VT = 0,
                $T = 0,
                JT = 0,
                KT = 0,
                QT = 0,
                GT = 0,
                YT = 0,
                ZT = 0,
                eN = 0,
                tN = 0,
                nN = 0,
                rN = 0,
                iN = 0,
                sN = 0,
                oN = 0,
                uN = 0,
                aN = 0,
                fN = 0;
            var lN = 0,
                cN = 0,
                hN = 0,
                pN = 0,
                dN = 0,
                vN = 0,
                mN = 0,
                gN = 0,
                yN = 0,
                bN = 0,
                wN = 0,
                EN = 0,
                SN = 0,
                xN = 0,
                TN = 0,
                NN = 0,
                CN = 0,
                kN = 0,
                LN = 0,
                AN = 0;
            var ON = 0,
                MN = 0,
                _N = 0,
                DN = 0,
                PN = 0,
                HN = 0,
                BN = 0,
                jN = 0,
                FN = 0,
                IN = 0,
                qN = 0,
                RN = 0,
                UN = 0,
                zN = 0,
                WN = 0,
                XN = 0,
                VN = 0,
                $N = 0,
                JN = 0,
                KN = 0;
            var QN = 0,
                GN = 0,
                YN = 0,
                ZN = 0,
                eC = 0,
                tC = 0,
                nC = 0,
                rC = 0,
                iC = 0,
                sC = 0,
                oC = 0,
                uC = 0,
                aC = 0,
                fC = 0,
                lC = 0,
                cC = 0,
                hC = 0,
                pC = 0,
                dC = 0,
                vC = 0;
            var mC = 0,
                gC = 0,
                yC = 0,
                bC = 0,
                wC = 0,
                EC = 0,
                SC = 0,
                xC = 0,
                TC = 0,
                NC = 0,
                CC = 0,
                kC = 0,
                LC = 0,
                AC = 0,
                OC = 0,
                MC = 0,
                _C = 0,
                DC = 0,
                PC = 0,
                HC = 0;
            var BC = 0,
                jC = 0,
                FC = 0,
                IC = 0,
                qC = 0,
                RC = 0,
                UC = 0,
                zC = 0,
                WC = 0,
                XC = 0,
                VC = 0,
                $C = 0,
                JC = 0,
                KC = 0,
                QC = 0,
                GC = 0,
                YC = 0,
                ZC = 0,
                ek = 0,
                tk = 0;
            var nk = 0,
                rk = 0,
                ik = 0,
                sk = 0,
                ok = 0,
                uk = 0,
                ak = 0,
                fk = 0,
                lk = 0,
                ck = 0,
                hk = 0,
                pk = 0,
                dk = 0,
                vk = 0,
                mk = 0,
                gk = 0,
                yk = 0,
                bk = 0,
                wk = 0,
                Ek = 0;
            var Sk = 0,
                xk = 0,
                Tk = 0,
                Nk = 0,
                Ck = 0,
                kk = 0,
                Lk = 0,
                Ak = 0,
                Ok = 0,
                Mk = 0,
                _k = 0,
                Dk = 0,
                Pk = 0,
                Hk = 0,
                Bk = 0,
                jk = 0,
                Fk = 0,
                Ik = 0,
                qk = 0,
                Rk = 0;
            var Uk = 0,
                zk = 0,
                Wk = 0,
                Xk = 0,
                Vk = 0,
                $k = 0,
                Jk = 0,
                Kk = 0,
                Qk = 0,
                Gk = 0,
                Yk = 0,
                Zk = 0,
                eL = 0,
                tL = 0,
                nL = 0,
                rL = 0,
                iL = 0,
                sL = 0,
                oL = 0,
                uL = 0;
            var aL = 0,
                fL = 0,
                lL = 0,
                cL = 0,
                hL = 0,
                pL = 0,
                dL = 0,
                vL = 0,
                mL = 0,
                gL = 0,
                yL = 0,
                bL = 0,
                wL = 0,
                EL = 0,
                SL = 0,
                xL = 0,
                TL = 0,
                NL = 0,
                CL = 0,
                kL = 0;
            var LL = 0,
                AL = 0,
                OL = 0,
                ML = 0,
                _L = 0,
                DL = 0,
                PL = 0,
                HL = 0,
                BL = 0,
                jL = 0,
                FL = 0,
                IL = 0,
                qL = 0,
                RL = 0,
                UL = 0,
                zL = 0,
                WL = 0,
                XL = 0,
                VL = 0,
                $L = 0;
            var JL = 0,
                KL = 0,
                QL = 0,
                GL = 0,
                YL = 0,
                ZL = 0,
                eA = 0,
                tA = 0,
                nA = 0,
                rA = 0,
                iA = 0,
                sA = 0,
                oA = 0,
                uA = 0,
                aA = 0,
                fA = 0,
                lA = 0,
                cA = 0,
                hA = 0,
                pA = 0;
            var dA = 0,
                vA = 0,
                mA = 0,
                gA = 0,
                yA = 0,
                bA = 0,
                wA = 0,
                EA = 0,
                SA = 0,
                xA = 0,
                TA = 0,
                NA = 0,
                CA = 0,
                kA = 0,
                LA = 0,
                AA = 0,
                OA = 0,
                MA = 0,
                _A = 0,
                DA = 0;
            var PA = 0,
                HA = 0,
                BA = 0,
                jA = 0,
                FA = 0,
                IA = 0,
                qA = 0,
                RA = 0,
                UA = 0,
                zA = 0,
                WA = 0,
                XA = 0,
                VA = 0,
                $A = 0,
                JA = 0,
                KA = 0,
                QA = 0,
                GA = 0,
                YA = 0,
                ZA = 0;
            var eO = 0,
                tO = 0,
                nO = 0,
                rO = 0,
                iO = 0,
                sO = 0,
                oO = 0,
                uO = 0,
                aO = 0,
                fO = 0,
                lO = 0,
                cO = 0,
                hO = 0,
                pO = 0,
                dO = 0,
                vO = 0,
                mO = 0,
                gO = 0,
                yO = 0,
                bO = 0;
            var wO = 0,
                EO = 0,
                SO = 0,
                xO = 0,
                TO = 0,
                NO = 0,
                CO = 0,
                kO = 0,
                LO = 0,
                AO = 0,
                OO = 0,
                MO = 0,
                _O = 0,
                DO = 0,
                PO = 0,
                HO = 0,
                BO = 0,
                jO = 0,
                FO = 0,
                IO = 0;
            var qO = 0,
                RO = 0,
                UO = 0,
                zO = 0,
                WO = 0,
                XO = 0,
                VO = 0,
                $O = 0,
                JO = 0,
                KO = 0,
                QO = 0,
                GO = 0,
                YO = 0,
                ZO = 0,
                eM = 0,
                tM = 0,
                nM = 0,
                rM = 0,
                iM = 0,
                sM = 0;
            var oM = 0,
                uM = 0,
                aM = 0,
                fM = 0,
                lM = 0,
                cM = 0,
                hM = 0,
                pM = 0,
                dM = 0,
                vM = 0,
                mM = 0,
                gM = 0,
                yM = 0,
                bM = 0,
                wM = 0,
                EM = 0,
                SM = 0,
                xM = 0,
                TM = 0,
                NM = 0;
            var CM = 0,
                kM = 0,
                LM = 0,
                AM = 0,
                OM = 0,
                MM = 0,
                _M = 0,
                DM = 0,
                PM = 0,
                HM = 0,
                BM = 0,
                jM = 0,
                FM = 0,
                IM = 0,
                qM = 0,
                RM = 0,
                UM = 0,
                zM = 0,
                WM = 0,
                XM = 0;
            var VM = 0,
                $M = 0,
                JM = 0,
                KM = 0,
                QM = 0,
                GM = 0,
                YM = 0,
                ZM = 0,
                e_ = 0,
                t_ = 0,
                n_ = 0,
                r_ = 0,
                i_ = 0,
                s_ = 0,
                o_ = 0,
                u_ = 0,
                a_ = 0,
                f_ = 0,
                l_ = 0,
                c_ = 0;
            var h_ = 0,
                p_ = 0,
                d_ = 0,
                v_ = 0,
                m_ = 0,
                g_ = 0,
                y_ = 0,
                b_ = 0,
                w_ = 0,
                E_ = 0,
                S_ = 0,
                x_ = 0,
                T_ = 0,
                N_ = 0,
                C_ = 0,
                k_ = 0,
                L_ = 0,
                A_ = 0,
                O_ = 0,
                M_ = 0;
            var __ = 0,
                D_ = 0,
                P_ = 0,
                H_ = 0,
                B_ = 0,
                j_ = 0,
                F_ = 0,
                I_ = 0,
                q_ = 0,
                R_ = 0,
                U_ = 0,
                z_ = 0,
                W_ = 0,
                X_ = 0,
                V_ = 0,
                $_ = 0,
                J_ = 0,
                K_ = 0,
                Q_ = 0,
                G_ = 0;
            var Y_ = 0,
                Z_ = 0,
                eD = 0,
                tD = 0,
                nD = 0,
                rD = 0,
                iD = 0,
                sD = 0,
                oD = 0,
                uD = 0,
                aD = 0,
                fD = 0,
                lD = 0,
                cD = 0,
                hD = 0,
                pD = 0,
                dD = 0,
                vD = 0,
                mD = 0,
                gD = 0;
            var yD = 0,
                bD = 0,
                wD = 0,
                ED = 0,
                SD = 0,
                xD = 0,
                TD = 0,
                ND = 0,
                CD = 0,
                kD = 0,
                LD = 0,
                AD = 0,
                OD = 0,
                MD = 0,
                _D = 0,
                DD = 0,
                PD = 0,
                HD = 0,
                BD = 0,
                jD = 0;
            var FD = 0,
                ID = 0,
                qD = 0,
                RD = 0,
                UD = 0,
                zD = 0,
                WD = 0,
                XD = 0,
                VD = 0,
                $D = 0,
                JD = 0,
                KD = 0,
                QD = 0,
                GD = 0,
                YD = 0,
                ZD = 0,
                eP = 0,
                tP = 0,
                nP = 0,
                rP = 0;
            var iP = 0,
                sP = 0,
                oP = 0,
                uP = 0,
                aP = 0,
                fP = 0,
                lP = 0,
                cP = 0,
                hP = 0,
                pP = 0,
                dP = 0,
                vP = 0,
                mP = 0,
                gP = 0,
                yP = 0,
                bP = 0,
                wP = 0,
                EP = 0,
                SP = 0,
                xP = 0;
            var TP = 0,
                NP = 0,
                CP = 0,
                kP = 0,
                LP = 0,
                AP = 0,
                OP = 0,
                MP = 0,
                _P = 0,
                DP = 0,
                PP = 0,
                HP = 0,
                BP = 0,
                jP = 0,
                FP = 0,
                IP = 0,
                qP = 0,
                RP = 0,
                UP = 0,
                zP = 0;
            var WP = 0,
                XP = 0,
                VP = 0,
                $P = 0,
                JP = 0,
                KP = 0,
                QP = 0,
                GP = 0,
                YP = 0,
                ZP = 0,
                eH = 0,
                tH = 0,
                nH = 0,
                rH = 0,
                iH = 0,
                sH = 0,
                oH = 0,
                uH = 0,
                aH = 0,
                fH = 0;
            var lH = 0,
                cH = 0,
                hH = 0,
                pH = 0,
                dH = 0,
                vH = 0,
                mH = 0,
                gH = 0,
                yH = 0,
                bH = 0,
                wH = 0,
                EH = 0,
                SH = 0,
                xH = 0,
                TH = 0,
                NH = 0,
                CH = 0,
                kH = 0,
                LH = 0,
                AH = 0;
            var OH = 0,
                MH = 0,
                _H = 0,
                DH = 0,
                PH = 0,
                HH = 0,
                BH = 0,
                jH = 0,
                FH = 0,
                IH = 0,
                qH = 0,
                RH = 0,
                UH = 0,
                zH = 0,
                WH = 0,
                XH = 0,
                VH = 0,
                $H = 0,
                JH = 0,
                KH = 0;
            var QH = 0,
                GH = 0,
                YH = 0,
                ZH = 0,
                eB = 0,
                tB = 0,
                nB = 0,
                rB = 0,
                iB = 0,
                sB = 0,
                oB = 0,
                uB = 0,
                aB = 0,
                fB = 0,
                lB = 0,
                cB = 0,
                hB = 0,
                pB = 0,
                dB = 0,
                vB = 0;
            var mB = 0,
                gB = 0,
                yB = 0,
                bB = 0,
                wB = 0,
                EB = 0,
                SB = 0,
                xB = 0,
                TB = 0,
                NB = 0,
                CB = 0,
                kB = 0,
                LB = 0,
                AB = 0,
                OB = 0,
                MB = 0,
                _B = 0,
                DB = 0,
                PB = 0,
                HB = 0;
            var BB = 0,
                jB = 0,
                FB = 0,
                IB = 0,
                qB = 0,
                RB = 0,
                UB = 0,
                zB = 0,
                WB = 0,
                XB = 0,
                VB = 0,
                $B = 0,
                JB = 0,
                KB = 0,
                QB = 0,
                GB = 0,
                YB = 0,
                ZB = 0,
                ej = 0,
                tj = 0;
            var nj = 0,
                rj = 0,
                ij = 0,
                sj = 0,
                oj = 0,
                uj = 0,
                aj = 0,
                fj = 0,
                lj = 0,
                cj = 0,
                hj = 0,
                pj = 0,
                dj = 0,
                vj = 0,
                mj = 0,
                gj = 0,
                yj = 0,
                bj = 0,
                wj = 0,
                Ej = 0;
            var Sj = 0,
                xj = 0,
                Tj = 0,
                Nj = 0,
                Cj = 0,
                kj = 0,
                Lj = 0,
                Aj = 0,
                Oj = 0,
                Mj = 0,
                _j = 0,
                Dj = 0,
                Pj = 0,
                Hj = 0,
                Bj = 0,
                jj = 0,
                Fj = 0,
                Ij = 0,
                qj = 0,
                Rj = 0;
            var Uj = 0,
                zj = 0,
                Wj = 0,
                Xj = 0,
                Vj = 0,
                $j = 0,
                Jj = 0,
                Kj = 0,
                Qj = 0,
                Gj = 0,
                Yj = 0,
                Zj = 0,
                eF = 0,
                tF = 0,
                nF = 0,
                rF = 0,
                iF = 0,
                sF = 0,
                oF = 0,
                uF = 0;
            var aF = 0,
                fF = 0,
                lF = 0,
                cF = 0,
                hF = 0,
                pF = 0;
            cF = c;
            c = c + 592 | 0;
            QH = cF + 544 | 0;
            OP = cF + 536 | 0;
            EP = cF + 532 | 0;
            mP = cF + 480 | 0;
            Lj = cF + 472 | 0;
            gP = cF + 440 | 0;
            UD = cF + 392 | 0;
            UP = cF + 324 | 0;
            Jj = cF + 248 | 0;
            Kj = cF + 172 | 0;
            LP = cF + 96 | 0;
            VD = cF + 64 | 0;
            hP = cF + 48 | 0;
            Aj = cF;
            Ut = Ds(i, 1) | 0;
            zt = rt(a, u) | 0;
            hg = zt >> 9;
            vb = (hg | 0) > 8192;
            yE = vb ? hg : 8192;
            Ex = (i | 0) > 0;
            if (!Ex) {
                _s(Ut);
                c = cF;
                return
            }
            TN = hP + 4 | 0;
            kk = hP + 8 | 0;
            OA = gP + 12 | 0;
            DM = gP + 24 | 0;
            Wt = gP + 4 | 0;
            Jr = gP + 16 | 0;
            xo = gP + 8 | 0;
            Ca = gP + 20 | 0;
            Ol = Jj + 72 | 0;
            Dh = Kj + 72 | 0;
            Bd = LP + 72 | 0;
            Dm = (a | 0) > (u | 0);
            Wm = a - u | 0;
            at = Dm ? Wm : 0;
            tg = u + -1 | 0;
            pg = tg + at | 0;
            Tg = UD + 4 | 0;
            Hg = UD + 8 | 0;
            Vg = UD + 12 | 0;
            ry = UD + 16 | 0;
            dy = UD + 20 | 0;
            Ny = UD + 24 | 0;
            By = UD + 28 | 0;
            $y = UD + 32 | 0;
            ib = UD + 36 | 0;
            mb = UD + 40 | 0;
            kb = UD + 44 | 0;
            Fb = Kj + 64 | 0;
            Kb = Kj + 68 | 0;
            ow = LP + 64 | 0;
            gw = LP + 68 | 0;
            Lw = Kj + 12 | 0;
            Iw = LP + 8 | 0;
            Qw = Jj + 64 | 0;
            uE = Jj + 68 | 0;
            bE = Jj + 12 | 0;
            OE = Jj + 8 | 0;
            RE = e + 768 | 0;
            G = QH + 4 | 0;
            Z = QH + 8 | 0;
            YE = QH + 24 | 0;
            $ = QH + 28 | 0;
            K = QH + 32 | 0;
            fS = Kj + 4 | 0;
            wS = QH + 12 | 0;
            MS = Kj + 52 | 0;
            US = QH + 36 | 0;
            ZS = LP + 60 | 0;
            lx = LP + 4 | 0;
            Sx = Kj + 20 | 0;
            Dx = LP + 28 | 0;
            tt = QH + 40 | 0;
            it = QH + 16 | 0;
            Wx = 0 - u | 0;
            tT = Wx << 2;
            hT = u << 3;
            xT = 0 - a | 0;
            PT = xT << 2;
            XT = a << 3;
            nN = VD + 24 | 0;
            pN = VD + 28 | 0;
            NN = Kj + 8 | 0;
            BN = LP + 12 | 0;
            $N = VD + 4 | 0;
            iC = VD + 8 | 0;
            vC = VD + 12 | 0;
            CC = VD + 16 | 0;
            jC = VD + 20 | 0;
            JC = Lj + 4 | 0;
            sk = UP + 4 | 0;
            mk = UP + 56 | 0;
            Lk = UP + 8 | 0;
            Ik = UP + 12 | 0;
            Qk = UP + 60 | 0;
            uL = UP + 16 | 0;
            yL = UP + 20 | 0;
            AL = UP + 48 | 0;
            qL = UP + 24 | 0;
            GL = UP + 28 | 0;
            aA = UP + 32 | 0;
            bA = UP + 36 | 0;
            MA = UP + 40 | 0;
            UA = UP + 44 | 0;
            ZA = UP + 52 | 0;
            lO = UP + 64 | 0;
            EO = Aj + 16 | 0;
            _O = Jj + 4 | 0;
            zO = QH + 44 | 0;
            eM = QH + 20 | 0;
            cM = t + 4 | 0;
            SM = t + 8 | 0;
            PM = Aj + 16 | 0;
            XM = Aj + 24 | 0;
            C = Aj + 20 | 0;
            O = Aj + 28 | 0;
            n_ = Aj + 40 | 0;
            S = Aj + 44 | 0;
            p_ = Aj + 32 | 0;
            w = Aj + 36 | 0;
            JP = 0;
            BB = 0;
            while (1) {
                FH = JP + 1 | 0;
                T_ = Ut + JP | 0;
                H_ = r[T_ >> 0] | 0;
                V_ = H_ << 24 >> 24 == 0;
                rD = (FH | 0) < (i | 0);
                kj = V_ & rD;
                if (kj) {
                    YP = JP;
                    jH = JP;
                    IH = FH;
                    FB = BB;
                    while (1) {
                        dn = jH + 2 | 0;
                        Nn = Ut + IH | 0;
                        Bn = r[Nn >> 0] | 0;
                        $n = Bn << 24 >> 24 == 0;
                        ir = (dn | 0) < (i | 0);
                        dj = $n & ir;
                        if (dj) {
                            yv = Nn;
                            nH = YP;
                            UH = IH;
                            XH = dn;
                            qB = FB;
                            while (1) {
                                vr = Ut + XH | 0;
                                Cr = r[vr >> 0] | 0;
                                jr = Cr << 24 >> 24 == 0;
                                e: do {
                                    if (jr) {
                                        Kr = n + (nH << 4) | 0;
                                        s[hP >> 2] = Kr;
                                        oi = n + (UH << 4) | 0;
                                        s[TN >> 2] = oi;
                                        gi = n + (XH << 4) | 0;
                                        s[kk >> 2] = gi;
                                        Tt = s[Kr >> 2] | 0;
                                        y = (n + (nH << 4) | 0) + 4 | 0;
                                        b = s[y >> 2] | 0;
                                        Ct = s[oi >> 2] | 0;
                                        T = (n + (UH << 4) | 0) + 4 | 0;
                                        N = s[T >> 2] | 0;
                                        Lt = s[gi >> 2] | 0;
                                        L = (n + (XH << 4) | 0) + 4 | 0;
                                        A = s[L >> 2] | 0;
                                        Ai = Ct - Tt | 0;
                                        Zi = A - b | 0;
                                        cs = rt(Zi, Ai) | 0;
                                        Ss = N - b | 0;
                                        js = Lt - Tt | 0;
                                        Js = rt(js, Ss) | 0;
                                        fo = (cs | 0) == (Js | 0);
                                        t: do {
                                            if (!fo) {
                                                To = cs - Js | 0;
                                                s[gP >> 2] = 0;
                                                s[OA >> 2] = 0;
                                                s[DM >> 2] = 0;
                                                ot = To >>> 31;
                                                Ho = ot + 1 | 0;
                                                s[Wt >> 2] = Ho;
                                                s[Jr >> 2] = Ho;
                                                Vo = 2 - ot | 0;
                                                s[xo >> 2] = Vo;
                                                s[Ca >> 2] = Vo;
                                                ru = Ct - Lt | 0;
                                                du = rt(ru, ru) | 0;
                                                Nu = N - A | 0;
                                                Bu = rt(Nu, Nu) | 0;
                                                $u = Bu + du | 0;
                                                ia = hP + (Vo << 2) | 0;
                                                va = s[ia >> 2] | 0;
                                                Ot = s[va >> 2] | 0;
                                                _ = va + 4 | 0;
                                                P = s[_ >> 2] | 0;
                                                ka = Ot - Tt | 0;
                                                Fa = rt(ka, ka) | 0;
                                                Ka = P - b | 0;
                                                uf = rt(Ka, Ka) | 0;
                                                yf = uf + Fa | 0;
                                                Af = yf >>> 0 > $u >>> 0;
                                                WP = Af & 1;
                                                ut = Af ? yf : $u;
                                                qf = hP + (Ho << 2) | 0;
                                                Gf = s[qf >> 2] | 0;
                                                _t = s[Gf >> 2] | 0;
                                                j = Gf + 4 | 0;
                                                F = s[j >> 2] | 0;
                                                al = Tt - _t | 0;
                                                bl = rt(al, al) | 0;
                                                Ml = b - F | 0;
                                                Ul = rt(Ml, Ml) | 0;
                                                Zl = Ul + bl | 0;
                                                lc = Zl >>> 0 > ut >>> 0;
                                                zP = lc ? 2 : WP;
                                                Ec = zP + 3 | 0;
                                                d = 0;
                                                KP = zP;
                                                while (1) {
                                                    _c = (KP | 0) < (Ec | 0);
                                                    if (!_c) {
                                                        break t
                                                    }
                                                    zc = gP + (KP << 2) | 0;
                                                    eh = s[zc >> 2] | 0;
                                                    ch = hP + (eh << 2) | 0;
                                                    Sh = s[ch >> 2] | 0;
                                                    s[Ol >> 2] = Sh;
                                                    Ph = KP + 1 | 0;
                                                    Xh = gP + (Ph << 2) | 0;
                                                    np = s[Xh >> 2] | 0;
                                                    pp = hP + (np << 2) | 0;
                                                    Tp = s[pp >> 2] | 0;
                                                    s[Dh >> 2] = Tp;
                                                    Hp = KP + 2 | 0;
                                                    Vp = gP + (Hp << 2) | 0;
                                                    rd = s[Vp >> 2] | 0;
                                                    dd = hP + (rd << 2) | 0;
                                                    Nd = s[dd >> 2] | 0;
                                                    s[Bd >> 2] = Nd;
                                                    jd = es(pg) | 0;
                                                    Jd = 28 - jd | 0;
                                                    Dt = s[Tp >> 2] | 0;
                                                    I = Tp + 4 | 0;
                                                    q = s[I >> 2] | 0;
                                                    Pt = s[Nd >> 2] | 0;
                                                    R = Nd + 4 | 0;
                                                    U = s[R >> 2] | 0;
                                                    sv = s[Sh >> 2] | 0;
                                                    mv = Dt - sv | 0;
                                                    kv = Pt - sv | 0;
                                                    Fv = Sh + 4 | 0;
                                                    Kv = s[Fv >> 2] | 0;
                                                    om = q - Kv | 0;
                                                    gm = U - Kv | 0;
                                                    Lm = rt(gm, mv) | 0;
                                                    Pm = rt(om, kv) | 0;
                                                    Hm = Lm - Pm | 0;
                                                    sH = (Hm | 0) > -1;
                                                    sB = 0 - Hm | 0;
                                                    Bm = sH ? Hm : sB;
                                                    jm = es(Bm) | 0;
                                                    Fm = jm >> 1;
                                                    Im = Fm + -2 | 0;
                                                    qm = es(Bm) | 0;
                                                    Rm = qm >> 1;
                                                    Um = Rm + -2 | 0;
                                                    zm = es(Bm) | 0;
                                                    Xm = zm >> 1;
                                                    Vm = Xm + -2 | 0;
                                                    $m = Vm >> 31;
                                                    Jm = $m & Um;
                                                    Km = Im - Jm | 0;
                                                    s[UD >> 2] = mv;
                                                    s[Tg >> 2] = kv;
                                                    s[Hg >> 2] = om;
                                                    s[Vg >> 2] = gm;
                                                    Qm = gm << Jd;
                                                    Gm = Hm >> Km;
                                                    Ym = Gm >> 1;
                                                    Zm = Qm >> 31;
                                                    eg = Ym + Zm | 0;
                                                    ng = eg ^ Zm;
                                                    rg = ng + Qm | 0;
                                                    ig = (rg | 0) / (Gm | 0) & -1;
                                                    s[ry >> 2] = ig;
                                                    sg = 0 - kv | 0;
                                                    og = sg << Jd;
                                                    ug = og >> 31;
                                                    ag = Ym + ug | 0;
                                                    fg = ag ^ ug;
                                                    lg = fg + og | 0;
                                                    cg = (lg | 0) / (Gm | 0) & -1;
                                                    s[dy >> 2] = cg;
                                                    dg = 0 - om | 0;
                                                    vg = dg << Jd;
                                                    mg = vg >> 31;
                                                    gg = Ym + mg | 0;
                                                    yg = gg ^ mg;
                                                    bg = yg + vg | 0;
                                                    wg = (bg | 0) / (Gm | 0) & -1;
                                                    s[Ny >> 2] = wg;
                                                    Eg = mv << Jd;
                                                    Sg = Eg >> 31;
                                                    xg = Ym + Sg | 0;
                                                    Ng = xg ^ Sg;
                                                    Cg = Ng + Eg | 0;
                                                    kg = (Cg | 0) / (Gm | 0) & -1;
                                                    s[By >> 2] = kg;
                                                    Lg = s[Sh >> 2] | 0;
                                                    s[$y >> 2] = Lg;
                                                    Ag = s[Fv >> 2] | 0;
                                                    s[ib >> 2] = Ag;
                                                    s[mb >> 2] = Jd;
                                                    s[kb >> 2] = Km;
                                                    Og = s[Tp >> 2] | 0;
                                                    Mg = s[I >> 2] | 0;
                                                    _g = Og - Lg | 0;
                                                    Dg = rt(_g, ig) | 0;
                                                    Pg = Mg - Ag | 0;
                                                    Bg = rt(Pg, cg) | 0;
                                                    jg = 1 << Km;
                                                    Fg = jg >> 1;
                                                    Ig = Dg + Fg | 0;
                                                    qg = Ig + Bg | 0;
                                                    Rg = qg >> Km;
                                                    s[Fb >> 2] = Rg;
                                                    Ug = rt(_g, wg) | 0;
                                                    zg = rt(Pg, kg) | 0;
                                                    Wg = Ug + Fg | 0;
                                                    Xg = Wg + zg | 0;
                                                    $g = Xg >> Km;
                                                    s[Kb >> 2] = $g;
                                                    Oi(Kj, UD);
                                                    Jg = 1 << Jd;
                                                    Kg = Mi(Kj, Jg, Jg) | 0;
                                                    Qg = (Kg | 0) < 0;
                                                    n: do {
                                                        if (Qg) {
                                                            v = 0;
                                                            m = d
                                                        } else {
                                                            Gg = s[Bd >> 2] | 0;
                                                            Yg = s[Gg >> 2] | 0;
                                                            Zg = Gg + 4 | 0;
                                                            ey = s[Zg >> 2] | 0;
                                                            ty = s[ry >> 2] | 0;
                                                            ny = s[$y >> 2] | 0;
                                                            iy = Yg - ny | 0;
                                                            sy = rt(iy, ty) | 0;
                                                            oy = s[dy >> 2] | 0;
                                                            uy = s[ib >> 2] | 0;
                                                            ay = ey - uy | 0;
                                                            fy = rt(ay, oy) | 0;
                                                            ly = fy + sy | 0;
                                                            cy = s[kb >> 2] | 0;
                                                            hy = 1 << cy;
                                                            py = hy >> 1;
                                                            vy = ly + py | 0;
                                                            my = vy >> cy;
                                                            s[ow >> 2] = my;
                                                            gy = s[Ny >> 2] | 0;
                                                            yy = rt(gy, iy) | 0;
                                                            by = s[By >> 2] | 0;
                                                            wy = rt(by, ay) | 0;
                                                            Ey = py + yy | 0;
                                                            Sy = Ey + wy | 0;
                                                            xy = Sy >> cy;
                                                            s[gw >> 2] = xy;
                                                            Oi(LP, UD);
                                                            Ty = Mi(LP, Jg, Jg) | 0;
                                                            Cy = (Ty | 0) < 0;
                                                            if (Cy) {
                                                                v = 0;
                                                                m = d
                                                            } else {
                                                                ky = s[Lw >> 2] | 0;
                                                                Ly = s[Iw >> 2] | 0;
                                                                Ay = ky - Ly | 0;
                                                                iH = (Ay | 0) > -1;
                                                                iB = 0 - Ay | 0;
                                                                Oy = iH ? Ay : iB;
                                                                My = (Oy | 0) > 3;
                                                                if (My) {
                                                                    v = 0;
                                                                    m = d
                                                                } else {
                                                                    _y = s[Ol >> 2] | 0;
                                                                    Dy = s[_y >> 2] | 0;
                                                                    Py = _y + 4 | 0;
                                                                    Hy = s[Py >> 2] | 0;
                                                                    jy = s[ry >> 2] | 0;
                                                                    Fy = s[$y >> 2] | 0;
                                                                    Iy = Dy - Fy | 0;
                                                                    qy = rt(Iy, jy) | 0;
                                                                    Ry = s[dy >> 2] | 0;
                                                                    Uy = s[ib >> 2] | 0;
                                                                    zy = Hy - Uy | 0;
                                                                    Wy = rt(zy, Ry) | 0;
                                                                    Xy = Wy + qy | 0;
                                                                    Vy = s[kb >> 2] | 0;
                                                                    Jy = 1 << Vy;
                                                                    Ky = Jy >> 1;
                                                                    Qy = Xy + Ky | 0;
                                                                    Gy = Qy >> Vy;
                                                                    s[Qw >> 2] = Gy;
                                                                    Yy = s[Ny >> 2] | 0;
                                                                    Zy = rt(Yy, Iy) | 0;
                                                                    eb = s[By >> 2] | 0;
                                                                    tb = rt(eb, zy) | 0;
                                                                    nb = Ky + Zy | 0;
                                                                    rb = nb + tb | 0;
                                                                    sb = rb >> Vy;
                                                                    s[uE >> 2] = sb;
                                                                    Oi(Jj, UD);
                                                                    ob = Mi(Jj, Jg, Jg) | 0;
                                                                    ub = (ob | 0) < 0;
                                                                    if (ub) {
                                                                        v = 0;
                                                                        m = d
                                                                    } else {
                                                                        ab = s[bE >> 2] | 0;
                                                                        fb = ab - ky | 0;
                                                                        yH = (fb | 0) > -1;
                                                                        TB = 0 - fb | 0;
                                                                        lb = yH ? fb : TB;
                                                                        cb = (lb | 0) > 3;
                                                                        if (cb) {
                                                                            v = 0;
                                                                            m = d
                                                                        } else {
                                                                            hb = s[OE >> 2] | 0;
                                                                            pb = hb - Ly | 0;
                                                                            kH = (pb | 0) > -1;
                                                                            AB = 0 - pb | 0;
                                                                            db = kH ? pb : AB;
                                                                            gb = (db | 0) > 3;
                                                                            if (gb) {
                                                                                v = 0;
                                                                                m = d;
                                                                                break
                                                                            }
                                                                            Ui(Jj, UD, RE, 0);
                                                                            Ui(LP, UD, RE, 0);
                                                                            zi(QH, UD, Jj, LP, 0);
                                                                            yb = s[Bd >> 2] | 0;
                                                                            bb = s[yb >> 2] | 0;
                                                                            wb = yb + 4 | 0;
                                                                            Eb = s[wb >> 2] | 0;
                                                                            Ft = s[QH >> 2] | 0;
                                                                            Y = s[G >> 2] | 0;
                                                                            et = s[Z >> 2] | 0;
                                                                            Sb = rt(Ft, bb) | 0;
                                                                            xb = rt(Y, Eb) | 0;
                                                                            Tb = et + Sb | 0;
                                                                            Nb = Tb + xb | 0;
                                                                            Cb = (Nb | 0) < 0;
                                                                            if (Cb) {
                                                                                v = 0;
                                                                                m = d;
                                                                                break
                                                                            }
                                                                            Lb = s[Dh >> 2] | 0;
                                                                            Ab = s[Lb >> 2] | 0;
                                                                            Ob = Lb + 4 | 0;
                                                                            Mb = s[Ob >> 2] | 0;
                                                                            _b = rt(Ab, Ft) | 0;
                                                                            Db = rt(Mb, Y) | 0;
                                                                            Pb = _b + et | 0;
                                                                            Hb = Pb + Db | 0;
                                                                            Bb = (Hb | 0) < 0;
                                                                            if (Bb) {
                                                                                v = 0;
                                                                                m = d;
                                                                                break
                                                                            }
                                                                            Ui(Jj, UD, RE, 2);
                                                                            Ui(Kj, UD, RE, 2);
                                                                            zi(YE, UD, Jj, Kj, 2);
                                                                            jb = s[yb >> 2] | 0;
                                                                            Ib = s[wb >> 2] | 0;
                                                                            jt = s[YE >> 2] | 0;
                                                                            J = s[$ >> 2] | 0;
                                                                            Q = s[K >> 2] | 0;
                                                                            qb = rt(jt, jb) | 0;
                                                                            Rb = rt(J, Ib) | 0;
                                                                            Ub = Q + qb | 0;
                                                                            zb = Ub + Rb | 0;
                                                                            Wb = (zb | 0) < 0;
                                                                            if (Wb) {
                                                                                v = 0;
                                                                                m = d;
                                                                                break
                                                                            }
                                                                            Xb = s[Dh >> 2] | 0;
                                                                            Vb = s[Xb >> 2] | 0;
                                                                            $b = Xb + 4 | 0;
                                                                            Jb = s[$b >> 2] | 0;
                                                                            Qb = rt(Vb, jt) | 0;
                                                                            Gb = rt(Jb, J) | 0;
                                                                            Yb = Qb + Q | 0;
                                                                            Zb = Yb + Gb | 0;
                                                                            ew = (Zb | 0) < 0;
                                                                            if (ew) {
                                                                                v = 0;
                                                                                m = d;
                                                                                break
                                                                            }
                                                                            tw = s[fS >> 2] | 0;
                                                                            nw = tw >> 1;
                                                                            Ui(Kj, UD, RE, 1);
                                                                            rw = s[mb >> 2] | 0;
                                                                            iw = s[MS >> 2] | 0;
                                                                            sw = (iw | 0) < 2;
                                                                            if (sw) {
                                                                                s[OP >> 2] = 0;
                                                                                tE = 0
                                                                            } else {
                                                                                uw = iw << 3;
                                                                                aw = Ms(uw) | 0;
                                                                                fw = s[Sx >> 2] | 0;
                                                                                XP = 0;
                                                                                while (1) {
                                                                                    lw = fw + (XP << 4) | 0;
                                                                                    cw = s[lw >> 2] | 0;
                                                                                    hw = aw + (XP << 3) | 0;
                                                                                    s[hw >> 2] = cw;
                                                                                    pw = (fw + (XP << 4) | 0) + 4 | 0;
                                                                                    dw = s[pw >> 2] | 0;
                                                                                    vw = (aw + (XP << 3) | 0) + 4 | 0;
                                                                                    s[vw >> 2] = dw;
                                                                                    mw = XP + 1 | 0;
                                                                                    jP = (mw | 0) == (iw | 0);
                                                                                    if (jP) {
                                                                                        break
                                                                                    } else {
                                                                                        XP = mw
                                                                                    }
                                                                                }
                                                                                Xi(wS, aw, iw, rw);
                                                                                yw = s[Dh >> 2] | 0;
                                                                                bw = s[yw >> 2] | 0;
                                                                                ww = yw + 4 | 0;
                                                                                Ew = s[ww >> 2] | 0;
                                                                                qD = s[wS >> 2] | 0;
                                                                                BD = s[it >> 2] | 0;
                                                                                FD = s[eM >> 2] | 0;
                                                                                Sw = rt(qD, bw) | 0;
                                                                                xw = rt(BD, Ew) | 0;
                                                                                Tw = FD + Sw | 0;
                                                                                Nw = Tw + xw | 0;
                                                                                Cw = (Nw | 0) < 0;
                                                                                if (Cw) {
                                                                                    kw = 0 - qD | 0;
                                                                                    s[wS >> 2] = kw;
                                                                                    Aw = 0 - BD | 0;
                                                                                    s[it >> 2] = Aw;
                                                                                    Ow = 0 - FD | 0;
                                                                                    s[eM >> 2] = Ow;
                                                                                    X = Aw;
                                                                                    V = Ow;
                                                                                    Bt = kw
                                                                                } else {
                                                                                    X = BD;
                                                                                    V = FD;
                                                                                    Bt = qD
                                                                                }
                                                                                _s(aw);
                                                                                Mw = s[Ol >> 2] | 0;
                                                                                _w = s[Mw >> 2] | 0;
                                                                                Dw = Mw + 4 | 0;
                                                                                Pw = s[Dw >> 2] | 0;
                                                                                Hw = rt(_w, Bt) | 0;
                                                                                Bw = rt(Pw, X) | 0;
                                                                                jw = Hw + V | 0;
                                                                                Fw = jw + Bw | 0;
                                                                                qw = (Fw | 0) < 0;
                                                                                if (qw) {
                                                                                    v = 0;
                                                                                    m = d;
                                                                                    break
                                                                                }
                                                                                Rw = s[yb >> 2] | 0;
                                                                                Uw = s[wb >> 2] | 0;
                                                                                zw = rt(Rw, Bt) | 0;
                                                                                Ww = rt(Uw, X) | 0;
                                                                                Xw = zw + V | 0;
                                                                                Vw = Xw + Ww | 0;
                                                                                $w = (Vw | 0) < 0;
                                                                                if ($w) {
                                                                                    v = 0;
                                                                                    m = d;
                                                                                    break
                                                                                }
                                                                                Jw = Wi(UD, Bt, X, 1, nw, OP) | 0;
                                                                                Kw = (Jw | 0) < 0;
                                                                                if (Kw) {
                                                                                    v = 0;
                                                                                    m = d;
                                                                                    break
                                                                                }
                                                                                vt = s[OP >> 2] | 0;
                                                                                tE = vt
                                                                            }
                                                                            Gw = s[Fb >> 2] | 0;
                                                                            Yw = s[Kj >> 2] | 0;
                                                                            Zw = Yw * 3 | 0;
                                                                            eE = tE << 1;
                                                                            nE = Gw - eE | 0;
                                                                            rE = Zw + nE | 0;
                                                                            iE = s[Kb >> 2] | 0;
                                                                            sE = nw << 1;
                                                                            oE = iE - sE | 0;
                                                                            aE = s[LP >> 2] | 0;
                                                                            fE = aE >> 1;
                                                                            Ui(LP, UD, RE, 3);
                                                                            lE = s[mb >> 2] | 0;
                                                                            cE = s[ZS >> 2] | 0;
                                                                            hE = (cE | 0) < 2;
                                                                            if (hE) {
                                                                                s[EP >> 2] = 0;
                                                                                dS = 0
                                                                            } else {
                                                                                pE = cE << 3;
                                                                                dE = Ms(pE) | 0;
                                                                                vE = s[Dx >> 2] | 0;
                                                                                VP = 0;
                                                                                while (1) {
                                                                                    mE = vE + (VP << 4) | 0;
                                                                                    gE = s[mE >> 2] | 0;
                                                                                    wE = dE + (VP << 3) | 0;
                                                                                    s[wE >> 2] = gE;
                                                                                    EE = (vE + (VP << 4) | 0) + 4 | 0;
                                                                                    SE = s[EE >> 2] | 0;
                                                                                    xE = (dE + (VP << 3) | 0) + 4 | 0;
                                                                                    s[xE >> 2] = SE;
                                                                                    TE = VP + 1 | 0;
                                                                                    FP = (TE | 0) == (cE | 0);
                                                                                    if (FP) {
                                                                                        break
                                                                                    } else {
                                                                                        VP = TE
                                                                                    }
                                                                                }
                                                                                Xi(US, dE, cE, lE);
                                                                                NE = s[Bd >> 2] | 0;
                                                                                CE = s[NE >> 2] | 0;
                                                                                kE = NE + 4 | 0;
                                                                                LE = s[kE >> 2] | 0;
                                                                                RD = s[US >> 2] | 0;
                                                                                jD = s[tt >> 2] | 0;
                                                                                ID = s[zO >> 2] | 0;
                                                                                AE = rt(RD, CE) | 0;
                                                                                ME = rt(jD, LE) | 0;
                                                                                _E = ID + AE | 0;
                                                                                DE = _E + ME | 0;
                                                                                PE = (DE | 0) < 0;
                                                                                if (PE) {
                                                                                    HE = 0 - RD | 0;
                                                                                    s[US >> 2] = HE;
                                                                                    BE = 0 - jD | 0;
                                                                                    s[tt >> 2] = BE;
                                                                                    jE = 0 - ID | 0;
                                                                                    s[zO >> 2] = jE;
                                                                                    z = BE;
                                                                                    W = jE;
                                                                                    Ht = HE
                                                                                } else {
                                                                                    z = jD;
                                                                                    W = ID;
                                                                                    Ht = RD
                                                                                }
                                                                                _s(dE);
                                                                                FE = s[Ol >> 2] | 0;
                                                                                IE = s[FE >> 2] | 0;
                                                                                qE = FE + 4 | 0;
                                                                                UE = s[qE >> 2] | 0;
                                                                                zE = rt(IE, Ht) | 0;
                                                                                WE = rt(UE, z) | 0;
                                                                                XE = zE + W | 0;
                                                                                VE = XE + WE | 0;
                                                                                $E = (VE | 0) < 0;
                                                                                if ($E) {
                                                                                    v = 0;
                                                                                    m = d;
                                                                                    break
                                                                                }
                                                                                JE = s[Dh >> 2] | 0;
                                                                                KE = s[JE >> 2] | 0;
                                                                                QE = JE + 4 | 0;
                                                                                GE = s[QE >> 2] | 0;
                                                                                ZE = rt(KE, Ht) | 0;
                                                                                eS = rt(GE, z) | 0;
                                                                                tS = ZE + W | 0;
                                                                                nS = tS + eS | 0;
                                                                                rS = (nS | 0) < 0;
                                                                                if (rS) {
                                                                                    v = 0;
                                                                                    m = d;
                                                                                    break
                                                                                }
                                                                                iS = Wi(UD, Ht, z, 0, fE, EP) | 0;
                                                                                sS = (iS | 0) < 0;
                                                                                if (sS) {
                                                                                    v = 0;
                                                                                    m = d;
                                                                                    break
                                                                                }
                                                                                xt = s[EP >> 2] | 0;
                                                                                dS = xt
                                                                            }
                                                                            oS = s[ow >> 2] | 0;
                                                                            uS = fE << 1;
                                                                            aS = oS - uS | 0;
                                                                            lS = s[gw >> 2] | 0;
                                                                            cS = s[lx >> 2] | 0;
                                                                            hS = cS * 3 | 0;
                                                                            pS = dS << 1;
                                                                            vS = lS - pS | 0;
                                                                            mS = hS + vS | 0;
                                                                            gS = nw + -1 | 0;
                                                                            yS = gS - oE | 0;
                                                                            bS = yS + lS | 0;
                                                                            ES = (bS | 0) / (nw | 0) & -1;
                                                                            SS = ES + iw | 0;
                                                                            xS = SS << 3;
                                                                            TS = Ms(xS) | 0;
                                                                            NS = (iw | 0) > 0;
                                                                            if (NS) {
                                                                                CS = s[Sx >> 2] | 0;
                                                                                $P = 0;
                                                                                while (1) {
                                                                                    kS = TS + ($P << 3) | 0;
                                                                                    LS = CS + ($P << 4) | 0;
                                                                                    AS = LS;
                                                                                    OS = AS;
                                                                                    _S = s[OS >> 2] | 0;
                                                                                    DS = AS + 4 | 0;
                                                                                    PS = DS;
                                                                                    HS = s[PS >> 2] | 0;
                                                                                    BS = kS;
                                                                                    jS = BS;
                                                                                    s[jS >> 2] = _S;
                                                                                    FS = BS + 4 | 0;
                                                                                    IS = FS;
                                                                                    s[IS >> 2] = HS;
                                                                                    qS = $P + 1 | 0;
                                                                                    BP = (qS | 0) == (iw | 0);
                                                                                    if (BP) {
                                                                                        break
                                                                                    } else {
                                                                                        $P = qS
                                                                                    }
                                                                                }
                                                                            }
                                                                            RS = Gw + -1 | 0;
                                                                            zS = RS + fE | 0;
                                                                            WS = zS - aS | 0;
                                                                            XS = (WS | 0) / (fE | 0) & -1;
                                                                            VS = XS + cE | 0;
                                                                            $S = VS << 3;
                                                                            JS = Ms($S) | 0;
                                                                            KS = (cE | 0) > 0;
                                                                            if (KS) {
                                                                                QS = s[Dx >> 2] | 0;
                                                                                GP = 0;
                                                                                while (1) {
                                                                                    GS = JS + (GP << 3) | 0;
                                                                                    YS = QS + (GP << 4) | 0;
                                                                                    ex = YS;
                                                                                    tx = ex;
                                                                                    nx = s[tx >> 2] | 0;
                                                                                    rx = ex + 4 | 0;
                                                                                    ix = rx;
                                                                                    sx = s[ix >> 2] | 0;
                                                                                    ox = GS;
                                                                                    ux = ox;
                                                                                    s[ux >> 2] = nx;
                                                                                    ax = ox + 4 | 0;
                                                                                    fx = ax;
                                                                                    s[fx >> 2] = sx;
                                                                                    cx = GP + 1 | 0;
                                                                                    IP = (cx | 0) == (cE | 0);
                                                                                    if (IP) {
                                                                                        break
                                                                                    } else {
                                                                                        GP = cx
                                                                                    }
                                                                                }
                                                                            }
                                                                            hx = s[$y >> 2] | 0;
                                                                            px = s[mb >> 2] | 0;
                                                                            dx = hx << px;
                                                                            vx = px + -1 | 0;
                                                                            mx = 1 << vx;
                                                                            gx = mx + dx | 0;
                                                                            yx = s[ib >> 2] | 0;
                                                                            bx = yx << px;
                                                                            wx = bx + mx | 0;
                                                                            xx = s[UD >> 2] | 0;
                                                                            Tx = rt(xx, rE) | 0;
                                                                            Nx = s[Tg >> 2] | 0;
                                                                            Cx = rt(Nx, oE) | 0;
                                                                            kx = gx + Tx | 0;
                                                                            Lx = kx + Cx | 0;
                                                                            Ax = s[Hg >> 2] | 0;
                                                                            Ox = rt(Ax, rE) | 0;
                                                                            Mx = s[Vg >> 2] | 0;
                                                                            _x = rt(Mx, oE) | 0;
                                                                            Px = Ox + wx | 0;
                                                                            Hx = Px + _x | 0;
                                                                            Bx = rt(xx, tE) | 0;
                                                                            jx = rt(Nx, nw) | 0;
                                                                            Fx = jx + Bx | 0;
                                                                            Ix = rt(Ax, tE) | 0;
                                                                            qx = rt(Mx, nw) | 0;
                                                                            Rx = qx + Ix | 0;
                                                                            Ux = rt(xx, Yw) | 0;
                                                                            zx = rt(Ax, Yw) | 0;
                                                                            Xx = rt(xx, aS) | 0;
                                                                            Vx = rt(Nx, mS) | 0;
                                                                            $x = gx + Xx | 0;
                                                                            Jx = $x + Vx | 0;
                                                                            Kx = rt(Ax, aS) | 0;
                                                                            Qx = rt(Mx, mS) | 0;
                                                                            Gx = Kx + wx | 0;
                                                                            Yx = Gx + Qx | 0;
                                                                            Zx = rt(xx, fE) | 0;
                                                                            eT = rt(Nx, dS) | 0;
                                                                            nT = eT + Zx | 0;
                                                                            rT = rt(Ax, fE) | 0;
                                                                            iT = rt(Mx, dS) | 0;
                                                                            sT = iT + rT | 0;
                                                                            oT = rt(Nx, cS) | 0;
                                                                            uT = rt(Mx, cS) | 0;
                                                                            aT = (fE | 0) > 0;
                                                                            fT = aT ? fE : 0;
                                                                            lT = (nw | 0) > 0;
                                                                            cT = lT ? nw : 0;
                                                                            WD = JS;
                                                                            JD = cE;
                                                                            ZD = aS;
                                                                            iP = mS;
                                                                            uP = Jx;
                                                                            lP = Yx;
                                                                            dP = VS;
                                                                            yP = SS;
                                                                            xP = nT;
                                                                            CP = sT;
                                                                            MP = Fx;
                                                                            DP = Rx;
                                                                            YH = cE;
                                                                            tB = 0;
                                                                            YB = iw;
                                                                            ej = 0;
                                                                            Oj = TS;
                                                                            Pj = iw;
                                                                            Bj = rE;
                                                                            Fj = oE;
                                                                            Uj = Lx;
                                                                            Wj = Hx;
                                                                            r: while (1) {
                                                                                pT = (ej | 0) > 14;
                                                                                zD = WD;
                                                                                $D = JD;
                                                                                YD = ZD;
                                                                                rP = iP;
                                                                                oP = uP;
                                                                                fP = lP;
                                                                                pP = dP;
                                                                                SP = xP;
                                                                                NP = CP;
                                                                                GH = YH;
                                                                                eB = tB;
                                                                                while (1) {
                                                                                    dT = s[gw >> 2] | 0;
                                                                                    vT = dT + rP | 0;
                                                                                    mT = vT >> 1;
                                                                                    gT = (mT | 0) < (rP | 0);
                                                                                    yT = gT ? mT : rP;
                                                                                    VB = (Fj | 0) >= (yT | 0);
                                                                                    l = pT | VB;
                                                                                    bT = s[Fb >> 2] | 0;
                                                                                    wT = bT + Bj | 0;
                                                                                    ET = wT >> 1;
                                                                                    ST = (ET | 0) < (Bj | 0);
                                                                                    TT = ST ? ET : Bj;
                                                                                    NT = (eB | 0) > 14;
                                                                                    $B = (YD | 0) >= (TT | 0);
                                                                                    CT = NT | $B;
                                                                                    if (!l) {
                                                                                        kT = (Fj | 0) < (YD | 0);
                                                                                        sj = CT | kT;
                                                                                        if (sj) {
                                                                                            break
                                                                                        }
                                                                                    }
                                                                                    if (CT) {
                                                                                        break r
                                                                                    }
                                                                                    UC = oP + oT | 0;
                                                                                    zC = s[mb >> 2] | 0;
                                                                                    WC = zC + 2 | 0;
                                                                                    XC = UC >> WC;
                                                                                    VC = fP + uT | 0;
                                                                                    $C = VC >> WC;
                                                                                    KC = oP - oT | 0;
                                                                                    QC = KC >> WC;
                                                                                    GC = fP - uT | 0;
                                                                                    YC = GC >> WC;
                                                                                    ZC = (GH | 0) < (pP | 0);
                                                                                    if (ZC) {
                                                                                        XD = zD;
                                                                                        vP = pP
                                                                                    } else {
                                                                                        ek = pP << 1;
                                                                                        tk = ek | 1;
                                                                                        nk = tk << 3;
                                                                                        rk = Ps(zD, nk) | 0;
                                                                                        XD = rk;
                                                                                        vP = tk
                                                                                    }
                                                                                    KB = (XC | 0) < 0;
                                                                                    GB = (XC | 0) >= (u | 0);
                                                                                    uj = GB | KB;
                                                                                    ik = ($C | 0) < 0;
                                                                                    fj = uj | ik;
                                                                                    ct = ($C | 0) >= (a | 0);
                                                                                    pj = fj | ct;
                                                                                    ok = (QC | 0) < 0;
                                                                                    mj = pj | ok;
                                                                                    pt = (QC | 0) >= (u | 0);
                                                                                    yj = mj | pt;
                                                                                    uk = (YC | 0) < 0;
                                                                                    Sj = yj | uk;
                                                                                    Tj = Sj ^ 1;
                                                                                    ak = (YC | 0) < (a | 0);
                                                                                    Cj = ak & Tj;
                                                                                    do {
                                                                                        if (Cj) {
                                                                                            fk = rt($C, u) | 0;
                                                                                            lk = fk + XC | 0;
                                                                                            ck = o + lk | 0;
                                                                                            hk = r[ck >> 0] | 0;
                                                                                            pk = hk << 24 >> 24 == 0;
                                                                                            if (!pk) {
                                                                                                KD = $D;
                                                                                                tP = YD;
                                                                                                sP = rP;
                                                                                                aP = oP;
                                                                                                cP = fP;
                                                                                                TP = SP;
                                                                                                kP = NP;
                                                                                                ZH = GH;
                                                                                                nB = 0;
                                                                                                break
                                                                                            }
                                                                                            dk = rt(YC, u) | 0;
                                                                                            vk = dk + QC | 0;
                                                                                            gk = o + vk | 0;
                                                                                            yk = r[gk >> 0] | 0;
                                                                                            bk = yk << 24 >> 24 == 0;
                                                                                            if (!bk) {
                                                                                                KD = $D;
                                                                                                tP = YD;
                                                                                                sP = rP;
                                                                                                aP = oP;
                                                                                                cP = fP;
                                                                                                TP = SP;
                                                                                                kP = NP;
                                                                                                ZH = GH;
                                                                                                nB = 0;
                                                                                                break
                                                                                            }
                                                                                            wk = YC + $C | 0;
                                                                                            Ek = wk >> 1;
                                                                                            Sk = rt(Ek, u) | 0;
                                                                                            xk = QC + XC | 0;
                                                                                            Tk = xk >> 1;
                                                                                            Nk = Sk + Tk | 0;
                                                                                            Ck = o + Nk | 0;
                                                                                            Ak = r[Ck >> 0] | 0;
                                                                                            Ok = Ak << 24 >> 24 == 0;
                                                                                            p = Ok << 31 >> 31;
                                                                                            if (Ok) {
                                                                                                Dj = p
                                                                                            } else {
                                                                                                Mk = XD + (GH << 3) | 0;
                                                                                                _k = qi(o, u, XC, $C, QC, YC, 1, Mk) | 0;
                                                                                                Dj = _k
                                                                                            }
                                                                                            Dk = (Dj | 0) > -1;
                                                                                            if (!Dk) {
                                                                                                lF = 81;
                                                                                                break
                                                                                            }
                                                                                            Pk = (Dj | 0) == 0;
                                                                                            if (!Pk) {
                                                                                                KD = $D;
                                                                                                tP = YD;
                                                                                                sP = rP;
                                                                                                aP = oP;
                                                                                                cP = fP;
                                                                                                TP = SP;
                                                                                                kP = NP;
                                                                                                ZH = GH;
                                                                                                nB = 0;
                                                                                                break
                                                                                            }
                                                                                            Hk = XD + (GH << 3) | 0;
                                                                                            Bk = s[Hk >> 2] | 0;
                                                                                            jk = (XD + (GH << 3) | 0) + 4 | 0;
                                                                                            Fk = s[jk >> 2] | 0;
                                                                                            qk = s[ry >> 2] | 0;
                                                                                            Rk = s[$y >> 2] | 0;
                                                                                            Uk = Bk - Rk | 0;
                                                                                            zk = rt(Uk, qk) | 0;
                                                                                            Wk = s[dy >> 2] | 0;
                                                                                            Xk = s[ib >> 2] | 0;
                                                                                            Vk = Fk - Xk | 0;
                                                                                            $k = rt(Vk, Wk) | 0;
                                                                                            Jk = $k + zk | 0;
                                                                                            Kk = s[kb >> 2] | 0;
                                                                                            Gk = 1 << Kk;
                                                                                            Yk = Gk >> 1;
                                                                                            Zk = Jk + Yk | 0;
                                                                                            eL = Zk >> Kk;
                                                                                            tL = s[Ny >> 2] | 0;
                                                                                            nL = rt(tL, Uk) | 0;
                                                                                            rL = s[By >> 2] | 0;
                                                                                            iL = rt(rL, Vk) | 0;
                                                                                            sL = Yk + nL | 0;
                                                                                            oL = sL + iL | 0;
                                                                                            aL = oL >> Kk;
                                                                                            fL = eL + fE | 0;
                                                                                            lL = (fL | 0) > (YD | 0);
                                                                                            if (lL) {
                                                                                                cL = eL + YD | 0;
                                                                                                hL = cL >> 1;
                                                                                                eP = hL
                                                                                            } else {
                                                                                                eP = YD
                                                                                            }
                                                                                            pL = aL + rP | 0;
                                                                                            dL = pL >> 1;
                                                                                            vL = s[UD >> 2] | 0;
                                                                                            mL = rt(vL, eP) | 0;
                                                                                            gL = s[Tg >> 2] | 0;
                                                                                            bL = rt(gL, dL) | 0;
                                                                                            wL = mL + gx | 0;
                                                                                            EL = wL + bL | 0;
                                                                                            SL = s[Hg >> 2] | 0;
                                                                                            xL = rt(SL, eP) | 0;
                                                                                            TL = s[Vg >> 2] | 0;
                                                                                            NL = rt(TL, dL) | 0;
                                                                                            CL = xL + wx | 0;
                                                                                            kL = CL + NL | 0;
                                                                                            LL = GH + 1 | 0;
                                                                                            OL = $D >> 2;
                                                                                            ML = OL + $D | 0;
                                                                                            _L = (ML | 0) > 1;
                                                                                            DL = _L ? ML : 1;
                                                                                            PL = (GH | 0) < (DL | 0);
                                                                                            if (PL) {
                                                                                                KD = $D;
                                                                                                tP = eP;
                                                                                                sP = dL;
                                                                                                aP = EL;
                                                                                                cP = kL;
                                                                                                TP = SP;
                                                                                                kP = NP;
                                                                                                ZH = LL;
                                                                                                nB = 0;
                                                                                                break
                                                                                            }
                                                                                            HL = s[mb >> 2] | 0;
                                                                                            Xi(US, XD, LL, HL);
                                                                                            It = s[US >> 2] | 0;
                                                                                            nt = s[tt >> 2] | 0;
                                                                                            BL = Wi(UD, It, nt, 0, fE, EP) | 0;
                                                                                            jL = (BL | 0) > -1;
                                                                                            if (!jL) {
                                                                                                KD = LL;
                                                                                                tP = eP;
                                                                                                sP = dL;
                                                                                                aP = EL;
                                                                                                cP = kL;
                                                                                                TP = SP;
                                                                                                kP = NP;
                                                                                                ZH = LL;
                                                                                                nB = 0;
                                                                                                break
                                                                                            }
                                                                                            FL = s[UD >> 2] | 0;
                                                                                            IL = rt(FL, fE) | 0;
                                                                                            RL = s[Tg >> 2] | 0;
                                                                                            UL = s[EP >> 2] | 0;
                                                                                            zL = rt(UL, RL) | 0;
                                                                                            WL = zL + IL | 0;
                                                                                            XL = s[Hg >> 2] | 0;
                                                                                            VL = rt(XL, fE) | 0;
                                                                                            $L = s[Vg >> 2] | 0;
                                                                                            JL = rt($L, UL) | 0;
                                                                                            KL = JL + VL | 0;
                                                                                            KD = LL;
                                                                                            tP = eP;
                                                                                            sP = dL;
                                                                                            aP = EL;
                                                                                            cP = kL;
                                                                                            TP = WL;
                                                                                            kP = KL;
                                                                                            ZH = LL;
                                                                                            nB = 0
                                                                                        } else {
                                                                                            lF = 81
                                                                                        }
                                                                                    } while (0);
                                                                                    if ((lF | 0) == 81) {
                                                                                        lF = 0;
                                                                                        QL = eB + 1 | 0;
                                                                                        KD = $D;
                                                                                        tP = YD;
                                                                                        sP = rP;
                                                                                        aP = oP;
                                                                                        cP = fP;
                                                                                        TP = SP;
                                                                                        kP = NP;
                                                                                        ZH = GH;
                                                                                        nB = QL
                                                                                    }
                                                                                    nP = tP + fT | 0;
                                                                                    rB = aT ? nB : 2147483647;
                                                                                    YL = s[EP >> 2] | 0;
                                                                                    ZL = YL + sP | 0;
                                                                                    eA = TP + aP | 0;
                                                                                    tA = kP + cP | 0;
                                                                                    zD = XD;
                                                                                    $D = KD;
                                                                                    YD = nP;
                                                                                    rP = ZL;
                                                                                    oP = eA;
                                                                                    fP = tA;
                                                                                    pP = vP;
                                                                                    SP = TP;
                                                                                    NP = kP;
                                                                                    GH = ZH;
                                                                                    eB = rB
                                                                                }
                                                                                LT = Uj + Ux | 0;
                                                                                AT = s[mb >> 2] | 0;
                                                                                OT = AT + 2 | 0;
                                                                                MT = LT >> OT;
                                                                                _T = Wj + zx | 0;
                                                                                DT = _T >> OT;
                                                                                HT = Uj - Ux | 0;
                                                                                BT = HT >> OT;
                                                                                jT = Wj - zx | 0;
                                                                                FT = jT >> OT;
                                                                                IT = (YB | 0) < (yP | 0);
                                                                                if (IT) {
                                                                                    bP = yP;
                                                                                    Mj = Oj
                                                                                } else {
                                                                                    qT = yP << 1;
                                                                                    RT = qT | 1;
                                                                                    UT = RT << 3;
                                                                                    zT = Ps(Oj, UT) | 0;
                                                                                    bP = RT;
                                                                                    Mj = zT
                                                                                }
                                                                                JB = (MT | 0) < 0;
                                                                                QB = (MT | 0) >= (u | 0);
                                                                                oj = QB | JB;
                                                                                WT = (DT | 0) < 0;
                                                                                aj = oj | WT;
                                                                                lt = (DT | 0) >= (a | 0);
                                                                                hj = aj | lt;
                                                                                VT = (BT | 0) < 0;
                                                                                vj = hj | VT;
                                                                                ht = (BT | 0) >= (u | 0);
                                                                                gj = vj | ht;
                                                                                $T = (FT | 0) < 0;
                                                                                Ej = gj | $T;
                                                                                xj = Ej ^ 1;
                                                                                JT = (FT | 0) < (a | 0);
                                                                                Nj = JT & xj;
                                                                                do {
                                                                                    if (Nj) {
                                                                                        KT = rt(DT, u) | 0;
                                                                                        QT = KT + MT | 0;
                                                                                        GT = o + QT | 0;
                                                                                        YT = r[GT >> 0] | 0;
                                                                                        ZT = YT << 24 >> 24 == 0;
                                                                                        if (!ZT) {
                                                                                            _P = MP;
                                                                                            PP = DP;
                                                                                            ZB = YB;
                                                                                            tj = 0;
                                                                                            Hj = Pj;
                                                                                            jj = Bj;
                                                                                            qj = Fj;
                                                                                            zj = Uj;
                                                                                            Xj = Wj;
                                                                                            break
                                                                                        }
                                                                                        eN = rt(FT, u) | 0;
                                                                                        tN = eN + BT | 0;
                                                                                        rN = o + tN | 0;
                                                                                        iN = r[rN >> 0] | 0;
                                                                                        sN = iN << 24 >> 24 == 0;
                                                                                        if (!sN) {
                                                                                            _P = MP;
                                                                                            PP = DP;
                                                                                            ZB = YB;
                                                                                            tj = 0;
                                                                                            Hj = Pj;
                                                                                            jj = Bj;
                                                                                            qj = Fj;
                                                                                            zj = Uj;
                                                                                            Xj = Wj;
                                                                                            break
                                                                                        }
                                                                                        oN = FT + DT | 0;
                                                                                        uN = oN >> 1;
                                                                                        aN = rt(uN, u) | 0;
                                                                                        fN = BT + MT | 0;
                                                                                        lN = fN >> 1;
                                                                                        cN = aN + lN | 0;
                                                                                        hN = o + cN | 0;
                                                                                        dN = r[hN >> 0] | 0;
                                                                                        vN = dN << 24 >> 24 == 0;
                                                                                        h = vN << 31 >> 31;
                                                                                        if (vN) {
                                                                                            _j = h
                                                                                        } else {
                                                                                            mN = Mj + (YB << 3) | 0;
                                                                                            gN = qi(o, u, MT, DT, BT, FT, 1, mN) | 0;
                                                                                            _j = gN
                                                                                        }
                                                                                        yN = (_j | 0) > -1;
                                                                                        if (!yN) {
                                                                                            lF = 64;
                                                                                            break
                                                                                        }
                                                                                        bN = (_j | 0) == 0;
                                                                                        if (!bN) {
                                                                                            _P = MP;
                                                                                            PP = DP;
                                                                                            ZB = YB;
                                                                                            tj = 0;
                                                                                            Hj = Pj;
                                                                                            jj = Bj;
                                                                                            qj = Fj;
                                                                                            zj = Uj;
                                                                                            Xj = Wj;
                                                                                            break
                                                                                        }
                                                                                        wN = Mj + (YB << 3) | 0;
                                                                                        EN = s[wN >> 2] | 0;
                                                                                        SN = (Mj + (YB << 3) | 0) + 4 | 0;
                                                                                        xN = s[SN >> 2] | 0;
                                                                                        CN = s[ry >> 2] | 0;
                                                                                        kN = s[$y >> 2] | 0;
                                                                                        LN = EN - kN | 0;
                                                                                        AN = rt(LN, CN) | 0;
                                                                                        ON = s[dy >> 2] | 0;
                                                                                        MN = s[ib >> 2] | 0;
                                                                                        _N = xN - MN | 0;
                                                                                        DN = rt(_N, ON) | 0;
                                                                                        PN = DN + AN | 0;
                                                                                        HN = s[kb >> 2] | 0;
                                                                                        jN = 1 << HN;
                                                                                        FN = jN >> 1;
                                                                                        IN = PN + FN | 0;
                                                                                        qN = IN >> HN;
                                                                                        RN = s[Ny >> 2] | 0;
                                                                                        UN = rt(RN, LN) | 0;
                                                                                        zN = s[By >> 2] | 0;
                                                                                        WN = rt(zN, _N) | 0;
                                                                                        XN = FN + UN | 0;
                                                                                        VN = XN + WN | 0;
                                                                                        JN = VN >> HN;
                                                                                        KN = qN + Bj | 0;
                                                                                        QN = KN >> 1;
                                                                                        GN = JN + nw | 0;
                                                                                        YN = (GN | 0) > (Fj | 0);
                                                                                        if (YN) {
                                                                                            ZN = JN + Fj | 0;
                                                                                            eC = ZN >> 1;
                                                                                            Ij = eC
                                                                                        } else {
                                                                                            Ij = Fj
                                                                                        }
                                                                                        tC = s[UD >> 2] | 0;
                                                                                        nC = rt(tC, QN) | 0;
                                                                                        rC = s[Tg >> 2] | 0;
                                                                                        sC = rt(rC, Ij) | 0;
                                                                                        oC = nC + gx | 0;
                                                                                        uC = oC + sC | 0;
                                                                                        aC = s[Hg >> 2] | 0;
                                                                                        fC = rt(aC, QN) | 0;
                                                                                        lC = s[Vg >> 2] | 0;
                                                                                        cC = rt(lC, Ij) | 0;
                                                                                        hC = fC + wx | 0;
                                                                                        pC = hC + cC | 0;
                                                                                        dC = YB + 1 | 0;
                                                                                        mC = Pj >> 2;
                                                                                        gC = mC + Pj | 0;
                                                                                        yC = (gC | 0) > 1;
                                                                                        bC = yC ? gC : 1;
                                                                                        wC = (YB | 0) < (bC | 0);
                                                                                        if (wC) {
                                                                                            _P = MP;
                                                                                            PP = DP;
                                                                                            ZB = dC;
                                                                                            tj = 0;
                                                                                            Hj = Pj;
                                                                                            jj = QN;
                                                                                            qj = Ij;
                                                                                            zj = uC;
                                                                                            Xj = pC;
                                                                                            break
                                                                                        }
                                                                                        EC = s[mb >> 2] | 0;
                                                                                        Xi(wS, Mj, dC, EC);
                                                                                        qt = s[wS >> 2] | 0;
                                                                                        st = s[it >> 2] | 0;
                                                                                        SC = Wi(UD, qt, st, 1, nw, OP) | 0;
                                                                                        xC = (SC | 0) > -1;
                                                                                        if (!xC) {
                                                                                            _P = MP;
                                                                                            PP = DP;
                                                                                            ZB = dC;
                                                                                            tj = 0;
                                                                                            Hj = dC;
                                                                                            jj = QN;
                                                                                            qj = Ij;
                                                                                            zj = uC;
                                                                                            Xj = pC;
                                                                                            break
                                                                                        }
                                                                                        TC = s[UD >> 2] | 0;
                                                                                        NC = s[OP >> 2] | 0;
                                                                                        kC = rt(NC, TC) | 0;
                                                                                        LC = s[Tg >> 2] | 0;
                                                                                        AC = rt(LC, nw) | 0;
                                                                                        OC = AC + kC | 0;
                                                                                        MC = s[Hg >> 2] | 0;
                                                                                        _C = rt(MC, NC) | 0;
                                                                                        DC = s[Vg >> 2] | 0;
                                                                                        PC = rt(DC, nw) | 0;
                                                                                        HC = PC + _C | 0;
                                                                                        _P = OC;
                                                                                        PP = HC;
                                                                                        ZB = dC;
                                                                                        tj = 0;
                                                                                        Hj = dC;
                                                                                        jj = QN;
                                                                                        qj = Ij;
                                                                                        zj = uC;
                                                                                        Xj = pC
                                                                                    } else {
                                                                                        lF = 64
                                                                                    }
                                                                                } while (0);
                                                                                if ((lF | 0) == 64) {
                                                                                    lF = 0;
                                                                                    BC = ej + 1 | 0;
                                                                                    _P = MP;
                                                                                    PP = DP;
                                                                                    ZB = YB;
                                                                                    tj = BC;
                                                                                    Hj = Pj;
                                                                                    jj = Bj;
                                                                                    qj = Fj;
                                                                                    zj = Uj;
                                                                                    Xj = Wj
                                                                                }
                                                                                FC = s[OP >> 2] | 0;
                                                                                IC = FC + jj | 0;
                                                                                nj = lT ? tj : 2147483647;
                                                                                Rj = qj + cT | 0;
                                                                                qC = zj + _P | 0;
                                                                                RC = PP + Xj | 0;
                                                                                WD = zD;
                                                                                JD = $D;
                                                                                ZD = YD;
                                                                                iP = rP;
                                                                                uP = oP;
                                                                                lP = fP;
                                                                                dP = pP;
                                                                                yP = bP;
                                                                                xP = SP;
                                                                                CP = NP;
                                                                                MP = _P;
                                                                                DP = PP;
                                                                                YH = GH;
                                                                                tB = eB;
                                                                                YB = ZB;
                                                                                ej = nj;
                                                                                Oj = Mj;
                                                                                Pj = Hj;
                                                                                Bj = IC;
                                                                                Fj = Rj;
                                                                                Uj = qC;
                                                                                Wj = RC
                                                                            }
                                                                            nA = (YB | 0) > 1;
                                                                            if (nA) {
                                                                                rA = s[mb >> 2] | 0;
                                                                                Xi(wS, Oj, YB, rA)
                                                                            } else {
                                                                                iA = s[Kj >> 2] | 0;
                                                                                sA = iA * 3 | 0;
                                                                                oA = sA + bT | 0;
                                                                                uA = s[Kb >> 2] | 0;
                                                                                fA = s[UD >> 2] | 0;
                                                                                lA = rt(fA, oA) | 0;
                                                                                cA = s[Tg >> 2] | 0;
                                                                                hA = rt(cA, uA) | 0;
                                                                                pA = hA + lA | 0;
                                                                                dA = s[mb >> 2] | 0;
                                                                                vA = dA + -1 | 0;
                                                                                mA = 1 << vA;
                                                                                gA = pA + mA | 0;
                                                                                yA = gA >> dA;
                                                                                wA = s[$y >> 2] | 0;
                                                                                EA = yA + wA | 0;
                                                                                SA = s[Hg >> 2] | 0;
                                                                                xA = rt(SA, oA) | 0;
                                                                                TA = s[Vg >> 2] | 0;
                                                                                NA = rt(TA, uA) | 0;
                                                                                CA = xA + mA | 0;
                                                                                kA = CA + NA | 0;
                                                                                LA = kA >> dA;
                                                                                AA = s[ib >> 2] | 0;
                                                                                _A = LA + AA | 0;
                                                                                uH = (cA | 0) > -1;
                                                                                uB = 0 - cA | 0;
                                                                                DA = uH ? cA : uB;
                                                                                LH = (TA | 0) > -1;
                                                                                OB = 0 - TA | 0;
                                                                                PA = LH ? TA : OB;
                                                                                HA = DA - PA | 0;
                                                                                BA = (PA | 0) > (DA | 0);
                                                                                jA = BA ? HA : 0;
                                                                                FA = DA - jA | 0;
                                                                                IA = es(FA) | 0;
                                                                                qA = s[mb >> 2] | 0;
                                                                                RA = qA + 1 | 0;
                                                                                zA = RA >> 1;
                                                                                WA = s[Tg >> 2] | 0;
                                                                                fH = (WA | 0) > -1;
                                                                                lB = 0 - WA | 0;
                                                                                XA = fH ? WA : lB;
                                                                                VA = s[Vg >> 2] | 0;
                                                                                mH = (VA | 0) > -1;
                                                                                gB = 0 - VA | 0;
                                                                                $A = mH ? VA : gB;
                                                                                JA = XA - $A | 0;
                                                                                KA = ($A | 0) > (XA | 0);
                                                                                QA = KA ? JA : 0;
                                                                                GA = XA - QA | 0;
                                                                                YA = es(GA) | 0;
                                                                                eO = s[mb >> 2] | 0;
                                                                                tO = eO + 1 | 0;
                                                                                nO = tO >> 1;
                                                                                rO = YA - nO | 0;
                                                                                iO = (rO | 0) > 0;
                                                                                sO = IA - zA | 0;
                                                                                oO = iO ? sO : 0;
                                                                                uO = 1 << oO;
                                                                                aO = uO >> 1;
                                                                                fO = s[Vg >> 2] | 0;
                                                                                cO = aO + fO | 0;
                                                                                hO = cO >> oO;
                                                                                s[wS >> 2] = hO;
                                                                                pO = s[Tg >> 2] | 0;
                                                                                dO = aO - pO | 0;
                                                                                vO = dO >> oO;
                                                                                s[it >> 2] = vO;
                                                                                mO = rt(hO, EA) | 0;
                                                                                gO = rt(vO, _A) | 0;
                                                                                yO = mO + gO | 0;
                                                                                bO = 0 - yO | 0;
                                                                                s[eM >> 2] = bO
                                                                            }
                                                                            _s(Oj);
                                                                            wO = (GH | 0) > 1;
                                                                            if (wO) {
                                                                                SO = s[mb >> 2] | 0;
                                                                                Xi(US, zD, GH, SO)
                                                                            } else {
                                                                                xO = s[ow >> 2] | 0;
                                                                                TO = s[gw >> 2] | 0;
                                                                                NO = s[lx >> 2] | 0;
                                                                                CO = NO * 3 | 0;
                                                                                kO = CO + TO | 0;
                                                                                LO = s[UD >> 2] | 0;
                                                                                AO = rt(LO, xO) | 0;
                                                                                OO = s[Tg >> 2] | 0;
                                                                                MO = rt(OO, kO) | 0;
                                                                                DO = MO + AO | 0;
                                                                                PO = s[mb >> 2] | 0;
                                                                                HO = PO + -1 | 0;
                                                                                BO = 1 << HO;
                                                                                jO = DO + BO | 0;
                                                                                FO = jO >> PO;
                                                                                IO = s[$y >> 2] | 0;
                                                                                qO = FO + IO | 0;
                                                                                RO = s[Hg >> 2] | 0;
                                                                                UO = rt(RO, xO) | 0;
                                                                                WO = s[Vg >> 2] | 0;
                                                                                XO = rt(WO, kO) | 0;
                                                                                VO = UO + BO | 0;
                                                                                $O = VO + XO | 0;
                                                                                JO = $O >> PO;
                                                                                KO = s[ib >> 2] | 0;
                                                                                QO = JO + KO | 0;
                                                                                bH = (OO | 0) > -1;
                                                                                bB = 0 - OO | 0;
                                                                                GO = bH ? OO : bB;
                                                                                SH = (WO | 0) > -1;
                                                                                SB = 0 - WO | 0;
                                                                                YO = SH ? WO : SB;
                                                                                ZO = GO - YO | 0;
                                                                                tM = (YO | 0) > (GO | 0);
                                                                                nM = tM ? ZO : 0;
                                                                                rM = GO - nM | 0;
                                                                                iM = es(rM) | 0;
                                                                                sM = s[mb >> 2] | 0;
                                                                                oM = sM + 1 | 0;
                                                                                uM = oM >> 1;
                                                                                aM = s[Tg >> 2] | 0;
                                                                                NH = (aM | 0) > -1;
                                                                                NB = 0 - aM | 0;
                                                                                fM = NH ? aM : NB;
                                                                                lM = s[Vg >> 2] | 0;
                                                                                CH = (lM | 0) > -1;
                                                                                CB = 0 - lM | 0;
                                                                                hM = CH ? lM : CB;
                                                                                pM = fM - hM | 0;
                                                                                dM = (hM | 0) > (fM | 0);
                                                                                vM = dM ? pM : 0;
                                                                                mM = fM - vM | 0;
                                                                                gM = es(mM) | 0;
                                                                                yM = s[mb >> 2] | 0;
                                                                                bM = yM + 1 | 0;
                                                                                wM = bM >> 1;
                                                                                EM = gM - wM | 0;
                                                                                xM = (EM | 0) > 0;
                                                                                TM = iM - uM | 0;
                                                                                NM = xM ? TM : 0;
                                                                                CM = 1 << NM;
                                                                                kM = CM >> 1;
                                                                                LM = s[Hg >> 2] | 0;
                                                                                AM = kM + LM | 0;
                                                                                OM = AM >> NM;
                                                                                s[US >> 2] = OM;
                                                                                MM = s[UD >> 2] | 0;
                                                                                _M = kM - MM | 0;
                                                                                HM = _M >> NM;
                                                                                s[tt >> 2] = HM;
                                                                                BM = s[wS >> 2] | 0;
                                                                                jM = rt(BM, qO) | 0;
                                                                                FM = s[it >> 2] | 0;
                                                                                IM = rt(FM, QO) | 0;
                                                                                qM = jM + IM | 0;
                                                                                RM = 0 - qM | 0;
                                                                                s[zO >> 2] = RM
                                                                            }
                                                                            _s(zD);
                                                                            tH = 0;
                                                                            while (1) {
                                                                                WM = VD + (tH << 3) | 0;
                                                                                VM = tH & 1;
                                                                                $M = QH + (VM * 12 | 0) | 0;
                                                                                JM = tH >> 1;
                                                                                KM = JM + 2 | 0;
                                                                                QM = QH + (KM * 12 | 0) | 0;
                                                                                GM = s[$M >> 2] | 0;
                                                                                YM = (QH + (KM * 12 | 0) | 0) + 4 | 0;
                                                                                ZM = s[YM >> 2] | 0;
                                                                                e_ = rt(ZM, GM) | 0;
                                                                                t_ = (QH + (VM * 12 | 0) | 0) + 4 | 0;
                                                                                r_ = s[t_ >> 2] | 0;
                                                                                i_ = s[QM >> 2] | 0;
                                                                                s_ = rt(i_, r_) | 0;
                                                                                o_ = e_ - s_ | 0;
                                                                                u_ = (e_ | 0) == (s_ | 0);
                                                                                if (u_) {
                                                                                    v = 0;
                                                                                    m = d;
                                                                                    break n
                                                                                }
                                                                                a_ = (QH + (KM * 12 | 0) | 0) + 8 | 0;
                                                                                f_ = s[a_ >> 2] | 0;
                                                                                l_ = rt(f_, r_) | 0;
                                                                                c_ = (QH + (VM * 12 | 0) | 0) + 8 | 0;
                                                                                h_ = s[c_ >> 2] | 0;
                                                                                d_ = rt(h_, ZM) | 0;
                                                                                v_ = l_ - d_ | 0;
                                                                                m_ = rt(h_, i_) | 0;
                                                                                g_ = rt(f_, GM) | 0;
                                                                                y_ = m_ - g_ | 0;
                                                                                b_ = (o_ | 0) < 0;
                                                                                if (b_) {
                                                                                    w_ = 0 - v_ | 0;
                                                                                    E_ = 0 - y_ | 0;
                                                                                    S_ = 0 - o_ | 0;
                                                                                    wP = S_;
                                                                                    nF = w_;
                                                                                    oF = E_
                                                                                } else {
                                                                                    wP = o_;
                                                                                    nF = v_;
                                                                                    oF = y_
                                                                                }
                                                                                x_ = wP >> 1;
                                                                                N_ = nF >> 31;
                                                                                C_ = N_ + x_ | 0;
                                                                                k_ = C_ ^ N_;
                                                                                L_ = k_ + nF | 0;
                                                                                A_ = (L_ | 0) / (wP | 0) & -1;
                                                                                s[WM >> 2] = A_;
                                                                                O_ = oF >> 31;
                                                                                M_ = O_ + x_ | 0;
                                                                                __ = M_ ^ O_;
                                                                                D_ = __ + oF | 0;
                                                                                P_ = (D_ | 0) / (wP | 0) & -1;
                                                                                B_ = (VD + (tH << 3) | 0) + 4 | 0;
                                                                                s[B_ >> 2] = P_;
                                                                                j_ = (A_ | 0) >= (tT | 0);
                                                                                F_ = (A_ | 0) < (hT | 0);
                                                                                bj = j_ & F_;
                                                                                if (!bj) {
                                                                                    v = 0;
                                                                                    m = d;
                                                                                    break n
                                                                                }
                                                                                I_ = (P_ | 0) >= (PT | 0);
                                                                                q_ = (P_ | 0) < (XT | 0);
                                                                                wj = I_ & q_;
                                                                                UM = tH + 1 | 0;
                                                                                if (!wj) {
                                                                                    v = 0;
                                                                                    m = d;
                                                                                    break n
                                                                                }
                                                                                zM = (UM | 0) < 4;
                                                                                if (zM) {
                                                                                    tH = UM
                                                                                } else {
                                                                                    break
                                                                                }
                                                                            }
                                                                            R_ = s[nN >> 2] | 0;
                                                                            U_ = s[pN >> 2] | 0;
                                                                            z_ = s[OE >> 2] | 0;
                                                                            W_ = s[bE >> 2] | 0;
                                                                            X_ = W_ + z_ | 0;
                                                                            $_ = s[NN >> 2] | 0;
                                                                            J_ = X_ + $_ | 0;
                                                                            K_ = s[BN >> 2] | 0;
                                                                            Q_ = J_ + K_ | 0;
                                                                            G_ = (Q_ | 0) > 4;
                                                                            do {
                                                                                if (G_) {
                                                                                    Y_ = Q_ + 16 | 0;
                                                                                    Z_ = s[VD >> 2] | 0;
                                                                                    eD = s[$N >> 2] | 0;
                                                                                    tD = s[iC >> 2] | 0;
                                                                                    nD = s[vC >> 2] | 0;
                                                                                    iD = s[CC >> 2] | 0;
                                                                                    sD = s[jC >> 2] | 0;
                                                                                    Bi(mP, 0, 0, Y_, 0, 0, Y_, Y_, Y_, Z_, eD, tD, nD, iD, sD, R_, U_);
                                                                                    oD = Q_ + 10 | 0;
                                                                                    uD = Fi(Lj, mP, oD, oD, 4, o, u, a) | 0;
                                                                                    aD = (uD | 0) > -1;
                                                                                    if (!aD) {
                                                                                        ci = Z_;
                                                                                        hi = tD;
                                                                                        di = iD;
                                                                                        wi = eD;
                                                                                        Ei = nD;
                                                                                        xi = sD;
                                                                                        QD = R_;
                                                                                        GD = U_;
                                                                                        break
                                                                                    }
                                                                                    fD = rt(iD, nD) | 0;
                                                                                    lD = rt(sD, tD) | 0;
                                                                                    cD = fD - lD | 0;
                                                                                    hD = iD - tD | 0;
                                                                                    pD = sD - nD | 0;
                                                                                    vD = (oD | 0) < 0;
                                                                                    mD = vD << 31 >> 31;
                                                                                    gD = (cD | 0) < 0;
                                                                                    yD = gD << 31 >> 31;
                                                                                    bD = vo(cD | 0, yD | 0, oD | 0, mD | 0) | 0;
                                                                                    wD = D;
                                                                                    ED = Q_ + 4 | 0;
                                                                                    SD = (ED | 0) < 0;
                                                                                    xD = SD << 31 >> 31;
                                                                                    TD = rt(pD, Z_) | 0;
                                                                                    CD = rt(hD, eD) | 0;
                                                                                    kD = TD - CD | 0;
                                                                                    LD = (kD | 0) < 0;
                                                                                    AD = LD << 31 >> 31;
                                                                                    OD = vo(kD | 0, AD | 0, ED | 0, xD | 0) | 0;
                                                                                    MD = D;
                                                                                    _D = s[Lj >> 2] | 0;
                                                                                    DD = rt(_D, pD) | 0;
                                                                                    PD = s[JC >> 2] | 0;
                                                                                    HD = rt(PD, hD) | 0;
                                                                                    Vt = DD - HD | 0;
                                                                                    $t = (Vt | 0) < 0;
                                                                                    Jt = $t << 31 >> 31;
                                                                                    Kt = vo(Vt | 0, Jt | 0, 6, 0) | 0;
                                                                                    Qt = D;
                                                                                    Gt = ro(OD | 0, MD | 0, bD | 0, wD | 0) | 0;
                                                                                    Yt = D;
                                                                                    Zt = ro(Gt | 0, Yt | 0, Kt | 0, Qt | 0) | 0;
                                                                                    en = D;
                                                                                    tn = (Zt | 0) == 0;
                                                                                    rn = (en | 0) == 0;
                                                                                    sn = tn & rn;
                                                                                    if (sn) {
                                                                                        v = 0;
                                                                                        m = d;
                                                                                        break n
                                                                                    }
                                                                                    on = so(Zt | 0, en | 0, 63) | 0;
                                                                                    un = D;
                                                                                    an = 0 - on | 0;
                                                                                    fn = (an | 0) < 0;
                                                                                    ln = fn << 31 >> 31;
                                                                                    cn = ro(an | 0, ln | 0, Zt | 0, en | 0) | 0;
                                                                                    hn = D;
                                                                                    pn = cn ^ an;
                                                                                    vn = hn ^ ln;
                                                                                    mn = rt(Z_, oD) | 0;
                                                                                    gn = (mn | 0) < 0;
                                                                                    yn = gn << 31 >> 31;
                                                                                    bn = (DD | 0) < 0;
                                                                                    wn = bn << 31 >> 31;
                                                                                    En = vo(DD | 0, wn | 0, mn | 0, yn | 0) | 0;
                                                                                    Sn = D;
                                                                                    xn = rt(_D, ED) | 0;
                                                                                    Tn = (xn | 0) < 0;
                                                                                    Cn = Tn << 31 >> 31;
                                                                                    kn = cD - CD | 0;
                                                                                    Ln = (kn | 0) < 0;
                                                                                    An = Ln << 31 >> 31;
                                                                                    On = vo(xn | 0, Cn | 0, kn | 0, An | 0) | 0;
                                                                                    Mn = D;
                                                                                    _n = Z_ * 6 | 0;
                                                                                    Dn = (_n | 0) < 0;
                                                                                    Pn = Dn << 31 >> 31;
                                                                                    Hn = cD - HD | 0;
                                                                                    jn = (Hn | 0) < 0;
                                                                                    Fn = jn << 31 >> 31;
                                                                                    In = vo(Hn | 0, Fn | 0, _n | 0, Pn | 0) | 0;
                                                                                    qn = D;
                                                                                    Rn = ro(En | 0, Sn | 0, On | 0, Mn | 0) | 0;
                                                                                    Un = D;
                                                                                    zn = ro(Rn | 0, Un | 0, In | 0, qn | 0) | 0;
                                                                                    Wn = D;
                                                                                    Xn = ro(zn | 0, Wn | 0, an | 0, ln | 0) | 0;
                                                                                    Vn = D;
                                                                                    Jn = Xn ^ an;
                                                                                    Kn = Vn ^ ln;
                                                                                    Qn = io(pn | 0, vn | 0, 1) | 0;
                                                                                    Gn = D;
                                                                                    Yn = so(Jn | 0, Kn | 0, 63) | 0;
                                                                                    Zn = D;
                                                                                    er = 0 - Yn | 0;
                                                                                    tr = (er | 0) < 0;
                                                                                    nr = tr << 31 >> 31;
                                                                                    rr = ro(er | 0, nr | 0, Qn | 0, Gn | 0) | 0;
                                                                                    sr = D;
                                                                                    or = rr ^ er;
                                                                                    ur = sr ^ nr;
                                                                                    ar = ro(or | 0, ur | 0, Jn | 0, Kn | 0) | 0;
                                                                                    fr = D;
                                                                                    lr = ho(ar | 0, fr | 0, pn | 0, vn | 0) | 0;
                                                                                    cr = D;
                                                                                    hr = rt(eD, oD) | 0;
                                                                                    pr = (hr | 0) < 0;
                                                                                    dr = pr << 31 >> 31;
                                                                                    mr = 0 - hD | 0;
                                                                                    gr = rt(PD, mr) | 0;
                                                                                    yr = (gr | 0) < 0;
                                                                                    br = yr << 31 >> 31;
                                                                                    wr = vo(gr | 0, br | 0, hr | 0, dr | 0) | 0;
                                                                                    Er = D;
                                                                                    Sr = rt(PD, ED) | 0;
                                                                                    xr = (Sr | 0) < 0;
                                                                                    Tr = xr << 31 >> 31;
                                                                                    Nr = cD + TD | 0;
                                                                                    kr = (Nr | 0) < 0;
                                                                                    Lr = kr << 31 >> 31;
                                                                                    Ar = vo(Sr | 0, Tr | 0, Nr | 0, Lr | 0) | 0;
                                                                                    Or = D;
                                                                                    Mr = eD * 6 | 0;
                                                                                    _r = (Mr | 0) < 0;
                                                                                    Dr = _r << 31 >> 31;
                                                                                    Pr = DD + cD | 0;
                                                                                    Hr = (Pr | 0) < 0;
                                                                                    Br = Hr << 31 >> 31;
                                                                                    Fr = vo(Pr | 0, Br | 0, Mr | 0, Dr | 0) | 0;
                                                                                    Ir = D;
                                                                                    qr = ro(Ar | 0, Or | 0, Fr | 0, Ir | 0) | 0;
                                                                                    Rr = D;
                                                                                    Ur = ro(qr | 0, Rr | 0, wr | 0, Er | 0) | 0;
                                                                                    zr = D;
                                                                                    Wr = ro(Ur | 0, zr | 0, an | 0, ln | 0) | 0;
                                                                                    Xr = D;
                                                                                    Vr = Wr ^ an;
                                                                                    $r = Xr ^ ln;
                                                                                    Qr = so(Vr | 0, $r | 0, 63) | 0;
                                                                                    Gr = D;
                                                                                    Yr = 0 - Qr | 0;
                                                                                    Zr = (Yr | 0) < 0;
                                                                                    ei = Zr << 31 >> 31;
                                                                                    ti = ro(Yr | 0, ei | 0, Qn | 0, Gn | 0) | 0;
                                                                                    ni = D;
                                                                                    ri = ti ^ Yr;
                                                                                    ii = ni ^ ei;
                                                                                    si = ro(ri | 0, ii | 0, Vr | 0, $r | 0) | 0;
                                                                                    ui = D;
                                                                                    ai = ho(si | 0, ui | 0, pn | 0, vn | 0) | 0;
                                                                                    fi = D;
                                                                                    ci = Z_;
                                                                                    hi = tD;
                                                                                    di = iD;
                                                                                    wi = eD;
                                                                                    Ei = nD;
                                                                                    xi = sD;
                                                                                    QD = lr;
                                                                                    GD = ai
                                                                                } else {
                                                                                    dt = s[VD >> 2] | 0;
                                                                                    yt = s[$N >> 2] | 0;
                                                                                    bt = s[iC >> 2] | 0;
                                                                                    wt = s[vC >> 2] | 0;
                                                                                    Et = s[CC >> 2] | 0;
                                                                                    St = s[jC >> 2] | 0;
                                                                                    ci = dt;
                                                                                    hi = bt;
                                                                                    di = Et;
                                                                                    wi = yt;
                                                                                    Ei = wt;
                                                                                    xi = St;
                                                                                    QD = R_;
                                                                                    GD = U_
                                                                                }
                                                                            } while (0);
                                                                            li = hi - ci | 0;
                                                                            pi = di - ci | 0;
                                                                            vi = QD - ci | 0;
                                                                            mi = QD - hi | 0;
                                                                            yi = QD - di | 0;
                                                                            bi = Ei - wi | 0;
                                                                            Si = xi - wi | 0;
                                                                            Ni = GD - wi | 0;
                                                                            Ci = GD - Ei | 0;
                                                                            ki = GD - xi | 0;
                                                                            Li = rt(yi, bi) | 0;
                                                                            ji = rt(ki, li) | 0;
                                                                            Ii = Li - ji | 0;
                                                                            Ri = rt(Ci, pi) | 0;
                                                                            Vi = rt(mi, Si) | 0;
                                                                            $i = Ri - Vi | 0;
                                                                            Ji = rt(Ci, yi) | 0;
                                                                            Ki = rt(ki, mi) | 0;
                                                                            Qi = Ji - Ki | 0;
                                                                            oH = (li | 0) > -1;
                                                                            oB = 0 - li | 0;
                                                                            Gi = oH ? li : oB;
                                                                            TH = (bi | 0) > -1;
                                                                            kB = 0 - bi | 0;
                                                                            Yi = TH ? bi : kB;
                                                                            ts = Gi - Yi | 0;
                                                                            ns = (Yi | 0) > (Gi | 0);
                                                                            rs = ns ? ts : 0;
                                                                            is = Gi - rs | 0;
                                                                            ss = es(is) | 0;
                                                                            os = Ii + Qi | 0;
                                                                            DH = (os | 0) > -1;
                                                                            aB = 0 - os | 0;
                                                                            us = DH ? os : aB;
                                                                            as = es(us) | 0;
                                                                            fs = as + ss | 0;
                                                                            lH = (pi | 0) > -1;
                                                                            cB = 0 - pi | 0;
                                                                            ls = lH ? pi : cB;
                                                                            gH = (Si | 0) > -1;
                                                                            yB = 0 - Si | 0;
                                                                            hs = gH ? Si : yB;
                                                                            ps = ls - hs | 0;
                                                                            ds = (hs | 0) > (ls | 0);
                                                                            vs = ds ? ps : 0;
                                                                            ms = ls - vs | 0;
                                                                            gs = es(ms) | 0;
                                                                            ys = $i + Qi | 0;
                                                                            wH = (ys | 0) > -1;
                                                                            wB = 0 - ys | 0;
                                                                            bs = wH ? ys : wB;
                                                                            ws = es(bs) | 0;
                                                                            Es = ws + gs | 0;
                                                                            EH = (Ii | 0) > -1;
                                                                            EB = 0 - Ii | 0;
                                                                            xs = EH ? Ii : EB;
                                                                            xH = ($i | 0) > -1;
                                                                            xB = 0 - $i | 0;
                                                                            Ts = xH ? $i : xB;
                                                                            Ns = xs - Ts | 0;
                                                                            Cs = (Ts | 0) > (xs | 0);
                                                                            ks = Cs ? Ns : 0;
                                                                            Ls = xs - ks | 0;
                                                                            AH = (Qi | 0) > -1;
                                                                            LB = 0 - Qi | 0;
                                                                            As = AH ? Qi : LB;
                                                                            Os = Ls - As | 0;
                                                                            Hs = (As | 0) > (Ls | 0);
                                                                            Bs = Hs ? Os : 0;
                                                                            Fs = Ls - Bs | 0;
                                                                            Is = es(Fs) | 0;
                                                                            qs = fs - Es | 0;
                                                                            Rs = (Es | 0) > (fs | 0);
                                                                            Us = Rs ? qs : 0;
                                                                            zs = fs - Us | 0;
                                                                            Ws = zs - Is | 0;
                                                                            Xs = (Is | 0) > (zs | 0);
                                                                            Vs = Xs ? Ws : 0;
                                                                            $s = zs - Vs | 0;
                                                                            Ks = $s + -16 | 0;
                                                                            Qs = (Ks | 0) > 0;
                                                                            Gs = Qs ? Ks : 0;
                                                                            Ys = 1 << Gs;
                                                                            eo = Ys >> 1;
                                                                            to = (li | 0) < 0;
                                                                            no = to << 31 >> 31;
                                                                            oo = (os | 0) < 0;
                                                                            uo = oo << 31 >> 31;
                                                                            ao = vo(os | 0, uo | 0, li | 0, no | 0) | 0;
                                                                            lo = D;
                                                                            co = (eo | 0) < 0;
                                                                            po = co << 31 >> 31;
                                                                            mo = ro(eo | 0, po | 0, ao | 0, lo | 0) | 0;
                                                                            go = D;
                                                                            yo = io(mo | 0, go | 0, Gs | 0) | 0;
                                                                            bo = D;
                                                                            s[UP >> 2] = yo;
                                                                            wo = (pi | 0) < 0;
                                                                            Eo = wo << 31 >> 31;
                                                                            So = (ys | 0) < 0;
                                                                            No = So << 31 >> 31;
                                                                            Co = vo(ys | 0, No | 0, pi | 0, Eo | 0) | 0;
                                                                            ko = D;
                                                                            Lo = ro(eo | 0, po | 0, Co | 0, ko | 0) | 0;
                                                                            Ao = D;
                                                                            Oo = io(Lo | 0, Ao | 0, Gs | 0) | 0;
                                                                            Mo = D;
                                                                            s[sk >> 2] = Oo;
                                                                            s[mk >> 2] = ci;
                                                                            _o = (bi | 0) < 0;
                                                                            Do = _o << 31 >> 31;
                                                                            Po = vo(os | 0, uo | 0, bi | 0, Do | 0) | 0;
                                                                            Bo = D;
                                                                            jo = ro(eo | 0, po | 0, Po | 0, Bo | 0) | 0;
                                                                            Fo = D;
                                                                            Io = io(jo | 0, Fo | 0, Gs | 0) | 0;
                                                                            qo = D;
                                                                            s[Lk >> 2] = Io;
                                                                            Ro = (Si | 0) < 0;
                                                                            Uo = Ro << 31 >> 31;
                                                                            zo = vo(ys | 0, No | 0, Si | 0, Uo | 0) | 0;
                                                                            Wo = D;
                                                                            Xo = ro(eo | 0, po | 0, zo | 0, Wo | 0) | 0;
                                                                            $o = D;
                                                                            Jo = io(Xo | 0, $o | 0, Gs | 0) | 0;
                                                                            Ko = D;
                                                                            s[Ik >> 2] = Jo;
                                                                            s[Qk >> 2] = wi;
                                                                            Qo = eo + Ii | 0;
                                                                            Go = Qo >> Gs;
                                                                            s[uL >> 2] = Go;
                                                                            Yo = eo + $i | 0;
                                                                            Zo = Yo >> Gs;
                                                                            s[yL >> 2] = Zo;
                                                                            eu = (Gs | 0) > 14;
                                                                            if (eu) {
                                                                                tu = Ys >> 15;
                                                                                nu = tu + Qi | 0;
                                                                                iu = Gs + -14 | 0;
                                                                                su = nu >> iu;
                                                                                au = su
                                                                            } else {
                                                                                ou = 14 - Gs | 0;
                                                                                uu = Qi << ou;
                                                                                au = uu
                                                                            }
                                                                            s[AL >> 2] = au;
                                                                            fu = Gi - ls | 0;
                                                                            lu = (ls | 0) > (Gi | 0);
                                                                            cu = lu ? fu : 0;
                                                                            hu = Gi - cu | 0;
                                                                            MH = (vi | 0) > -1;
                                                                            _B = 0 - vi | 0;
                                                                            pu = MH ? vi : _B;
                                                                            vu = hu - pu | 0;
                                                                            mu = (pu | 0) > (hu | 0);
                                                                            gu = mu ? vu : 0;
                                                                            yu = hu - gu | 0;
                                                                            bu = es(yu) | 0;
                                                                            PH = (yo | 0) > -1;
                                                                            PB = 0 - yo | 0;
                                                                            wu = PH ? yo : PB;
                                                                            HH = (Io | 0) > -1;
                                                                            HB = 0 - Io | 0;
                                                                            Eu = HH ? Io : HB;
                                                                            Su = wu - Eu | 0;
                                                                            xu = (Eu | 0) > (wu | 0);
                                                                            Tu = xu ? Su : 0;
                                                                            Cu = wu - Tu | 0;
                                                                            ku = es(Cu) | 0;
                                                                            Lu = ku + bu | 0;
                                                                            Au = Yi - hs | 0;
                                                                            Ou = (hs | 0) > (Yi | 0);
                                                                            Mu = Ou ? Au : 0;
                                                                            _u = Yi - Mu | 0;
                                                                            hH = (Ni | 0) > -1;
                                                                            hB = 0 - Ni | 0;
                                                                            Du = hH ? Ni : hB;
                                                                            Pu = _u - Du | 0;
                                                                            Hu = (Du | 0) > (_u | 0);
                                                                            ju = Hu ? Pu : 0;
                                                                            Fu = _u - ju | 0;
                                                                            Iu = es(Fu) | 0;
                                                                            pH = (Oo | 0) > -1;
                                                                            dB = 0 - Oo | 0;
                                                                            qu = pH ? Oo : dB;
                                                                            dH = (Jo | 0) > -1;
                                                                            vB = 0 - Jo | 0;
                                                                            Ru = dH ? Jo : vB;
                                                                            Uu = qu - Ru | 0;
                                                                            zu = (Ru | 0) > (qu | 0);
                                                                            Wu = zu ? Uu : 0;
                                                                            Xu = qu - Wu | 0;
                                                                            Vu = es(Xu) | 0;
                                                                            Ju = Vu + Iu | 0;
                                                                            Ku = es(As) | 0;
                                                                            Qu = (Ju | 0) > (Lu | 0);
                                                                            Gu = Ju - Lu | 0;
                                                                            ft = Qu ? Gu : 0;
                                                                            Yu = -29 - Gs | 0;
                                                                            Zu = Yu + Lu | 0;
                                                                            ea = Zu + Ku | 0;
                                                                            ta = ea + ft | 0;
                                                                            na = (ta | 0) > 0;
                                                                            ra = na ? ta : 0;
                                                                            sa = 1 << ra;
                                                                            oa = sa >> 1;
                                                                            ua = ra + Gs | 0;
                                                                            aa = eo << ra;
                                                                            fa = (Jo | 0) < 0;
                                                                            la = fa << 31 >> 31;
                                                                            ca = (Qi | 0) < 0;
                                                                            ha = ca << 31 >> 31;
                                                                            pa = vo(Jo | 0, la | 0, Qi | 0, ha | 0) | 0;
                                                                            da = D;
                                                                            ma = (aa | 0) < 0;
                                                                            ga = ma << 31 >> 31;
                                                                            ya = ro(aa | 0, ga | 0, pa | 0, da | 0) | 0;
                                                                            ba = D;
                                                                            wa = io(ya | 0, ba | 0, ua | 0) | 0;
                                                                            Ea = D;
                                                                            s[qL >> 2] = wa;
                                                                            Sa = (dB | 0) < 0;
                                                                            xa = Sa << 31 >> 31;
                                                                            Ta = vo(dB | 0, xa | 0, Qi | 0, ha | 0) | 0;
                                                                            Na = D;
                                                                            La = ro(aa | 0, ga | 0, Ta | 0, Na | 0) | 0;
                                                                            Aa = D;
                                                                            Oa = io(La | 0, Aa | 0, ua | 0) | 0;
                                                                            Ma = D;
                                                                            s[GL >> 2] = Oa;
                                                                            _a = (HB | 0) < 0;
                                                                            Da = _a << 31 >> 31;
                                                                            Pa = vo(HB | 0, Da | 0, Qi | 0, ha | 0) | 0;
                                                                            Ha = D;
                                                                            Ba = ro(aa | 0, ga | 0, Pa | 0, Ha | 0) | 0;
                                                                            ja = D;
                                                                            Ia = io(Ba | 0, ja | 0, ua | 0) | 0;
                                                                            qa = D;
                                                                            s[aA >> 2] = Ia;
                                                                            Ra = (yo | 0) < 0;
                                                                            Ua = Ra << 31 >> 31;
                                                                            za = vo(yo | 0, Ua | 0, Qi | 0, ha | 0) | 0;
                                                                            Wa = D;
                                                                            Xa = ro(aa | 0, ga | 0, za | 0, Wa | 0) | 0;
                                                                            Va = D;
                                                                            $a = io(Xa | 0, Va | 0, ua | 0) | 0;
                                                                            Ja = D;
                                                                            s[bA >> 2] = $a;
                                                                            Qa = (Io | 0) < 0;
                                                                            Ga = Qa << 31 >> 31;
                                                                            Ya = (Zo | 0) < 0;
                                                                            Za = Ya << 31 >> 31;
                                                                            ef = vo(Io | 0, Ga | 0, Zo | 0, Za | 0) | 0;
                                                                            tf = D;
                                                                            nf = (Go | 0) < 0;
                                                                            rf = nf << 31 >> 31;
                                                                            sf = vo(Jo | 0, la | 0, Go | 0, rf | 0) | 0;
                                                                            of = D;
                                                                            af = (oa | 0) < 0;
                                                                            ff = af << 31 >> 31;
                                                                            lf = Zs(ef | 0, tf | 0, sf | 0, of | 0) | 0;
                                                                            cf = D;
                                                                            hf = Zs(lf | 0, cf | 0, oa | 0, ff | 0) | 0;
                                                                            pf = D;
                                                                            df = io(hf | 0, pf | 0, ra | 0) | 0;
                                                                            vf = D;
                                                                            s[MA >> 2] = df;
                                                                            mf = s[sk >> 2] | 0;
                                                                            gf = (mf | 0) < 0;
                                                                            bf = gf << 31 >> 31;
                                                                            wf = s[uL >> 2] | 0;
                                                                            Ef = (wf | 0) < 0;
                                                                            Sf = Ef << 31 >> 31;
                                                                            xf = vo(wf | 0, Sf | 0, mf | 0, bf | 0) | 0;
                                                                            Tf = D;
                                                                            Nf = s[UP >> 2] | 0;
                                                                            Cf = (Nf | 0) < 0;
                                                                            kf = Cf << 31 >> 31;
                                                                            Lf = s[yL >> 2] | 0;
                                                                            Of = (Lf | 0) < 0;
                                                                            Mf = Of << 31 >> 31;
                                                                            _f = vo(Lf | 0, Mf | 0, Nf | 0, kf | 0) | 0;
                                                                            Df = D;
                                                                            Pf = Zs(xf | 0, Tf | 0, _f | 0, Df | 0) | 0;
                                                                            Hf = D;
                                                                            Bf = Zs(Pf | 0, Hf | 0, oa | 0, ff | 0) | 0;
                                                                            jf = D;
                                                                            Ff = io(Bf | 0, jf | 0, ra | 0) | 0;
                                                                            If = D;
                                                                            s[UA >> 2] = Ff;
                                                                            Rf = s[Ik >> 2] | 0;
                                                                            Uf = (Rf | 0) < 0;
                                                                            zf = Uf << 31 >> 31;
                                                                            Wf = vo(Rf | 0, zf | 0, Nf | 0, kf | 0) | 0;
                                                                            Xf = D;
                                                                            Vf = s[Lk >> 2] | 0;
                                                                            $f = (Vf | 0) < 0;
                                                                            Jf = $f << 31 >> 31;
                                                                            Kf = vo(Vf | 0, Jf | 0, mf | 0, bf | 0) | 0;
                                                                            Qf = D;
                                                                            Yf = Zs(Wf | 0, Xf | 0, oa | 0, ff | 0) | 0;
                                                                            Zf = D;
                                                                            el = Zs(Yf | 0, Zf | 0, Kf | 0, Qf | 0) | 0;
                                                                            tl = D;
                                                                            nl = io(el | 0, tl | 0, ra | 0) | 0;
                                                                            rl = D;
                                                                            s[ZA >> 2] = nl;
                                                                            s[lO >> 2] = 14;
                                                                            s[EO + 0 >> 2] = s[VD + 0 >> 2] | 0;
                                                                            s[EO + 4 >> 2] = s[VD + 4 >> 2] | 0;
                                                                            s[EO + 8 >> 2] = s[VD + 8 >> 2] | 0;
                                                                            s[EO + 12 >> 2] = s[VD + 12 >> 2] | 0;
                                                                            s[EO + 16 >> 2] = s[VD + 16 >> 2] | 0;
                                                                            s[EO + 20 >> 2] = s[VD + 20 >> 2] | 0;
                                                                            s[EO + 24 >> 2] = s[VD + 24 >> 2] | 0;
                                                                            s[EO + 28 >> 2] = s[VD + 28 >> 2] | 0;
                                                                            il = s[Ol >> 2] | 0;
                                                                            sl = s[il >> 2] | 0;
                                                                            ol = il + 4 | 0;
                                                                            ul = s[ol >> 2] | 0;
                                                                            fl = s[mk >> 2] | 0;
                                                                            ll = sl - fl | 0;
                                                                            cl = s[Qk >> 2] | 0;
                                                                            hl = ul - cl | 0;
                                                                            pl = rt(ll, wa) | 0;
                                                                            dl = rt(hl, Oa) | 0;
                                                                            vl = dl + pl | 0;
                                                                            ml = rt(ll, Ia) | 0;
                                                                            gl = rt(hl, $a) | 0;
                                                                            yl = gl + ml | 0;
                                                                            wl = rt(ll, df) | 0;
                                                                            El = rt(hl, Ff) | 0;
                                                                            Sl = nl + 8192 | 0;
                                                                            xl = Sl + wl | 0;
                                                                            Tl = xl + El | 0;
                                                                            Nl = Tl >> 14;
                                                                            Cl = (Nl | 0) == 0;
                                                                            if (Cl) {
                                                                                kl = vl >>> 31;
                                                                                Ll = kl + 2147483647 | 0;
                                                                                s[Qw >> 2] = Ll;
                                                                                Al = yl >>> 31;
                                                                                _l = Al + 2147483647 | 0;
                                                                                Kl = _l;
                                                                                Ch = Ll
                                                                            } else {
                                                                                Dl = (Nl | 0) < 0;
                                                                                if (Dl) {
                                                                                    Pl = 0 - vl | 0;
                                                                                    Hl = 0 - yl | 0;
                                                                                    Bl = 0 - Nl | 0;
                                                                                    Yj = Bl;
                                                                                    tF = Pl;
                                                                                    sF = Hl
                                                                                } else {
                                                                                    Yj = Nl;
                                                                                    tF = vl;
                                                                                    sF = yl
                                                                                }
                                                                                jl = Yj >> 1;
                                                                                Fl = tF >> 31;
                                                                                Il = jl + Fl | 0;
                                                                                ql = Il ^ Fl;
                                                                                Rl = ql + tF | 0;
                                                                                zl = (Rl | 0) / (Yj | 0) & -1;
                                                                                s[Qw >> 2] = zl;
                                                                                Wl = sF >> 31;
                                                                                Xl = jl + Wl | 0;
                                                                                Vl = Xl ^ Wl;
                                                                                $l = Vl + sF | 0;
                                                                                Jl = ($l | 0) / (Yj | 0) & -1;
                                                                                Kl = Jl;
                                                                                Ch = zl
                                                                            }
                                                                            s[uE >> 2] = Kl;
                                                                            Ql = s[Dh >> 2] | 0;
                                                                            Gl = s[Ql >> 2] | 0;
                                                                            Yl = Ql + 4 | 0;
                                                                            ec = s[Yl >> 2] | 0;
                                                                            tc = Gl - fl | 0;
                                                                            nc = ec - cl | 0;
                                                                            rc = rt(tc, wa) | 0;
                                                                            ic = rt(nc, Oa) | 0;
                                                                            sc = ic + rc | 0;
                                                                            oc = rt(tc, Ia) | 0;
                                                                            uc = rt(nc, $a) | 0;
                                                                            ac = uc + oc | 0;
                                                                            fc = rt(tc, df) | 0;
                                                                            cc = rt(nc, Ff) | 0;
                                                                            hc = Sl + fc | 0;
                                                                            pc = hc + cc | 0;
                                                                            dc = pc >> 14;
                                                                            vc = (dc | 0) == 0;
                                                                            if (vc) {
                                                                                mc = sc >>> 31;
                                                                                gc = mc + 2147483647 | 0;
                                                                                s[Fb >> 2] = gc;
                                                                                yc = ac >>> 31;
                                                                                bc = yc + 2147483647 | 0;
                                                                                Vj = bc
                                                                            } else {
                                                                                wc = (dc | 0) < 0;
                                                                                if (wc) {
                                                                                    Sc = 0 - sc | 0;
                                                                                    xc = 0 - ac | 0;
                                                                                    Tc = 0 - dc | 0;
                                                                                    Zj = Tc;
                                                                                    rF = Sc;
                                                                                    uF = xc
                                                                                } else {
                                                                                    Zj = dc;
                                                                                    rF = sc;
                                                                                    uF = ac
                                                                                }
                                                                                Nc = Zj >> 1;
                                                                                Cc = rF >> 31;
                                                                                kc = Nc + Cc | 0;
                                                                                Lc = kc ^ Cc;
                                                                                Ac = Lc + rF | 0;
                                                                                Oc = (Ac | 0) / (Zj | 0) & -1;
                                                                                s[Fb >> 2] = Oc;
                                                                                Mc = uF >> 31;
                                                                                Dc = Nc + Mc | 0;
                                                                                Pc = Dc ^ Mc;
                                                                                Hc = Pc + uF | 0;
                                                                                Bc = (Hc | 0) / (Zj | 0) & -1;
                                                                                Vj = Bc
                                                                            }
                                                                            s[Kb >> 2] = Vj;
                                                                            jc = s[Bd >> 2] | 0;
                                                                            Fc = s[jc >> 2] | 0;
                                                                            Ic = jc + 4 | 0;
                                                                            qc = s[Ic >> 2] | 0;
                                                                            Rc = Fc - fl | 0;
                                                                            Uc = qc - cl | 0;
                                                                            Wc = rt(Rc, wa) | 0;
                                                                            Xc = rt(Uc, Oa) | 0;
                                                                            Vc = Xc + Wc | 0;
                                                                            $c = rt(Rc, Ia) | 0;
                                                                            Jc = rt(Uc, $a) | 0;
                                                                            Kc = Jc + $c | 0;
                                                                            Qc = rt(Rc, df) | 0;
                                                                            Gc = rt(Uc, Ff) | 0;
                                                                            Yc = Sl + Qc | 0;
                                                                            Zc = Yc + Gc | 0;
                                                                            th = Zc >> 14;
                                                                            nh = (th | 0) == 0;
                                                                            if (nh) {
                                                                                rh = Vc >>> 31;
                                                                                ih = rh + 2147483647 | 0;
                                                                                s[ow >> 2] = ih;
                                                                                sh = Kc >>> 31;
                                                                                oh = sh + 2147483647 | 0;
                                                                                $j = oh
                                                                            } else {
                                                                                uh = (th | 0) < 0;
                                                                                if (uh) {
                                                                                    ah = 0 - Vc | 0;
                                                                                    fh = 0 - Kc | 0;
                                                                                    lh = 0 - th | 0;
                                                                                    eF = lh;
                                                                                    iF = ah;
                                                                                    aF = fh
                                                                                } else {
                                                                                    eF = th;
                                                                                    iF = Vc;
                                                                                    aF = Kc
                                                                                }
                                                                                hh = eF >> 1;
                                                                                ph = iF >> 31;
                                                                                dh = hh + ph | 0;
                                                                                vh = dh ^ ph;
                                                                                mh = vh + iF | 0;
                                                                                gh = (mh | 0) / (eF | 0) & -1;
                                                                                s[ow >> 2] = gh;
                                                                                yh = aF >> 31;
                                                                                bh = hh + yh | 0;
                                                                                wh = bh ^ yh;
                                                                                Eh = wh + aF | 0;
                                                                                xh = (Eh | 0) / (eF | 0) & -1;
                                                                                $j = xh
                                                                            }
                                                                            s[gw >> 2] = $j;
                                                                            _i(Kj, UP);
                                                                            Th = s[Fb >> 2] | 0;
                                                                            Nh = Th - Ch | 0;
                                                                            kh = Mi(Kj, Nh, Nh) | 0;
                                                                            Lh = (kh | 0) < 0;
                                                                            if (Lh) {
                                                                                v = 0;
                                                                                m = d;
                                                                                break
                                                                            }
                                                                            _i(LP, UP);
                                                                            Ah = s[gw >> 2] | 0;
                                                                            Oh = Ah - Kl | 0;
                                                                            Mh = Mi(LP, Oh, Oh) | 0;
                                                                            _h = (Mh | 0) < 0;
                                                                            if (_h) {
                                                                                v = 0;
                                                                                m = d;
                                                                                break
                                                                            }
                                                                            Hh = s[Lw >> 2] | 0;
                                                                            Bh = s[Iw >> 2] | 0;
                                                                            jh = (Hh | 0) == (Bh | 0);
                                                                            Fh = (Hh | 0) < 7;
                                                                            ij = jh & Fh;
                                                                            do {
                                                                                if (ij) {
                                                                                    yp = Hh;
                                                                                    Gj = Hh
                                                                                } else {
                                                                                    Ih = Hh - Bh | 0;
                                                                                    OH = (Ih | 0) > -1;
                                                                                    MB = 0 - Ih | 0;
                                                                                    qh = OH ? Ih : MB;
                                                                                    Rh = (qh | 0) > 3;
                                                                                    if (Rh) {
                                                                                        v = 0;
                                                                                        m = d;
                                                                                        break n
                                                                                    }
                                                                                    Uh = (Hh | 0) > 3;
                                                                                    if (Uh) {
                                                                                        zh = Di(Kj, UP, o, u, a, 0) | 0;
                                                                                        Wh = zh - Hh | 0;
                                                                                        vH = (Wh | 0) > -1;
                                                                                        mB = 0 - Wh | 0;
                                                                                        Vh = vH ? Wh : mB;
                                                                                        $h = (Vh | 0) > 3;
                                                                                        f = $h ? -1 : zh;
                                                                                        Qj = f
                                                                                    } else {
                                                                                        Qj = -1
                                                                                    }
                                                                                    Jh = (Bh | 0) > 3;
                                                                                    if (Jh) {
                                                                                        Kh = Di(LP, UP, o, u, a, 1) | 0;
                                                                                        Qh = Kh - Bh | 0;
                                                                                        cH = (Qh | 0) > -1;
                                                                                        pB = 0 - Qh | 0;
                                                                                        Gh = cH ? Qh : pB;
                                                                                        Yh = (Gh | 0) > 3;
                                                                                        g = Yh ? -1 : Kh;
                                                                                        AP = g
                                                                                    } else {
                                                                                        AP = -1
                                                                                    }
                                                                                    Zh = (Qj | 0) > -1;
                                                                                    ep = (AP | 0) < 0;
                                                                                    if (Zh) {
                                                                                        tp = (AP | 0) == (Qj | 0);
                                                                                        lj = ep | tp;
                                                                                        if (lj) {
                                                                                            yp = Bh;
                                                                                            Gj = Qj;
                                                                                            break
                                                                                        } else {
                                                                                            v = 0;
                                                                                            m = d;
                                                                                            break n
                                                                                        }
                                                                                    } else {
                                                                                        if (ep) {
                                                                                            v = 0;
                                                                                            m = d;
                                                                                            break n
                                                                                        } else {
                                                                                            yp = Bh;
                                                                                            Gj = AP;
                                                                                            break
                                                                                        }
                                                                                    }
                                                                                }
                                                                            } while (0);
                                                                            _i(Jj, UP);
                                                                            rp = s[Fb >> 2] | 0;
                                                                            ip = s[ow >> 2] | 0;
                                                                            sp = rp - ip | 0;
                                                                            op = s[gw >> 2] | 0;
                                                                            up = s[uE >> 2] | 0;
                                                                            ap = op - up | 0;
                                                                            fp = Mi(Jj, sp, ap) | 0;
                                                                            lp = (fp | 0) < 0;
                                                                            if (lp) {
                                                                                v = 0;
                                                                                m = d;
                                                                                break
                                                                            }
                                                                            cp = s[bE >> 2] | 0;
                                                                            hp = cp - Hh | 0;
                                                                            _H = (hp | 0) > -1;
                                                                            DB = 0 - hp | 0;
                                                                            dp = _H ? hp : DB;
                                                                            vp = (dp | 0) > 1;
                                                                            if (vp) {
                                                                                v = 0;
                                                                                m = d;
                                                                                break
                                                                            }
                                                                            mp = s[OE >> 2] | 0;
                                                                            gp = mp - yp | 0;
                                                                            aH = (gp | 0) > -1;
                                                                            fB = 0 - gp | 0;
                                                                            bp = aH ? gp : fB;
                                                                            wp = (bp | 0) > 1;
                                                                            if (wp) {
                                                                                v = 0;
                                                                                m = d;
                                                                                break
                                                                            }
                                                                            Ep = Pi(Jj, Kj, LP, UP, o, u, a) | 0;
                                                                            Sp = (Ep | 0) < 0;
                                                                            if (Sp) {
                                                                                lF = 135
                                                                            } else {
                                                                                xp = s[Ol >> 2] | 0;
                                                                                Np = s[Dh >> 2] | 0;
                                                                                Cp = s[Bd >> 2] | 0;
                                                                                kp = Hi(Aj, e, xp, Np, Cp, Gj, Ep, o, u, a) | 0;
                                                                                Lp = (kp | 0) < 0;
                                                                                if (Lp) {
                                                                                    lF = 135
                                                                                }
                                                                            }
                                                                            if ((lF | 0) == 135) {
                                                                                lF = 0;
                                                                                Ap = s[qL >> 2] | 0;
                                                                                Op = s[aA >> 2] | 0;
                                                                                s[qL >> 2] = Op;
                                                                                s[aA >> 2] = Ap;
                                                                                Mp = s[GL >> 2] | 0;
                                                                                _p = s[bA >> 2] | 0;
                                                                                s[GL >> 2] = _p;
                                                                                s[bA >> 2] = Mp;
                                                                                Dp = s[UP >> 2] | 0;
                                                                                Pp = s[sk >> 2] | 0;
                                                                                s[UP >> 2] = Pp;
                                                                                s[sk >> 2] = Dp;
                                                                                Bp = s[Lk >> 2] | 0;
                                                                                jp = s[Ik >> 2] | 0;
                                                                                s[Lk >> 2] = jp;
                                                                                s[Ik >> 2] = Bp;
                                                                                Fp = s[uL >> 2] | 0;
                                                                                Ip = s[yL >> 2] | 0;
                                                                                s[uL >> 2] = Ip;
                                                                                s[yL >> 2] = Fp;
                                                                                qp = s[Qw >> 2] | 0;
                                                                                Rp = s[uE >> 2] | 0;
                                                                                s[Qw >> 2] = Rp;
                                                                                s[uE >> 2] = qp;
                                                                                Up = s[Jj >> 2] | 0;
                                                                                zp = s[_O >> 2] | 0;
                                                                                s[Jj >> 2] = zp;
                                                                                s[_O >> 2] = Up;
                                                                                Wp = s[Fb >> 2] | 0;
                                                                                Xp = s[Kb >> 2] | 0;
                                                                                s[Fb >> 2] = Xp;
                                                                                s[Kb >> 2] = Wp;
                                                                                $p = s[Kj >> 2] | 0;
                                                                                Jp = s[fS >> 2] | 0;
                                                                                s[Kj >> 2] = Jp;
                                                                                s[fS >> 2] = $p;
                                                                                Kp = s[ow >> 2] | 0;
                                                                                Qp = s[gw >> 2] | 0;
                                                                                s[ow >> 2] = Qp;
                                                                                s[gw >> 2] = Kp;
                                                                                Gp = s[LP >> 2] | 0;
                                                                                Yp = s[lx >> 2] | 0;
                                                                                s[LP >> 2] = Yp;
                                                                                s[lx >> 2] = Gp;
                                                                                Zp = Pi(Jj, LP, Kj, UP, o, u, a) | 0;
                                                                                ed = (Zp | 0) < 0;
                                                                                if (ed) {
                                                                                    v = 0;
                                                                                    m = d;
                                                                                    break
                                                                                }
                                                                                td = s[iC >> 2] | 0;
                                                                                nd = s[CC >> 2] | 0;
                                                                                s[iC >> 2] = nd;
                                                                                s[CC >> 2] = td;
                                                                                id = s[vC >> 2] | 0;
                                                                                sd = s[jC >> 2] | 0;
                                                                                s[vC >> 2] = sd;
                                                                                s[jC >> 2] = id;
                                                                                s[EO + 0 >> 2] = s[VD + 0 >> 2] | 0;
                                                                                s[EO + 4 >> 2] = s[VD + 4 >> 2] | 0;
                                                                                s[EO + 8 >> 2] = s[VD + 8 >> 2] | 0;
                                                                                s[EO + 12 >> 2] = s[VD + 12 >> 2] | 0;
                                                                                s[EO + 16 >> 2] = s[VD + 16 >> 2] | 0;
                                                                                s[EO + 20 >> 2] = s[VD + 20 >> 2] | 0;
                                                                                s[EO + 24 >> 2] = s[VD + 24 >> 2] | 0;
                                                                                s[EO + 28 >> 2] = s[VD + 28 >> 2] | 0;
                                                                                od = s[Ol >> 2] | 0;
                                                                                ud = s[Bd >> 2] | 0;
                                                                                ad = s[Dh >> 2] | 0;
                                                                                fd = Hi(Aj, e, od, ud, ad, Gj, Zp, o, u, a) | 0;
                                                                                ld = (fd | 0) < 0;
                                                                                if (ld) {
                                                                                    v = 0;
                                                                                    m = d;
                                                                                    break
                                                                                }
                                                                            }
                                                                            v = 1;
                                                                            m = Gj
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } while (0);
                                                    if (v) {
                                                        break
                                                    } else {
                                                        d = m;
                                                        KP = Ph
                                                    }
                                                }
                                                cd = (m | 0) > -1;
                                                if (cd) {
                                                    hd = s[cM >> 2] | 0;
                                                    pd = s[SM >> 2] | 0;
                                                    vd = (hd | 0) < (pd | 0);
                                                    if (vd) {
                                                        gt = s[t >> 2] | 0;
                                                        Sd = hd;
                                                        Td = gt
                                                    } else {
                                                        md = pd << 1;
                                                        gd = md | 1;
                                                        s[SM >> 2] = gd;
                                                        yd = s[t >> 2] | 0;
                                                        bd = gd * 48 | 0;
                                                        wd = Ps(yd, bd) | 0;
                                                        s[t >> 2] = wd;
                                                        mt = s[cM >> 2] | 0;
                                                        Sd = mt;
                                                        Td = wd
                                                    }
                                                    Ed = Sd + 1 | 0;
                                                    s[cM >> 2] = Ed;
                                                    xd = Td + (Sd * 48 | 0) | 0;
                                                    fF = xd + 0 | 0;
                                                    hF = Aj + 0 | 0;
                                                    pF = fF + 48 | 0;
                                                    do {
                                                        s[fF >> 2] = s[hF >> 2] | 0;
                                                        fF = fF + 4 | 0;
                                                        hF = hF + 4 | 0
                                                    } while ((fF | 0) < (pF | 0));
                                                    Cd = s[t >> 2] | 0;
                                                    kd = s[cM >> 2] | 0;
                                                    Ld = kd + -1 | 0;
                                                    Ad = (Cd + (Ld * 48 | 0) | 0) + 16 | 0;
                                                    Od = s[Ad >> 2] | 0;
                                                    Md = Od >> 2;
                                                    s[Ad >> 2] = Md;
                                                    _d = s[cM >> 2] | 0;
                                                    Dd = _d + -1 | 0;
                                                    Pd = (Cd + (Dd * 48 | 0) | 0) + 20 | 0;
                                                    Hd = s[Pd >> 2] | 0;
                                                    Fd = Hd >> 2;
                                                    s[Pd >> 2] = Fd;
                                                    Id = s[cM >> 2] | 0;
                                                    qd = Id + -1 | 0;
                                                    Rd = (Cd + (qd * 48 | 0) | 0) + 24 | 0;
                                                    Ud = s[Rd >> 2] | 0;
                                                    zd = Ud >> 2;
                                                    s[Rd >> 2] = zd;
                                                    Wd = s[cM >> 2] | 0;
                                                    Xd = Wd + -1 | 0;
                                                    Vd = (Cd + (Xd * 48 | 0) | 0) + 28 | 0;
                                                    $d = s[Vd >> 2] | 0;
                                                    Kd = $d >> 2;
                                                    s[Vd >> 2] = Kd;
                                                    Qd = s[cM >> 2] | 0;
                                                    Gd = Qd + -1 | 0;
                                                    Yd = (Cd + (Gd * 48 | 0) | 0) + 32 | 0;
                                                    Zd = s[Yd >> 2] | 0;
                                                    ev = Zd >> 2;
                                                    s[Yd >> 2] = ev;
                                                    tv = s[cM >> 2] | 0;
                                                    nv = tv + -1 | 0;
                                                    rv = (Cd + (nv * 48 | 0) | 0) + 36 | 0;
                                                    iv = s[rv >> 2] | 0;
                                                    ov = iv >> 2;
                                                    s[rv >> 2] = ov;
                                                    uv = s[cM >> 2] | 0;
                                                    av = uv + -1 | 0;
                                                    fv = (Cd + (av * 48 | 0) | 0) + 40 | 0;
                                                    lv = s[fv >> 2] | 0;
                                                    cv = lv >> 2;
                                                    s[fv >> 2] = cv;
                                                    hv = s[cM >> 2] | 0;
                                                    pv = hv + -1 | 0;
                                                    dv = (Cd + (pv * 48 | 0) | 0) + 44 | 0;
                                                    vv = s[dv >> 2] | 0;
                                                    gv = vv >> 2;
                                                    s[dv >> 2] = gv;
                                                    r[vr >> 0] = 1;
                                                    r[yv >> 0] = 1;
                                                    bv = Ut + nH | 0;
                                                    r[bv >> 0] = 1;
                                                    kt = s[PM >> 2] | 0;
                                                    k = s[C >> 2] | 0;
                                                    At = s[XM >> 2] | 0;
                                                    M = s[O >> 2] | 0;
                                                    wv = At - kt | 0;
                                                    Ev = M - k | 0;
                                                    Nt = s[n_ >> 2] | 0;
                                                    x = s[S >> 2] | 0;
                                                    Sv = Nt - At | 0;
                                                    xv = x - M | 0;
                                                    Rt = s[p_ >> 2] | 0;
                                                    E = s[w >> 2] | 0;
                                                    Tv = Rt - Nt | 0;
                                                    Nv = E - x | 0;
                                                    Cv = kt - Rt | 0;
                                                    Lv = k - E | 0;
                                                    $H = 0;
                                                    UB = 0;
                                                    while (1) {
                                                        Av = Ut + $H | 0;
                                                        Ov = r[Av >> 0] | 0;
                                                        Mv = Ov << 24 >> 24 == 0;
                                                        do {
                                                            if (Mv) {
                                                                _v = n + ($H << 4) | 0;
                                                                Mt = s[_v >> 2] | 0;
                                                                H = (n + ($H << 4) | 0) + 4 | 0;
                                                                B = s[H >> 2] | 0;
                                                                Dv = B - k | 0;
                                                                Pv = rt(Dv, wv) | 0;
                                                                Hv = Mt - kt | 0;
                                                                Bv = rt(Hv, Ev) | 0;
                                                                jv = Pv - Bv | 0;
                                                                Iv = (jv | 0) > -1;
                                                                if (Iv) {
                                                                    qv = B - M | 0;
                                                                    Rv = rt(Sv, qv) | 0;
                                                                    Uv = Mt - At | 0;
                                                                    zv = rt(xv, Uv) | 0;
                                                                    Wv = Rv - zv | 0;
                                                                    Xv = (Wv | 0) > -1;
                                                                    if (Xv) {
                                                                        Vv = B - x | 0;
                                                                        $v = rt(Tv, Vv) | 0;
                                                                        Jv = Mt - Nt | 0;
                                                                        Qv = rt(Nv, Jv) | 0;
                                                                        Gv = $v - Qv | 0;
                                                                        Yv = (Gv | 0) > -1;
                                                                        if (Yv) {
                                                                            Zv = B - E | 0;
                                                                            em = rt(Zv, Cv) | 0;
                                                                            tm = Mt - Rt | 0;
                                                                            nm = rt(Lv, tm) | 0;
                                                                            rm = em - nm | 0;
                                                                            im = (rm | 0) > -1;
                                                                            if (!im) {
                                                                                zB = UB;
                                                                                break
                                                                            }
                                                                            r[Av >> 0] = 2;
                                                                            sm = UB + 1 | 0;
                                                                            zB = sm
                                                                        } else {
                                                                            zB = UB
                                                                        }
                                                                    } else {
                                                                        zB = UB
                                                                    }
                                                                } else {
                                                                    zB = UB
                                                                }
                                                            } else {
                                                                zB = UB
                                                            }
                                                        } while (0);
                                                        um = $H + 1 | 0;
                                                        HP = (um | 0) == (i | 0);
                                                        if (HP) {
                                                            break
                                                        } else {
                                                            $H = um;
                                                            UB = zB
                                                        }
                                                    }
                                                    am = (zB | 0) > 2;
                                                    if (am) {
                                                        fm = zB << 4;
                                                        lm = Ms(fm) | 0;
                                                        JH = 0;
                                                        WB = 0;
                                                        while (1) {
                                                            cm = Ut + JH | 0;
                                                            hm = r[cm >> 0] | 0;
                                                            pm = hm << 24 >> 24 == 2;
                                                            if (pm) {
                                                                dm = WB + 1 | 0;
                                                                vm = lm + (WB << 4) | 0;
                                                                mm = n + (JH << 4) | 0;
                                                                s[vm + 0 >> 2] = s[mm + 0 >> 2] | 0;
                                                                s[vm + 4 >> 2] = s[mm + 4 >> 2] | 0;
                                                                s[vm + 8 >> 2] = s[mm + 8 >> 2] | 0;
                                                                s[vm + 12 >> 2] = s[mm + 12 >> 2] | 0;
                                                                XB = dm
                                                            } else {
                                                                XB = WB
                                                            }
                                                            ym = JH + 1 | 0;
                                                            qP = (ym | 0) == (i | 0);
                                                            if (qP) {
                                                                break
                                                            } else {
                                                                JH = ym;
                                                                WB = XB
                                                            }
                                                        }
                                                        Ti(e, t, lm, XB, o, u, a);
                                                        _s(lm);
                                                        KH = 0
                                                    } else {
                                                        KH = 0
                                                    }
                                                    while (1) {
                                                        bm = Ut + KH | 0;
                                                        wm = r[bm >> 0] | 0;
                                                        Em = wm << 24 >> 24 == 2;
                                                        if (Em) {
                                                            r[bm >> 0] = 1
                                                        }
                                                        Sm = KH + 1 | 0;
                                                        RP = (Sm | 0) == (i | 0);
                                                        if (RP) {
                                                            rH = nH;
                                                            zH = UH;
                                                            VH = XH;
                                                            RB = 0;
                                                            break e
                                                        } else {
                                                            KH = Sm
                                                        }
                                                    }
                                                }
                                            }
                                        } while (0);
                                        xm = qB + 1 | 0;
                                        Tm = (qB | 0) < (yE | 0);
                                        qH = Tm ? UH : i;
                                        WH = Tm ? XH : i;
                                        ZP = Tm ? nH : i;
                                        rH = ZP;
                                        zH = qH;
                                        VH = WH;
                                        RB = xm
                                    } else {
                                        rH = nH;
                                        zH = UH;
                                        VH = XH;
                                        RB = qB
                                    }
                                } while (0);
                                Nm = VH + 1 | 0;
                                Cm = Ut + zH | 0;
                                km = r[Cm >> 0] | 0;
                                Am = km << 24 >> 24 == 0;
                                Om = (Nm | 0) < (i | 0);
                                cj = Am & Om;
                                if (cj) {
                                    yv = Cm;
                                    nH = rH;
                                    UH = zH;
                                    XH = Nm;
                                    qB = RB
                                } else {
                                    eH = rH;
                                    RH = zH;
                                    IB = RB;
                                    break
                                }
                            }
                        } else {
                            eH = YP;
                            RH = IH;
                            IB = FB
                        }
                        BH = RH + 1 | 0;
                        dD = Ut + eH | 0;
                        ND = r[dD >> 0] | 0;
                        Xt = ND << 24 >> 24 == 0;
                        nn = (BH | 0) < (i | 0);
                        rj = Xt & nn;
                        if (rj) {
                            YP = eH;
                            jH = RH;
                            IH = BH;
                            FB = IB
                        } else {
                            QP = eH;
                            jB = IB;
                            break
                        }
                    }
                } else {
                    QP = JP;
                    jB = BB
                }
                Mm = QP + 1 | 0;
                _m = (Mm | 0) < (i | 0);
                if (_m) {
                    JP = Mm;
                    BB = jB
                } else {
                    break
                }
            }
            _s(Ut);
            c = cF;
            return
        }

        function Ni(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            x = c;
            o = (e + (t * 12 | 0) | 0) + 2832 | 0;
            u = (e + (t * 12 | 0) | 0) + 2836 | 0;
            d = s[u >> 2] | 0;
            v = (e + (t * 12 | 0) | 0) + 2840 | 0;
            m = s[v >> 2] | 0;
            g = (d | 0) < (m | 0);
            if (g) {
                i = s[o >> 2] | 0;
                l = d;
                p = i
            } else {
                y = m << 1;
                b = s[o >> 2] | 0;
                w = y | 1;
                s[v >> 2] = w;
                E = w * 20 | 0;
                a = Ps(b, E) | 0;
                s[o >> 2] = a;
                r = s[u >> 2] | 0;
                l = r;
                p = a
            }
            f = l + 1 | 0;
            s[u >> 2] = f;
            h = p + (l * 20 | 0) | 0;
            s[h + 0 >> 2] = s[n + 0 >> 2] | 0;
            s[h + 4 >> 2] = s[n + 4 >> 2] | 0;
            s[h + 8 >> 2] = s[n + 8 >> 2] | 0;
            s[h + 12 >> 2] = s[n + 12 >> 2] | 0;
            s[h + 16 >> 2] = s[n + 16 >> 2] | 0;
            c = x;
            return 0
        }

        function Ci(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0;
            var k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0;
            var $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0;
            var pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0;
            var Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Zt = 0;
            var en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0;
            var En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0;
            var Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0;
            var ur = 0,
                ar = 0,
                fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0,
                Tr = 0,
                Nr = 0,
                Cr = 0;
            var kr = 0,
                Lr = 0,
                Ar = 0,
                Or = 0,
                Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0,
                Wr = 0,
                Xr = 0,
                Vr = 0;
            var $r = 0,
                Jr = 0,
                Kr = 0,
                Qr = 0,
                Gr = 0,
                Yr = 0,
                Zr = 0,
                ei = 0,
                ti = 0,
                ni = 0,
                ri = 0,
                ii = 0,
                si = 0,
                oi = 0,
                ui = 0,
                ai = 0,
                fi = 0,
                li = 0,
                ci = 0,
                hi = 0;
            var pi = 0,
                di = 0,
                vi = 0,
                mi = 0,
                gi = 0,
                yi = 0,
                bi = 0,
                wi = 0,
                Ei = 0,
                Si = 0,
                xi = 0,
                Ni = 0,
                Ci = 0,
                Li = 0,
                Ai = 0,
                Oi = 0,
                Mi = 0,
                _i = 0,
                Di = 0,
                Pi = 0;
            var Hi = 0,
                Bi = 0,
                ji = 0,
                Fi = 0,
                Ii = 0,
                qi = 0,
                Ri = 0,
                Ui = 0,
                zi = 0,
                Wi = 0,
                Xi = 0,
                $i = 0,
                Ji = 0,
                Ki = 0,
                Qi = 0,
                Gi = 0,
                Yi = 0,
                Zi = 0,
                es = 0,
                ts = 0;
            var ns = 0,
                rs = 0,
                is = 0,
                ss = 0,
                os = 0,
                us = 0,
                as = 0,
                fs = 0,
                ls = 0,
                cs = 0,
                hs = 0,
                ps = 0,
                ds = 0,
                vs = 0,
                gs = 0,
                ys = 0,
                bs = 0,
                ws = 0,
                Es = 0,
                Ss = 0;
            var xs = 0,
                Ts = 0,
                Cs = 0,
                ks = 0,
                Ls = 0,
                As = 0,
                Os = 0,
                Ps = 0,
                Hs = 0,
                Bs = 0,
                js = 0,
                Fs = 0,
                Is = 0,
                qs = 0,
                Rs = 0,
                Us = 0,
                zs = 0,
                Ws = 0,
                Xs = 0,
                Vs = 0;
            var $s = 0,
                Js = 0,
                Ks = 0,
                Qs = 0,
                Gs = 0,
                Ys = 0,
                Zs = 0,
                eo = 0,
                to = 0,
                no = 0,
                ro = 0,
                io = 0,
                so = 0,
                oo = 0,
                uo = 0,
                ao = 0,
                fo = 0,
                lo = 0,
                co = 0,
                ho = 0;
            var po = 0,
                vo = 0,
                mo = 0,
                go = 0,
                yo = 0,
                bo = 0,
                wo = 0,
                Eo = 0,
                So = 0,
                xo = 0,
                To = 0,
                No = 0,
                Co = 0,
                ko = 0,
                Lo = 0,
                Ao = 0,
                Oo = 0,
                Mo = 0,
                _o = 0,
                Do = 0;
            var Po = 0,
                Ho = 0,
                Bo = 0,
                jo = 0,
                Fo = 0,
                Io = 0,
                qo = 0,
                Ro = 0,
                Uo = 0,
                zo = 0,
                Wo = 0,
                Xo = 0,
                Vo = 0,
                $o = 0,
                Jo = 0,
                Ko = 0,
                Qo = 0,
                Go = 0,
                Yo = 0,
                Zo = 0;
            Zo = c;
            c = c + 32 | 0;
            Ro = Zo;
            qo = Zo + 16 | 0;
            N = e + 2836 | 0;
            C = s[N >> 2] | 0;
            Mn = (C | 0) < 9;
            if (Mn) {
                i = 0;
                c = Zo;
                return i | 0
            }
            Ni = e + 2848 | 0;
            ji = s[Ni >> 2] | 0;
            Ki = (ji | 0) < 9;
            if (Ki) {
                i = 0;
                c = Zo;
                return i | 0
            }
            os = e + 2832 | 0;
            ys = s[os >> 2] | 0;
            Os = e + 2844 | 0;
            Ws = s[Os >> 2] | 0;
            k = C << 2;
            F = Ms(k) | 0;
            K = C >>> 1;
            ot = K << 3;
            gt = Ms(ot) | 0;
            Lt = ki(gt, F, ys, C, 0) | 0;
            Ns(Ws, ji, 20, 3);
            It = ji << 2;
            Qt = Ms(It) | 0;
            fn = ji >>> 1;
            wn = fn << 3;
            _n = Ms(wn) | 0;
            zn = ki(_n, Qt, Ws, ji, 1) | 0;
            er = (Lt | 0) > 2;
            cr = (zn | 0) > 2;
            Io = er & cr;
            if (Io) {
                Sr = (Lt | 0) > 0;
                if (Sr) {
                    lo = 0;
                    Oo = 0;
                    while (1) {
                        Wr = (gt + (lo << 3) | 0) + 4 | 0;
                        ti = s[Wr >> 2] | 0;
                        hi = ti + Oo | 0;
                        xi = lo + 1 | 0;
                        so = (xi | 0) == (Lt | 0);
                        if (so) {
                            Ao = hi;
                            break
                        } else {
                            lo = xi;
                            Oo = hi
                        }
                    }
                } else {
                    Ao = 0
                }
                Dr = (zn | 0) > 0;
                if (Dr) {
                    mo = 0;
                    _o = Ao;
                    while (1) {
                        Ci = (_n + (mo << 3) | 0) + 4 | 0;
                        Li = s[Ci >> 2] | 0;
                        Ai = Li + _o | 0;
                        Oi = mo + 1 | 0;
                        to = (Oi | 0) == (zn | 0);
                        if (to) {
                            Mo = Ai;
                            break
                        } else {
                            mo = Oi;
                            _o = Ai
                        }
                    }
                } else {
                    Mo = Ao
                }
                Mi = Mo << 5;
                _i = Ms(Mi) | 0;
                Di = (zn | 0) < (Lt | 0);
                Pi = Di ? zn : Lt;
                Hi = Pi << 4;
                Bi = Ms(Hi) | 0;
                Fi = Lt << 2;
                Ii = Ms(Fi) | 0;
                qi = zn << 2;
                Ri = Ms(qi) | 0;
                Ui = Ds(Lt, 1) | 0;
                zi = Ds(zn, 1) | 0;
                if (Sr) {
                    a = _i;
                    vo = 0;
                    ko = 0;
                    while (1) {
                        Wi = Ui + vo | 0;
                        Xi = r[Wi >> 0] | 0;
                        $i = Xi << 24 >> 24 == 0;
                        if ($i) {
                            Ji = gt + (vo << 3) | 0;
                            Qi = (gt + (vo << 3) | 0) + 4 | 0;
                            Gi = s[Qi >> 2] | 0;
                            Yi = Gi >> 1;
                            Zi = s[Ji >> 2] | 0;
                            es = Zi + (Yi << 2) | 0;
                            ts = s[es >> 2] | 0;
                            if (Dr) {
                                ns = ts + 8 | 0;
                                rs = ts + 4 | 0;
                                bo = 0;
                                jo = 0;
                                Ko = 0;
                                while (1) {
                                    is = zi + bo | 0;
                                    ss = r[is >> 0] | 0;
                                    us = ss << 24 >> 24 == 0;
                                    if (us) {
                                        as = _n + (bo << 3) | 0;
                                        fs = (_n + (bo << 3) | 0) + 4 | 0;
                                        ls = s[fs >> 2] | 0;
                                        cs = ls >> 1;
                                        hs = s[as >> 2] | 0;
                                        ps = hs + (cs << 2) | 0;
                                        ds = s[ps >> 2] | 0;
                                        vs = s[ts >> 2] | 0;
                                        gs = s[ds >> 2] | 0;
                                        bs = (vs | 0) > (gs | 0);
                                        if (bs) {
                                            Fo = jo;
                                            Go = Ko
                                        } else {
                                            ws = s[ns >> 2] | 0;
                                            Es = ws + vs | 0;
                                            Ss = (gs | 0) < (Es | 0);
                                            if (Ss) {
                                                xs = ds + 4 | 0;
                                                Ts = s[xs >> 2] | 0;
                                                Cs = s[rs >> 2] | 0;
                                                ks = (Ts | 0) > (Cs | 0);
                                                if (ks) {
                                                    Fo = jo;
                                                    Go = Ko
                                                } else {
                                                    Ls = ds + 8 | 0;
                                                    As = s[Ls >> 2] | 0;
                                                    Ps = As + Ts | 0;
                                                    Hs = (Cs | 0) < (Ps | 0);
                                                    if (Hs) {
                                                        r[is >> 0] = 1;
                                                        Bs = Ts << 1;
                                                        js = Bs + Ko | 0;
                                                        Fs = js + As | 0;
                                                        Is = ds + 12 | 0;
                                                        qs = s[Is >> 2] | 0;
                                                        Rs = (qs | 0) > 0;
                                                        do {
                                                            if (Rs) {
                                                                Us = ds + 16 | 0;
                                                                zs = s[Us >> 2] | 0;
                                                                Xs = (zs | 0) > 0;
                                                                if (!Xs) {
                                                                    Qo = Fs;
                                                                    break
                                                                }
                                                                Vs = Fs - qs | 0;
                                                                $s = Vs + zs | 0;
                                                                Qo = $s
                                                            } else {
                                                                Qo = Fs
                                                            }
                                                        } while (0);
                                                        Js = jo + 1 | 0;
                                                        Ks = Ri + (jo << 2) | 0;
                                                        s[Ks >> 2] = as;
                                                        Fo = Js;
                                                        Go = Qo
                                                    } else {
                                                        Fo = jo;
                                                        Go = Ko
                                                    }
                                                }
                                            } else {
                                                Fo = jo;
                                                Go = Ko
                                            }
                                        }
                                    } else {
                                        Fo = jo;
                                        Go = Ko
                                    }
                                    Qs = bo + 1 | 0;
                                    no = (Qs | 0) == (zn | 0);
                                    if (no) {
                                        break
                                    } else {
                                        bo = Qs;
                                        jo = Fo;
                                        Ko = Go
                                    }
                                }
                                Gs = (Fo | 0) > 0;
                                if (Gs) {
                                    Ys = s[ts >> 2] | 0;
                                    Zs = Ys << 1;
                                    eo = s[ns >> 2] | 0;
                                    L = Zs + eo | 0;
                                    A = ts + 12 | 0;
                                    O = s[A >> 2] | 0;
                                    M = (O | 0) > 0;
                                    if (M) {
                                        _ = ts + 16 | 0;
                                        D = s[_ >> 2] | 0;
                                        P = (D | 0) > 0;
                                        if (P) {
                                            H = L - O | 0;
                                            B = H + D | 0;
                                            Xo = B
                                        } else {
                                            Xo = L
                                        }
                                    } else {
                                        Xo = L
                                    }
                                    s[Ii >> 2] = Ji;
                                    j = Fo >> 1;
                                    I = Ri + (j << 2) | 0;
                                    q = s[I >> 2] | 0;
                                    R = q + 4 | 0;
                                    U = s[R >> 2] | 0;
                                    z = U >> 1;
                                    W = s[q >> 2] | 0;
                                    X = W + (z << 2) | 0;
                                    V = s[X >> 2] | 0;
                                    So = vo + 1 | 0;
                                    $ = (So | 0) < (Lt | 0);
                                    e: do {
                                        if ($) {
                                            J = V + 4 | 0;
                                            Q = V + 8 | 0;
                                            xo = So;
                                            Po = 1;
                                            $o = Xo;
                                            while (1) {
                                                To = xo;
                                                t: while (1) {
                                                    G = Ui + To | 0;
                                                    Y = r[G >> 0] | 0;
                                                    Z = Y << 24 >> 24 == 0;
                                                    do {
                                                        if (Z) {
                                                            tt = gt + (To << 3) | 0;
                                                            nt = (gt + (To << 3) | 0) + 4 | 0;
                                                            rt = s[nt >> 2] | 0;
                                                            it = rt >> 1;
                                                            st = s[tt >> 2] | 0;
                                                            ut = st + (it << 2) | 0;
                                                            at = s[ut >> 2] | 0;
                                                            ft = s[at >> 2] | 0;
                                                            lt = s[V >> 2] | 0;
                                                            ct = (ft | 0) > (lt | 0);
                                                            if (ct) {
                                                                break
                                                            }
                                                            ht = at + 8 | 0;
                                                            pt = s[ht >> 2] | 0;
                                                            dt = pt + ft | 0;
                                                            vt = (lt | 0) < (dt | 0);
                                                            if (!vt) {
                                                                break
                                                            }
                                                            mt = s[J >> 2] | 0;
                                                            yt = at + 4 | 0;
                                                            bt = s[yt >> 2] | 0;
                                                            wt = (mt | 0) > (bt | 0);
                                                            if (wt) {
                                                                break
                                                            }
                                                            Et = s[Q >> 2] | 0;
                                                            St = Et + mt | 0;
                                                            xt = (bt | 0) < (St | 0);
                                                            if (xt) {
                                                                break t
                                                            }
                                                        }
                                                    } while (0);
                                                    wo = To + 1 | 0;
                                                    et = (wo | 0) < (Lt | 0);
                                                    if (et) {
                                                        To = wo
                                                    } else {
                                                        Do = Po;
                                                        Vo = $o;
                                                        break e
                                                    }
                                                }
                                                r[G >> 0] = 1;
                                                Tt = ft << 1;
                                                Nt = Tt + $o | 0;
                                                Ct = Nt + pt | 0;
                                                kt = at + 12 | 0;
                                                At = s[kt >> 2] | 0;
                                                Ot = (At | 0) > 0;
                                                if (Ot) {
                                                    Mt = at + 16 | 0;
                                                    _t = s[Mt >> 2] | 0;
                                                    Dt = (_t | 0) > 0;
                                                    if (Dt) {
                                                        Pt = Ct - At | 0;
                                                        Ht = Pt + _t | 0;
                                                        Jo = Ht
                                                    } else {
                                                        Jo = Ct
                                                    }
                                                } else {
                                                    Jo = Ct
                                                }
                                                Bt = Po + 1 | 0;
                                                jt = Ii + (Po << 2) | 0;
                                                s[jt >> 2] = tt;
                                                Eo = To + 1 | 0;
                                                Ft = (Eo | 0) < (Lt | 0);
                                                if (Ft) {
                                                    xo = Eo;
                                                    Po = Bt;
                                                    $o = Jo
                                                } else {
                                                    Do = Bt;
                                                    Vo = Jo;
                                                    break
                                                }
                                            }
                                        } else {
                                            Do = 1;
                                            Vo = Xo
                                        }
                                    } while (0);
                                    qt = ko + 1 | 0;
                                    Rt = Do + Vo | 0;
                                    Ut = Do << 1;
                                    zt = (Rt | 0) / (Ut | 0) & -1;
                                    Wt = Bi + (ko << 4) | 0;
                                    s[Wt >> 2] = zt;
                                    Xt = Go + Fo | 0;
                                    Vt = Fo << 1;
                                    $t = (Xt | 0) / (Vt | 0) & -1;
                                    Jt = (Bi + (ko << 4) | 0) + 4 | 0;
                                    s[Jt >> 2] = $t;
                                    Kt = (Bi + (ko << 4) | 0) + 8 | 0;
                                    s[Kt >> 2] = a;
                                    Gt = (Do | 0) > 0;
                                    if (Gt) {
                                        u = 0;
                                        ho = 0;
                                        while (1) {
                                            Zt = Ii + (ho << 2) | 0;
                                            en = s[Zt >> 2] | 0;
                                            tn = en + 4 | 0;
                                            nn = s[tn >> 2] | 0;
                                            rn = (nn | 0) > 0;
                                            if (rn) {
                                                sn = s[en >> 2] | 0;
                                                d = u;
                                                yo = 0;
                                                while (1) {
                                                    on = sn + (yo << 2) | 0;
                                                    un = s[on >> 2] | 0;
                                                    an = un + 12 | 0;
                                                    ln = s[an >> 2] | 0;
                                                    cn = (ln | 0) > 0;
                                                    if (cn) {
                                                        hn = s[un >> 2] | 0;
                                                        pn = a + (d << 4) | 0;
                                                        s[pn >> 2] = hn;
                                                        dn = un + 4 | 0;
                                                        vn = s[dn >> 2] | 0;
                                                        mn = (a + (d << 4) | 0) + 4 | 0;
                                                        s[mn >> 2] = vn;
                                                        gn = hn - ln | 0;
                                                        s[pn >> 2] = gn;
                                                        yn = d + 1 | 0;
                                                        m = yn
                                                    } else {
                                                        m = d
                                                    }
                                                    bn = un + 16 | 0;
                                                    En = s[bn >> 2] | 0;
                                                    Sn = (En | 0) > 0;
                                                    if (Sn) {
                                                        xn = s[un >> 2] | 0;
                                                        Tn = a + (m << 4) | 0;
                                                        s[Tn >> 2] = xn;
                                                        Nn = un + 4 | 0;
                                                        Cn = s[Nn >> 2] | 0;
                                                        kn = (a + (m << 4) | 0) + 4 | 0;
                                                        s[kn >> 2] = Cn;
                                                        Ln = un + 8 | 0;
                                                        An = s[Ln >> 2] | 0;
                                                        On = xn + En | 0;
                                                        Dn = On + An | 0;
                                                        s[Tn >> 2] = Dn;
                                                        Pn = m + 1 | 0;
                                                        b = Pn
                                                    } else {
                                                        b = m
                                                    }
                                                    Hn = yo + 1 | 0;
                                                    oo = (Hn | 0) == (nn | 0);
                                                    if (oo) {
                                                        h = b;
                                                        break
                                                    } else {
                                                        d = b;
                                                        yo = Hn
                                                    }
                                                }
                                            } else {
                                                h = u
                                            }
                                            Bn = ho + 1 | 0;
                                            io = (Bn | 0) == (Do | 0);
                                            if (io) {
                                                o = h;
                                                co = 0;
                                                break
                                            } else {
                                                u = h;
                                                ho = Bn
                                            }
                                        }
                                    } else {
                                        o = 0;
                                        co = 0
                                    }
                                    while (1) {
                                        jn = Ri + (co << 2) | 0;
                                        Fn = s[jn >> 2] | 0;
                                        In = Fn + 4 | 0;
                                        qn = s[In >> 2] | 0;
                                        Rn = (qn | 0) > 0;
                                        if (Rn) {
                                            Un = s[Fn >> 2] | 0;
                                            p = o;
                                            go = 0;
                                            while (1) {
                                                Wn = Un + (go << 2) | 0;
                                                Xn = s[Wn >> 2] | 0;
                                                Vn = Xn + 12 | 0;
                                                $n = s[Vn >> 2] | 0;
                                                Jn = ($n | 0) > 0;
                                                if (Jn) {
                                                    Kn = s[Xn >> 2] | 0;
                                                    Qn = a + (p << 4) | 0;
                                                    s[Qn >> 2] = Kn;
                                                    Gn = Xn + 4 | 0;
                                                    Yn = s[Gn >> 2] | 0;
                                                    Zn = (a + (p << 4) | 0) + 4 | 0;
                                                    tr = Yn - $n | 0;
                                                    s[Zn >> 2] = tr;
                                                    nr = p + 1 | 0;
                                                    v = nr
                                                } else {
                                                    v = p
                                                }
                                                rr = Xn + 16 | 0;
                                                ir = s[rr >> 2] | 0;
                                                sr = (ir | 0) > 0;
                                                if (sr) {
                                                    or = s[Xn >> 2] | 0;
                                                    ur = a + (v << 4) | 0;
                                                    s[ur >> 2] = or;
                                                    ar = Xn + 4 | 0;
                                                    fr = s[ar >> 2] | 0;
                                                    lr = (a + (v << 4) | 0) + 4 | 0;
                                                    s[lr >> 2] = fr;
                                                    hr = Xn + 8 | 0;
                                                    pr = s[hr >> 2] | 0;
                                                    dr = fr + ir | 0;
                                                    vr = dr + pr | 0;
                                                    s[lr >> 2] = vr;
                                                    mr = v + 1 | 0;
                                                    y = mr
                                                } else {
                                                    y = v
                                                }
                                                gr = go + 1 | 0;
                                                uo = (gr | 0) == (qn | 0);
                                                if (uo) {
                                                    l = y;
                                                    break
                                                } else {
                                                    p = y;
                                                    go = gr
                                                }
                                            }
                                        } else {
                                            l = o
                                        }
                                        yr = co + 1 | 0;
                                        ro = (yr | 0) == (Fo | 0);
                                        if (ro) {
                                            break
                                        } else {
                                            o = l;
                                            co = yr
                                        }
                                    }
                                    br = (Bi + (ko << 4) | 0) + 12 | 0;
                                    s[br >> 2] = l;
                                    wr = a + (l << 4) | 0;
                                    f = wr;
                                    Lo = qt
                                } else {
                                    f = a;
                                    Lo = ko
                                }
                            } else {
                                f = a;
                                Lo = ko
                            }
                        } else {
                            f = a;
                            Lo = ko
                        }
                        Er = vo + 1 | 0;
                        ao = (Er | 0) == (Lt | 0);
                        if (ao) {
                            Co = Lo;
                            break
                        } else {
                            a = f;
                            vo = Er;
                            ko = Lo
                        }
                    }
                } else {
                    Co = 0
                }
                _s(zi);
                _s(Ui);
                _s(Ri);
                _s(Ii);
                Ns(Bi, Co, 16, 4);
                Rr = Bi;
                bi = _i;
                No = Co
            } else {
                Rr = 0;
                bi = 0;
                No = 0
            }
            _s(_n);
            _s(Qt);
            _s(gt);
            _s(F);
            xr = s[80 >> 2] | 0;
            Tr = (xr | 0) > 13;
            if (Tr) {
                Nr = s[g >> 2] | 0;
                Cr = s[N >> 2] | 0;
                kr = s[Ni >> 2] | 0;
                s[Ro >> 2] = 7280;
                Uo = Ro + 4 | 0;
                s[Uo >> 2] = Cr;
                zo = Ro + 8 | 0;
                s[zo >> 2] = kr;
                Wo = Ro + 12 | 0;
                s[Wo >> 2] = No;
                Yt(Nr | 0, 7248 | 0, Ro | 0) | 0
            }
            Lr = (No | 0) > 2;
            if (Lr) {
                Ar = n + 12 | 0;
                Or = s[Ar >> 2] | 0;
                Mr = n + 4 | 0;
                _r = s[Mr >> 2] | 0;
                Pr = n + 8 | 0;
                Hr = s[Pr >> 2] | 0;
                Br = ms(Or, _r, Hr) | 0;
                s[qo >> 2] = 0;
                jr = qo + 8 | 0;
                s[jr >> 2] = 0;
                Fr = qo + 4 | 0;
                s[Fr >> 2] = 0;
                Ir = s[Mr >> 2] | 0;
                qr = s[Pr >> 2] | 0;
                Ti(e, qo, Rr, No, Br, Ir, qr);
                Ur = s[Fr >> 2] | 0;
                zr = (Ur | 0) > 0;
                if (zr) {
                    Vr = Vi(qo, t, n) | 0;
                    S = s[Fr >> 2] | 0;
                    $r = (S | 0) > 0;
                    Jr = s[qo >> 2] | 0;
                    if ($r) {
                        Qr = Jr;
                        po = 0;
                        while (1) {
                            Kr = (Qr + (po * 48 | 0) | 0) + 4 | 0;
                            Gr = s[Kr >> 2] | 0;
                            Yr = (Gr | 0) > 0;
                            Zr = Qr + (po * 48 | 0) | 0;
                            ei = s[Zr >> 2] | 0;
                            if (Yr) {
                                ri = ei;
                                Ei = Gr;
                                fo = 0;
                                while (1) {
                                    ni = ri + (fo * 12 | 0) | 0;
                                    ii = s[ni >> 2] | 0;
                                    si = ii + -1 | 0;
                                    oi = si & ii;
                                    ui = (oi | 0) == 0;
                                    if (ui) {
                                        ai = (ri + (fo * 12 | 0) | 0) + 4 | 0;
                                        fi = s[ai >> 2] | 0;
                                        _s(fi);
                                        x = s[Kr >> 2] | 0;
                                        T = s[Zr >> 2] | 0;
                                        pi = x;
                                        Si = T
                                    } else {
                                        pi = Ei;
                                        Si = ri
                                    }
                                    li = fo + 1 | 0;
                                    ci = (li | 0) < (pi | 0);
                                    if (ci) {
                                        ri = Si;
                                        Ei = pi;
                                        fo = li
                                    } else {
                                        w = Si;
                                        break
                                    }
                                }
                            } else {
                                w = ei
                            }
                            _s(w);
                            di = po + 1 | 0;
                            vi = s[Fr >> 2] | 0;
                            mi = (di | 0) < (vi | 0);
                            gi = s[qo >> 2] | 0;
                            if (mi) {
                                Qr = gi;
                                po = di
                            } else {
                                E = gi;
                                Ho = Vr;
                                break
                            }
                        }
                    } else {
                        E = Jr;
                        Ho = Vr
                    }
                } else {
                    Xr = s[qo >> 2] | 0;
                    E = Xr;
                    Ho = 0
                }
                _s(E);
                s[qo >> 2] = 0;
                s[jr >> 2] = 0;
                s[Fr >> 2] = 0;
                _s(Br);
                Bo = Ho
            } else {
                Bo = 0
            }
            yi = (Rr | 0) == (0 | 0);
            if (!yi) {
                _s(Rr)
            }
            wi = (bi | 0) == (0 | 0);
            if (wi) {
                i = Bo;
                c = Zo;
                return i | 0
            }
            _s(bi);
            i = Bo;
            c = Zo;
            return i | 0
        }

        function ki(e, t, n, i, o) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            i = i | 0;
            o = o | 0;
            var u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0;
            var L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0;
            var J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0;
            var dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0;
            var Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0;
            var en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0;
            var En = 0;
            En = c;
            f = Ds(i, 1) | 0;
            l = i + -1 | 0;
            S = (l | 0) > 0;
            if (!S) {
                an = 0;
                _s(f);
                c = En;
                return an | 0
            }
            D = n;
            W = 1 - o | 0;
            $t = 0;
            fn = 0;
            mn = t;
            while (1) {
                tt = f + $t | 0;
                ht = r[tt >> 0] | 0;
                xt = ht << 24 >> 24 == 0;
                if (xt) {
                    Pt = n + ($t * 20 | 0) | 0;
                    s[mn >> 2] = Pt;
                    Wt = (n + ($t * 20 | 0) | 0) + 8 | 0;
                    h = s[Wt >> 2] | 0;
                    tn = $t + 1 | 0;
                    p = (tn | 0) < (i | 0);
                    if (p) {
                        w = Pt;
                        nn = tn;
                        un = h;
                        bn = 1;
                        e: while (1) {
                            rn = nn;
                            t: while (1) {
                                d = f + rn | 0;
                                v = r[d >> 0] | 0;
                                m = v << 24 >> 24 == 0;
                                do {
                                    if (m) {
                                        y = n + (rn * 20 | 0) | 0;
                                        b = w + 8 | 0;
                                        E = s[b >> 2] | 0;
                                        x = E + 7 | 0;
                                        T = x >> 2;
                                        N = w + (W << 2) | 0;
                                        C = s[N >> 2] | 0;
                                        k = (n + (rn * 20 | 0) | 0) + (W << 2) | 0;
                                        L = s[k >> 2] | 0;
                                        A = C - L | 0;
                                        Jt = (A | 0) > -1;
                                        cn = 0 - A | 0;
                                        O = Jt ? A : cn;
                                        M = (O | 0) > (T | 0);
                                        if (M) {
                                            on = un;
                                            yn = bn;
                                            break e
                                        }
                                        _ = w + (o << 2) | 0;
                                        P = s[_ >> 2] | 0;
                                        H = (n + (rn * 20 | 0) | 0) + (o << 2) | 0;
                                        B = s[H >> 2] | 0;
                                        j = P - B | 0;
                                        Kt = (j | 0) > -1;
                                        hn = 0 - j | 0;
                                        F = Kt ? j : hn;
                                        I = (F | 0) > (T | 0);
                                        if (!I) {
                                            q = P + E | 0;
                                            R = q - B | 0;
                                            U = (n + (rn * 20 | 0) | 0) + 8 | 0;
                                            z = s[U >> 2] | 0;
                                            X = R - z | 0;
                                            Qt = (X | 0) > -1;
                                            pn = 0 - X | 0;
                                            V = Qt ? X : pn;
                                            $ = (V | 0) > (T | 0);
                                            if (!$) {
                                                J = w + 12 | 0;
                                                K = s[J >> 2] | 0;
                                                Q = (K | 0) > 0;
                                                if (Q) {
                                                    G = (n + (rn * 20 | 0) | 0) + 12 | 0;
                                                    Y = s[G >> 2] | 0;
                                                    Z = (Y | 0) > 0;
                                                    if (Z) {
                                                        et = j - K | 0;
                                                        nt = et + Y | 0;
                                                        Yt = (nt | 0) > -1;
                                                        vn = 0 - nt | 0;
                                                        rt = Yt ? nt : vn;
                                                        it = (rt | 0) > (T | 0);
                                                        if (it) {
                                                            break
                                                        }
                                                    }
                                                }
                                                st = w + 16 | 0;
                                                ot = s[st >> 2] | 0;
                                                ut = (ot | 0) > 0;
                                                if (!ut) {
                                                    break t
                                                }
                                                at = (n + (rn * 20 | 0) | 0) + 16 | 0;
                                                ft = s[at >> 2] | 0;
                                                lt = (ft | 0) > 0;
                                                if (!lt) {
                                                    break t
                                                }
                                                ct = ot - ft | 0;
                                                pt = ct + P | 0;
                                                dt = pt + E | 0;
                                                vt = dt - B | 0;
                                                mt = vt - z | 0;
                                                Gt = (mt | 0) > -1;
                                                dn = 0 - mt | 0;
                                                gt = Gt ? mt : dn;
                                                yt = (gt | 0) > (T | 0);
                                                if (!yt) {
                                                    break t
                                                }
                                            }
                                        }
                                    }
                                } while (0);
                                Zt = rn + 1 | 0;
                                g = (Zt | 0) < (i | 0);
                                if (g) {
                                    rn = Zt
                                } else {
                                    on = un;
                                    yn = bn;
                                    break e
                                }
                            }
                            bt = bn + 1 | 0;
                            wt = mn + (bn << 2) | 0;
                            s[wt >> 2] = y;
                            Et = z + un | 0;
                            en = rn + 1 | 0;
                            St = (en | 0) < (i | 0);
                            if (St) {
                                w = y;
                                nn = en;
                                un = Et;
                                bn = bt
                            } else {
                                on = Et;
                                yn = bt;
                                break
                            }
                        }
                        Tt = (yn | 0) < 3;
                        if (Tt) {
                            a = tn;
                            ln = fn;
                            gn = mn
                        } else {
                            Nt = on << 1;
                            Ct = yn + Nt | 0;
                            kt = yn << 1;
                            Lt = (Ct | 0) / (kt | 0) & -1;
                            At = yn * 20 | 0;
                            Ot = (At | 0) < (Lt | 0);
                            if (Ot) {
                                a = tn;
                                ln = fn;
                                gn = mn
                            } else {
                                Mt = e + (fn << 3) | 0;
                                s[Mt >> 2] = mn;
                                _t = (e + (fn << 3) | 0) + 4 | 0;
                                s[_t >> 2] = yn;
                                Dt = (yn | 0) > 0;
                                if (Dt) {
                                    sn = 0;
                                    while (1) {
                                        Ht = mn + (sn << 2) | 0;
                                        Bt = s[Ht >> 2] | 0;
                                        jt = Bt;
                                        Ft = jt - D | 0;
                                        It = (Ft | 0) / 20 & -1;
                                        qt = f + It | 0;
                                        r[qt >> 0] = 1;
                                        Rt = sn + 1 | 0;
                                        Xt = (Rt | 0) == (yn | 0);
                                        if (Xt) {
                                            break
                                        } else {
                                            sn = Rt
                                        }
                                    }
                                }
                                Ut = mn + (yn << 2) | 0;
                                zt = fn + 1 | 0;
                                a = tn;
                                ln = zt;
                                gn = Ut
                            }
                        }
                    } else {
                        a = tn;
                        ln = fn;
                        gn = mn
                    }
                } else {
                    u = $t + 1 | 0;
                    a = u;
                    ln = fn;
                    gn = mn
                }
                Vt = (a | 0) == (l | 0);
                if (Vt) {
                    an = ln;
                    break
                } else {
                    $t = a;
                    fn = ln;
                    mn = gn
                }
            }
            _s(f);
            c = En;
            return an | 0
        }

        function Li(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            x = c;
            n = s[e >> 2] | 0;
            r = s[t >> 2] | 0;
            d = (n | 0) > (r | 0);
            v = d & 1;
            m = (n | 0) < (r | 0);
            g = m & 1;
            y = v - g | 0;
            b = y << 1;
            w = e + 4 | 0;
            E = s[w >> 2] | 0;
            i = t + 4 | 0;
            o = s[i >> 2] | 0;
            u = (E | 0) > (o | 0);
            a = u & 1;
            f = b | a;
            l = (E | 0) < (o | 0);
            h = l & 1;
            p = f - h | 0;
            c = x;
            return p | 0
        }

        function Ai(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0;
            P = c;
            n = t + 12 | 0;
            r = s[n >> 2] | 0;
            m = e + 12 | 0;
            C = s[m >> 2] | 0;
            k = (r | 0) > (C | 0);
            L = k & 1;
            A = (r | 0) < (C | 0);
            O = A & 1;
            M = L - O | 0;
            _ = M << 2;
            i = e + 4 | 0;
            o = s[i >> 2] | 0;
            u = t + 4 | 0;
            a = s[u >> 2] | 0;
            f = (o | 0) > (a | 0);
            l = f & 1;
            h = (o | 0) < (a | 0);
            p = h & 1;
            d = l - p | 0;
            v = d << 1;
            g = v + _ | 0;
            y = s[e >> 2] | 0;
            b = s[t >> 2] | 0;
            w = (y | 0) > (b | 0);
            E = w & 1;
            S = g | E;
            x = (y | 0) < (b | 0);
            T = x & 1;
            N = S - T | 0;
            c = P;
            return N | 0
        }

        function Oi(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0;
            var W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0;
            var ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0;
            var Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0;
            Vt = c;
            c = c + 16 | 0;
            zt = Vt;
            v = e + 72 | 0;
            m = s[v >> 2] | 0;
            Wt = e + 32 | 0;
            s[Wt + 0 >> 2] = 0 | 0;
            s[Wt + 4 >> 2] = 0 | 0;
            s[Wt + 8 >> 2] = 0 | 0;
            s[Wt + 12 >> 2] = 0 | 0;
            k = m + 12 | 0;
            F = s[k >> 2] | 0;
            K = (F | 0) > 0;
            if (!K) {
                o = m + 8 | 0;
                l = s[o >> 2] | 0;
                n = F;
                xt = l;
                kt = 0;
                Ot = 0;
                Dt = 0;
                St = m + 8 | 0;
                Ns(xt, n, 16, 5);
                Tt = s[St >> 2] | 0;
                Nt = e + 16 | 0;
                s[Nt >> 2] = Tt;
                Ct = Tt + (kt << 4) | 0;
                Lt = e + 20 | 0;
                s[Lt >> 2] = Ct;
                p = kt + Ot | 0;
                Mt = Tt + (p << 4) | 0;
                _t = e + 24 | 0;
                s[_t >> 2] = Mt;
                d = p + Dt | 0;
                Pt = Tt + (d << 4) | 0;
                Ht = e + 28 | 0;
                s[Ht >> 2] = Pt;
                c = Vt;
                return
            }
            ut = m + 8 | 0;
            yt = s[ut >> 2] | 0;
            At = t + 16 | 0;
            Bt = s[At >> 2] | 0;
            jt = t + 32 | 0;
            g = s[jt >> 2] | 0;
            y = t + 20 | 0;
            b = s[y >> 2] | 0;
            w = t + 36 | 0;
            E = s[w >> 2] | 0;
            S = t + 44 | 0;
            x = s[S >> 2] | 0;
            T = 1 << x;
            N = T >> 1;
            C = t + 24 | 0;
            L = s[C >> 2] | 0;
            A = t + 28 | 0;
            O = s[A >> 2] | 0;
            M = zt + 4 | 0;
            _ = e + 64 | 0;
            D = e + 68 | 0;
            Ft = 0;
            while (1) {
                P = yt + (Ft << 4) | 0;
                H = s[P >> 2] | 0;
                B = (yt + (Ft << 4) | 0) + 4 | 0;
                j = s[B >> 2] | 0;
                I = H - g | 0;
                q = rt(I, Bt) | 0;
                R = j - E | 0;
                U = rt(R, b) | 0;
                z = U + q | 0;
                W = z + N | 0;
                X = W >> x;
                V = rt(L, I) | 0;
                $ = rt(O, R) | 0;
                J = N + V | 0;
                Q = J + $ | 0;
                G = Q >> x;
                Y = s[_ >> 2] | 0;
                Z = s[D >> 2] | 0;
                et = X - Y | 0;
                s[zt >> 2] = et;
                tt = G - Z | 0;
                s[M >> 2] = tt;
                It = (tt | 0) > -1;
                Rt = 0 - tt | 0;
                nt = It ? tt : Rt;
                qt = (et | 0) > -1;
                Ut = 0 - et | 0;
                it = qt ? et : Ut;
                st = (nt | 0) > (it | 0);
                ot = st & 1;
                at = ot << 1;
                ft = zt + (ot << 2) | 0;
                lt = s[ft >> 2] | 0;
                r = lt >>> 31;
                ct = at | r;
                ht = ct ^ 1;
                pt = (e + (ht << 2) | 0) + 32 | 0;
                dt = s[pt >> 2] | 0;
                vt = dt + 1 | 0;
                s[pt >> 2] = vt;
                mt = (yt + (Ft << 4) | 0) + 8 | 0;
                s[mt >> 2] = ht;
                gt = (yt + (Ft << 4) | 0) + 12 | 0;
                s[gt >> 2] = lt;
                bt = Ft + 1 | 0;
                wt = s[k >> 2] | 0;
                Et = (bt | 0) < (wt | 0);
                if (Et) {
                    Ft = bt
                } else {
                    break
                }
            }
            a = s[Wt >> 2] | 0;
            i = e + 36 | 0;
            h = s[i >> 2] | 0;
            u = e + 40 | 0;
            f = s[u >> 2] | 0;
            n = wt;
            xt = yt;
            kt = a;
            Ot = h;
            Dt = f;
            St = m + 8 | 0;
            Ns(xt, n, 16, 5);
            Tt = s[St >> 2] | 0;
            Nt = e + 16 | 0;
            s[Nt >> 2] = Tt;
            Ct = Tt + (kt << 4) | 0;
            Lt = e + 20 | 0;
            s[Lt >> 2] = Ct;
            p = kt + Ot | 0;
            Mt = Tt + (p << 4) | 0;
            _t = e + 24 | 0;
            s[_t >> 2] = Mt;
            d = p + Dt | 0;
            Pt = Tt + (d << 4) | 0;
            Ht = e + 28 | 0;
            s[Ht >> 2] = Pt;
            c = Vt;
            return
        }

        function Mi(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0;
            var N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0;
            var X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0;
            var ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0;
            var _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0;
            var Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0;
            var bn = 0,
                wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0;
            var In = 0,
                qn = 0;
            qn = c;
            c = c + 48 | 0;
            Hn = qn + 32 | 0;
            Fn = qn + 16 | 0;
            Pn = qn;
            u = Hn + 4 | 0;
            s[u >> 2] = 0;
            s[Hn >> 2] = 0;
            Ln = 0;
            while (1) {
                a = (e + (Ln << 2) | 0) + 32 | 0;
                V = s[a >> 2] | 0;
                it = (V | 0) > 0;
                if (it) {
                    vt = (e + (Ln << 2) | 0) + 16 | 0;
                    Ct = s[vt >> 2] | 0;
                    jt = V >> 2;
                    Jt = V - jt | 0;
                    on = (jt | 0) < (Jt | 0);
                    if (on) {
                        Mn = jt;
                        jn = 0;
                        while (1) {
                            gn = (Ct + (Mn << 4) | 0) + 12 | 0;
                            f = s[gn >> 2] | 0;
                            E = f + jn | 0;
                            _ = Mn + 1 | 0;
                            An = (_ | 0) == (Jt | 0);
                            if (An) {
                                Bn = E;
                                break
                            } else {
                                Mn = _;
                                jn = E
                            }
                        }
                    } else {
                        Bn = 0
                    }
                    I = jt << 1;
                    q = V - I | 0;
                    R = q >> 1;
                    U = Bn >> 31;
                    z = U + R | 0;
                    W = z ^ U;
                    X = W + Bn | 0;
                    $ = (X | 0) / (q | 0) & -1;
                    J = Ln >> 1;
                    K = Hn + (J << 2) | 0;
                    Q = s[K >> 2] | 0;
                    G = Q + $ | 0;
                    s[K >> 2] = G;
                    Y = Fn + (Ln << 2) | 0;
                    s[Y >> 2] = Bn;
                    Z = Pn + (Ln << 2) | 0;
                    s[Z >> 2] = q
                } else {
                    et = Fn + (Ln << 2) | 0;
                    s[et >> 2] = 0;
                    tt = Pn + (Ln << 2) | 0;
                    s[tt >> 2] = 0
                }
                nt = Ln + 1 | 0;
                On = (nt | 0) == 4;
                if (On) {
                    break
                } else {
                    Ln = nt
                }
            }
            st = e + 32 | 0;
            ot = s[st >> 2] | 0;
            ut = (ot | 0) > 0;
            if (ut) {
                at = e + 36 | 0;
                ft = s[at >> 2] | 0;
                lt = (ft | 0) > 0;
                if (lt) {
                    ct = s[Hn >> 2] | 0;
                    ht = ct >> 1;
                    pt = e + 64 | 0;
                    dt = s[pt >> 2] | 0;
                    mt = dt - ht | 0;
                    s[pt >> 2] = mt;
                    gt = s[Pn >> 2] | 0;
                    yt = rt(gt, ct) | 0;
                    bt = yt >> 1;
                    wt = s[Fn >> 2] | 0;
                    Et = wt - bt | 0;
                    s[Fn >> 2] = Et;
                    St = Pn + 4 | 0;
                    xt = s[St >> 2] | 0;
                    Tt = rt(xt, ct) | 0;
                    Nt = Tt >> 1;
                    kt = Fn + 4 | 0;
                    Lt = s[kt >> 2] | 0;
                    At = Lt - Nt | 0;
                    s[kt >> 2] = At
                }
            }
            Ot = e + 40 | 0;
            Mt = s[Ot >> 2] | 0;
            _t = (Mt | 0) > 0;
            if (_t) {
                Dt = e + 44 | 0;
                Pt = s[Dt >> 2] | 0;
                Ht = (Pt | 0) > 0;
                if (Ht) {
                    Bt = s[u >> 2] | 0;
                    Ft = Bt >> 1;
                    It = e + 68 | 0;
                    qt = s[It >> 2] | 0;
                    Rt = qt - Ft | 0;
                    s[It >> 2] = Rt;
                    Ut = Pn + 8 | 0;
                    zt = s[Ut >> 2] | 0;
                    Wt = rt(zt, Bt) | 0;
                    Xt = Wt >> 1;
                    Vt = Fn + 8 | 0;
                    $t = s[Vt >> 2] | 0;
                    Kt = $t - Xt | 0;
                    s[Vt >> 2] = Kt;
                    Qt = Pn + 12 | 0;
                    Gt = s[Qt >> 2] | 0;
                    Yt = rt(Gt, Bt) | 0;
                    Zt = Yt >> 1;
                    en = Fn + 12 | 0;
                    tn = s[en >> 2] | 0;
                    nn = tn - Zt | 0;
                    s[en >> 2] = nn
                }
            }
            rn = s[Pn >> 2] | 0;
            sn = Pn + 4 | 0;
            un = s[sn >> 2] | 0;
            an = un + rn | 0;
            fn = (an | 0) < 1;
            if (fn) {
                r = -1;
                c = qn;
                return r | 0
            }
            ln = an * 3 | 0;
            cn = Fn + 4 | 0;
            hn = s[cn >> 2] | 0;
            pn = s[Fn >> 2] | 0;
            dn = hn - pn | 0;
            vn = dn << 1;
            mn = vn + ln | 0;
            yn = an * 6 | 0;
            bn = (mn | 0) / (yn | 0) & -1;
            wn = (bn | 0) < 1;
            if (wn) {
                r = -1;
                c = qn;
                return r | 0
            }
            En = bn << 3;
            Sn = t - En | 0;
            xn = bn << 2;
            Tn = (Sn | 0) / (xn | 0) & -1;
            i = Tn + -1 | 0;
            Nn = i >>> 0 > 42;
            if (Nn) {
                r = -1;
                c = qn;
                return r | 0
            }
            Cn = Pn + 8 | 0;
            kn = s[Cn >> 2] | 0;
            l = Pn + 12 | 0;
            h = s[l >> 2] | 0;
            p = h + kn | 0;
            d = (p | 0) < 1;
            if (d) {
                r = -1;
                c = qn;
                return r | 0
            }
            v = p * 3 | 0;
            m = Fn + 12 | 0;
            g = s[m >> 2] | 0;
            y = Fn + 8 | 0;
            b = s[y >> 2] | 0;
            w = g - b | 0;
            S = w << 1;
            x = S + v | 0;
            T = p * 6 | 0;
            N = (x | 0) / (T | 0) & -1;
            C = (N | 0) < 1;
            if (C) {
                r = -1;
                c = qn;
                return r | 0
            }
            k = N << 3;
            L = n - k | 0;
            A = N << 2;
            O = (L | 0) / (A | 0) & -1;
            o = O + -1 | 0;
            M = o >>> 0 > 42;
            if (M) {
                r = -1;
                c = qn;
                return r | 0
            }
            D = Tn - O | 0;
            _n = (D | 0) > -1;
            Dn = 0 - D | 0;
            P = _n ? D : Dn;
            H = (P | 0) > 3;
            if (H) {
                r = -1;
                c = qn;
                return r | 0
            }
            s[e >> 2] = bn;
            B = e + 4 | 0;
            s[B >> 2] = N;
            j = e + 8 | 0;
            s[j >> 2] = Tn;
            F = e + 12 | 0;
            s[F >> 2] = O;
            r = 0;
            c = qn;
            return r | 0
        }

        function _i(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0;
            var W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0;
            var ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0;
            var Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0;
            var Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0;
            var yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0;
            Ln = c;
            c = c + 16 | 0;
            Sn = Ln;
            v = e + 72 | 0;
            m = s[v >> 2] | 0;
            xn = e + 32 | 0;
            s[xn + 0 >> 2] = 0 | 0;
            s[xn + 4 >> 2] = 0 | 0;
            s[xn + 8 >> 2] = 0 | 0;
            s[xn + 12 >> 2] = 0 | 0;
            H = m + 12 | 0;
            V = s[H >> 2] | 0;
            it = (V | 0) > 0;
            if (!it) {
                u = m + 8 | 0;
                l = s[u >> 2] | 0;
                n = V;
                y = 0;
                w = 0;
                x = 0;
                pn = l;
                hn = m + 8 | 0;
                Ns(pn, n, 16, 5);
                dn = s[hn >> 2] | 0;
                vn = e + 16 | 0;
                s[vn >> 2] = dn;
                mn = dn + (y << 4) | 0;
                b = e + 20 | 0;
                s[b >> 2] = mn;
                p = y + w | 0;
                E = dn + (p << 4) | 0;
                S = e + 24 | 0;
                s[S >> 2] = E;
                d = p + x | 0;
                T = dn + (d << 4) | 0;
                N = e + 28 | 0;
                s[N >> 2] = T;
                c = Ln;
                return
            }
            vt = m + 8 | 0;
            Ct = s[vt >> 2] | 0;
            jt = t + 56 | 0;
            Jt = s[jt >> 2] | 0;
            on = t + 60 | 0;
            g = s[on >> 2] | 0;
            C = t + 24 | 0;
            k = s[C >> 2] | 0;
            L = t + 28 | 0;
            A = s[L >> 2] | 0;
            O = t + 32 | 0;
            M = s[O >> 2] | 0;
            _ = t + 36 | 0;
            D = s[_ >> 2] | 0;
            P = t + 40 | 0;
            B = s[P >> 2] | 0;
            j = t + 44 | 0;
            F = s[j >> 2] | 0;
            I = t + 52 | 0;
            q = s[I >> 2] | 0;
            R = t + 64 | 0;
            U = s[R >> 2] | 0;
            z = U + -1 | 0;
            W = 1 << z;
            X = Sn + 4 | 0;
            $ = e + 64 | 0;
            J = e + 68 | 0;
            gn = 0;
            while (1) {
                K = Ct + (gn << 4) | 0;
                Q = s[K >> 2] | 0;
                G = (Ct + (gn << 4) | 0) + 4 | 0;
                Y = s[G >> 2] | 0;
                Z = Q - Jt | 0;
                et = Y - g | 0;
                tt = rt(k, Z) | 0;
                nt = rt(A, et) | 0;
                st = nt + tt | 0;
                ot = rt(M, Z) | 0;
                ut = rt(D, et) | 0;
                at = ut + ot | 0;
                ft = rt(B, Z) | 0;
                lt = rt(F, et) | 0;
                ct = lt + ft | 0;
                ht = ct + q | 0;
                pt = ht + W | 0;
                dt = pt >> U;
                mt = (dt | 0) == 0;
                if (mt) {
                    en = st >>> 31;
                    tn = en + 2147483647 | 0;
                    s[Sn >> 2] = tn;
                    nn = at >>> 31;
                    rn = nn + 2147483647 | 0;
                    s[X >> 2] = rn;
                    sn = (Ct + (gn << 4) | 0) + 8 | 0;
                    s[sn >> 2] = 4;
                    un = s[Sn >> 2] | 0;
                    an = (Ct + (gn << 4) | 0) + 12 | 0;
                    s[an >> 2] = un
                } else {
                    gt = (dt | 0) < 0;
                    if (gt) {
                        yt = 0 - st | 0;
                        bt = 0 - at | 0;
                        wt = 0 - dt | 0;
                        Tn = wt;
                        Nn = yt;
                        Cn = bt
                    } else {
                        Tn = dt;
                        Nn = st;
                        Cn = at
                    }
                    Et = Tn >> 1;
                    St = Nn >> 31;
                    xt = Et + St | 0;
                    Tt = xt ^ St;
                    Nt = Tt + Nn | 0;
                    kt = (Nt | 0) / (Tn | 0) & -1;
                    Lt = Cn >> 31;
                    At = Et + Lt | 0;
                    Ot = At ^ Lt;
                    Mt = Ot + Cn | 0;
                    _t = (Mt | 0) / (Tn | 0) & -1;
                    Dt = s[$ >> 2] | 0;
                    Pt = s[J >> 2] | 0;
                    Ht = kt - Dt | 0;
                    s[Sn >> 2] = Ht;
                    Bt = _t - Pt | 0;
                    s[X >> 2] = Bt;
                    yn = (Bt | 0) > -1;
                    wn = 0 - Bt | 0;
                    Ft = yn ? Bt : wn;
                    bn = (Ht | 0) > -1;
                    En = 0 - Ht | 0;
                    It = bn ? Ht : En;
                    qt = (Ft | 0) > (It | 0);
                    Rt = qt & 1;
                    Ut = Rt << 1;
                    zt = Sn + (Rt << 2) | 0;
                    Wt = s[zt >> 2] | 0;
                    r = Wt >>> 31;
                    Xt = Ut | r;
                    Vt = Xt ^ 1;
                    $t = (e + (Vt << 2) | 0) + 32 | 0;
                    Kt = s[$t >> 2] | 0;
                    Qt = Kt + 1 | 0;
                    s[$t >> 2] = Qt;
                    Gt = (Ct + (gn << 4) | 0) + 8 | 0;
                    s[Gt >> 2] = Vt;
                    Yt = s[zt >> 2] | 0;
                    Zt = (Ct + (gn << 4) | 0) + 12 | 0;
                    s[Zt >> 2] = Yt
                }
                fn = gn + 1 | 0;
                ln = s[H >> 2] | 0;
                cn = (fn | 0) < (ln | 0);
                if (cn) {
                    gn = fn
                } else {
                    break
                }
            }
            a = s[xn >> 2] | 0;
            i = e + 36 | 0;
            h = s[i >> 2] | 0;
            o = e + 40 | 0;
            f = s[o >> 2] | 0;
            n = ln;
            y = a;
            w = h;
            x = f;
            pn = Ct;
            hn = m + 8 | 0;
            Ns(pn, n, 16, 5);
            dn = s[hn >> 2] | 0;
            vn = e + 16 | 0;
            s[vn >> 2] = dn;
            mn = dn + (y << 4) | 0;
            b = e + 20 | 0;
            s[b >> 2] = mn;
            p = y + w | 0;
            E = dn + (p << 4) | 0;
            S = e + 24 | 0;
            s[S >> 2] = E;
            d = p + x | 0;
            T = dn + (d << 4) | 0;
            N = e + 28 | 0;
            s[N >> 2] = T;
            c = Ln;
            return
        }

        function Di(e, t, n, i, o, u) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            i = i | 0;
            o = o | 0;
            u = u | 0;
            var a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0;
            var A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0;
            var K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0;
            var mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0;
            var Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0;
            var nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0;
            var xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0;
            var zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0,
                ur = 0,
                ar = 0;
            var fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0,
                Tr = 0,
                Nr = 0,
                Cr = 0;
            Cr = c;
            c = c + 16 | 0;
            pr = Cr;
            d = (e + (u << 2) | 0) + 64 | 0;
            v = s[d >> 2] | 0;
            xt = e + (u << 2) | 0;
            Pt = s[xt >> 2] | 0;
            Xt = rt(Pt, -7) | 0;
            nn = Xt + v | 0;
            dn = pr + (u << 2) | 0;
            s[dn >> 2] = nn;
            Nn = 1 - u | 0;
            Bn = (e + (Nn << 2) | 0) + 64 | 0;
            $n = s[Bn >> 2] | 0;
            m = e + (Nn << 2) | 0;
            k = s[m >> 2] | 0;
            F = rt(k, -3) | 0;
            K = F + $n | 0;
            ut = pr + (Nn << 2) | 0;
            s[ut >> 2] = K;
            yt = s[t >> 2] | 0;
            bt = s[pr >> 2] | 0;
            wt = rt(bt, yt) | 0;
            Et = t + 4 | 0;
            St = s[Et >> 2] | 0;
            Tt = pr + 4 | 0;
            Nt = s[Tt >> 2] | 0;
            Ct = rt(Nt, St) | 0;
            kt = Ct + wt | 0;
            Lt = t + 8 | 0;
            At = s[Lt >> 2] | 0;
            Ot = rt(At, bt) | 0;
            Mt = t + 12 | 0;
            _t = s[Mt >> 2] | 0;
            Dt = rt(_t, Nt) | 0;
            Ht = Dt + Ot | 0;
            Bt = t + 16 | 0;
            jt = s[Bt >> 2] | 0;
            Ft = rt(jt, bt) | 0;
            It = t + 20 | 0;
            qt = s[It >> 2] | 0;
            Rt = rt(qt, Nt) | 0;
            Ut = Rt + Ft | 0;
            zt = t + 48 | 0;
            Wt = s[zt >> 2] | 0;
            Vt = Ut + Wt | 0;
            $t = t + (Nn << 2) | 0;
            Jt = s[$t >> 2] | 0;
            Kt = rt(k, Jt) | 0;
            Qt = (t + (Nn << 2) | 0) + 8 | 0;
            Gt = s[Qt >> 2] | 0;
            Yt = rt(Gt, k) | 0;
            Zt = (t + (Nn << 2) | 0) + 16 | 0;
            en = s[Zt >> 2] | 0;
            tn = rt(en, k) | 0;
            rn = t + (u << 2) | 0;
            sn = s[rn >> 2] | 0;
            on = rt(Pt, sn) | 0;
            un = (t + (u << 2) | 0) + 8 | 0;
            an = s[un >> 2] | 0;
            fn = rt(an, Pt) | 0;
            ln = (t + (u << 2) | 0) + 16 | 0;
            cn = s[ln >> 2] | 0;
            hn = rt(cn, Pt) | 0;
            pn = o + -1 | 0;
            vn = i + -1 | 0;
            mn = t + 56 | 0;
            gn = t + 60 | 0;
            mt = 0;
            or = 0;
            ur = 3;
            fr = 0;
            gr = Vt;
            wr = kt;
            Tr = Ht;
            while (1) {
                T = mt;
                lr = fr;
                mr = gr;
                br = wr;
                Er = Tr;
                while (1) {
                    yn = (mr | 0) == 0;
                    if (yn) {
                        bn = br >>> 31;
                        wn = bn + 2147483647 | 0;
                        En = Er >>> 31;
                        Sn = En + 2147483647 | 0;
                        Xn = wn;
                        Jn = Sn
                    } else {
                        xn = (mr | 0) < 0;
                        if (xn) {
                            Tn = 0 - br | 0;
                            Cn = 0 - Er | 0;
                            kn = 0 - mr | 0;
                            a = kn;
                            l = Cn;
                            h = Tn
                        } else {
                            a = mr;
                            l = Er;
                            h = br
                        }
                        Ln = a >> 1;
                        An = h >> 31;
                        On = Ln + An | 0;
                        Mn = On ^ An;
                        _n = Mn + h | 0;
                        Dn = (_n | 0) / (a | 0) & -1;
                        Pn = s[mn >> 2] | 0;
                        Hn = Pn + Dn | 0;
                        jn = l >> 31;
                        Fn = Ln + jn | 0;
                        In = Fn ^ jn;
                        qn = In + l | 0;
                        Rn = (qn | 0) / (a | 0) & -1;
                        Un = s[gn >> 2] | 0;
                        zn = Un + Rn | 0;
                        Xn = Hn;
                        Jn = zn
                    }
                    Wn = Xn >> 2;
                    Vn = Jn >> 2;
                    Kn = (Vn | 0) >= (o | 0);
                    Qn = Kn ? pn : Vn;
                    Gn = (Qn | 0) > 0;
                    Yn = Gn ? Qn : 0;
                    Zn = rt(Yn, i) | 0;
                    er = (Wn | 0) >= (i | 0);
                    tr = er ? vn : Wn;
                    nr = (tr | 0) > 0;
                    rr = nr ? tr : 0;
                    g = Zn + rr | 0;
                    y = n + g | 0;
                    b = r[y >> 0] | 0;
                    w = b << 24 >> 24 != 0;
                    E = w & 1;
                    S = E << lr;
                    x = S | T;
                    N = br + on | 0;
                    C = Er + fn | 0;
                    L = mr + hn | 0;
                    A = lr + 1 | 0;
                    ir = (A | 0) == (ur | 0);
                    if (ir) {
                        break
                    } else {
                        T = x;
                        lr = A;
                        mr = L;
                        br = N;
                        Er = C
                    }
                }
                O = fr + 3 | 0;
                M = wr + Kt | 0;
                _ = Tr + Yt | 0;
                D = gr + tn | 0;
                P = or + 1 | 0;
                ar = ur + 3 | 0;
                sr = (P | 0) == 6;
                if (sr) {
                    break
                } else {
                    mt = x;
                    or = P;
                    ur = ar;
                    fr = O;
                    gr = D;
                    wr = M;
                    Tr = _
                }
            }
            H = x >>> 12;
            p = x + -28672 | 0;
            B = p >>> 0 < 139264;
            if (B) {
                j = H + -7 | 0;
                I = 7752 + (j << 2) | 0;
                q = s[I >> 2] | 0;
                R = (q | 0) == (x | 0);
                if (R) {
                    dt = x
                } else {
                    U = q ^ x;
                    dr = 0;
                    Sr = U;
                    while (1) {
                        z = Sr + -1 | 0;
                        W = z & Sr;
                        X = dr + 1 | 0;
                        V = (dr | 0) > 2;
                        $ = (W | 0) == 0;
                        cr = V | $;
                        if (cr) {
                            break
                        } else {
                            dr = X;
                            Sr = W
                        }
                    }
                    J = (X | 0) < 4;
                    if (J) {
                        f = X;
                        gt = q;
                        Nr = 21
                    } else {
                        yr = 0;
                        Nr = 15
                    }
                }
            } else {
                yr = 0;
                Nr = 15
            }
            e: do {
                if ((Nr | 0) == 15) {
                    while (1) {
                        Nr = 0;
                        Q = yr + 7 | 0;
                        G = (Q | 0) == (H | 0);
                        if (!G) {
                            Y = 7752 + (yr << 2) | 0;
                            Z = s[Y >> 2] | 0;
                            et = (Z | 0) == (x | 0);
                            if (et) {
                                dt = x;
                                break e
                            }
                            tt = Z ^ x;
                            vr = 0;
                            xr = tt;
                            while (1) {
                                nt = xr + -1 | 0;
                                it = nt & xr;
                                st = vr + 1 | 0;
                                ot = (vr | 0) > 2;
                                at = (it | 0) == 0;
                                hr = ot | at;
                                if (hr) {
                                    break
                                } else {
                                    vr = st;
                                    xr = it
                                }
                            }
                            ft = (st | 0) < 4;
                            if (ft) {
                                f = st;
                                gt = Z;
                                Nr = 21;
                                break e
                            }
                        }
                        lt = yr + 1 | 0;
                        ct = lt >>> 0 < 34;
                        if (ct) {
                            yr = lt;
                            Nr = 15
                        } else {
                            vt = -1;
                            break
                        }
                    }
                    c = Cr;
                    return vt | 0
                }
            } while (0);
            if ((Nr | 0) == 21) {
                ht = (f | 0) > -1;
                if (ht) {
                    dt = gt
                } else {
                    vt = f;
                    c = Cr;
                    return vt | 0
                }
            }
            pt = dt >>> 12;
            vt = pt;
            c = Cr;
            return vt | 0
        }

        function Pi(e, t, n, i, o, u, a) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            i = i | 0;
            o = o | 0;
            u = u | 0;
            a = a | 0;
            var f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0;
            var O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0;
            var Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0;
            var gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0;
            var jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0;
            var rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0,
                xn = 0;
            var Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0;
            var Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0,
                ur = 0,
                ar = 0,
                fr = 0;
            var lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0,
                Tr = 0,
                Nr = 0,
                Cr = 0,
                kr = 0,
                Lr = 0,
                Ar = 0;
            var Or = 0,
                Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0,
                Wr = 0,
                Xr = 0,
                Vr = 0,
                $r = 0,
                Jr = 0,
                Kr = 0;
            var Qr = 0,
                Gr = 0,
                Yr = 0,
                Zr = 0,
                ei = 0,
                ti = 0,
                ni = 0,
                ri = 0,
                ii = 0,
                si = 0,
                oi = 0,
                ui = 0,
                ai = 0,
                fi = 0,
                li = 0,
                ci = 0,
                hi = 0,
                pi = 0,
                di = 0,
                vi = 0;
            var mi = 0,
                gi = 0,
                yi = 0,
                bi = 0,
                wi = 0,
                Ei = 0,
                Si = 0,
                xi = 0,
                Ti = 0,
                Ni = 0,
                Ci = 0,
                ki = 0,
                Li = 0,
                Ai = 0,
                Oi = 0,
                Mi = 0,
                _i = 0,
                Di = 0,
                Pi = 0,
                Hi = 0;
            var Bi = 0,
                ji = 0,
                Fi = 0,
                Ii = 0,
                qi = 0,
                Ri = 0,
                Ui = 0,
                zi = 0,
                Wi = 0,
                Xi = 0,
                Vi = 0,
                $i = 0,
                Ji = 0,
                Ki = 0,
                Qi = 0,
                Gi = 0,
                Yi = 0,
                Zi = 0,
                es = 0,
                ts = 0;
            var ns = 0,
                rs = 0,
                is = 0,
                ss = 0,
                os = 0,
                us = 0,
                as = 0,
                fs = 0,
                ls = 0,
                cs = 0,
                hs = 0,
                ps = 0,
                ds = 0,
                ms = 0,
                gs = 0,
                ys = 0,
                bs = 0,
                ws = 0,
                Es = 0,
                Ss = 0;
            var xs = 0,
                Ts = 0,
                Ns = 0,
                Cs = 0,
                ks = 0,
                Ls = 0,
                As = 0,
                Os = 0,
                Ms = 0,
                _s = 0,
                Ds = 0,
                Ps = 0,
                Hs = 0,
                Bs = 0,
                js = 0,
                Fs = 0,
                Is = 0,
                qs = 0,
                Rs = 0,
                Us = 0;
            var zs = 0,
                Ws = 0,
                Xs = 0,
                Vs = 0,
                $s = 0,
                Js = 0,
                Ks = 0,
                Qs = 0,
                Gs = 0,
                Ys = 0,
                Zs = 0,
                eo = 0,
                to = 0,
                no = 0,
                ro = 0,
                io = 0,
                so = 0,
                oo = 0,
                uo = 0,
                ao = 0;
            var fo = 0,
                lo = 0,
                co = 0,
                ho = 0,
                po = 0,
                vo = 0,
                mo = 0,
                go = 0,
                yo = 0,
                bo = 0,
                wo = 0,
                Eo = 0,
                So = 0,
                xo = 0,
                To = 0,
                No = 0,
                Co = 0,
                ko = 0,
                Lo = 0,
                Ao = 0;
            var Oo = 0,
                Mo = 0,
                _o = 0,
                Do = 0,
                Po = 0,
                Ho = 0,
                Bo = 0,
                jo = 0,
                Fo = 0,
                Io = 0,
                qo = 0,
                Ro = 0,
                Uo = 0,
                zo = 0,
                Wo = 0,
                Xo = 0,
                Vo = 0,
                $o = 0,
                Jo = 0,
                Ko = 0;
            var Qo = 0,
                Go = 0,
                Yo = 0,
                Zo = 0,
                eu = 0,
                tu = 0,
                nu = 0,
                ru = 0,
                iu = 0,
                su = 0,
                ou = 0,
                uu = 0,
                au = 0,
                fu = 0,
                lu = 0,
                cu = 0,
                hu = 0,
                pu = 0,
                du = 0,
                vu = 0;
            var mu = 0,
                gu = 0,
                yu = 0,
                bu = 0,
                wu = 0,
                Eu = 0,
                Su = 0,
                xu = 0,
                Tu = 0,
                Nu = 0,
                Cu = 0,
                ku = 0,
                Lu = 0,
                Au = 0,
                Ou = 0,
                Mu = 0,
                _u = 0,
                Du = 0,
                Pu = 0,
                Hu = 0;
            var Bu = 0,
                ju = 0,
                Fu = 0,
                Iu = 0,
                qu = 0,
                Ru = 0,
                Uu = 0,
                zu = 0,
                Wu = 0,
                Xu = 0,
                Vu = 0,
                $u = 0,
                Ju = 0,
                Ku = 0,
                Qu = 0;
            Qu = c;
            c = c + 80 | 0;
            Au = Qu + 64 | 0;
            mu = Qu + 56 | 0;
            vu = Qu + 40 | 0;
            cu = Qu + 24 | 0;
            Ou = Qu + 8 | 0;
            Du = Qu;
            s[Au >> 2] = 0;
            N = e + 64 | 0;
            C = s[N >> 2] | 0;
            Mn = s[e >> 2] | 0;
            Pi = Mn * 5 | 0;
            Ks = Pi + C | 0;
            oo = e + 68 | 0;
            yo = s[oo >> 2] | 0;
            Ao = e + 4 | 0;
            qo = s[Ao >> 2] | 0;
            Go = rt(qo, -3) | 0;
            k = Go + yo | 0;
            F = s[i >> 2] | 0;
            K = rt(F, Ks) | 0;
            ut = i + 4 | 0;
            yt = s[ut >> 2] | 0;
            At = rt(yt, k) | 0;
            qt = At + K | 0;
            Gt = i + 8 | 0;
            fn = s[Gt >> 2] | 0;
            wn = rt(fn, Ks) | 0;
            _n = i + 12 | 0;
            zn = s[_n >> 2] | 0;
            er = rt(zn, k) | 0;
            cr = er + wn | 0;
            Sr = i + 16 | 0;
            Dr = s[Sr >> 2] | 0;
            Wr = rt(Dr, Ks) | 0;
            ti = i + 20 | 0;
            hi = s[ti >> 2] | 0;
            xi = rt(hi, k) | 0;
            Hi = xi + Wr | 0;
            Vi = i + 48 | 0;
            rs = s[Vi >> 2] | 0;
            ds = Hi + rs | 0;
            Cs = rt(yt, qo) | 0;
            js = rt(zn, qo) | 0;
            Xs = rt(hi, qo) | 0;
            Vs = a + -1 | 0;
            $s = u + -1 | 0;
            Js = i + 56 | 0;
            Qs = i + 60 | 0;
            Jo = 0;
            gu = 0;
            Tu = 0;
            Pu = ds;
            Iu = qt;
            Wu = cr;
            while (1) {
                Gs = (gu | 0) == 6;
                if (Gs) {
                    Ws = Jo;
                    Nu = Tu
                } else {
                    Ys = (Pu | 0) == 0;
                    if (Ys) {
                        Zs = Iu >>> 31;
                        eo = Zs + 2147483647 | 0;
                        to = Wu >>> 31;
                        no = to + 2147483647 | 0;
                        Co = eo;
                        Lo = no
                    } else {
                        ro = (Pu | 0) < 0;
                        if (ro) {
                            io = 0 - Iu | 0;
                            so = 0 - Wu | 0;
                            uo = 0 - Pu | 0;
                            l = uo;
                            v = so;
                            b = io
                        } else {
                            l = Pu;
                            v = Wu;
                            b = Iu
                        }
                        ao = l >> 1;
                        fo = b >> 31;
                        lo = ao + fo | 0;
                        co = lo ^ fo;
                        ho = co + b | 0;
                        po = (ho | 0) / (l | 0) & -1;
                        vo = s[Js >> 2] | 0;
                        mo = vo + po | 0;
                        go = v >> 31;
                        bo = ao + go | 0;
                        wo = bo ^ go;
                        Eo = wo + v | 0;
                        So = (Eo | 0) / (l | 0) & -1;
                        xo = s[Qs >> 2] | 0;
                        To = xo + So | 0;
                        Co = mo;
                        Lo = To
                    }
                    No = Co >> 2;
                    ko = Lo >> 2;
                    Oo = (ko | 0) >= (a | 0);
                    Mo = Oo ? Vs : ko;
                    _o = (Mo | 0) > 0;
                    Do = _o ? Mo : 0;
                    Po = rt(Do, u) | 0;
                    Ho = (No | 0) >= (u | 0);
                    Bo = Ho ? $s : No;
                    jo = (Bo | 0) > 0;
                    Fo = jo ? Bo : 0;
                    Io = Po + Fo | 0;
                    Ro = o + Io | 0;
                    Uo = r[Ro >> 0] | 0;
                    zo = Uo << 24 >> 24 != 0;
                    Wo = zo & 1;
                    Xo = Tu + 1 | 0;
                    Vo = Wo << Tu;
                    $o = Vo | Jo;
                    Ko = (gu | 0) > 7;
                    if (Ko) {
                        break
                    } else {
                        Ws = $o;
                        Nu = Xo
                    }
                }
                Qo = Iu + Cs | 0;
                Yo = Wu + js | 0;
                Zo = Pu + Xs | 0;
                eu = gu + 1 | 0;
                Jo = Ws;
                gu = eu;
                Tu = Nu;
                Pu = Zo;
                Iu = Qo;
                Wu = Yo
            }
            s[Au >> 2] = $o;
            s[mu >> 2] = 0;
            tu = rt(Mn, F) | 0;
            nu = rt(fn, Mn) | 0;
            ru = rt(Dr, Mn) | 0;
            Ct = 0;
            bu = gu;
            Cu = Xo;
            Bu = Pu;
            Ru = Iu;
            Vu = Wu;
            e: while (1) {
                yu = bu;
                Hu = Bu;
                qu = Ru;
                Xu = Vu;
                while (1) {
                    iu = yu + -1 | 0;
                    su = (yu | 0) > 0;
                    if (!su) {
                        break e
                    }
                    ou = qu - tu | 0;
                    uu = Xu - nu | 0;
                    L = Hu - ru | 0;
                    A = (iu | 0) == 6;
                    if (A) {
                        yu = 6;
                        Hu = L;
                        qu = ou;
                        Xu = uu
                    } else {
                        break
                    }
                }
                O = (Hu | 0) == (ru | 0);
                if (O) {
                    M = ou >>> 31;
                    _ = M + 2147483647 | 0;
                    D = uu >>> 31;
                    P = D + 2147483647 | 0;
                    it = _;
                    ot = P
                } else {
                    H = (L | 0) < 0;
                    if (H) {
                        B = 0 - ou | 0;
                        j = 0 - uu | 0;
                        I = 0 - L | 0;
                        h = I;
                        m = j;
                        S = B
                    } else {
                        h = L;
                        m = uu;
                        S = ou
                    }
                    q = h >> 1;
                    R = S >> 31;
                    U = q + R | 0;
                    z = U ^ R;
                    W = z + S | 0;
                    X = (W | 0) / (h | 0) & -1;
                    V = s[Js >> 2] | 0;
                    $ = V + X | 0;
                    J = m >> 31;
                    Q = q + J | 0;
                    G = Q ^ J;
                    Y = G + m | 0;
                    Z = (Y | 0) / (h | 0) & -1;
                    et = s[Qs >> 2] | 0;
                    tt = et + Z | 0;
                    it = $;
                    ot = tt
                }
                nt = it >> 2;
                st = ot >> 2;
                at = (st | 0) >= (a | 0);
                ft = at ? Vs : st;
                lt = (ft | 0) > 0;
                ct = lt ? ft : 0;
                ht = rt(ct, u) | 0;
                pt = (nt | 0) >= (u | 0);
                dt = pt ? $s : nt;
                vt = (dt | 0) > 0;
                mt = vt ? dt : 0;
                gt = ht + mt | 0;
                bt = o + gt | 0;
                wt = r[bt >> 0] | 0;
                Et = wt << 24 >> 24 != 0;
                St = Et & 1;
                xt = Cu + 1 | 0;
                Tt = St << Cu;
                Nt = Tt | Ct;
                s[mu >> 2] = Nt;
                Ct = Nt;
                bu = iu;
                Cu = xt;
                Bu = L;
                Ru = ou;
                Vu = uu
            }
            kt = Au + 4 | 0;
            s[kt >> 2] = 0;
            Lt = t + 64 | 0;
            Ot = s[Lt >> 2] | 0;
            Mt = s[t >> 2] | 0;
            _t = Mt * 3 | 0;
            Dt = _t + Ot | 0;
            Pt = t + 68 | 0;
            Ht = s[Pt >> 2] | 0;
            Bt = t + 4 | 0;
            jt = s[Bt >> 2] | 0;
            Ft = jt * 5 | 0;
            It = Ft + Ht | 0;
            Rt = rt(F, Dt) | 0;
            Ut = rt(yt, It) | 0;
            zt = Ut + Rt | 0;
            Wt = rt(fn, Dt) | 0;
            Xt = rt(zn, It) | 0;
            Vt = Xt + Wt | 0;
            $t = rt(Dr, Dt) | 0;
            Jt = rt(hi, It) | 0;
            Kt = Jt + $t | 0;
            Qt = Kt + rs | 0;
            Yt = rt(F, Mt) | 0;
            Zt = rt(fn, Mt) | 0;
            en = rt(Dr, Mt) | 0;
            Gn = 0;
            ku = 0;
            ju = Qt;
            Uu = zt;
            $u = Vt;
            while (1) {
                tn = (ju | 0) == 0;
                if (tn) {
                    nn = Uu >>> 31;
                    rn = nn + 2147483647 | 0;
                    sn = $u >>> 31;
                    on = sn + 2147483647 | 0;
                    An = rn;
                    Dn = on
                } else {
                    un = (ju | 0) < 0;
                    if (un) {
                        an = 0 - Uu | 0;
                        ln = 0 - $u | 0;
                        cn = 0 - ju | 0;
                        d = cn;
                        y = ln;
                        E = an
                    } else {
                        d = ju;
                        y = $u;
                        E = Uu
                    }
                    hn = d >> 1;
                    pn = E >> 31;
                    dn = hn + pn | 0;
                    vn = dn ^ pn;
                    mn = vn + E | 0;
                    gn = (mn | 0) / (d | 0) & -1;
                    yn = s[Js >> 2] | 0;
                    bn = yn + gn | 0;
                    En = y >> 31;
                    Sn = hn + En | 0;
                    xn = Sn ^ En;
                    Tn = xn + y | 0;
                    Nn = (Tn | 0) / (d | 0) & -1;
                    Cn = s[Qs >> 2] | 0;
                    kn = Cn + Nn | 0;
                    An = bn;
                    Dn = kn
                }
                Ln = An >> 2;
                On = Dn >> 2;
                Pn = (On | 0) >= (a | 0);
                Hn = Pn ? Vs : On;
                Bn = (Hn | 0) > 0;
                jn = Bn ? Hn : 0;
                Fn = rt(jn, u) | 0;
                In = (Ln | 0) >= (u | 0);
                qn = In ? $s : Ln;
                Rn = (qn | 0) > 0;
                Un = Rn ? qn : 0;
                Wn = Fn + Un | 0;
                Xn = o + Wn | 0;
                Vn = r[Xn >> 0] | 0;
                $n = Vn << 24 >> 24 != 0;
                Jn = $n & 1;
                Kn = Jn << ku;
                Qn = Kn | Gn;
                Yn = Uu - Yt | 0;
                Zn = $u - Zt | 0;
                tr = ju - en | 0;
                nr = ku + 1 | 0;
                du = (nr | 0) == 8;
                if (du) {
                    break
                } else {
                    Gn = Qn;
                    ku = nr;
                    ju = tr;
                    Uu = Yn;
                    $u = Zn
                }
            }
            s[kt >> 2] = Qn;
            rr = mu + 4 | 0;
            s[rr >> 2] = 0;
            ir = n + 64 | 0;
            sr = s[ir >> 2] | 0;
            or = s[n >> 2] | 0;
            ur = or * 5 | 0;
            ar = ur + sr | 0;
            fr = n + 68 | 0;
            lr = s[fr >> 2] | 0;
            hr = n + 4 | 0;
            pr = s[hr >> 2] | 0;
            dr = rt(pr, -3) | 0;
            vr = dr + lr | 0;
            mr = rt(F, ar) | 0;
            gr = rt(yt, vr) | 0;
            yr = gr + mr | 0;
            br = rt(fn, ar) | 0;
            wr = rt(zn, vr) | 0;
            Er = wr + br | 0;
            xr = rt(Dr, ar) | 0;
            Tr = rt(hi, vr) | 0;
            Nr = Tr + xr | 0;
            Cr = Nr + rs | 0;
            kr = rt(yt, pr) | 0;
            Lr = rt(zn, pr) | 0;
            Ar = rt(hi, pr) | 0;
            Ni = 0;
            Lu = 8;
            Fu = Cr;
            zu = yr;
            Ju = Er;
            while (1) {
                Or = (Fu | 0) == 0;
                if (Or) {
                    Mr = zu >>> 31;
                    _r = Mr + 2147483647 | 0;
                    Pr = Ju >>> 31;
                    Hr = Pr + 2147483647 | 0;
                    ii = _r;
                    oi = Hr
                } else {
                    Br = (Fu | 0) < 0;
                    if (Br) {
                        jr = 0 - zu | 0;
                        Fr = 0 - Ju | 0;
                        Ir = 0 - Fu | 0;
                        p = Ir;
                        g = Fr;
                        w = jr
                    } else {
                        p = Fu;
                        g = Ju;
                        w = zu
                    }
                    qr = p >> 1;
                    Rr = w >> 31;
                    Ur = qr + Rr | 0;
                    zr = Ur ^ Rr;
                    Xr = zr + w | 0;
                    Vr = (Xr | 0) / (p | 0) & -1;
                    $r = s[Js >> 2] | 0;
                    Jr = $r + Vr | 0;
                    Kr = g >> 31;
                    Qr = qr + Kr | 0;
                    Gr = Qr ^ Kr;
                    Yr = Gr + g | 0;
                    Zr = (Yr | 0) / (p | 0) & -1;
                    ei = s[Qs >> 2] | 0;
                    ni = ei + Zr | 0;
                    ii = Jr;
                    oi = ni
                }
                ri = ii >> 2;
                si = oi >> 2;
                ui = (si | 0) >= (a | 0);
                ai = ui ? Vs : si;
                fi = (ai | 0) > 0;
                li = fi ? ai : 0;
                ci = rt(li, u) | 0;
                pi = (ri | 0) >= (u | 0);
                di = pi ? $s : ri;
                vi = (di | 0) > 0;
                mi = vi ? di : 0;
                gi = ci + mi | 0;
                yi = o + gi | 0;
                bi = r[yi >> 0] | 0;
                wi = bi << 24 >> 24 != 0;
                Ei = wi & 1;
                Si = Ei << Lu;
                Ti = Si | Ni;
                Ci = zu + kr | 0;
                ki = Ju + Lr | 0;
                Li = Fu + Ar | 0;
                Ai = Lu + 1 | 0;
                pu = (Ai | 0) == 15;
                if (pu) {
                    break
                } else {
                    Ni = Ti;
                    Lu = Ai;
                    Fu = Li;
                    zu = Ci;
                    Ju = ki
                }
            }
            s[rr >> 2] = Ti;
            Oi = (Ct | 0) != (Ti | 0);
            Mi = Oi & 1;
            _i = 2 << Mi;
            Di = ($o | 0) == (Qn | 0);
            Bi = Di ? 2 : 1;
            ji = (_i | 0) > 0;
            if (ji) {
                wu = 0;
                Mu = 0
            } else {
                zs = -1;
                c = Qu;
                return zs | 0
            }
            while (1) {
                Ii = wu & 1;
                qi = Au + (Ii << 2) | 0;
                Ri = s[qi >> 2] | 0;
                Ui = wu >> 1;
                zi = mu + (Ui << 2) | 0;
                Wi = s[zi >> 2] | 0;
                Xi = Wi | Ri;
                $i = Xi ^ 21522;
                s[Du >> 2] = $i;
                Ji = vs(Du) | 0;
                Ki = s[Du >> 2] | 0;
                Qi = Ki >>> 10;
                s[Du >> 2] = Qi;
                Gi = (Ji | 0) < 0;
                f = Gi ? 4 : Ji;
                Yi = (Mu | 0) > 0;
                t: do {
                    if (Yi) {
                        xu = 0;
                        while (1) {
                            os = vu + (xu << 2) | 0;
                            us = s[os >> 2] | 0;
                            as = (us | 0) == (Qi | 0);
                            Zi = xu + 1 | 0;
                            if (as) {
                                break
                            }
                            es = (Zi | 0) < (Mu | 0);
                            if (es) {
                                xu = Zi
                            } else {
                                Su = Zi;
                                Ku = 38;
                                break t
                            }
                        }
                        fs = cu + (xu << 2) | 0;
                        ls = s[fs >> 2] | 0;
                        cs = ls + 1 | 0;
                        s[fs >> 2] = cs;
                        hs = Ou + (xu << 2) | 0;
                        ps = s[hs >> 2] | 0;
                        ms = (f | 0) < (ps | 0);
                        if (ms) {
                            s[hs >> 2] = f;
                            _u = Mu
                        } else {
                            _u = Mu
                        }
                    } else {
                        Su = 0;
                        Ku = 38
                    }
                } while (0);
                if ((Ku | 0) == 38) {
                    Ku = 0;
                    ts = vu + (Su << 2) | 0;
                    s[ts >> 2] = Qi;
                    ns = cu + (Su << 2) | 0;
                    s[ns >> 2] = 1;
                    is = Ou + (Su << 2) | 0;
                    s[is >> 2] = f;
                    ss = Mu + 1 | 0;
                    _u = ss
                }
                gs = wu + Bi | 0;
                ys = (gs | 0) < (_i | 0);
                if (ys) {
                    wu = gs;
                    Mu = _u
                } else {
                    break
                }
            }
            T = s[Ou >> 2] | 0;
            Fi = (_u | 0) > 1;
            if (Fi) {
                bs = T;
                Ps = Ou;
                fu = 0;
                Eu = 1;
                while (1) {
                    ws = (bs | 0) > 3;
                    if (ws) {
                        Es = Ou + (Eu << 2) | 0;
                        Ss = s[Es >> 2] | 0;
                        xs = (Ss | 0) < 4;
                        if (xs) {
                            Ku = 48
                        } else {
                            Ku = 45
                        }
                    } else {
                        Ku = 45
                    }
                    if ((Ku | 0) == 45) {
                        Ku = 0;
                        Ts = cu + (Eu << 2) | 0;
                        Ns = s[Ts >> 2] | 0;
                        ks = cu + (fu << 2) | 0;
                        Ls = s[ks >> 2] | 0;
                        As = (Ns | 0) > (Ls | 0);
                        if (As) {
                            Ku = 48
                        } else {
                            Os = (Ns | 0) == (Ls | 0);
                            if (Os) {
                                Ms = Ou + (Eu << 2) | 0;
                                _s = s[Ms >> 2] | 0;
                                Ds = s[Ps >> 2] | 0;
                                Hs = (_s | 0) < (Ds | 0);
                                if (Hs) {
                                    Ku = 48
                                } else {
                                    lu = fu
                                }
                            } else {
                                lu = fu
                            }
                        }
                    }
                    if ((Ku | 0) == 48) {
                        Ku = 0;
                        lu = Eu
                    }
                    Bs = Eu + 1 | 0;
                    Fs = Ou + (lu << 2) | 0;
                    Is = s[Fs >> 2] | 0;
                    hu = (Bs | 0) == (_u | 0);
                    if (hu) {
                        x = Is;
                        au = lu;
                        break
                    } else {
                        bs = Is;
                        Ps = Fs;
                        fu = lu;
                        Eu = Bs
                    }
                }
            } else {
                x = T;
                au = 0
            }
            qs = (x | 0) < 4;
            if (!qs) {
                zs = -1;
                c = Qu;
                return zs | 0
            }
            Rs = vu + (au << 2) | 0;
            Us = s[Rs >> 2] | 0;
            zs = Us;
            c = Qu;
            return zs | 0
        }

        function Hi(e, t, n, i, o, u, a, f, l, h) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            i = i | 0;
            o = o | 0;
            u = u | 0;
            a = a | 0;
            f = f | 0;
            l = l | 0;
            h = h | 0;
            var p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0;
            var D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0;
            var Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0;
            var wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0;
            var qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0;
            var un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0;
            var kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0;
            var $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0,
                ur = 0,
                ar = 0,
                fr = 0,
                lr = 0,
                cr = 0,
                hr = 0;
            var pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0,
                Tr = 0,
                Nr = 0,
                Cr = 0,
                kr = 0,
                Lr = 0,
                Ar = 0,
                Or = 0,
                Mr = 0,
                _r = 0;
            var Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0,
                Wr = 0,
                Xr = 0,
                Vr = 0,
                $r = 0,
                Jr = 0,
                Kr = 0,
                Qr = 0,
                Gr = 0,
                Yr = 0;
            var Zr = 0,
                ei = 0,
                ti = 0,
                ni = 0,
                ri = 0,
                ii = 0,
                si = 0,
                oi = 0,
                ui = 0,
                ai = 0,
                fi = 0,
                li = 0,
                ci = 0,
                hi = 0,
                pi = 0,
                di = 0,
                vi = 0,
                mi = 0,
                gi = 0,
                yi = 0;
            var bi = 0,
                wi = 0,
                Ei = 0,
                Si = 0,
                xi = 0,
                Ti = 0,
                Ni = 0,
                Ci = 0,
                ki = 0,
                Li = 0,
                Ai = 0,
                Oi = 0,
                Mi = 0,
                _i = 0,
                Di = 0,
                Pi = 0,
                Hi = 0,
                Ii = 0,
                qi = 0,
                Ri = 0;
            var Ui = 0,
                zi = 0,
                Wi = 0,
                Xi = 0,
                Vi = 0,
                $i = 0,
                Ki = 0,
                Qi = 0,
                Gi = 0,
                Yi = 0,
                Zi = 0,
                es = 0,
                ts = 0,
                ns = 0,
                rs = 0,
                is = 0,
                ss = 0,
                os = 0,
                us = 0,
                as = 0;
            var fs = 0,
                ls = 0,
                cs = 0,
                hs = 0,
                ps = 0,
                ds = 0,
                vs = 0,
                ms = 0,
                gs = 0,
                ys = 0,
                bs = 0,
                ws = 0,
                Es = 0,
                Ss = 0,
                xs = 0,
                Ts = 0,
                Ns = 0,
                Cs = 0,
                ks = 0,
                Ls = 0;
            var As = 0,
                Os = 0,
                Hs = 0,
                Bs = 0,
                js = 0,
                Fs = 0,
                Is = 0,
                qs = 0,
                Rs = 0,
                Us = 0,
                zs = 0,
                Ws = 0,
                Xs = 0,
                Vs = 0,
                $s = 0,
                Js = 0,
                Ks = 0,
                Qs = 0,
                Gs = 0,
                Ys = 0;
            var Zs = 0,
                to = 0,
                no = 0,
                ro = 0,
                io = 0,
                so = 0,
                ao = 0,
                fo = 0,
                lo = 0,
                co = 0,
                ho = 0,
                po = 0,
                vo = 0,
                mo = 0,
                go = 0,
                yo = 0,
                bo = 0,
                wo = 0,
                Eo = 0,
                So = 0;
            var xo = 0,
                To = 0,
                No = 0,
                Co = 0,
                ko = 0,
                Lo = 0,
                Ao = 0,
                Oo = 0,
                Mo = 0,
                _o = 0,
                Do = 0,
                Po = 0,
                Ho = 0,
                Bo = 0,
                jo = 0,
                Fo = 0,
                Io = 0,
                qo = 0,
                Ro = 0,
                Uo = 0;
            var zo = 0,
                Wo = 0,
                Xo = 0,
                Vo = 0,
                $o = 0,
                Jo = 0,
                Ko = 0,
                Qo = 0,
                Go = 0,
                Yo = 0,
                Zo = 0,
                eu = 0,
                tu = 0,
                nu = 0,
                ru = 0,
                iu = 0,
                su = 0,
                ou = 0,
                uu = 0,
                au = 0;
            var fu = 0,
                lu = 0,
                cu = 0,
                hu = 0,
                pu = 0,
                du = 0,
                vu = 0,
                mu = 0,
                gu = 0,
                yu = 0,
                bu = 0,
                wu = 0,
                Eu = 0,
                Su = 0,
                xu = 0,
                Tu = 0,
                Nu = 0,
                Cu = 0,
                ku = 0,
                Lu = 0;
            var Au = 0,
                Ou = 0,
                Mu = 0,
                _u = 0,
                Du = 0,
                Pu = 0,
                Hu = 0,
                Bu = 0,
                ju = 0,
                Fu = 0,
                Iu = 0,
                qu = 0,
                Ru = 0,
                Uu = 0,
                zu = 0,
                Wu = 0,
                Xu = 0,
                Vu = 0,
                $u = 0,
                Ju = 0;
            var Ku = 0,
                Qu = 0,
                Gu = 0,
                Yu = 0,
                Zu = 0,
                ea = 0,
                ta = 0,
                na = 0,
                ra = 0,
                ia = 0,
                sa = 0,
                oa = 0,
                ua = 0,
                aa = 0,
                fa = 0,
                la = 0,
                ca = 0,
                ha = 0,
                pa = 0,
                da = 0;
            var va = 0,
                ma = 0,
                ga = 0,
                ya = 0,
                ba = 0,
                wa = 0,
                Ea = 0,
                Sa = 0,
                xa = 0,
                Ta = 0,
                Na = 0,
                Ca = 0,
                ka = 0,
                La = 0,
                Aa = 0,
                Oa = 0,
                Ma = 0,
                _a = 0,
                Da = 0,
                Pa = 0;
            var Ha = 0,
                Ba = 0,
                ja = 0,
                Fa = 0,
                Ia = 0,
                qa = 0,
                Ra = 0,
                Ua = 0,
                za = 0,
                Wa = 0,
                Xa = 0,
                Va = 0,
                $a = 0,
                Ja = 0,
                Ka = 0,
                Qa = 0,
                Ga = 0,
                Ya = 0,
                Za = 0,
                ef = 0;
            var tf = 0,
                nf = 0,
                rf = 0,
                sf = 0,
                of = 0,
                uf = 0,
                af = 0,
                ff = 0,
                lf = 0,
                cf = 0,
                hf = 0,
                pf = 0,
                df = 0,
                vf = 0,
                mf = 0,
                gf = 0,
                yf = 0,
                bf = 0,
                wf = 0,
                Ef = 0;
            var Sf = 0,
                xf = 0,
                Tf = 0,
                Nf = 0,
                Cf = 0,
                kf = 0,
                Lf = 0,
                Af = 0,
                Of = 0,
                Mf = 0,
                _f = 0,
                Df = 0,
                Pf = 0,
                Hf = 0,
                Bf = 0,
                jf = 0,
                Ff = 0,
                If = 0,
                qf = 0,
                Rf = 0;
            var Uf = 0,
                zf = 0,
                Wf = 0,
                Xf = 0,
                Vf = 0,
                $f = 0,
                Jf = 0,
                Kf = 0,
                Qf = 0,
                Gf = 0,
                Yf = 0,
                Zf = 0,
                el = 0,
                tl = 0,
                nl = 0,
                rl = 0,
                il = 0,
                sl = 0,
                ol = 0,
                ul = 0;
            var al = 0,
                fl = 0,
                ll = 0,
                cl = 0,
                hl = 0,
                pl = 0,
                dl = 0,
                vl = 0,
                ml = 0,
                gl = 0,
                yl = 0,
                bl = 0,
                wl = 0,
                El = 0,
                Sl = 0,
                xl = 0,
                Tl = 0,
                Nl = 0,
                Cl = 0,
                kl = 0;
            var Ll = 0,
                Al = 0,
                Ol = 0,
                Ml = 0,
                _l = 0,
                Dl = 0,
                Pl = 0,
                Hl = 0,
                Bl = 0,
                jl = 0,
                Fl = 0,
                Il = 0,
                ql = 0,
                Rl = 0,
                Ul = 0,
                zl = 0,
                Wl = 0,
                Xl = 0,
                Vl = 0,
                $l = 0;
            var Jl = 0,
                Kl = 0,
                Ql = 0,
                Gl = 0,
                Yl = 0,
                Zl = 0,
                ec = 0,
                tc = 0,
                nc = 0,
                rc = 0,
                ic = 0,
                sc = 0,
                oc = 0,
                uc = 0,
                ac = 0,
                fc = 0,
                lc = 0,
                cc = 0,
                hc = 0,
                pc = 0;
            var dc = 0,
                vc = 0,
                mc = 0,
                gc = 0,
                yc = 0,
                bc = 0,
                wc = 0,
                Ec = 0,
                Sc = 0,
                xc = 0,
                Tc = 0,
                Nc = 0,
                Cc = 0,
                kc = 0,
                Lc = 0,
                Ac = 0,
                Oc = 0,
                Mc = 0,
                _c = 0,
                Dc = 0;
            var Pc = 0,
                Hc = 0,
                Bc = 0,
                jc = 0,
                Fc = 0,
                Ic = 0,
                qc = 0,
                Rc = 0,
                Uc = 0,
                zc = 0,
                Wc = 0,
                Xc = 0,
                Vc = 0,
                $c = 0,
                Jc = 0,
                Kc = 0,
                Qc = 0,
                Gc = 0,
                Yc = 0,
                Zc = 0;
            var eh = 0,
                th = 0,
                nh = 0,
                rh = 0,
                ih = 0,
                sh = 0,
                oh = 0,
                uh = 0,
                ah = 0,
                fh = 0,
                lh = 0,
                ch = 0,
                hh = 0,
                ph = 0,
                dh = 0,
                vh = 0,
                mh = 0,
                gh = 0,
                yh = 0,
                bh = 0;
            var wh = 0,
                Eh = 0,
                Sh = 0,
                xh = 0,
                Th = 0,
                Nh = 0,
                Ch = 0,
                kh = 0,
                Lh = 0,
                Ah = 0,
                Oh = 0,
                Mh = 0,
                _h = 0,
                Dh = 0,
                Ph = 0,
                Hh = 0,
                Bh = 0,
                jh = 0,
                Fh = 0,
                Ih = 0;
            var qh = 0,
                Rh = 0,
                Uh = 0,
                zh = 0,
                Wh = 0,
                Xh = 0,
                Vh = 0,
                $h = 0,
                Jh = 0,
                Kh = 0,
                Qh = 0,
                Gh = 0,
                Yh = 0,
                Zh = 0,
                ep = 0,
                tp = 0,
                np = 0,
                rp = 0,
                ip = 0,
                sp = 0;
            var op = 0,
                up = 0,
                ap = 0,
                fp = 0,
                lp = 0,
                cp = 0,
                hp = 0,
                pp = 0,
                dp = 0,
                vp = 0,
                mp = 0,
                gp = 0,
                yp = 0,
                bp = 0,
                wp = 0,
                Ep = 0,
                Sp = 0,
                xp = 0,
                Tp = 0,
                Np = 0;
            var Cp = 0,
                kp = 0,
                Lp = 0,
                Ap = 0,
                Op = 0,
                Mp = 0,
                _p = 0,
                Dp = 0,
                Pp = 0,
                Hp = 0,
                Bp = 0,
                jp = 0,
                Fp = 0,
                Ip = 0,
                qp = 0,
                Rp = 0,
                Up = 0,
                zp = 0,
                Wp = 0,
                Xp = 0;
            var Vp = 0,
                $p = 0,
                Jp = 0,
                Kp = 0,
                Qp = 0,
                Gp = 0,
                Yp = 0,
                Zp = 0,
                ed = 0,
                td = 0,
                nd = 0,
                rd = 0,
                id = 0,
                sd = 0,
                od = 0,
                ud = 0,
                ad = 0,
                fd = 0,
                ld = 0,
                cd = 0;
            var hd = 0,
                pd = 0,
                dd = 0,
                vd = 0,
                md = 0,
                gd = 0,
                yd = 0,
                bd = 0,
                wd = 0,
                Ed = 0,
                Sd = 0,
                xd = 0,
                Td = 0,
                Nd = 0,
                Cd = 0,
                kd = 0,
                Ld = 0,
                Ad = 0,
                Od = 0,
                Md = 0;
            var _d = 0,
                Dd = 0,
                Pd = 0,
                Hd = 0,
                Bd = 0,
                jd = 0,
                Fd = 0,
                Id = 0,
                qd = 0,
                Rd = 0,
                Ud = 0,
                zd = 0,
                Wd = 0,
                Xd = 0,
                Vd = 0,
                $d = 0,
                Jd = 0,
                Kd = 0,
                Qd = 0,
                Gd = 0;
            var Yd = 0,
                Zd = 0,
                ev = 0,
                tv = 0,
                nv = 0,
                rv = 0,
                iv = 0,
                sv = 0,
                ov = 0,
                uv = 0,
                av = 0,
                fv = 0,
                lv = 0,
                cv = 0,
                hv = 0,
                pv = 0,
                dv = 0,
                vv = 0,
                mv = 0,
                gv = 0;
            var yv = 0,
                bv = 0,
                wv = 0,
                Ev = 0,
                Sv = 0,
                xv = 0,
                Tv = 0,
                Nv = 0,
                Cv = 0,
                kv = 0,
                Lv = 0,
                Av = 0,
                Ov = 0,
                Mv = 0,
                _v = 0,
                Dv = 0,
                Pv = 0,
                Hv = 0,
                Bv = 0,
                jv = 0;
            var Fv = 0,
                Iv = 0,
                qv = 0,
                Rv = 0,
                Uv = 0,
                zv = 0,
                Wv = 0,
                Xv = 0,
                Vv = 0,
                $v = 0,
                Jv = 0,
                Kv = 0,
                Qv = 0,
                Gv = 0,
                Yv = 0,
                Zv = 0,
                em = 0,
                tm = 0,
                nm = 0,
                rm = 0;
            var im = 0,
                sm = 0,
                om = 0,
                um = 0,
                am = 0,
                fm = 0,
                lm = 0,
                cm = 0,
                hm = 0,
                pm = 0,
                dm = 0,
                vm = 0,
                mm = 0,
                gm = 0,
                ym = 0,
                bm = 0,
                wm = 0,
                Em = 0,
                Sm = 0,
                xm = 0;
            var Tm = 0,
                Nm = 0,
                Cm = 0,
                km = 0,
                Lm = 0,
                Am = 0,
                Om = 0,
                Mm = 0,
                _m = 0,
                Dm = 0,
                Pm = 0,
                Hm = 0,
                Bm = 0,
                jm = 0,
                Fm = 0,
                Im = 0,
                qm = 0,
                Rm = 0,
                Um = 0,
                zm = 0;
            var Wm = 0,
                Xm = 0,
                Vm = 0,
                $m = 0,
                Jm = 0,
                Km = 0,
                Qm = 0,
                Gm = 0,
                Ym = 0,
                Zm = 0,
                eg = 0,
                tg = 0,
                ng = 0,
                rg = 0,
                ig = 0,
                sg = 0,
                og = 0,
                ug = 0,
                ag = 0,
                fg = 0;
            var lg = 0,
                cg = 0,
                hg = 0,
                pg = 0,
                dg = 0,
                vg = 0,
                mg = 0,
                gg = 0,
                yg = 0,
                bg = 0,
                wg = 0,
                Eg = 0,
                Sg = 0,
                xg = 0,
                Tg = 0,
                Ng = 0,
                Cg = 0,
                kg = 0,
                Lg = 0,
                Ag = 0;
            var Og = 0,
                Mg = 0,
                _g = 0,
                Dg = 0,
                Pg = 0,
                Hg = 0,
                Bg = 0,
                jg = 0,
                Fg = 0,
                Ig = 0,
                qg = 0,
                Rg = 0,
                Ug = 0,
                zg = 0,
                Wg = 0,
                Xg = 0,
                Vg = 0,
                $g = 0,
                Jg = 0,
                Kg = 0;
            var Qg = 0,
                Gg = 0,
                Yg = 0,
                Zg = 0,
                ey = 0,
                ty = 0,
                ny = 0,
                ry = 0,
                iy = 0,
                sy = 0,
                oy = 0,
                uy = 0,
                ay = 0,
                fy = 0,
                ly = 0,
                cy = 0,
                hy = 0,
                py = 0,
                dy = 0,
                vy = 0;
            var my = 0,
                gy = 0,
                yy = 0,
                by = 0,
                wy = 0,
                Ey = 0,
                Sy = 0,
                xy = 0,
                Ty = 0,
                Ny = 0,
                Cy = 0,
                ky = 0,
                Ly = 0,
                Ay = 0,
                Oy = 0,
                My = 0,
                _y = 0,
                Dy = 0,
                Py = 0,
                Hy = 0;
            var By = 0,
                jy = 0,
                Fy = 0,
                Iy = 0,
                qy = 0,
                Ry = 0,
                Uy = 0,
                zy = 0,
                Wy = 0,
                Xy = 0,
                Vy = 0,
                $y = 0,
                Jy = 0,
                Ky = 0,
                Qy = 0,
                Gy = 0,
                Yy = 0,
                Zy = 0,
                eb = 0,
                tb = 0;
            var nb = 0,
                rb = 0,
                ib = 0,
                sb = 0,
                ob = 0,
                ub = 0,
                ab = 0,
                fb = 0,
                lb = 0,
                cb = 0,
                hb = 0,
                pb = 0,
                db = 0,
                vb = 0,
                mb = 0,
                gb = 0,
                yb = 0,
                bb = 0,
                wb = 0,
                Eb = 0;
            var Sb = 0,
                xb = 0,
                Tb = 0,
                Nb = 0,
                Cb = 0,
                kb = 0,
                Lb = 0,
                Ab = 0,
                Ob = 0,
                Mb = 0,
                _b = 0,
                Db = 0,
                Pb = 0,
                Hb = 0,
                Bb = 0,
                jb = 0,
                Fb = 0,
                Ib = 0,
                qb = 0,
                Rb = 0;
            var Ub = 0,
                zb = 0,
                Wb = 0,
                Xb = 0,
                Vb = 0,
                $b = 0,
                Jb = 0,
                Kb = 0,
                Qb = 0,
                Gb = 0,
                Yb = 0,
                Zb = 0,
                ew = 0,
                tw = 0,
                nw = 0,
                rw = 0,
                iw = 0,
                sw = 0,
                ow = 0,
                uw = 0;
            var aw = 0,
                fw = 0,
                lw = 0,
                cw = 0,
                hw = 0,
                pw = 0,
                dw = 0,
                vw = 0,
                mw = 0,
                gw = 0,
                yw = 0,
                bw = 0,
                ww = 0,
                Ew = 0,
                Sw = 0,
                xw = 0,
                Tw = 0,
                Nw = 0,
                Cw = 0,
                kw = 0;
            var Lw = 0,
                Aw = 0,
                Ow = 0,
                Mw = 0,
                _w = 0,
                Dw = 0,
                Pw = 0,
                Hw = 0,
                Bw = 0,
                jw = 0,
                Fw = 0,
                Iw = 0,
                qw = 0,
                Rw = 0,
                Uw = 0,
                zw = 0,
                Ww = 0,
                Xw = 0,
                Vw = 0,
                $w = 0;
            var Jw = 0,
                Kw = 0,
                Qw = 0,
                Gw = 0,
                Yw = 0,
                Zw = 0,
                eE = 0,
                tE = 0,
                nE = 0,
                rE = 0,
                iE = 0,
                sE = 0,
                oE = 0,
                uE = 0,
                aE = 0,
                fE = 0,
                lE = 0,
                cE = 0,
                hE = 0,
                pE = 0;
            var dE = 0,
                vE = 0,
                mE = 0,
                gE = 0,
                yE = 0,
                bE = 0,
                wE = 0,
                EE = 0,
                SE = 0,
                xE = 0,
                TE = 0,
                NE = 0,
                CE = 0,
                kE = 0,
                LE = 0,
                AE = 0,
                OE = 0,
                ME = 0,
                _E = 0,
                DE = 0;
            var PE = 0,
                HE = 0,
                BE = 0,
                jE = 0,
                FE = 0,
                IE = 0,
                qE = 0,
                RE = 0,
                UE = 0,
                zE = 0,
                WE = 0,
                XE = 0,
                VE = 0,
                $E = 0,
                JE = 0,
                KE = 0,
                QE = 0,
                GE = 0,
                YE = 0,
                ZE = 0;
            var eS = 0,
                tS = 0,
                nS = 0,
                rS = 0,
                iS = 0,
                sS = 0,
                oS = 0,
                uS = 0,
                aS = 0,
                fS = 0,
                lS = 0,
                cS = 0,
                hS = 0,
                pS = 0,
                dS = 0,
                vS = 0,
                mS = 0,
                gS = 0,
                yS = 0,
                bS = 0;
            var wS = 0,
                ES = 0,
                SS = 0,
                xS = 0,
                TS = 0,
                NS = 0,
                CS = 0,
                kS = 0,
                LS = 0,
                AS = 0,
                OS = 0,
                MS = 0,
                _S = 0,
                DS = 0,
                PS = 0,
                HS = 0,
                BS = 0,
                jS = 0,
                FS = 0,
                IS = 0;
            var qS = 0,
                RS = 0,
                US = 0,
                zS = 0,
                WS = 0,
                XS = 0,
                VS = 0,
                $S = 0,
                JS = 0,
                KS = 0,
                QS = 0,
                GS = 0,
                YS = 0,
                ZS = 0,
                ex = 0,
                tx = 0,
                nx = 0,
                rx = 0,
                ix = 0,
                sx = 0;
            var ox = 0,
                ux = 0,
                ax = 0,
                fx = 0,
                lx = 0,
                cx = 0,
                hx = 0,
                px = 0,
                dx = 0,
                vx = 0,
                mx = 0,
                gx = 0,
                yx = 0,
                bx = 0,
                wx = 0,
                Ex = 0,
                Sx = 0,
                xx = 0,
                Tx = 0,
                Nx = 0;
            var Cx = 0,
                kx = 0,
                Lx = 0,
                Ax = 0,
                Ox = 0,
                Mx = 0,
                _x = 0,
                Dx = 0,
                Px = 0,
                Hx = 0,
                Bx = 0,
                jx = 0,
                Fx = 0,
                Ix = 0,
                qx = 0,
                Rx = 0,
                Ux = 0,
                zx = 0,
                Wx = 0,
                Xx = 0;
            var Vx = 0,
                $x = 0,
                Jx = 0,
                Kx = 0,
                Qx = 0,
                Gx = 0,
                Yx = 0,
                Zx = 0,
                eT = 0,
                tT = 0,
                nT = 0,
                rT = 0,
                iT = 0,
                sT = 0,
                oT = 0,
                uT = 0,
                aT = 0,
                fT = 0,
                lT = 0,
                cT = 0;
            var hT = 0,
                pT = 0,
                dT = 0,
                vT = 0,
                mT = 0,
                gT = 0,
                yT = 0,
                bT = 0,
                wT = 0,
                ET = 0,
                ST = 0,
                xT = 0,
                TT = 0,
                NT = 0,
                CT = 0,
                kT = 0,
                LT = 0,
                AT = 0,
                OT = 0,
                MT = 0;
            var _T = 0,
                DT = 0,
                PT = 0,
                HT = 0,
                BT = 0,
                jT = 0,
                FT = 0,
                IT = 0,
                qT = 0,
                RT = 0,
                UT = 0,
                zT = 0,
                WT = 0,
                XT = 0,
                VT = 0,
                $T = 0,
                JT = 0,
                KT = 0,
                QT = 0,
                GT = 0;
            var YT = 0,
                ZT = 0,
                eN = 0,
                tN = 0,
                nN = 0,
                rN = 0,
                iN = 0,
                sN = 0,
                oN = 0,
                uN = 0,
                aN = 0,
                fN = 0,
                lN = 0,
                cN = 0,
                hN = 0,
                pN = 0,
                dN = 0,
                vN = 0,
                mN = 0,
                gN = 0;
            var yN = 0,
                bN = 0,
                wN = 0,
                EN = 0,
                SN = 0,
                xN = 0,
                TN = 0,
                NN = 0,
                CN = 0,
                kN = 0,
                LN = 0,
                AN = 0,
                ON = 0,
                MN = 0,
                _N = 0,
                DN = 0,
                PN = 0,
                HN = 0,
                BN = 0,
                jN = 0;
            var FN = 0,
                IN = 0,
                qN = 0,
                RN = 0,
                UN = 0,
                zN = 0,
                WN = 0,
                XN = 0,
                VN = 0,
                $N = 0,
                JN = 0,
                KN = 0,
                QN = 0,
                GN = 0,
                YN = 0,
                ZN = 0,
                eC = 0,
                tC = 0,
                nC = 0,
                rC = 0;
            var iC = 0,
                sC = 0,
                oC = 0,
                uC = 0,
                aC = 0,
                fC = 0,
                lC = 0,
                cC = 0,
                hC = 0,
                pC = 0,
                dC = 0,
                vC = 0,
                mC = 0,
                gC = 0,
                yC = 0,
                bC = 0,
                wC = 0,
                EC = 0,
                SC = 0,
                xC = 0;
            var TC = 0,
                NC = 0,
                CC = 0,
                kC = 0,
                LC = 0,
                AC = 0,
                OC = 0,
                MC = 0,
                _C = 0,
                DC = 0,
                PC = 0,
                HC = 0,
                BC = 0,
                jC = 0,
                FC = 0,
                IC = 0,
                qC = 0,
                RC = 0,
                UC = 0,
                zC = 0;
            var WC = 0,
                XC = 0,
                VC = 0,
                $C = 0,
                JC = 0,
                KC = 0,
                QC = 0,
                GC = 0,
                YC = 0,
                ZC = 0,
                ek = 0,
                tk = 0,
                nk = 0,
                rk = 0,
                ik = 0,
                sk = 0,
                ok = 0,
                uk = 0,
                ak = 0,
                fk = 0;
            var lk = 0,
                ck = 0,
                hk = 0,
                pk = 0,
                dk = 0,
                vk = 0,
                mk = 0,
                gk = 0,
                yk = 0,
                bk = 0,
                wk = 0,
                Ek = 0,
                Sk = 0,
                xk = 0,
                Tk = 0,
                Nk = 0,
                Ck = 0,
                kk = 0,
                Lk = 0,
                Ak = 0;
            var Ok = 0,
                Mk = 0,
                _k = 0,
                Dk = 0,
                Pk = 0,
                Hk = 0,
                Bk = 0,
                jk = 0,
                Fk = 0,
                Ik = 0,
                qk = 0,
                Rk = 0,
                Uk = 0,
                zk = 0,
                Wk = 0,
                Xk = 0,
                Vk = 0,
                $k = 0,
                Jk = 0,
                Kk = 0;
            var Qk = 0,
                Gk = 0,
                Yk = 0,
                Zk = 0,
                eL = 0,
                tL = 0,
                nL = 0,
                rL = 0,
                iL = 0,
                sL = 0,
                oL = 0,
                uL = 0,
                aL = 0,
                fL = 0,
                lL = 0,
                cL = 0,
                hL = 0,
                pL = 0,
                dL = 0,
                vL = 0;
            var mL = 0,
                gL = 0,
                yL = 0,
                bL = 0,
                wL = 0,
                EL = 0,
                SL = 0,
                xL = 0,
                TL = 0,
                NL = 0,
                CL = 0,
                kL = 0,
                LL = 0,
                AL = 0,
                OL = 0,
                ML = 0,
                _L = 0,
                DL = 0,
                PL = 0,
                HL = 0;
            var BL = 0,
                jL = 0,
                FL = 0,
                IL = 0,
                qL = 0,
                RL = 0,
                UL = 0,
                zL = 0,
                WL = 0,
                XL = 0,
                VL = 0,
                $L = 0,
                JL = 0,
                KL = 0,
                QL = 0,
                GL = 0,
                YL = 0,
                ZL = 0,
                eA = 0,
                tA = 0;
            var nA = 0,
                rA = 0,
                iA = 0,
                sA = 0,
                oA = 0,
                uA = 0,
                aA = 0,
                fA = 0,
                lA = 0,
                cA = 0,
                hA = 0,
                pA = 0,
                dA = 0,
                vA = 0,
                mA = 0,
                gA = 0,
                yA = 0,
                bA = 0,
                wA = 0,
                EA = 0;
            var SA = 0,
                xA = 0,
                TA = 0,
                NA = 0,
                CA = 0,
                kA = 0,
                LA = 0,
                AA = 0,
                OA = 0,
                MA = 0,
                _A = 0,
                DA = 0,
                PA = 0,
                HA = 0,
                BA = 0,
                jA = 0,
                FA = 0,
                IA = 0,
                qA = 0,
                RA = 0;
            var UA = 0,
                zA = 0,
                WA = 0,
                XA = 0,
                VA = 0,
                $A = 0,
                JA = 0,
                KA = 0,
                QA = 0,
                GA = 0,
                YA = 0,
                ZA = 0,
                eO = 0,
                tO = 0,
                nO = 0,
                rO = 0,
                iO = 0,
                sO = 0,
                oO = 0,
                uO = 0;
            var aO = 0,
                fO = 0,
                lO = 0,
                cO = 0,
                hO = 0,
                pO = 0,
                dO = 0,
                vO = 0,
                mO = 0,
                gO = 0,
                yO = 0,
                bO = 0,
                wO = 0,
                EO = 0,
                SO = 0,
                xO = 0,
                TO = 0,
                NO = 0,
                CO = 0,
                kO = 0;
            var LO = 0,
                AO = 0,
                OO = 0,
                MO = 0,
                _O = 0,
                DO = 0,
                PO = 0,
                HO = 0,
                BO = 0,
                jO = 0,
                FO = 0,
                IO = 0,
                qO = 0,
                RO = 0,
                UO = 0,
                zO = 0,
                WO = 0,
                XO = 0,
                VO = 0,
                $O = 0;
            var JO = 0,
                KO = 0,
                QO = 0,
                GO = 0,
                YO = 0,
                ZO = 0,
                eM = 0,
                tM = 0,
                nM = 0,
                rM = 0,
                iM = 0,
                sM = 0,
                oM = 0,
                uM = 0,
                aM = 0,
                fM = 0,
                lM = 0,
                cM = 0,
                hM = 0,
                pM = 0;
            var dM = 0,
                vM = 0,
                mM = 0,
                gM = 0,
                yM = 0,
                bM = 0,
                wM = 0,
                EM = 0,
                SM = 0,
                xM = 0,
                TM = 0,
                NM = 0,
                CM = 0,
                kM = 0,
                LM = 0,
                AM = 0,
                OM = 0,
                MM = 0,
                _M = 0,
                DM = 0;
            var PM = 0,
                HM = 0,
                BM = 0,
                jM = 0,
                FM = 0,
                IM = 0,
                qM = 0,
                RM = 0,
                UM = 0,
                zM = 0,
                WM = 0,
                XM = 0,
                VM = 0,
                $M = 0,
                JM = 0,
                KM = 0,
                QM = 0,
                GM = 0,
                YM = 0,
                ZM = 0;
            var e_ = 0,
                t_ = 0,
                n_ = 0,
                r_ = 0,
                i_ = 0,
                s_ = 0,
                o_ = 0,
                u_ = 0,
                a_ = 0,
                f_ = 0,
                l_ = 0,
                c_ = 0,
                h_ = 0,
                p_ = 0,
                d_ = 0,
                v_ = 0,
                m_ = 0,
                g_ = 0,
                y_ = 0,
                b_ = 0;
            var w_ = 0,
                E_ = 0,
                S_ = 0,
                x_ = 0,
                T_ = 0,
                N_ = 0,
                C_ = 0,
                k_ = 0,
                L_ = 0,
                A_ = 0,
                O_ = 0,
                M_ = 0,
                __ = 0,
                D_ = 0,
                P_ = 0,
                H_ = 0,
                B_ = 0,
                j_ = 0,
                F_ = 0,
                I_ = 0;
            var q_ = 0,
                R_ = 0,
                U_ = 0,
                z_ = 0,
                W_ = 0,
                X_ = 0,
                V_ = 0,
                $_ = 0,
                J_ = 0,
                K_ = 0,
                Q_ = 0,
                G_ = 0,
                Y_ = 0,
                Z_ = 0,
                eD = 0,
                tD = 0,
                nD = 0,
                rD = 0,
                iD = 0,
                sD = 0;
            var oD = 0,
                uD = 0,
                aD = 0,
                fD = 0,
                lD = 0,
                cD = 0,
                hD = 0,
                pD = 0,
                dD = 0,
                vD = 0,
                mD = 0,
                gD = 0,
                yD = 0,
                bD = 0,
                wD = 0,
                ED = 0,
                SD = 0,
                xD = 0,
                TD = 0,
                ND = 0;
            var CD = 0,
                kD = 0,
                LD = 0,
                AD = 0,
                OD = 0,
                MD = 0,
                _D = 0,
                DD = 0,
                PD = 0,
                HD = 0,
                BD = 0,
                jD = 0,
                FD = 0,
                ID = 0,
                qD = 0,
                RD = 0,
                UD = 0,
                zD = 0,
                WD = 0,
                XD = 0;
            var VD = 0,
                $D = 0,
                JD = 0,
                KD = 0,
                QD = 0,
                GD = 0,
                YD = 0,
                ZD = 0,
                eP = 0,
                tP = 0,
                nP = 0,
                rP = 0,
                iP = 0,
                sP = 0,
                oP = 0,
                uP = 0,
                aP = 0,
                fP = 0,
                lP = 0,
                cP = 0;
            var hP = 0,
                pP = 0,
                dP = 0,
                vP = 0,
                mP = 0,
                gP = 0,
                yP = 0,
                bP = 0,
                wP = 0,
                EP = 0,
                SP = 0,
                xP = 0,
                TP = 0,
                NP = 0,
                CP = 0,
                kP = 0,
                LP = 0,
                AP = 0,
                OP = 0,
                MP = 0;
            var _P = 0,
                DP = 0,
                PP = 0,
                HP = 0,
                BP = 0,
                jP = 0,
                FP = 0,
                IP = 0,
                qP = 0,
                RP = 0,
                UP = 0,
                zP = 0,
                WP = 0,
                XP = 0,
                VP = 0,
                $P = 0,
                JP = 0,
                KP = 0,
                QP = 0,
                GP = 0;
            var YP = 0,
                ZP = 0,
                eH = 0,
                tH = 0,
                nH = 0,
                rH = 0,
                iH = 0,
                sH = 0,
                oH = 0,
                uH = 0,
                aH = 0,
                fH = 0,
                lH = 0,
                cH = 0,
                hH = 0,
                pH = 0,
                dH = 0,
                vH = 0,
                mH = 0,
                gH = 0;
            var yH = 0,
                bH = 0,
                wH = 0,
                EH = 0,
                SH = 0,
                xH = 0,
                TH = 0,
                NH = 0,
                CH = 0,
                kH = 0,
                LH = 0,
                AH = 0,
                OH = 0,
                MH = 0,
                _H = 0,
                DH = 0,
                PH = 0,
                HH = 0,
                BH = 0,
                jH = 0;
            var FH = 0,
                IH = 0,
                qH = 0,
                RH = 0,
                UH = 0,
                zH = 0,
                WH = 0,
                XH = 0,
                VH = 0,
                $H = 0,
                JH = 0,
                KH = 0,
                QH = 0,
                GH = 0,
                YH = 0,
                ZH = 0,
                eB = 0,
                tB = 0,
                nB = 0,
                rB = 0;
            var iB = 0,
                sB = 0,
                oB = 0,
                uB = 0,
                aB = 0,
                fB = 0,
                lB = 0,
                cB = 0,
                hB = 0,
                pB = 0,
                dB = 0,
                vB = 0,
                mB = 0,
                gB = 0,
                yB = 0,
                bB = 0,
                wB = 0,
                EB = 0,
                SB = 0,
                xB = 0;
            var TB = 0,
                NB = 0,
                CB = 0,
                kB = 0,
                LB = 0,
                AB = 0,
                OB = 0,
                MB = 0,
                _B = 0,
                DB = 0,
                PB = 0,
                HB = 0,
                BB = 0,
                jB = 0,
                FB = 0,
                IB = 0,
                qB = 0,
                RB = 0,
                UB = 0,
                zB = 0;
            var WB = 0,
                XB = 0,
                VB = 0,
                $B = 0,
                JB = 0;
            VB = c;
            c = c + 160 | 0;
            rD = VB + 108 | 0;
            nD = VB + 80 | 0;
            eB = VB + 72 | 0;
            tB = VB + 64 | 0;
            nB = VB + 56 | 0;
            PP = VB;
            Xt = u << 2;
            Vt = Xt + 17 | 0;
            Om = (u | 0) / 7 & -1;
            Dy = Om + 2 | 0;
            Bw = Xt + 16 | 0;
            IS = e + 16 | 0;
            UT = s[IS >> 2] | 0;
            XC = e + 20 | 0;
            JL = s[XC >> 2] | 0;
            GO = e + 24 | 0;
            $t = s[GO >> 2] | 0;
            Gr = e + 28 | 0;
            co = s[Gr >> 2] | 0;
            va = e + 32 | 0;
            bl = s[va >> 2] | 0;
            Sh = e + 36 | 0;
            Nd = s[Sh >> 2] | 0;
            Gv = e + 40 | 0;
            am = s[Gv >> 2] | 0;
            bm = e + 44 | 0;
            Mm = s[bm >> 2] | 0;
            Bi(rD, 0, 0, Bw, 0, 0, Bw, Bw, Bw, UT, JL, $t, co, bl, Nd, am, Mm);
            Um = Om + 1 | 0;
            Zm = PP + 52 | 0;
            s[Zm >> 2] = Um;
            lg = Um * 52 | 0;
            Eg = rt(lg, Um) | 0;
            _g = Ms(Eg) | 0;
            s[PP >> 2] = _g;
            zg = (u | 0) > 6;
            if (zg) {
                cy = _g;
                Sy = Um;
                eH = 1;
                while (1) {
                    ey = cy + (Sy * 52 | 0) | 0;
                    Py = PP + (eH << 2) | 0;
                    s[Py >> 2] = ey;
                    Xy = eH + 1 | 0;
                    nb = s[Zm >> 2] | 0;
                    pb = (Xy | 0) < (nb | 0);
                    if (pb) {
                        cy = ey;
                        Sy = nb;
                        eH = Xy
                    } else {
                        Z = nb;
                        break
                    }
                }
            } else {
                Z = Um
            }
            Tb = Xt + 48 | 0;
            Hb = Tb >> 5;
            Vb = Hb << 2;
            rw = Ds(Vt, Vb) | 0;
            dw = PP + 24 | 0;
            s[dw >> 2] = rw;
            Nw = s[rw >> 2] | 0;
            jw = Nw | 511;
            s[rw >> 2] = jw;
            Jw = rw + (Hb << 2) | 0;
            sE = s[Jw >> 2] | 0;
            mE = sE | 511;
            s[Jw >> 2] = mE;
            kE = Hb << 1;
            FE = rw + (kE << 2) | 0;
            KE = s[FE >> 2] | 0;
            oS = KE | 511;
            s[FE >> 2] = oS;
            gS = Hb * 3 | 0;
            LS = rw + (gS << 2) | 0;
            qS = s[LS >> 2] | 0;
            GS = qS | 511;
            s[LS >> 2] = GS;
            ax = Hb << 2;
            bx = rw + (ax << 2) | 0;
            Ox = s[bx >> 2] | 0;
            Rx = Ox | 511;
            s[bx >> 2] = Rx;
            Yx = Hb * 5 | 0;
            fT = rw + (Yx << 2) | 0;
            wT = s[fT >> 2] | 0;
            MT = wT | 511;
            s[fT >> 2] = MT;
            zT = Hb * 6 | 0;
            eN = rw + (zT << 2) | 0;
            cN = s[eN >> 2] | 0;
            SN = cN | 511;
            s[eN >> 2] = SN;
            DN = Hb * 7 | 0;
            WN = rw + (DN << 2) | 0;
            tC = s[WN >> 2] | 0;
            hC = tC | 511;
            s[WN >> 2] = hC;
            xC = Hb << 3;
            PC = rw + (xC << 2) | 0;
            VC = s[PC >> 2] | 0;
            rk = VC | 511;
            s[PC >> 2] = rk;
            dk = Xt + 9 | 0;
            WP = dk;
            while (1) {
                Nk = WP & 31;
                Bk = 1 << Nk;
                $k = WP >> 5;
                iL = rw + ($k << 2) | 0;
                vL = s[iL >> 2] | 0;
                CL = Bk | vL;
                s[iL >> 2] = CL;
                jL = WP + 1 | 0;
                KL = (jL | 0) < (Vt | 0);
                if (KL) {
                    WP = jL
                } else {
                    BP = dk;
                    break
                }
            }
            while (1) {
                Zb = BP & 31;
                ew = 1 << Zb;
                tw = BP >> 5;
                nw = tw + Hb | 0;
                iw = rw + (nw << 2) | 0;
                sw = s[iw >> 2] | 0;
                ow = ew | sw;
                s[iw >> 2] = ow;
                uw = BP + 1 | 0;
                aw = (uw | 0) < (Vt | 0);
                if (aw) {
                    BP = uw
                } else {
                    break
                }
            }
            gb = Hb << 1;
            jP = dk;
            while (1) {
                fw = jP & 31;
                lw = 1 << fw;
                cw = jP >> 5;
                hw = cw + gb | 0;
                pw = rw + (hw << 2) | 0;
                vw = s[pw >> 2] | 0;
                mw = lw | vw;
                s[pw >> 2] = mw;
                gw = jP + 1 | 0;
                yw = (gw | 0) < (Vt | 0);
                if (yw) {
                    jP = gw
                } else {
                    FP = dk;
                    break
                }
            }
            while (1) {
                bw = FP & 31;
                ww = 1 << bw;
                Ew = FP >> 5;
                Sw = Ew + gS | 0;
                xw = rw + (Sw << 2) | 0;
                Tw = s[xw >> 2] | 0;
                Cw = ww | Tw;
                s[xw >> 2] = Cw;
                kw = FP + 1 | 0;
                Lw = (kw | 0) < (Vt | 0);
                if (Lw) {
                    FP = kw
                } else {
                    IP = dk;
                    break
                }
            }
            while (1) {
                Aw = IP & 31;
                Ow = 1 << Aw;
                Mw = IP >> 5;
                _w = Mw + Vb | 0;
                Dw = rw + (_w << 2) | 0;
                Pw = s[Dw >> 2] | 0;
                Hw = Ow | Pw;
                s[Dw >> 2] = Hw;
                Fw = IP + 1 | 0;
                Iw = (Fw | 0) < (Vt | 0);
                if (Iw) {
                    IP = Fw
                } else {
                    qP = dk;
                    break
                }
            }
            while (1) {
                qw = qP & 31;
                Rw = 1 << qw;
                Uw = qP >> 5;
                zw = Uw + Yx | 0;
                Ww = rw + (zw << 2) | 0;
                Xw = s[Ww >> 2] | 0;
                Vw = Rw | Xw;
                s[Ww >> 2] = Vw;
                $w = qP + 1 | 0;
                Kw = ($w | 0) < (Vt | 0);
                if (Kw) {
                    qP = $w
                } else {
                    RP = dk;
                    break
                }
            }
            while (1) {
                Qw = RP & 31;
                Gw = 1 << Qw;
                Yw = RP >> 5;
                Zw = Yw + zT | 0;
                eE = rw + (Zw << 2) | 0;
                tE = s[eE >> 2] | 0;
                nE = Gw | tE;
                s[eE >> 2] = nE;
                rE = RP + 1 | 0;
                iE = (rE | 0) < (Vt | 0);
                if (iE) {
                    RP = rE
                } else {
                    UP = dk;
                    break
                }
            }
            while (1) {
                oE = UP & 31;
                uE = 1 << oE;
                aE = UP >> 5;
                fE = aE + DN | 0;
                lE = rw + (fE << 2) | 0;
                cE = s[lE >> 2] | 0;
                hE = uE | cE;
                s[lE >> 2] = hE;
                pE = UP + 1 | 0;
                dE = (pE | 0) < (Vt | 0);
                if (dE) {
                    UP = pE
                } else {
                    break
                }
            }
            vE = Hb << 3;
            zP = dk;
            while (1) {
                gE = zP & 31;
                yE = 1 << gE;
                bE = zP >> 5;
                wE = bE + vE | 0;
                EE = rw + (wE << 2) | 0;
                SE = s[EE >> 2] | 0;
                xE = yE | SE;
                s[EE >> 2] = xE;
                TE = zP + 1 | 0;
                NE = (TE | 0) < (Vt | 0);
                if (NE) {
                    zP = TE
                } else {
                    lH = dk;
                    break
                }
            }
            while (1) {
                oA = rt(lH, Hb) | 0;
                gA = rw + (oA << 2) | 0;
                LA = s[gA >> 2] | 0;
                IA = LA | 511;
                s[gA >> 2] = IA;
                QA = lH + 1 | 0;
                uO = (QA | 0) < (Vt | 0);
                if (uO) {
                    lH = QA
                } else {
                    break
                }
            }
            if (zg) {
                yO = Xt + 6 | 0;
                QP = yO;
                while (1) {
                    AO = QP & 31;
                    qO = 1 << AO;
                    YO = QP >> 5;
                    fM = rw + (YO << 2) | 0;
                    wM = s[fM >> 2] | 0;
                    MM = qO | wM;
                    s[fM >> 2] = MM;
                    UM = QP + 1 | 0;
                    ZM = (UM | 0) < (dk | 0);
                    if (ZM) {
                        QP = UM
                    } else {
                        XP = yO;
                        break
                    }
                }
                while (1) {
                    rb = XP & 31;
                    ib = 1 << rb;
                    sb = XP >> 5;
                    ob = sb + Hb | 0;
                    ub = rw + (ob << 2) | 0;
                    ab = s[ub >> 2] | 0;
                    fb = ib | ab;
                    s[ub >> 2] = fb;
                    lb = XP + 1 | 0;
                    cb = (lb | 0) < (dk | 0);
                    if (cb) {
                        XP = lb
                    } else {
                        VP = yO;
                        break
                    }
                }
                while (1) {
                    hb = VP & 31;
                    db = 1 << hb;
                    vb = VP >> 5;
                    mb = vb + gb | 0;
                    yb = rw + (mb << 2) | 0;
                    bb = s[yb >> 2] | 0;
                    wb = db | bb;
                    s[yb >> 2] = wb;
                    Eb = VP + 1 | 0;
                    Sb = (Eb | 0) < (dk | 0);
                    if (Sb) {
                        VP = Eb
                    } else {
                        $P = yO;
                        break
                    }
                }
                while (1) {
                    xb = $P & 31;
                    Nb = 1 << xb;
                    Cb = $P >> 5;
                    kb = Cb + gS | 0;
                    Lb = rw + (kb << 2) | 0;
                    Ab = s[Lb >> 2] | 0;
                    Ob = Nb | Ab;
                    s[Lb >> 2] = Ob;
                    Mb = $P + 1 | 0;
                    _b = (Mb | 0) < (dk | 0);
                    if (_b) {
                        $P = Mb
                    } else {
                        JP = yO;
                        break
                    }
                }
                while (1) {
                    Db = JP & 31;
                    Pb = 1 << Db;
                    Bb = JP >> 5;
                    jb = Bb + Vb | 0;
                    Fb = rw + (jb << 2) | 0;
                    Ib = s[Fb >> 2] | 0;
                    qb = Pb | Ib;
                    s[Fb >> 2] = qb;
                    Rb = JP + 1 | 0;
                    Ub = (Rb | 0) < (dk | 0);
                    if (Ub) {
                        JP = Rb
                    } else {
                        KP = yO;
                        break
                    }
                }
                while (1) {
                    zb = KP & 31;
                    Wb = 1 << zb;
                    Xb = KP >> 5;
                    $b = Xb + Yx | 0;
                    Jb = rw + ($b << 2) | 0;
                    Kb = s[Jb >> 2] | 0;
                    Qb = Wb | Kb;
                    s[Jb >> 2] = Qb;
                    Gb = KP + 1 | 0;
                    Yb = (Gb | 0) < (dk | 0);
                    if (Yb) {
                        KP = Gb
                    } else {
                        cH = yO;
                        break
                    }
                }
                while (1) {
                    l_ = rt(cH, Hb) | 0;
                    E_ = rw + (l_ << 2) | 0;
                    __ = s[E_ >> 2] | 0;
                    z_ = __ | 63;
                    s[E_ >> 2] = z_;
                    Jt = cH + 1 | 0;
                    on = (Jt | 0) < (dk | 0);
                    if (on) {
                        cH = Jt
                    } else {
                        break
                    }
                }
            }
            gn = (Xt | 0) > 0;
            if (gn) {
                hH = 9;
                while (1) {
                    Ln = rt(hH, Hb) | 0;
                    In = rw + (Ln << 2) | 0;
                    Qn = s[In >> 2] | 0;
                    ur = Qn | 64;
                    s[In >> 2] = ur;
                    yr = hH + 1 | 0;
                    Ar = (yr | 0) < (dk | 0);
                    if (Ar) {
                        hH = yr
                    } else {
                        GP = 9;
                        break
                    }
                }
                while (1) {
                    qr = GP & 31;
                    Yr = 1 << qr;
                    fi = GP >> 5;
                    wi = fi + zT | 0;
                    Mi = rw + (wi << 2) | 0;
                    Xi = s[Mi >> 2] | 0;
                    rs = Yr | Xi;
                    s[Mi >> 2] = rs;
                    ds = GP + 1 | 0;
                    Ns = (ds | 0) < (dk | 0);
                    if (Ns) {
                        GP = ds
                    } else {
                        break
                    }
                }
            }
            qs = (u | 0) < 2;
            if (qs) {
                Gs = s[PP >> 2] | 0;
                WB = Gs + 0 | 0;
                $B = rD + 0 | 0;
                JB = WB + 52 | 0;
                do {
                    s[WB >> 2] = s[$B >> 2] | 0;
                    WB = WB + 4 | 0;
                    $B = $B + 4 | 0
                } while ((WB | 0) < (JB | 0))
            } else {
                ho = Dy << 3;
                To = rt(ho, Dy) | 0;
                Ho = Ms(To) | 0;
                Vo = Ms(To) | 0;
                s[nD >> 2] = 6;
                ru = Xt + 10 | 0;
                du = nD + (Um << 2) | 0;
                s[du >> 2] = ru;
                if (zg) {
                    Nu = u + -7 | 0;
                    Bu = 7632 + Nu | 0;
                    $u = r[Bu >> 0] | 0;
                    ia = $u & 255;
                    ka = ru;
                    Ka = Om;
                    while (1) {
                        ma = ka - ia | 0;
                        Fa = nD + (Ka << 2) | 0;
                        s[Fa >> 2] = ma;
                        uf = Ka + -1 | 0;
                        yf = (Ka | 0) > 1;
                        if (yf) {
                            ka = ma;
                            Ka = uf
                        } else {
                            break
                        }
                    }
                }
                s[Ho >> 2] = 3;
                Af = Ho + 4 | 0;
                s[Af >> 2] = 3;
                qf = s[n >> 2] | 0;
                s[Vo >> 2] = qf;
                Gf = n + 4 | 0;
                al = s[Gf >> 2] | 0;
                wl = Vo + 4 | 0;
                s[wl >> 2] = al;
                Ml = Xt + 13 | 0;
                Ul = Ho + (Um << 3) | 0;
                s[Ul >> 2] = Ml;
                Zl = (Ho + (Um << 3) | 0) + 4 | 0;
                s[Zl >> 2] = 3;
                lc = s[i >> 2] | 0;
                Ec = Vo + (Um << 3) | 0;
                s[Ec >> 2] = lc;
                _c = i + 4 | 0;
                zc = s[_c >> 2] | 0;
                eh = (Vo + (Um << 3) | 0) + 4 | 0;
                s[eh >> 2] = zc;
                ch = rt(Um, Dy) | 0;
                xh = Ho + (ch << 3) | 0;
                s[xh >> 2] = 3;
                Ph = (Ho + (ch << 3) | 0) + 4 | 0;
                s[Ph >> 2] = Ml;
                Xh = s[o >> 2] | 0;
                np = Vo + (ch << 3) | 0;
                s[np >> 2] = Xh;
                pp = o + 4 | 0;
                Tp = s[pp >> 2] | 0;
                Hp = (Vo + (ch << 3) | 0) + 4 | 0;
                s[Hp >> 2] = Tp;
                Vp = Dy << 1;
                rd = Vp + -1 | 0;
                dd = (rd | 0) > 1;
                if (dd) {
                    Cd = eB + 4 | 0;
                    jd = tB + 4 | 0;
                    Jd = nB + 4 | 0;
                    sv = Om << 1;
                    mv = sv + 2 | 0;
                    SH = 1;
                    while (1) {
                        kv = (Um | 0) < (SH | 0);
                        Fv = kv ? Um : SH;
                        Jv = (SH | 0) == (Um | 0);
                        Kv = Jv & 1;
                        Qv = Fv - Kv | 0;
                        Yv = SH - Um | 0;
                        Zv = (Yv | 0) > 0;
                        em = Zv ? Yv : 0;
                        tm = em + Kv | 0;
                        nm = (tm | 0) > (Qv | 0);
                        if (!nm) {
                            vH = tm;
                            while (1) {
                                rm = tm - vH | 0;
                                im = rm + Qv | 0;
                                sm = rt(im, Dy) | 0;
                                om = sm + vH | 0;
                                um = nD + (vH << 2) | 0;
                                fm = s[um >> 2] | 0;
                                lm = nD + (im << 2) | 0;
                                cm = s[lm >> 2] | 0;
                                hm = Ho + (om << 3) | 0;
                                s[hm >> 2] = fm;
                                pm = (Ho + (om << 3) | 0) + 4 | 0;
                                s[pm >> 2] = cm;
                                dm = fm + -2 | 0;
                                vm = cm + -2 | 0;
                                mm = cm + 2 | 0;
                                gm = fm + 2 | 0;
                                pH = dm;
                                while (1) {
                                    Nm = rt(pH, Hb) | 0;
                                    YP = vm;
                                    while (1) {
                                        Em = YP & 31;
                                        Sm = 1 << Em;
                                        xm = YP >> 5;
                                        Tm = xm + Nm | 0;
                                        Cm = rw + (Tm << 2) | 0;
                                        km = s[Cm >> 2] | 0;
                                        Lm = Sm | km;
                                        s[Cm >> 2] = Lm;
                                        Am = YP + 1 | 0;
                                        _m = (YP | 0) < (mm | 0);
                                        if (_m) {
                                            YP = Am
                                        } else {
                                            break
                                        }
                                    }
                                    ym = pH + 1 | 0;
                                    wm = (pH | 0) < (gm | 0);
                                    if (wm) {
                                        pH = ym
                                    } else {
                                        break
                                    }
                                }
                                Dm = (im | 0) > 1;
                                Pm = (vH | 0) > 1;
                                UH = Dm & Pm;
                                do {
                                    if (UH) {
                                        Hm = im + -2 | 0;
                                        Bm = PP + (Hm << 2) | 0;
                                        jm = s[Bm >> 2] | 0;
                                        zt = vH + -1 | 0;
                                        Fm = jm + (zt * 52 | 0) | 0;
                                        ji(eB, Fm, fm, cm, 0);
                                        Wt = vH + -2 | 0;
                                        Im = jm + (Wt * 52 | 0) | 0;
                                        ji(tB, Im, fm, cm, 0);
                                        qm = im + -1 | 0;
                                        Rm = PP + (qm << 2) | 0;
                                        zm = s[Rm >> 2] | 0;
                                        Wm = zm + (Wt * 52 | 0) | 0;
                                        ji(nB, Wm, fm, cm, 0);
                                        Xm = s[eB >> 2] | 0;
                                        Vm = s[tB >> 2] | 0;
                                        $m = (Vm | 0) < (Xm | 0);
                                        Jm = $m ? Vm : Xm;
                                        Km = Vm ^ Xm;
                                        Qm = Km ^ Jm;
                                        Gm = s[Cd >> 2] | 0;
                                        Ym = s[jd >> 2] | 0;
                                        eg = (Ym | 0) < (Gm | 0);
                                        tg = eg ? Ym : Gm;
                                        ng = Ym ^ Gm;
                                        rg = ng ^ tg;
                                        ig = s[nB >> 2] | 0;
                                        sg = (ig | 0) < (Qm | 0);
                                        og = sg ? ig : Qm;
                                        ug = ig ^ Qm;
                                        ag = ug ^ og;
                                        s[nB >> 2] = ag;
                                        fg = s[Jd >> 2] | 0;
                                        cg = (fg | 0) < (rg | 0);
                                        hg = cg ? fg : rg;
                                        pg = rg ^ fg;
                                        dg = pg ^ hg;
                                        s[Jd >> 2] = dg;
                                        vg = (og | 0) < (Jm | 0);
                                        mg = vg ? og : Jm;
                                        s[eB >> 2] = mg;
                                        gg = og ^ Jm;
                                        yg = gg ^ mg;
                                        s[tB >> 2] = yg;
                                        bg = (hg | 0) < (tg | 0);
                                        wg = bg ? hg : tg;
                                        s[Cd >> 2] = wg;
                                        Sg = hg ^ tg;
                                        xg = Sg ^ wg;
                                        s[jd >> 2] = xg;
                                        Tg = zm + (zt * 52 | 0) | 0;
                                        Ng = om - Dy | 0;
                                        Cg = Ng + -1 | 0;
                                        kg = Ho + (Cg << 3) | 0;
                                        Lg = s[kg >> 2] | 0;
                                        Ag = (Ho + (Cg << 3) | 0) + 4 | 0;
                                        Og = s[Ag >> 2] | 0;
                                        Mg = Ho + (Ng << 3) | 0;
                                        Dg = s[Mg >> 2] | 0;
                                        Pg = (Ho + (Ng << 3) | 0) + 4 | 0;
                                        Hg = s[Pg >> 2] | 0;
                                        Bg = om + -1 | 0;
                                        jg = Ho + (Bg << 3) | 0;
                                        Fg = s[jg >> 2] | 0;
                                        Ig = (Ho + (Bg << 3) | 0) + 4 | 0;
                                        qg = s[Ig >> 2] | 0;
                                        Rg = Vo + (Cg << 3) | 0;
                                        Ug = s[Rg >> 2] | 0;
                                        Wg = (Vo + (Cg << 3) | 0) + 4 | 0;
                                        Xg = s[Wg >> 2] | 0;
                                        Vg = Vo + (Ng << 3) | 0;
                                        $g = s[Vg >> 2] | 0;
                                        Jg = (Vo + (Ng << 3) | 0) + 4 | 0;
                                        Kg = s[Jg >> 2] | 0;
                                        Qg = Vo + (Bg << 3) | 0;
                                        Gg = s[Qg >> 2] | 0;
                                        Yg = (Vo + (Bg << 3) | 0) + 4 | 0;
                                        Zg = s[Yg >> 2] | 0;
                                        Bi(Tg, Lg, Og, Dg, Hg, Fg, qg, fm, cm, Ug, Xg, $g, Kg, Gg, Zg, yg, xg);
                                        YD = Tg
                                    } else {
                                        ty = (vH | 0) > 0;
                                        YH = Dm & ty;
                                        if (YH) {
                                            ny = im + -2 | 0;
                                            ry = PP + (ny << 2) | 0;
                                            iy = s[ry >> 2] | 0;
                                            Ut = vH + -1 | 0;
                                            sy = iy + (Ut * 52 | 0) | 0;
                                            YD = sy;
                                            break
                                        }
                                        oy = (im | 0) > 0;
                                        WH = oy & Pm;
                                        if (WH) {
                                            uy = im + -1 | 0;
                                            ay = PP + (uy << 2) | 0;
                                            fy = s[ay >> 2] | 0;
                                            Rt = vH + -2 | 0;
                                            ly = fy + (Rt * 52 | 0) | 0;
                                            YD = ly
                                        } else {
                                            YD = rD
                                        }
                                    }
                                } while (0);
                                hy = Vo + (om << 3) | 0;
                                Fi(hy, YD, fm, cm, 2, f, l, h) | 0;
                                py = (im | 0) > 0;
                                dy = (vH | 0) > 0;
                                XH = py & dy;
                                if (XH) {
                                    vy = im + -1 | 0;
                                    my = PP + (vy << 2) | 0;
                                    gy = s[my >> 2] | 0;
                                    qt = vH + -1 | 0;
                                    yy = gy + (qt * 52 | 0) | 0;
                                    by = om - Dy | 0;
                                    wy = by + -1 | 0;
                                    Ey = Ho + (wy << 3) | 0;
                                    xy = s[Ey >> 2] | 0;
                                    Ty = (Ho + (wy << 3) | 0) + 4 | 0;
                                    Ny = s[Ty >> 2] | 0;
                                    Cy = Ho + (by << 3) | 0;
                                    ky = s[Cy >> 2] | 0;
                                    Ly = (Ho + (by << 3) | 0) + 4 | 0;
                                    Ay = s[Ly >> 2] | 0;
                                    Oy = om + -1 | 0;
                                    My = Ho + (Oy << 3) | 0;
                                    _y = s[My >> 2] | 0;
                                    Hy = (Ho + (Oy << 3) | 0) + 4 | 0;
                                    By = s[Hy >> 2] | 0;
                                    jy = Vo + (wy << 3) | 0;
                                    Fy = s[jy >> 2] | 0;
                                    Iy = (Vo + (wy << 3) | 0) + 4 | 0;
                                    qy = s[Iy >> 2] | 0;
                                    Ry = Vo + (by << 3) | 0;
                                    Uy = s[Ry >> 2] | 0;
                                    zy = (Vo + (by << 3) | 0) + 4 | 0;
                                    Wy = s[zy >> 2] | 0;
                                    Vy = Vo + (Oy << 3) | 0;
                                    $y = s[Vy >> 2] | 0;
                                    Jy = (Vo + (Oy << 3) | 0) + 4 | 0;
                                    Ky = s[Jy >> 2] | 0;
                                    Qy = s[hy >> 2] | 0;
                                    Gy = (Vo + (om << 3) | 0) + 4 | 0;
                                    Yy = s[Gy >> 2] | 0;
                                    Bi(yy, xy, Ny, ky, Ay, _y, By, fm, cm, Fy, qy, Uy, Wy, $y, Ky, Qy, Yy)
                                }
                                Zy = vH + 1 | 0;
                                eb = (vH | 0) < (Qv | 0);
                                if (eb) {
                                    vH = Zy
                                } else {
                                    break
                                }
                            }
                        }
                        tb = SH + 1 | 0;
                        aP = (SH | 0) == (mv | 0);
                        if (aP) {
                            break
                        } else {
                            SH = tb
                        }
                    }
                }
                _s(Ho);
                _s(Vo)
            }
            CE = PP + 28 | 0;
            LE = nD + 4 | 0;
            AE = Z << 2;
            OE = AE + -4 | 0;
            oo(CE | 0, LE | 0, OE | 0) | 0;
            ME = s[Zm >> 2] | 0;
            _E = ME + -1 | 0;
            DE = (PP + (_E << 2) | 0) + 28 | 0;
            s[DE >> 2] = Vt;
            PE = s[PP >> 2] | 0;
            ji(IS, PE, -1, -1, 1);
            HE = s[Zm >> 2] | 0;
            ct = HE + -1 | 0;
            BE = PE + (ct * 52 | 0) | 0;
            jE = Vt << 1;
            IE = jE + -1 | 0;
            ji(GO, BE, IE, -1, 1);
            qE = PP + (ct << 2) | 0;
            RE = s[qE >> 2] | 0;
            ji(va, RE, -1, IE, 1);
            UE = RE + (ct * 52 | 0) | 0;
            ji(Gv, UE, IE, IE, 1);
            zE = 0 - l | 0;
            WE = zE << 2;
            XE = l << 3;
            VE = 0 - h | 0;
            $E = VE << 2;
            JE = h << 3;
            QE = s[IS >> 2] | 0;
            GE = (XE | 0) < (QE | 0);
            YE = GE ? XE : QE;
            ZE = WE - YE | 0;
            eS = (YE | 0) > (WE | 0);
            tS = eS ? ZE : 0;
            nS = WE - tS | 0;
            s[IS >> 2] = nS;
            rS = s[XC >> 2] | 0;
            iS = (JE | 0) < (rS | 0);
            sS = iS ? JE : rS;
            uS = $E - sS | 0;
            aS = (sS | 0) > ($E | 0);
            fS = aS ? uS : 0;
            lS = $E - fS | 0;
            s[XC >> 2] = lS;
            cS = s[GO >> 2] | 0;
            hS = (XE | 0) < (cS | 0);
            pS = hS ? XE : cS;
            dS = WE - pS | 0;
            vS = (pS | 0) > (WE | 0);
            mS = vS ? dS : 0;
            yS = WE - mS | 0;
            s[GO >> 2] = yS;
            bS = s[Gr >> 2] | 0;
            wS = (JE | 0) < (bS | 0);
            ES = wS ? JE : bS;
            SS = $E - ES | 0;
            xS = (ES | 0) > ($E | 0);
            TS = xS ? SS : 0;
            NS = $E - TS | 0;
            s[Gr >> 2] = NS;
            CS = s[va >> 2] | 0;
            kS = (XE | 0) < (CS | 0);
            AS = kS ? XE : CS;
            OS = WE - AS | 0;
            MS = (AS | 0) > (WE | 0);
            _S = MS ? OS : 0;
            DS = WE - _S | 0;
            s[va >> 2] = DS;
            PS = s[Sh >> 2] | 0;
            HS = (JE | 0) < (PS | 0);
            BS = HS ? JE : PS;
            jS = $E - BS | 0;
            FS = (BS | 0) > ($E | 0);
            RS = FS ? jS : 0;
            US = $E - RS | 0;
            s[Sh >> 2] = US;
            zS = s[Gv >> 2] | 0;
            WS = (XE | 0) < (zS | 0);
            XS = WS ? XE : zS;
            VS = WE - XS | 0;
            $S = (XS | 0) > (WE | 0);
            JS = $S ? VS : 0;
            KS = WE - JS | 0;
            s[Gv >> 2] = KS;
            QS = s[bm >> 2] | 0;
            YS = (JE | 0) < (QS | 0);
            ZS = YS ? JE : QS;
            ex = $E - ZS | 0;
            tx = (ZS | 0) > ($E | 0);
            nx = tx ? ex : 0;
            rx = $E - nx | 0;
            s[bm >> 2] = rx;
            ix = Vt << 2;
            sx = rt(ix, Hb) | 0;
            ox = Ms(sx) | 0;
            ux = a & 7;
            switch (ux | 0) {
                case 6:
                    {
                        fx = (Vt | 0) > 0;
                        if (fx) {
                            lx = (Hb | 0) > 0;
                            wH = 0;
                            while (1) {
                                GT = (wH | 0) % 3 & -1;
                                YT = GT + wH | 0;
                                ZT = YT << 1;
                                tN = ZT & 2;
                                nN = wH << 1;
                                rN = (nN | 0) % 3 & -1;
                                iN = rN + nN | 0;
                                sN = iN << 2;
                                oN = sN & 4;
                                uN = oN | tN;
                                aN = wH * 3 | 0;
                                fN = (aN | 0) % 3 & -1;
                                lN = fN + aN | 0;
                                hN = lN << 3;
                                pN = hN & 8;
                                dN = uN | pN;
                                vN = wH << 2;
                                mN = (vN | 0) % 3 & -1;
                                gN = mN + vN | 0;
                                yN = gN << 4;
                                bN = yN & 16;
                                wN = dN | bN;
                                EN = wH * 5 | 0;
                                xN = (EN | 0) % 3 & -1;
                                TN = xN + EN | 0;
                                NN = TN << 5;
                                CN = NN & 32;
                                kN = wN | CN;
                                LN = kN ^ 63;
                                AN = LN << 6;
                                ON = AN | LN;
                                if (lx) {
                                    MN = ON << 12;
                                    _N = ON << 24;
                                    PN = MN | ON;
                                    HN = PN | _N;
                                    BN = rt(wH, Hb) | 0;
                                    uH = 0;
                                    LH = HN;
                                    while (1) {
                                        jN = uH + BN | 0;
                                        FN = ox + (jN << 2) | 0;
                                        s[FN >> 2] = LH;
                                        IN = LH >>> 2;
                                        qN = LH << 4;
                                        RN = IN | qN;
                                        UN = uH + 1 | 0;
                                        SP = (UN | 0) == (Hb | 0);
                                        if (SP) {
                                            break
                                        } else {
                                            uH = UN;
                                            LH = RN
                                        }
                                    }
                                }
                                zN = wH + 1 | 0;
                                xP = (zN | 0) == (Vt | 0);
                                if (xP) {
                                    break
                                } else {
                                    wH = zN
                                }
                            }
                        }
                        break
                    };
                case 5:
                    {
                        cx = (Vt | 0) > 0;
                        if (cx) {
                            hx = (Hb | 0) > 0;
                            bH = 0;
                            while (1) {
                                rT = (bH | 0) % 6 & -1;
                                iT = (rT | 0) == 0;
                                sT = iT & 1;
                                oT = sT << 1;
                                uT = bH << 1;
                                aT = (uT | 0) % 6 & -1;
                                lT = (aT | 0) == 0;
                                cT = lT & 1;
                                hT = cT << 2;
                                pT = bH * 3 | 0;
                                dT = (pT | 0) % 6 & -1;
                                vT = (dT | 0) == 0;
                                mT = vT & 1;
                                gT = mT << 3;
                                yT = bH << 2;
                                bT = (yT | 0) % 6 & -1;
                                ET = (bT | 0) == 0;
                                ST = ET & 1;
                                xT = ST << 4;
                                TT = bH * 5 | 0;
                                NT = (TT | 0) % 6 & -1;
                                CT = (NT | 0) == 0;
                                kT = CT & 1;
                                LT = kT << 5;
                                AT = oT | hT;
                                OT = AT | gT;
                                _T = OT | xT;
                                DT = _T | LT;
                                PT = DT | 1;
                                HT = PT << 6;
                                BT = HT | PT;
                                if (hx) {
                                    jT = BT << 12;
                                    FT = BT << 24;
                                    IT = jT | BT;
                                    qT = IT | FT;
                                    RT = rt(bH, Hb) | 0;
                                    oH = 0;
                                    kH = qT;
                                    while (1) {
                                        WT = oH + RT | 0;
                                        XT = ox + (WT << 2) | 0;
                                        s[XT >> 2] = kH;
                                        VT = kH >>> 2;
                                        $T = kH << 4;
                                        JT = VT | $T;
                                        KT = oH + 1 | 0;
                                        wP = (KT | 0) == (Hb | 0);
                                        if (wP) {
                                            break
                                        } else {
                                            oH = KT;
                                            kH = JT
                                        }
                                    }
                                }
                                QT = bH + 1 | 0;
                                EP = (QT | 0) == (Vt | 0);
                                if (EP) {
                                    break
                                } else {
                                    bH = QT
                                }
                            }
                        }
                        break
                    };
                case 4:
                    {
                        px = (Vt | 0) > 0;
                        if (px) {
                            yH = 0;
                            CH = 7;
                            while (1) {
                                Vx = rt(yH, Hb) | 0;
                                $x = ox + (Vx << 2) | 0;
                                Jx = CH & 1;
                                Kx = 0 - Jx | 0;
                                Qx = Kx ^ 204;
                                Gx = Qx & 255;
                                eo($x | 0, Gx | 0, Vb | 0) | 0;
                                Zx = CH >>> 1;
                                eT = CH << 5;
                                tT = Zx | eT;
                                nT = yH + 1 | 0;
                                bP = (nT | 0) == (Vt | 0);
                                if (bP) {
                                    break
                                } else {
                                    yH = nT;
                                    CH = tT
                                }
                            }
                        }
                        break
                    };
                case 3:
                    {
                        dx = (Vt | 0) > 0;
                        if (dx) {
                            Dx = (Hb | 0) > 0;
                            gH = 0;
                            MH = 1227133513;
                            while (1) {
                                if (Dx) {
                                    Px = rt(gH, Hb) | 0;
                                    rH = 0;
                                    OH = MH;
                                    while (1) {
                                        Hx = rH + Px | 0;
                                        Bx = ox + (Hx << 2) | 0;
                                        s[Bx >> 2] = OH;
                                        jx = OH >>> 2;
                                        Fx = OH << 1;
                                        Ix = jx | Fx;
                                        qx = rH + 1 | 0;
                                        gP = (qx | 0) == (Hb | 0);
                                        if (gP) {
                                            break
                                        } else {
                                            rH = qx;
                                            OH = Ix
                                        }
                                    }
                                }
                                Ux = MH >>> 1;
                                zx = MH << 2;
                                Wx = Ux | zx;
                                Xx = gH + 1 | 0;
                                yP = (Xx | 0) == (Vt | 0);
                                if (yP) {
                                    break
                                } else {
                                    gH = Xx;
                                    MH = Wx
                                }
                            }
                        }
                        break
                    };
                case 2:
                    {
                        vx = (Vt | 0) > 0;
                        if (vx) {
                            mH = 0;
                            NH = 255;
                            while (1) {
                                Nx = rt(mH, Hb) | 0;
                                Cx = ox + (Nx << 2) | 0;
                                kx = NH & 255;
                                eo(Cx | 0, kx | 0, Vb | 0) | 0;
                                Lx = NH << 8;
                                Ax = NH >>> 16;
                                Mx = Lx | Ax;
                                _x = mH + 1 | 0;
                                mP = (_x | 0) == (Vt | 0);
                                if (mP) {
                                    break
                                } else {
                                    mH = _x;
                                    NH = Mx
                                }
                            }
                        }
                        break
                    };
                case 0:
                    {
                        mx = (Vt | 0) > 0;
                        if (mx) {
                            aH = 0;
                            TH = 85;
                            while (1) {
                                wx = rt(aH, Hb) | 0;
                                Ex = ox + (wx << 2) | 0;
                                Sx = TH & 255;
                                eo(Ex | 0, Sx | 0, Vb | 0) | 0;
                                xx = TH ^ 255;
                                Tx = aH + 1 | 0;
                                vP = (Tx | 0) == (Vt | 0);
                                if (vP) {
                                    break
                                } else {
                                    aH = Tx;
                                    TH = xx
                                }
                            }
                        }
                        break
                    };
                case 1:
                    {
                        eo(ox | 0, 85, sx | 0) | 0;
                        break
                    };
                default:
                    {
                        gx = (Vt | 0) > 0;
                        if (gx) {
                            yx = (Hb | 0) > 0;
                            EH = 0;
                            while (1) {
                                XN = EH & 1;
                                VN = (EH | 0) % 3 & -1;
                                $N = EH + 1 | 0;
                                JN = $N + VN | 0;
                                KN = JN << 1;
                                QN = KN & 2;
                                GN = QN | XN;
                                YN = EH << 1;
                                ZN = (YN | 0) % 3 & -1;
                                eC = ZN + EH | 0;
                                nC = eC << 2;
                                rC = nC & 4;
                                iC = GN | rC;
                                sC = EH * 3 | 0;
                                oC = (sC | 0) % 3 & -1;
                                uC = oC + $N | 0;
                                aC = uC << 3;
                                fC = aC & 8;
                                lC = iC | fC;
                                cC = EH << 2;
                                pC = (cC | 0) % 3 & -1;
                                dC = pC + EH | 0;
                                vC = dC << 4;
                                mC = vC & 16;
                                gC = lC | mC;
                                yC = EH * 5 | 0;
                                bC = (yC | 0) % 3 & -1;
                                wC = bC + $N | 0;
                                EC = wC << 5;
                                SC = EC & 32;
                                TC = gC | SC;
                                NC = TC ^ 63;
                                CC = NC << 6;
                                kC = CC | NC;
                                if (yx) {
                                    LC = kC << 12;
                                    AC = kC << 24;
                                    OC = LC | kC;
                                    MC = OC | AC;
                                    _C = rt(EH, Hb) | 0;
                                    nH = 0;
                                    AH = MC;
                                    while (1) {
                                        DC = nH + _C | 0;
                                        HC = ox + (DC << 2) | 0;
                                        s[HC >> 2] = AH;
                                        BC = AH >>> 2;
                                        jC = AH << 4;
                                        FC = BC | jC;
                                        IC = nH + 1 | 0;
                                        fP = (IC | 0) == (Hb | 0);
                                        if (fP) {
                                            break
                                        } else {
                                            nH = IC;
                                            AH = FC
                                        }
                                    }
                                }
                                dP = ($N | 0) == (Vt | 0);
                                if (dP) {
                                    break
                                } else {
                                    EH = $N
                                }
                            }
                        }
                    }
            }
            qC = (HE | 0) > 0;
            if (qC) {
                RC = h + -1 | 0;
                UC = l + -1 | 0;
                eD = s[dw >> 2] | 0;
                fH = 0;
                DB = 0;
                while (1) {
                    zC = (PP + (fH << 2) | 0) + 28 | 0;
                    WC = s[zC >> 2] | 0;
                    $C = (DB | 0) < (WC | 0);
                    ZP = 0;
                    HB = 0;
                    while (1) {
                        JC = (PP + (ZP << 2) | 0) + 28 | 0;
                        KC = s[JC >> 2] | 0;
                        QC = PP + (ZP << 2) | 0;
                        GC = s[QC >> 2] | 0;
                        YC = (GC + (fH * 52 | 0) | 0) + 44 | 0;
                        ZC = s[YC >> 2] | 0;
                        ek = DB - ZC | 0;
                        tk = (GC + (fH * 52 | 0) | 0) + 48 | 0;
                        nk = s[tk >> 2] | 0;
                        ik = HB - nk | 0;
                        if ($C) {
                            sk = (GC + (fH * 52 | 0) | 0) + 28 | 0;
                            ok = (GC + (fH * 52 | 0) | 0) + 24 | 0;
                            uk = (GC + (fH * 52 | 0) | 0) + 16 | 0;
                            ak = (GC + (fH * 52 | 0) | 0) + 12 | 0;
                            fk = (GC + (fH * 52 | 0) | 0) + 4 | 0;
                            lk = GC + (fH * 52 | 0) | 0;
                            ck = s[sk >> 2] | 0;
                            hk = s[ok >> 2] | 0;
                            pk = s[uk >> 2] | 0;
                            vk = s[ak >> 2] | 0;
                            mk = s[fk >> 2] | 0;
                            gk = s[lk >> 2] | 0;
                            yk = (GC + (fH * 52 | 0) | 0) + 32 | 0;
                            bk = rt(ck, ik) | 0;
                            wk = rt(hk, ek) | 0;
                            Ek = (GC + (fH * 52 | 0) | 0) + 20 | 0;
                            Sk = rt(pk, ik) | 0;
                            xk = rt(vk, ek) | 0;
                            Tk = (GC + (fH * 52 | 0) | 0) + 8 | 0;
                            Ck = rt(mk, ik) | 0;
                            kk = rt(gk, ek) | 0;
                            Lk = s[yk >> 2] | 0;
                            Ak = wk + bk | 0;
                            Ok = s[Ek >> 2] | 0;
                            Mk = xk + Sk | 0;
                            _k = s[Tk >> 2] | 0;
                            Dk = kk + Ck | 0;
                            Pk = Ak + Lk | 0;
                            Hk = Mk + Ok | 0;
                            jk = Dk + _k | 0;
                            Fk = (HB | 0) < (KC | 0);
                            Ik = (GC + (fH * 52 | 0) | 0) + 36 | 0;
                            qk = (GC + (fH * 52 | 0) | 0) + 40 | 0;
                            _B = DB;
                            IB = Pk;
                            RB = jk;
                            zB = Hk;
                            while (1) {
                                if (Fk) {
                                    Rk = rt(_B, Hb) | 0;
                                    PB = HB;
                                    FB = IB;
                                    qB = RB;
                                    UB = zB;
                                    while (1) {
                                        Uk = PB >> 5;
                                        zk = Uk + Rk | 0;
                                        Wk = eD + (zk << 2) | 0;
                                        Xk = s[Wk >> 2] | 0;
                                        Vk = PB & 31;
                                        Jk = 1 << Vk;
                                        Kk = Xk & Jk;
                                        Qk = (Kk | 0) == 0;
                                        if (Qk) {
                                            Gk = (FB | 0) == 0;
                                            if (Gk) {
                                                Yk = qB >>> 31;
                                                Zk = Yk + 2147483647 | 0;
                                                eL = UB >>> 31;
                                                tL = eL + 2147483647 | 0;
                                                TL = Zk;
                                                kL = tL
                                            } else {
                                                nL = (FB | 0) < 0;
                                                if (nL) {
                                                    rL = 0 - qB | 0;
                                                    sL = 0 - UB | 0;
                                                    oL = 0 - FB | 0;
                                                    m = oL;
                                                    M = sL;
                                                    _ = rL
                                                } else {
                                                    m = FB;
                                                    M = UB;
                                                    _ = qB
                                                }
                                                uL = m >> 1;
                                                aL = _ >> 31;
                                                fL = uL + aL | 0;
                                                lL = fL ^ aL;
                                                cL = lL + _ | 0;
                                                hL = (cL | 0) / (m | 0) & -1;
                                                pL = s[Ik >> 2] | 0;
                                                dL = pL + hL | 0;
                                                mL = M >> 31;
                                                gL = uL + mL | 0;
                                                yL = gL ^ mL;
                                                bL = yL + M | 0;
                                                wL = (bL | 0) / (m | 0) & -1;
                                                EL = s[qk >> 2] | 0;
                                                SL = EL + wL | 0;
                                                TL = dL;
                                                kL = SL
                                            }
                                            xL = TL >> 2;
                                            NL = kL >> 2;
                                            LL = (NL | 0) >= (h | 0);
                                            AL = LL ? RC : NL;
                                            OL = (AL | 0) > 0;
                                            ML = OL ? AL : 0;
                                            _L = rt(ML, l) | 0;
                                            DL = (xL | 0) >= (l | 0);
                                            PL = DL ? UC : xL;
                                            HL = (PL | 0) > 0;
                                            BL = HL ? PL : 0;
                                            FL = _L + BL | 0;
                                            IL = f + FL | 0;
                                            qL = r[IL >> 0] | 0;
                                            RL = qL << 24 >> 24 != 0;
                                            UL = RL & 1;
                                            zL = UL << Vk;
                                            WL = ox + (zk << 2) | 0;
                                            XL = s[WL >> 2] | 0;
                                            VL = zL ^ XL;
                                            s[WL >> 2] = VL
                                        }
                                        $L = qB + mk | 0;
                                        QL = UB + pk | 0;
                                        GL = FB + ck | 0;
                                        YL = PB + 1 | 0;
                                        cP = (YL | 0) == (KC | 0);
                                        if (cP) {
                                            break
                                        } else {
                                            PB = YL;
                                            FB = GL;
                                            qB = $L;
                                            UB = QL
                                        }
                                    }
                                }
                                ZL = RB + gk | 0;
                                eA = zB + vk | 0;
                                tA = IB + hk | 0;
                                nA = _B + 1 | 0;
                                pP = (nA | 0) == (WC | 0);
                                if (pP) {
                                    break
                                } else {
                                    _B = nA;
                                    IB = tA;
                                    RB = ZL;
                                    zB = eA
                                }
                            }
                        }
                        rA = ZP + 1 | 0;
                        uP = (rA | 0) == (HE | 0);
                        if (uP) {
                            break
                        } else {
                            ZP = rA;
                            HB = KC
                        }
                    }
                    iA = fH + 1 | 0;
                    hP = (iA | 0) == (HE | 0);
                    if (hP) {
                        break
                    } else {
                        fH = iA;
                        DB = WC
                    }
                }
            }
            sA = a >> 3;
            uA = sA ^ 1;
            aA = u + -1 | 0;
            fA = (7296 + (aA << 2) | 0) + uA | 0;
            lA = r[fA >> 0] | 0;
            cA = lA & 255;
            hA = 7528 + aA | 0;
            pA = r[hA >> 0] | 0;
            dA = pA & 255;
            lt = dA + uA | 0;
            vA = 7456 + lt | 0;
            mA = r[vA >> 0] | 0;
            yA = mA & 255;
            bA = (u | 0) == 1;
            if (bA) {
                v = 26
            } else {
                wA = (u >>> 0) / 7 & -1;
                EA = u << 4;
                SA = u + 8 | 0;
                xA = rt(EA, SA) | 0;
                TA = wA * 5 | 0;
                NA = TA + 10 | 0;
                CA = TA + 8 | 0;
                kA = rt(NA, CA) | 0;
                AA = u >>> 0 < 7;
                OA = AA ? 36 : 0;
                MA = xA + 83 | 0;
                _A = MA + OA | 0;
                DA = _A - kA | 0;
                PA = DA >>> 3;
                v = PA
            }
            HA = (v >>> 0) / (cA >>> 0) & -1;
            BA = (v >>> 0) % (cA >>> 0) & -1;
            jA = cA - BA | 0;
            FA = cA << 2;
            qA = Ms(FA) | 0;
            RA = Ms(v) | 0;
            s[qA >> 2] = RA;
            UA = (lA & 255) > 1;
            if (UA) {
                VA = RA;
                tH = 1;
                while (1) {
                    zA = (tH | 0) > (jA | 0);
                    WA = zA & 1;
                    kt = WA + HA | 0;
                    XA = VA + kt | 0;
                    $A = qA + (tH << 2) | 0;
                    s[$A >> 2] = XA;
                    JA = tH + 1 | 0;
                    KA = (JA | 0) < (cA | 0);
                    if (KA) {
                        VA = XA;
                        tH = JA
                    } else {
                        break
                    }
                }
            }
            GA = HA - yA | 0;
            YA = s[dw >> 2] | 0;
            ZA = (BA | 0) != 0;
            tD = ZA ? jA : 0;
            eO = (Bw | 0) > 0;
            if (eO) {
                tO = Bw & 28;
                nO = tO | 1;
                rO = (Hb | 0) > 0;
                iD = 0;
                yD = 0;
                _D = 0;
                qD = 0;
                dH = Bw;
                while (1) {
                    iO = rt(dH, Hb) | 0;
                    if (rO) {
                        F = Hb;
                        sD = iD;
                        bD = yD;
                        DD = _D;
                        RD = qD;
                        _H = nO;
                        while (1) {
                            fO = F + -1 | 0;
                            cO = fO + iO | 0;
                            hO = ox + (cO << 2) | 0;
                            pO = s[hO >> 2] | 0;
                            dO = YA + (cO << 2) | 0;
                            vO = s[dO >> 2] | 0;
                            mO = cO - Hb | 0;
                            gO = ox + (mO << 2) | 0;
                            bO = s[gO >> 2] | 0;
                            wO = YA + (mO << 2) | 0;
                            EO = s[wO >> 2] | 0;
                            aD = sD;
                            SD = bD;
                            HD = DD;
                            UD = RD;
                            HH = _H;
                            e: while (1) {
                                uD = aD;
                                ED = SD;
                                PD = HD;
                                PH = HH;
                                while (1) {
                                    oD = uD;
                                    wD = ED;
                                    DH = PH;
                                    while (1) {
                                        SO = DH + -1 | 0;
                                        xO = (DH | 0) > 0;
                                        if (!xO) {
                                            break e
                                        }
                                        TO = 1 << SO;
                                        NO = TO & vO;
                                        CO = (NO | 0) == 0;
                                        if (CO) {
                                            kO = wD << 1;
                                            LO = pO >>> SO;
                                            OO = LO & 1;
                                            MO = OO | kO;
                                            _O = oD + 1 | 0;
                                            fD = _O;
                                            xD = MO
                                        } else {
                                            fD = oD;
                                            xD = wD
                                        }
                                        DO = TO & EO;
                                        PO = (DO | 0) == 0;
                                        if (PO) {
                                            HO = xD << 1;
                                            BO = bO >>> SO;
                                            jO = BO & 1;
                                            FO = HO | jO;
                                            IO = fD + 1 | 0;
                                            lD = IO;
                                            TD = FO
                                        } else {
                                            lD = fD;
                                            TD = xD
                                        }
                                        RO = (lD | 0) > 7;
                                        if (RO) {
                                            break
                                        } else {
                                            oD = lD;
                                            wD = TD;
                                            DH = SO
                                        }
                                    }
                                    UO = lD + -8 | 0;
                                    zO = TD >>> UO;
                                    WO = zO & 255;
                                    XO = PD + 1 | 0;
                                    VO = qA + (PD << 2) | 0;
                                    $O = s[VO >> 2] | 0;
                                    JO = $O + 1 | 0;
                                    s[VO >> 2] = JO;
                                    r[$O >> 0] = WO;
                                    KO = (XO | 0) < (cA | 0);
                                    if (KO) {
                                        uD = UO;
                                        ED = TD;
                                        PD = XO;
                                        PH = SO
                                    } else {
                                        break
                                    }
                                }
                                QO = UD + 1 | 0;
                                ZO = (QO | 0) == (GA | 0);
                                eM = ZO ? tD : 0;
                                aD = UO;
                                SD = TD;
                                HD = eM;
                                UD = QO;
                                HH = SO
                            }
                            lO = (fO | 0) > 0;
                            if (lO) {
                                F = fO;
                                sD = oD;
                                bD = wD;
                                DD = PD;
                                RD = UD;
                                _H = 32
                            } else {
                                break
                            }
                        }
                        tM = dH + -2 | 0;
                        nM = (tM | 0) == 6;
                        rM = dH + -3 | 0;
                        p = nM ? rM : tM;
                        iM = rt(p, Hb) | 0;
                        hD = oD;
                        CD = wD;
                        jD = PD;
                        WD = UD;
                        iH = 0;
                        while (1) {
                            sM = iH + iM | 0;
                            oM = ox + (sM << 2) | 0;
                            uM = s[oM >> 2] | 0;
                            aM = YA + (sM << 2) | 0;
                            lM = s[aM >> 2] | 0;
                            cM = sM - Hb | 0;
                            hM = ox + (cM << 2) | 0;
                            pM = s[hM >> 2] | 0;
                            dM = YA + (cM << 2) | 0;
                            vM = s[dM >> 2] | 0;
                            mM = iH << 5;
                            gM = Vt - mM | 0;
                            yM = (gM | 0) > 32;
                            bM = yM ? 32 : gM;
                            vD = hD;
                            AD = CD;
                            ID = jD;
                            XD = WD;
                            rP = uM;
                            oP = pM;
                            OP = lM;
                            DP = vM;
                            FH = bM;
                            t: while (1) {
                                dD = vD;
                                LD = AD;
                                FD = ID;
                                nP = rP;
                                sP = oP;
                                AP = OP;
                                _P = DP;
                                jH = FH;
                                while (1) {
                                    pD = dD;
                                    kD = LD;
                                    tP = nP;
                                    iP = sP;
                                    LP = AP;
                                    MP = _P;
                                    BH = jH;
                                    while (1) {
                                        EM = BH + -1 | 0;
                                        SM = (BH | 0) > 0;
                                        if (!SM) {
                                            break t
                                        }
                                        xM = LP & 1;
                                        TM = (xM | 0) == 0;
                                        if (TM) {
                                            NM = kD << 1;
                                            CM = tP & 1;
                                            kM = CM | NM;
                                            LM = pD + 1 | 0;
                                            mD = LM;
                                            OD = kM
                                        } else {
                                            mD = pD;
                                            OD = kD
                                        }
                                        AM = tP >>> 1;
                                        OM = LP >>> 1;
                                        _M = MP & 1;
                                        DM = (_M | 0) == 0;
                                        if (DM) {
                                            PM = OD << 1;
                                            HM = iP & 1;
                                            BM = PM | HM;
                                            jM = mD + 1 | 0;
                                            gD = jM;
                                            MD = BM
                                        } else {
                                            gD = mD;
                                            MD = OD
                                        }
                                        FM = iP >>> 1;
                                        IM = MP >>> 1;
                                        qM = (gD | 0) > 7;
                                        if (qM) {
                                            break
                                        } else {
                                            pD = gD;
                                            kD = MD;
                                            tP = AM;
                                            iP = FM;
                                            LP = OM;
                                            MP = IM;
                                            BH = EM
                                        }
                                    }
                                    RM = gD + -8 | 0;
                                    zM = MD >>> RM;
                                    WM = zM & 255;
                                    XM = FD + 1 | 0;
                                    VM = qA + (FD << 2) | 0;
                                    $M = s[VM >> 2] | 0;
                                    JM = $M + 1 | 0;
                                    s[VM >> 2] = JM;
                                    r[$M >> 0] = WM;
                                    KM = (XM | 0) < (cA | 0);
                                    if (KM) {
                                        dD = RM;
                                        LD = MD;
                                        FD = XM;
                                        nP = AM;
                                        sP = FM;
                                        AP = OM;
                                        _P = IM;
                                        jH = EM
                                    } else {
                                        break
                                    }
                                }
                                QM = XD + 1 | 0;
                                GM = (QM | 0) == (GA | 0);
                                YM = GM ? tD : 0;
                                vD = RM;
                                AD = MD;
                                ID = YM;
                                XD = QM;
                                rP = AM;
                                oP = FM;
                                OP = OM;
                                DP = IM;
                                FH = EM
                            }
                            e_ = iH + 1 | 0;
                            lP = (e_ | 0) == (Hb | 0);
                            if (lP) {
                                P = p;
                                cD = pD;
                                ND = kD;
                                BD = FD;
                                zD = XD;
                                break
                            } else {
                                hD = pD;
                                CD = kD;
                                jD = FD;
                                WD = XD;
                                iH = e_
                            }
                        }
                    } else {
                        sO = dH + -2 | 0;
                        oO = (sO | 0) == 6;
                        aO = dH + -3 | 0;
                        D = oO ? aO : sO;
                        P = D;
                        cD = iD;
                        ND = yD;
                        BD = _D;
                        zD = qD
                    }
                    t_ = P + -2 | 0;
                    n_ = (t_ | 0) > 0;
                    if (n_) {
                        iD = cD;
                        yD = ND;
                        _D = BD;
                        qD = zD;
                        dH = t_
                    } else {
                        break
                    }
                }
            }
            _s(YA);
            _s(PE);
            _s(qA);
            _s(ox);
            r_ = lA << 24 >> 24 == 0;
            do {
                if (r_) {
                    qH = 0
                } else {
                    i_ = uA << 1;
                    s_ = i_ + 2 | 0;
                    K = (sA | 0) == 1;
                    sH = 0;
                    IH = 0;
                    RH = 0;
                    while (1) {
                        o_ = (sH | 0) >= (jA | 0);
                        u_ = o_ & 1;
                        a_ = u_ + HA | 0;
                        f_ = RA + IH | 0;
                        c_ = Ji(t, 0, f_, a_, yA, 0, 0) | 0;
                        h_ = (c_ | 0) < 0;
                        if (h_) {
                            EB = -1;
                            XB = 288;
                            break
                        }
                        if ((u | 0) == 1) {
                            p_ = (c_ | 0) > (s_ | 0);
                            if (p_) {
                                EB = -1;
                                XB = 288;
                                break
                            }
                        } else if ((u | 0) == 2) {
                            Q = (c_ | 0) > 4;
                            GH = K & Q;
                            if (GH) {
                                EB = -1;
                                XB = 288;
                                break
                            }
                        }
                        d_ = a_ - yA | 0;
                        v_ = RA + RH | 0;
                        uo(v_ | 0, f_ | 0, d_ | 0) | 0;
                        m_ = IH + a_ | 0;
                        g_ = d_ + RH | 0;
                        y_ = sH + 1 | 0;
                        b_ = (y_ | 0) < (cA | 0);
                        if (b_) {
                            sH = y_;
                            IH = m_;
                            RH = g_
                        } else {
                            XB = 142;
                            break
                        }
                    }
                    if ((XB | 0) == 142) {
                        w_ = (c_ | 0) > -1;
                        if (w_) {
                            qH = g_;
                            break
                        } else {
                            EB = c_
                        }
                        _s(RA);
                        c = VB;
                        return EB | 0
                    } else if ((XB | 0) == 288) {
                        _s(RA);
                        c = VB;
                        return EB | 0
                    }
                }
            } while (0);
            s[e >> 2] = 0;
            S_ = e + 4 | 0;
            s[S_ >> 2] = 0;
            x_ = e + 11 | 0;
            r[x_ >> 0] = 0;
            T_ = (u | 0) > 9;
            N_ = T_ & 1;
            C_ = (u | 0) > 26;
            k_ = C_ & 1;
            L_ = N_ + k_ | 0;
            A_ = qH << 3;
            O_ = (A_ | 0) > 3;
            do {
                if (O_) {
                    M_ = 7568 + (L_ << 2) | 0;
                    D_ = (7568 + (L_ << 2) | 0) + 1 | 0;
                    P_ = e + 10 | 0;
                    H_ = e + 12 | 0;
                    B_ = (7568 + (L_ << 2) | 0) + 2 | 0;
                    j_ = (7568 + (L_ << 2) | 0) + 3 | 0;
                    I_ = 0;
                    q_ = qH;
                    $_ = 0;
                    ZD = 0;
                    NB = 0;
                    n: while (1) {
                        F_ = I_ + 4 | 0;
                        R_ = (q_ | 0) < 3;
                        if (R_) {
                            U_ = q_ << 3;
                            W_ = (U_ | 0) < (F_ | 0);
                            if (W_) {
                                y = -1
                            } else {
                                X_ = (F_ | 0) == 0;
                                if (X_) {
                                    TB = NB;
                                    XB = 280;
                                    break
                                } else {
                                    XB = 148
                                }
                            }
                        } else {
                            XB = 148
                        }
                        if ((XB | 0) == 148) {
                            XB = 0;
                            V_ = RA + $_ | 0;
                            J_ = r[V_ >> 0] | 0;
                            K_ = J_ & 255;
                            Q_ = I_ + 8 | 0;
                            G_ = K_ << Q_;
                            Y_ = (F_ | 0) > 8;
                            if (Y_) {
                                Ct = $_ + 1 | 0;
                                Z_ = RA + Ct | 0;
                                Kt = r[Z_ >> 0] | 0;
                                Qt = Kt & 255;
                                Gt = Qt << I_;
                                Yt = Gt | G_;
                                Zt = (F_ | 0) > 16;
                                if (Zt) {
                                    Lt = $_ + 2 | 0;
                                    en = RA + Lt | 0;
                                    tn = r[en >> 0] | 0;
                                    nn = tn & 255;
                                    rn = 8 - I_ | 0;
                                    sn = nn >>> rn;
                                    un = sn | Yt;
                                    sB = un
                                } else {
                                    sB = Yt
                                }
                            } else {
                                sB = G_
                            }
                            an = sB >>> 12;
                            fn = an & 15;
                            ln = (fn | 0) == 0;
                            if (ln) {
                                TB = NB;
                                XB = 280;
                                break
                            } else {
                                y = fn
                            }
                        }
                        G = F_ >> 3;
                        cn = F_ & 7;
                        hn = G + $_ | 0;
                        pn = s[S_ >> 2] | 0;
                        dn = (pn | 0) < (ZD | 0);
                        if (dn) {
                            it = s[e >> 2] | 0;
                            Sn = pn;
                            Tn = it;
                            eP = ZD
                        } else {
                            vn = ZD << 1;
                            mn = vn | 1;
                            yn = s[e >> 2] | 0;
                            bn = mn * 12 | 0;
                            wn = Ps(yn, bn) | 0;
                            s[e >> 2] = wn;
                            et = s[S_ >> 2] | 0;
                            Sn = et;
                            Tn = wn;
                            eP = mn
                        }
                        En = Sn + 1 | 0;
                        s[S_ >> 2] = En;
                        xn = Tn + (Sn * 12 | 0) | 0;
                        s[xn >> 2] = y;
                        Nn = (Tn + (Sn * 12 | 0) | 0) + 4 | 0;
                        s[Nn >> 2] = 0;
                        r: do {
                            switch (y | 0) {
                                case 1:
                                    {
                                        Cn = r[M_ >> 0] | 0;
                                        kn = Cn & 255;
                                        An = 16 - kn | 0;
                                        On = kn + cn | 0;
                                        Mn = qH - hn | 0;
                                        _n = (Mn | 0) < 3;
                                        if (_n) {
                                            Dn = Mn << 3;
                                            Pn = (Dn | 0) < (On | 0);
                                            if (Pn) {
                                                break n
                                            }
                                            Hn = (On | 0) == 0;
                                            if (Hn) {
                                                O = 0;
                                                hr = hn;
                                                vr = cn
                                            } else {
                                                XB = 159
                                            }
                                        } else {
                                            XB = 159
                                        }
                                        if ((XB | 0) == 159) {
                                            XB = 0;
                                            Bn = RA + hn | 0;
                                            jn = r[Bn >> 0] | 0;
                                            Fn = jn & 255;
                                            qn = cn | 8;
                                            Rn = Fn << qn;
                                            Un = (On | 0) > 8;
                                            if (Un) {
                                                Nt = hn + 1 | 0;
                                                zn = RA + Nt | 0;
                                                Wn = r[zn >> 0] | 0;
                                                Xn = Wn & 255;
                                                Vn = Xn << cn;
                                                $n = Vn | Rn;
                                                Jn = (On | 0) > 16;
                                                if (Jn) {
                                                    It = hn + 2 | 0;
                                                    Kn = RA + It | 0;
                                                    Gn = r[Kn >> 0] | 0;
                                                    Yn = Gn & 255;
                                                    Zn = 8 - cn | 0;
                                                    er = Yn >>> Zn;
                                                    tr = er | $n;
                                                    wB = tr
                                                } else {
                                                    wB = $n
                                                }
                                            } else {
                                                wB = Rn
                                            }
                                            nr = On >>> 3;
                                            rr = nr + hn | 0;
                                            kP = kn + F_ | 0;
                                            ir = kP & 7;
                                            sr = wB & 65535;
                                            or = sr >>> An;
                                            ar = (or | 0) < 0;
                                            if (ar) {
                                                break n
                                            } else {
                                                O = or;
                                                hr = rr;
                                                vr = ir
                                            }
                                        }
                                        fr = (O | 0) / 3 & -1;
                                        lr = (O | 0) % 3 & -1;
                                        cr = qH - hr | 0;
                                        pr = cr << 3;
                                        dr = pr - vr | 0;
                                        mr = fr * 10 | 0;
                                        gr = lr >>> 1;
                                        br = gr & 1;
                                        wr = 0 - br | 0;
                                        Er = wr & 7;
                                        Sr = lr << 2;
                                        xr = Sr & 4;
                                        Tr = xr + mr | 0;
                                        Nr = Tr + Er | 0;
                                        Cr = (dr | 0) < (Nr | 0);
                                        if (Cr) {
                                            break n
                                        }
                                        kr = Ms(O) | 0;
                                        s[Nn >> 2] = kr;
                                        Lr = (Tn + (Sn * 12 | 0) | 0) + 8 | 0;
                                        s[Lr >> 2] = O;
                                        Or = (O | 0) > 2;
                                        if (Or) {
                                            R = fr;
                                            Dr = vr;
                                            Hr = hr;
                                            $D = kr;
                                            kB = NB;
                                            while (1) {
                                                Mr = R + -1 | 0;
                                                _r = Dr + 10 | 0;
                                                Pr = qH - Hr | 0;
                                                Br = (Pr | 0) < 3;
                                                if (Br) {
                                                    jr = Pr << 3;
                                                    Fr = (jr | 0) < (_r | 0);
                                                    if (Fr) {
                                                        break n
                                                    }
                                                    Ir = (_r | 0) == 0;
                                                    if (Ir) {
                                                        A = 0;
                                                        Ov = Hr;
                                                        Mv = Dr
                                                    } else {
                                                        XB = 168
                                                    }
                                                } else {
                                                    XB = 168
                                                }
                                                if ((XB | 0) == 168) {
                                                    XB = 0;
                                                    Rr = RA + Hr | 0;
                                                    Ur = r[Rr >> 0] | 0;
                                                    zr = Ur & 255;
                                                    Wr = Dr + 8 | 0;
                                                    Xr = zr << Wr;
                                                    Vr = (_r | 0) > 8;
                                                    do {
                                                        if (Vr) {
                                                            Tt = Hr + 1 | 0;
                                                            $r = RA + Tt | 0;
                                                            Jr = r[$r >> 0] | 0;
                                                            Kr = Jr & 255;
                                                            Qr = Kr << Dr;
                                                            Zr = Qr | Xr;
                                                            ei = (_r | 0) > 16;
                                                            if (!ei) {
                                                                bB = Zr;
                                                                break
                                                            }
                                                            Ft = Hr + 2 | 0;
                                                            ti = RA + Ft | 0;
                                                            ni = r[ti >> 0] | 0;
                                                            ri = ni & 255;
                                                            ii = 8 - Dr | 0;
                                                            si = ri >>> ii;
                                                            oi = si | Zr;
                                                            bB = oi
                                                        } else {
                                                            bB = Xr
                                                        }
                                                    } while (0);
                                                    ui = _r >> 3;
                                                    ai = ui + Hr | 0;
                                                    li = _r & 7;
                                                    ci = bB >>> 6;
                                                    hi = ci & 1023;
                                                    pi = hi >>> 0 > 999;
                                                    if (pi) {
                                                        break n
                                                    } else {
                                                        A = hi;
                                                        Ov = ai;
                                                        Mv = li
                                                    }
                                                }
                                                di = (A >>> 0) / 100 & -1;
                                                vi = di | 48;
                                                mi = vi ^ kB;
                                                gi = vi & 255;
                                                yi = $D + 1 | 0;
                                                r[$D >> 0] = gi;
                                                bi = (A >>> 0) % 100 & -1;
                                                Ei = (bi >>> 0) / 10 & -1;
                                                Si = Ei | 48;
                                                xi = mi ^ Si;
                                                Ti = Si & 255;
                                                Ni = $D + 2 | 0;
                                                r[yi >> 0] = Ti;
                                                Ci = (bi >>> 0) % 10 & -1;
                                                ki = Ci | 48;
                                                Li = xi ^ ki;
                                                Ai = ki & 255;
                                                Oi = $D + 3 | 0;
                                                r[Ni >> 0] = Ai;
                                                _i = (Mr | 0) > 0;
                                                if (_i) {
                                                    R = Mr;
                                                    Dr = Mv;
                                                    Hr = Ov;
                                                    $D = Oi;
                                                    kB = Li
                                                } else {
                                                    X = Mv;
                                                    V = Ov;
                                                    VD = Oi;
                                                    CB = Li;
                                                    break
                                                }
                                            }
                                        } else {
                                            X = vr;
                                            V = hr;
                                            VD = kr;
                                            CB = NB
                                        }
                                        Di = (lr | 0) > 1;
                                        if (Di) {
                                            Pi = X + 7 | 0;
                                            Hi = qH - V | 0;
                                            Ii = (Hi | 0) < 3;
                                            if (Ii) {
                                                qi = Hi << 3;
                                                Ri = (qi | 0) < (Pi | 0);
                                                if (Ri) {
                                                    break n
                                                }
                                                Ui = (Pi | 0) == 0;
                                                if (Ui) {
                                                    L = 0;
                                                    _v = V;
                                                    Dv = X
                                                } else {
                                                    XB = 177
                                                }
                                            } else {
                                                XB = 177
                                            }
                                            if ((XB | 0) == 177) {
                                                XB = 0;
                                                zi = RA + V | 0;
                                                Wi = r[zi >> 0] | 0;
                                                Vi = Wi & 255;
                                                $i = X + 8 | 0;
                                                Ki = Vi << $i;
                                                Qi = (Pi | 0) > 8;
                                                do {
                                                    if (Qi) {
                                                        xt = V + 1 | 0;
                                                        Gi = RA + xt | 0;
                                                        Yi = r[Gi >> 0] | 0;
                                                        Zi = Yi & 255;
                                                        es = Zi << X;
                                                        ts = es | Ki;
                                                        ns = (Pi | 0) > 16;
                                                        if (!ns) {
                                                            yB = ts;
                                                            break
                                                        }
                                                        jt = V + 2 | 0;
                                                        is = RA + jt | 0;
                                                        ss = r[is >> 0] | 0;
                                                        os = ss & 255;
                                                        us = 8 - X | 0;
                                                        as = os >>> us;
                                                        fs = as | ts;
                                                        yB = fs
                                                    } else {
                                                        yB = Ki
                                                    }
                                                } while (0);
                                                ls = Pi >> 3;
                                                cs = ls + V | 0;
                                                hs = Pi & 7;
                                                ps = yB >>> 9;
                                                vs = ps & 127;
                                                ms = vs >>> 0 > 99;
                                                if (ms) {
                                                    break n
                                                } else {
                                                    L = vs;
                                                    _v = cs;
                                                    Dv = hs
                                                }
                                            }
                                            gs = (L >>> 0) / 10 & -1;
                                            ys = gs | 48;
                                            bs = ys ^ CB;
                                            ws = ys & 255;
                                            Es = VD + 1 | 0;
                                            r[VD >> 0] = ws;
                                            Ss = (L >>> 0) % 10 & -1;
                                            xs = Ss | 48;
                                            Ts = bs ^ xs;
                                            Cs = xs & 255;
                                            r[Es >> 0] = Cs;
                                            H = Dv;
                                            B = _v;
                                            SB = Ts;
                                            break r
                                        }
                                        ks = (lr | 0) == 0;
                                        if (ks) {
                                            H = X;
                                            B = V;
                                            SB = CB
                                        } else {
                                            Ls = X + 4 | 0;
                                            As = qH - V | 0;
                                            Os = (As | 0) < 3;
                                            if (Os) {
                                                Hs = As << 3;
                                                Bs = (Hs | 0) < (Ls | 0);
                                                if (Bs) {
                                                    break n
                                                }
                                                js = (Ls | 0) == 0;
                                                if (js) {
                                                    k = 0;
                                                    Pv = V;
                                                    Hv = X
                                                } else {
                                                    XB = 186
                                                }
                                            } else {
                                                XB = 186
                                            }
                                            if ((XB | 0) == 186) {
                                                XB = 0;
                                                Fs = RA + V | 0;
                                                Is = r[Fs >> 0] | 0;
                                                Rs = Is & 255;
                                                Us = X + 8 | 0;
                                                zs = Rs << Us;
                                                Ws = (Ls | 0) > 8;
                                                do {
                                                    if (Ws) {
                                                        St = V + 1 | 0;
                                                        Xs = RA + St | 0;
                                                        Vs = r[Xs >> 0] | 0;
                                                        $s = Vs & 255;
                                                        Js = $s << X;
                                                        Ks = Js | zs;
                                                        Qs = (Ls | 0) > 16;
                                                        if (!Qs) {
                                                            gB = Ks;
                                                            break
                                                        }
                                                        Bt = V + 2 | 0;
                                                        Ys = RA + Bt | 0;
                                                        Zs = r[Ys >> 0] | 0;
                                                        to = Zs & 255;
                                                        no = 8 - X | 0;
                                                        ro = to >>> no;
                                                        io = ro | Ks;
                                                        gB = io
                                                    } else {
                                                        gB = zs
                                                    }
                                                } while (0);
                                                so = Ls >> 3;
                                                ao = so + V | 0;
                                                fo = Ls & 7;
                                                lo = gB >>> 12;
                                                po = lo & 15;
                                                vo = po >>> 0 > 9;
                                                if (vo) {
                                                    break n
                                                } else {
                                                    k = po;
                                                    Pv = ao;
                                                    Hv = fo
                                                }
                                            }
                                            mo = k | 48;
                                            go = mo ^ CB;
                                            yo = mo & 255;
                                            r[VD >> 0] = yo;
                                            H = Hv;
                                            B = Pv;
                                            SB = go
                                        }
                                        break
                                    };
                                case 2:
                                    {
                                        bo = r[D_ >> 0] | 0;
                                        wo = bo & 255;
                                        Eo = 16 - wo | 0;
                                        So = wo + cn | 0;
                                        xo = qH - hn | 0;
                                        No = (xo | 0) < 3;
                                        if (No) {
                                            Co = xo << 3;
                                            ko = (Co | 0) < (So | 0);
                                            if (ko) {
                                                break n
                                            }
                                            Lo = (So | 0) == 0;
                                            if (Lo) {
                                                C = 0;
                                                su = hn;
                                                au = cn
                                            } else {
                                                XB = 194
                                            }
                                        } else {
                                            XB = 194
                                        }
                                        if ((XB | 0) == 194) {
                                            XB = 0;
                                            Ao = RA + hn | 0;
                                            Oo = r[Ao >> 0] | 0;
                                            Mo = Oo & 255;
                                            _o = cn | 8;
                                            Do = Mo << _o;
                                            Po = (So | 0) > 8;
                                            if (Po) {
                                                Et = hn + 1 | 0;
                                                Bo = RA + Et | 0;
                                                jo = r[Bo >> 0] | 0;
                                                Fo = jo & 255;
                                                Io = Fo << cn;
                                                qo = Io | Do;
                                                Ro = (So | 0) > 16;
                                                if (Ro) {
                                                    Ht = hn + 2 | 0;
                                                    Uo = RA + Ht | 0;
                                                    zo = r[Uo >> 0] | 0;
                                                    Wo = zo & 255;
                                                    Xo = 8 - cn | 0;
                                                    $o = Wo >>> Xo;
                                                    Jo = $o | qo;
                                                    mB = Jo
                                                } else {
                                                    mB = qo
                                                }
                                            } else {
                                                mB = Do
                                            }
                                            Ko = So >>> 3;
                                            Qo = Ko + hn | 0;
                                            CP = wo + F_ | 0;
                                            Go = CP & 7;
                                            Yo = mB & 65535;
                                            Zo = Yo >>> Eo;
                                            eu = (Zo | 0) < 0;
                                            if (eu) {
                                                break n
                                            } else {
                                                C = Zo;
                                                su = Qo;
                                                au = Go
                                            }
                                        }
                                        tu = C >> 1;
                                        nu = C & 1;
                                        iu = qH - su | 0;
                                        ou = iu << 3;
                                        uu = ou - au | 0;
                                        fu = tu * 11 | 0;
                                        lu = 0 - nu | 0;
                                        cu = lu & 6;
                                        hu = fu + cu | 0;
                                        pu = (uu | 0) < (hu | 0);
                                        if (pu) {
                                            break n
                                        }
                                        vu = Ms(C) | 0;
                                        s[Nn >> 2] = vu;
                                        mu = (Tn + (Sn * 12 | 0) | 0) + 8 | 0;
                                        s[mu >> 2] = C;
                                        gu = (tu | 0) > 0;
                                        if (gu) {
                                            q = tu;
                                            wu = au;
                                            Su = su;
                                            KD = vu;
                                            AB = NB;
                                            while (1) {
                                                yu = q + -1 | 0;
                                                bu = wu + 11 | 0;
                                                Eu = qH - Su | 0;
                                                xu = (Eu | 0) < 3;
                                                if (xu) {
                                                    Tu = Eu << 3;
                                                    Cu = (Tu | 0) < (bu | 0);
                                                    if (Cu) {
                                                        break n
                                                    }
                                                    ku = (bu | 0) == 0;
                                                    if (ku) {
                                                        N = 0;
                                                        Bv = Su;
                                                        jv = wu
                                                    } else {
                                                        XB = 203
                                                    }
                                                } else {
                                                    XB = 203
                                                }
                                                if ((XB | 0) == 203) {
                                                    XB = 0;
                                                    Lu = RA + Su | 0;
                                                    Au = r[Lu >> 0] | 0;
                                                    Ou = Au & 255;
                                                    Mu = wu + 8 | 0;
                                                    _u = Ou << Mu;
                                                    Du = (bu | 0) > 8;
                                                    do {
                                                        if (Du) {
                                                            wt = Su + 1 | 0;
                                                            Pu = RA + wt | 0;
                                                            Hu = r[Pu >> 0] | 0;
                                                            ju = Hu & 255;
                                                            Fu = ju << wu;
                                                            Iu = Fu | _u;
                                                            qu = (bu | 0) > 16;
                                                            if (!qu) {
                                                                vB = Iu;
                                                                break
                                                            }
                                                            Pt = Su + 2 | 0;
                                                            Ru = RA + Pt | 0;
                                                            Uu = r[Ru >> 0] | 0;
                                                            zu = Uu & 255;
                                                            Wu = 8 - wu | 0;
                                                            Xu = zu >>> Wu;
                                                            Vu = Xu | Iu;
                                                            vB = Vu
                                                        } else {
                                                            vB = _u
                                                        }
                                                    } while (0);
                                                    Ju = bu >> 3;
                                                    Ku = Ju + Su | 0;
                                                    Qu = bu & 7;
                                                    Gu = vB >>> 5;
                                                    Yu = Gu & 2047;
                                                    Zu = Yu >>> 0 > 2024;
                                                    if (Zu) {
                                                        break n
                                                    } else {
                                                        N = Yu;
                                                        Bv = Ku;
                                                        jv = Qu
                                                    }
                                                }
                                                ea = (N >>> 0) / 45 & -1;
                                                ta = 7584 + ea | 0;
                                                na = r[ta >> 0] | 0;
                                                ra = na & 255;
                                                sa = ra ^ AB;
                                                oa = KD + 1 | 0;
                                                r[KD >> 0] = na;
                                                ua = (N >>> 0) % 45 & -1;
                                                aa = 7584 + ua | 0;
                                                fa = r[aa >> 0] | 0;
                                                la = fa & 255;
                                                ca = sa ^ la;
                                                ha = KD + 2 | 0;
                                                r[oa >> 0] = fa;
                                                pa = (yu | 0) > 0;
                                                if (pa) {
                                                    q = yu;
                                                    wu = jv;
                                                    Su = Bv;
                                                    KD = ha;
                                                    AB = ca
                                                } else {
                                                    z = jv;
                                                    W = Bv;
                                                    JD = ha;
                                                    LB = ca;
                                                    break
                                                }
                                            }
                                        } else {
                                            z = au;
                                            W = su;
                                            JD = vu;
                                            LB = NB
                                        }
                                        da = (nu | 0) == 0;
                                        if (da) {
                                            H = z;
                                            B = W;
                                            SB = LB
                                        } else {
                                            ga = z + 6 | 0;
                                            ya = qH - W | 0;
                                            ba = (ya | 0) < 3;
                                            if (ba) {
                                                wa = ya << 3;
                                                Ea = (wa | 0) < (ga | 0);
                                                if (Ea) {
                                                    break n
                                                }
                                                Sa = (ga | 0) == 0;
                                                if (Sa) {
                                                    T = 0;
                                                    Iv = W;
                                                    qv = z
                                                } else {
                                                    XB = 212
                                                }
                                            } else {
                                                XB = 212
                                            }
                                            if ((XB | 0) == 212) {
                                                XB = 0;
                                                xa = RA + W | 0;
                                                Ta = r[xa >> 0] | 0;
                                                Na = Ta & 255;
                                                Ca = z + 8 | 0;
                                                La = Na << Ca;
                                                Aa = (ga | 0) > 8;
                                                do {
                                                    if (Aa) {
                                                        bt = W + 1 | 0;
                                                        Oa = RA + bt | 0;
                                                        Ma = r[Oa >> 0] | 0;
                                                        _a = Ma & 255;
                                                        Da = _a << z;
                                                        Pa = Da | La;
                                                        Ha = (ga | 0) > 16;
                                                        if (!Ha) {
                                                            dB = Pa;
                                                            break
                                                        }
                                                        Dt = W + 2 | 0;
                                                        Ba = RA + Dt | 0;
                                                        ja = r[Ba >> 0] | 0;
                                                        Ia = ja & 255;
                                                        qa = 8 - z | 0;
                                                        Ra = Ia >>> qa;
                                                        Ua = Ra | Pa;
                                                        dB = Ua
                                                    } else {
                                                        dB = La
                                                    }
                                                } while (0);
                                                za = ga >> 3;
                                                Wa = za + W | 0;
                                                Xa = ga & 7;
                                                Va = dB >>> 10;
                                                $a = Va & 63;
                                                Ja = $a >>> 0 > 44;
                                                if (Ja) {
                                                    break n
                                                } else {
                                                    T = $a;
                                                    Iv = Wa;
                                                    qv = Xa
                                                }
                                            }
                                            Qa = 7584 + T | 0;
                                            Ga = r[Qa >> 0] | 0;
                                            Ya = Ga & 255;
                                            Za = Ya ^ LB;
                                            r[JD >> 0] = Ga;
                                            H = qv;
                                            B = Iv;
                                            SB = Za
                                        }
                                        break
                                    };
                                case 3:
                                    {
                                        ef = cn | 16;
                                        tf = qH - hn | 0;
                                        nf = (tf | 0) < 3;
                                        rf = tf << 3;
                                        sf = (rf | 0) < (ef | 0);
                                        VH = nf & sf;
                                        if (VH) {
                                            break n
                                        }
                                        of = RA + hn | 0;
                                        af = r[of >> 0] | 0;
                                        ff = af & 255;
                                        lf = cn | 8;
                                        cf = ff << lf;
                                        yt = hn + 1 | 0;
                                        hf = RA + yt | 0;
                                        pf = r[hf >> 0] | 0;
                                        df = pf & 255;
                                        vf = df << cn;
                                        mf = vf | cf;
                                        gf = (ef | 0) == 16;
                                        st = hn + 2 | 0;
                                        if (gf) {
                                            pB = mf
                                        } else {
                                            bf = RA + st | 0;
                                            wf = r[bf >> 0] | 0;
                                            Ef = wf & 255;
                                            Sf = 8 - cn | 0;
                                            xf = Ef >>> Sf;
                                            Tf = xf | mf;
                                            pB = Tf
                                        }
                                        Nf = r[x_ >> 0] | 0;
                                        Cf = Nf << 24 >> 24 == 0;
                                        if (Cf) {
                                            _f = pB >>> 12;
                                            Df = _f & 15;
                                            Pf = Df & 255;
                                            r[Nn >> 0] = Pf;
                                            r[P_ >> 0] = Pf;
                                            Hf = pB >>> 8;
                                            Bf = Hf & 15;
                                            jf = Bf + 1 | 0;
                                            Ff = jf & 255;
                                            If = Nn + 1 | 0;
                                            r[If >> 0] = Ff;
                                            r[x_ >> 0] = Ff;
                                            Rf = pB & 255;
                                            Uf = Nn + 2 | 0;
                                            r[Uf >> 0] = Rf;
                                            r[H_ >> 0] = Rf;
                                            H = cn;
                                            B = st;
                                            SB = NB
                                        } else {
                                            H = cn;
                                            B = st;
                                            SB = NB
                                        }
                                        break
                                    };
                                case 4:
                                    {
                                        zf = r[B_ >> 0] | 0;
                                        Wf = zf & 255;
                                        Xf = 16 - Wf | 0;
                                        Vf = Wf + cn | 0;
                                        $f = qH - hn | 0;
                                        Jf = ($f | 0) < 3;
                                        if (Jf) {
                                            Kf = $f << 3;
                                            Qf = (Kf | 0) < (Vf | 0);
                                            if (Qf) {
                                                break n
                                            }
                                            Yf = (Vf | 0) == 0;
                                            if (Yf) {
                                                x = 0;
                                                kl = hn;
                                                Ol = cn
                                            } else {
                                                XB = 226
                                            }
                                        } else {
                                            XB = 226
                                        }
                                        if ((XB | 0) == 226) {
                                            XB = 0;
                                            Zf = RA + hn | 0;
                                            el = r[Zf >> 0] | 0;
                                            tl = el & 255;
                                            nl = cn | 8;
                                            rl = tl << nl;
                                            il = (Vf | 0) > 8;
                                            if (il) {
                                                gt = hn + 1 | 0;
                                                sl = RA + gt | 0;
                                                ol = r[sl >> 0] | 0;
                                                ul = ol & 255;
                                                fl = ul << cn;
                                                ll = fl | rl;
                                                cl = (Vf | 0) > 16;
                                                if (cl) {
                                                    _t = hn + 2 | 0;
                                                    hl = RA + _t | 0;
                                                    pl = r[hl >> 0] | 0;
                                                    dl = pl & 255;
                                                    vl = 8 - cn | 0;
                                                    ml = dl >>> vl;
                                                    gl = ml | ll;
                                                    hB = gl
                                                } else {
                                                    hB = ll
                                                }
                                            } else {
                                                hB = rl
                                            }
                                            yl = Vf >>> 3;
                                            El = yl + hn | 0;
                                            NP = Wf + F_ | 0;
                                            Sl = NP & 7;
                                            xl = hB & 65535;
                                            Tl = xl >>> Xf;
                                            Nl = (Tl | 0) < 0;
                                            if (Nl) {
                                                break n
                                            } else {
                                                x = Tl;
                                                kl = El;
                                                Ol = Sl
                                            }
                                        }
                                        Cl = qH - kl | 0;
                                        Ll = Cl << 3;
                                        Al = Ll - Ol | 0;
                                        _l = x << 3;
                                        Dl = (Al | 0) < (_l | 0);
                                        if (Dl) {
                                            break n
                                        }
                                        Pl = Ms(x) | 0;
                                        s[Nn >> 2] = Pl;
                                        Hl = (Tn + (Sn * 12 | 0) | 0) + 8 | 0;
                                        s[Hl >> 2] = x;
                                        Bl = (x | 0) > 0;
                                        if (Bl) {
                                            Il = Ol;
                                            Rl = kl;
                                            GD = Pl;
                                            xH = x;
                                            OB = NB;
                                            while (1) {
                                                jl = xH + -1 | 0;
                                                Fl = Il + 8 | 0;
                                                ql = qH - Rl | 0;
                                                zl = (ql | 0) < 3;
                                                do {
                                                    if (zl) {
                                                        Wl = ql << 3;
                                                        Xl = (Wl | 0) < (Fl | 0);
                                                        if (Xl) {
                                                            Vl = Fl >> 3;
                                                            $l = Vl + Rl | 0;
                                                            Jl = Fl & 7;
                                                            S = -1;
                                                            Rv = Jl;
                                                            Uv = $l;
                                                            break
                                                        } else {
                                                            Kl = (Fl | 0) == 0;
                                                            if (Kl) {
                                                                S = 0;
                                                                Rv = Il;
                                                                Uv = Rl;
                                                                break
                                                            } else {
                                                                XB = 236;
                                                                break
                                                            }
                                                        }
                                                    } else {
                                                        XB = 236
                                                    }
                                                } while (0);
                                                if ((XB | 0) == 236) {
                                                    XB = 0;
                                                    Ql = RA + Rl | 0;
                                                    Gl = r[Ql >> 0] | 0;
                                                    Yl = Gl & 255;
                                                    ec = Yl << Fl;
                                                    tc = (Il | 0) > 0;
                                                    do {
                                                        if (tc) {
                                                            mt = Rl + 1 | 0;
                                                            nc = RA + mt | 0;
                                                            rc = r[nc >> 0] | 0;
                                                            ic = rc & 255;
                                                            sc = ic << Il;
                                                            oc = sc | ec;
                                                            uc = (Fl | 0) > 16;
                                                            if (!uc) {
                                                                cB = oc;
                                                                break
                                                            }
                                                            Mt = Rl + 2 | 0;
                                                            ac = RA + Mt | 0;
                                                            fc = r[ac >> 0] | 0;
                                                            cc = fc & 255;
                                                            hc = 8 - Il | 0;
                                                            pc = cc >>> hc;
                                                            dc = pc | oc;
                                                            cB = dc
                                                        } else {
                                                            cB = ec
                                                        }
                                                    } while (0);
                                                    vc = Fl >> 3;
                                                    mc = vc + Rl | 0;
                                                    gc = Fl & 7;
                                                    yc = cB >>> 8;
                                                    bc = yc & 255;
                                                    S = bc;
                                                    Rv = gc;
                                                    Uv = mc
                                                }
                                                wc = S ^ OB;
                                                Sc = S & 255;
                                                xc = GD + 1 | 0;
                                                r[GD >> 0] = Sc;
                                                Tc = (jl | 0) > 0;
                                                if (Tc) {
                                                    Il = Rv;
                                                    Rl = Uv;
                                                    GD = xc;
                                                    xH = jl;
                                                    OB = wc
                                                } else {
                                                    H = Rv;
                                                    B = Uv;
                                                    SB = wc;
                                                    break
                                                }
                                            }
                                        } else {
                                            H = Ol;
                                            B = kl;
                                            SB = NB
                                        }
                                        break
                                    };
                                case 5:
                                    {
                                        H = cn;
                                        B = hn;
                                        SB = NB;
                                        break
                                    };
                                case 7:
                                    {
                                        Nc = cn | 8;
                                        Cc = qH - hn | 0;
                                        kc = (Cc | 0) < 3;
                                        Lc = Cc << 3;
                                        Ac = (Lc | 0) < (Nc | 0);
                                        $H = kc & Ac;
                                        if ($H) {
                                            break n
                                        }
                                        Oc = RA + hn | 0;
                                        Mc = r[Oc >> 0] | 0;
                                        Dc = Mc & 255;
                                        Pc = Dc << Nc;
                                        Hc = (Nc | 0) == 8;
                                        ot = hn + 1 | 0;
                                        if (Hc) {
                                            lB = Pc
                                        } else {
                                            Bc = RA + ot | 0;
                                            jc = r[Bc >> 0] | 0;
                                            Fc = jc & 255;
                                            Ic = Fc << cn;
                                            qc = Ic | Pc;
                                            lB = qc
                                        }
                                        Rc = lB >>> 8;
                                        Uc = Rc & 255;
                                        Wc = Rc & 128;
                                        Xc = (Wc | 0) == 0;
                                        do {
                                            if (Xc) {
                                                zv = ot;
                                                jB = Uc
                                            } else {
                                                Vc = Rc & 64;
                                                $c = (Vc | 0) == 0;
                                                if ($c) {
                                                    Jc = qH - ot | 0;
                                                    Kc = (Jc | 0) < 3;
                                                    Qc = Jc << 3;
                                                    Gc = (Qc | 0) < (Nc | 0);
                                                    JH = Kc & Gc;
                                                    if (JH) {
                                                        break n
                                                    }
                                                    Yc = RA + ot | 0;
                                                    Zc = r[Yc >> 0] | 0;
                                                    th = Zc & 255;
                                                    nh = th << Nc;
                                                    ut = hn + 2 | 0;
                                                    if (Hc) {
                                                        fB = nh
                                                    } else {
                                                        rh = RA + ut | 0;
                                                        ih = r[rh >> 0] | 0;
                                                        sh = ih & 255;
                                                        oh = sh << cn;
                                                        uh = oh | nh;
                                                        fB = uh
                                                    }
                                                    ah = fB >>> 8;
                                                    fh = ah & 255;
                                                    zv = ut;
                                                    jB = fh;
                                                    break
                                                }
                                                lh = Rc & 32;
                                                hh = (lh | 0) == 0;
                                                if (!hh) {
                                                    break n
                                                }
                                                ph = cn | 16;
                                                dh = qH - ot | 0;
                                                vh = (dh | 0) < 3;
                                                mh = dh << 3;
                                                gh = (mh | 0) < (ph | 0);
                                                KH = vh & gh;
                                                if (KH) {
                                                    break n
                                                }
                                                yh = RA + ot | 0;
                                                bh = r[yh >> 0] | 0;
                                                wh = bh & 255;
                                                Eh = wh << Nc;
                                                vt = hn + 2 | 0;
                                                Th = RA + vt | 0;
                                                Nh = r[Th >> 0] | 0;
                                                Ch = Nh & 255;
                                                kh = Ch << cn;
                                                Lh = kh | Eh;
                                                Ah = (ph | 0) == 16;
                                                at = hn + 3 | 0;
                                                if (Ah) {
                                                    aB = Lh
                                                } else {
                                                    Oh = RA + at | 0;
                                                    Mh = r[Oh >> 0] | 0;
                                                    _h = Mh & 255;
                                                    Dh = 8 - cn | 0;
                                                    Hh = _h >>> Dh;
                                                    Bh = Hh | Lh;
                                                    aB = Bh
                                                }
                                                jh = aB & 65535;
                                                zv = at;
                                                jB = jh
                                            }
                                        } while (0);
                                        BB = jB;
                                        s[Nn >> 2] = BB;
                                        H = cn;
                                        B = zv;
                                        SB = NB;
                                        break
                                    };
                                case 8:
                                    {
                                        Fh = r[j_ >> 0] | 0;
                                        Ih = Fh & 255;
                                        qh = 16 - Ih | 0;
                                        Rh = Ih + cn | 0;
                                        Uh = qH - hn | 0;
                                        zh = (Uh | 0) < 3;
                                        if (zh) {
                                            Wh = Uh << 3;
                                            Vh = (Wh | 0) < (Rh | 0);
                                            if (Vh) {
                                                break n
                                            }
                                            $h = (Rh | 0) == 0;
                                            if ($h) {
                                                E = 0;
                                                Ep = hn;
                                                Np = cn
                                            } else {
                                                XB = 259
                                            }
                                        } else {
                                            XB = 259
                                        }
                                        if ((XB | 0) == 259) {
                                            XB = 0;
                                            Jh = RA + hn | 0;
                                            Kh = r[Jh >> 0] | 0;
                                            Qh = Kh & 255;
                                            Gh = cn | 8;
                                            Yh = Qh << Gh;
                                            Zh = (Rh | 0) > 8;
                                            if (Zh) {
                                                dt = hn + 1 | 0;
                                                ep = RA + dt | 0;
                                                tp = r[ep >> 0] | 0;
                                                rp = tp & 255;
                                                ip = rp << cn;
                                                sp = ip | Yh;
                                                op = (Rh | 0) > 16;
                                                if (op) {
                                                    Ot = hn + 2 | 0;
                                                    up = RA + Ot | 0;
                                                    ap = r[up >> 0] | 0;
                                                    fp = ap & 255;
                                                    lp = 8 - cn | 0;
                                                    cp = fp >>> lp;
                                                    hp = cp | sp;
                                                    uB = hp
                                                } else {
                                                    uB = sp
                                                }
                                            } else {
                                                uB = Yh
                                            }
                                            dp = Rh >>> 3;
                                            vp = dp + hn | 0;
                                            TP = Ih + F_ | 0;
                                            mp = TP & 7;
                                            gp = uB & 65535;
                                            yp = gp >>> qh;
                                            bp = (yp | 0) < 0;
                                            if (bp) {
                                                break n
                                            } else {
                                                E = yp;
                                                Ep = vp;
                                                Np = mp
                                            }
                                        }
                                        wp = qH - Ep | 0;
                                        Sp = wp << 3;
                                        xp = Sp - Np | 0;
                                        Cp = E * 13 | 0;
                                        kp = (xp | 0) < (Cp | 0);
                                        if (kp) {
                                            break n
                                        }
                                        Lp = E << 1;
                                        Ap = Ms(Lp) | 0;
                                        s[Nn >> 2] = Ap;
                                        Op = (Tn + (Sn * 12 | 0) | 0) + 8 | 0;
                                        s[Op >> 2] = Lp;
                                        Mp = (E | 0) > 0;
                                        if (Mp) {
                                            I = E;
                                            Pp = Np;
                                            jp = Ep;
                                            QD = Ap;
                                            MB = NB;
                                            while (1) {
                                                _p = I + -1 | 0;
                                                Dp = Pp + 13 | 0;
                                                Bp = qH - jp | 0;
                                                Fp = (Bp | 0) < 3;
                                                do {
                                                    if (Fp) {
                                                        Ip = Bp << 3;
                                                        qp = (Ip | 0) < (Dp | 0);
                                                        if (qp) {
                                                            Rp = Dp >> 3;
                                                            Up = Rp + jp | 0;
                                                            zp = Dp & 7;
                                                            w = -1;
                                                            Wv = zp;
                                                            Xv = Up;
                                                            break
                                                        } else {
                                                            Wp = (Dp | 0) == 0;
                                                            if (Wp) {
                                                                w = 0;
                                                                Wv = Pp;
                                                                Xv = jp;
                                                                break
                                                            } else {
                                                                XB = 269;
                                                                break
                                                            }
                                                        }
                                                    } else {
                                                        XB = 269
                                                    }
                                                } while (0);
                                                if ((XB | 0) == 269) {
                                                    XB = 0;
                                                    Xp = RA + jp | 0;
                                                    $p = r[Xp >> 0] | 0;
                                                    Jp = $p & 255;
                                                    Kp = Pp + 8 | 0;
                                                    Qp = Jp << Kp;
                                                    Gp = (Dp | 0) > 8;
                                                    do {
                                                        if (Gp) {
                                                            pt = jp + 1 | 0;
                                                            Yp = RA + pt | 0;
                                                            Zp = r[Yp >> 0] | 0;
                                                            ed = Zp & 255;
                                                            td = ed << Pp;
                                                            nd = td | Qp;
                                                            id = (Dp | 0) > 16;
                                                            if (!id) {
                                                                oB = nd;
                                                                break
                                                            }
                                                            At = jp + 2 | 0;
                                                            sd = RA + At | 0;
                                                            od = r[sd >> 0] | 0;
                                                            ud = od & 255;
                                                            ad = 8 - Pp | 0;
                                                            fd = ud >>> ad;
                                                            ld = fd | nd;
                                                            oB = ld
                                                        } else {
                                                            oB = Qp
                                                        }
                                                    } while (0);
                                                    cd = Dp >> 3;
                                                    hd = cd + jp | 0;
                                                    pd = Dp & 7;
                                                    vd = oB >>> 3;
                                                    md = vd & 8191;
                                                    w = md;
                                                    Wv = pd;
                                                    Xv = hd
                                                }
                                                gd = (w >>> 0) / 192 & -1;
                                                yd = gd << 8;
                                                bd = (w >>> 0) % 192 & -1;
                                                wd = yd | bd;
                                                Ed = wd + 33088 | 0;
                                                Sd = Ed >>> 0 > 40959;
                                                xd = wd + 49472 | 0;
                                                d = Sd ? xd : Ed;
                                                Td = d ^ MB;
                                                kd = d >>> 8;
                                                Ld = kd & 255;
                                                Ad = QD + 1 | 0;
                                                r[QD >> 0] = Ld;
                                                Od = d & 255;
                                                Md = QD + 2 | 0;
                                                r[Ad >> 0] = Od;
                                                _d = (_p | 0) > 0;
                                                if (_d) {
                                                    I = _p;
                                                    Pp = Wv;
                                                    jp = Xv;
                                                    QD = Md;
                                                    MB = Td
                                                } else {
                                                    H = Wv;
                                                    B = Xv;
                                                    SB = Td;
                                                    break
                                                }
                                            }
                                        } else {
                                            H = Np;
                                            B = Ep;
                                            SB = NB
                                        }
                                        break
                                    };
                                case 9:
                                    {
                                        Dd = cn | 8;
                                        Pd = qH - hn | 0;
                                        Hd = (Pd | 0) < 3;
                                        Bd = Pd << 3;
                                        Fd = (Bd | 0) < (Dd | 0);
                                        QH = Hd & Fd;
                                        if (QH) {
                                            g = -1
                                        } else {
                                            Id = RA + hn | 0;
                                            qd = r[Id >> 0] | 0;
                                            Rd = qd & 255;
                                            Ud = Rd << Dd;
                                            zd = (Dd | 0) == 8;
                                            if (zd) {
                                                iB = Ud
                                            } else {
                                                ht = hn + 1 | 0;
                                                Wd = RA + ht | 0;
                                                Xd = r[Wd >> 0] | 0;
                                                Vd = Xd & 255;
                                                $d = Vd << cn;
                                                Kd = $d | Ud;
                                                iB = Kd
                                            }
                                            Qd = iB >>> 8;
                                            Gd = Qd & 255;
                                            g = Gd
                                        }
                                        Yd = g >>> 0 < 100;
                                        $ = g + -165 | 0;
                                        Zd = $ >>> 0 < 26;
                                        zH = Yd | Zd;
                                        J = g + -197 | 0;
                                        ev = J >>> 0 < 26;
                                        ZH = zH | ev;
                                        if (!ZH) {
                                            break n
                                        }
                                        tv = hn + 1 | 0;
                                        j = g;
                                        s[Nn >> 2] = j;
                                        H = cn;
                                        B = tv;
                                        SB = NB;
                                        break
                                    };
                                default:
                                    {
                                        break n
                                    }
                            }
                        } while (0);
                        kf = qH - B | 0;
                        Lf = kf << 3;
                        Of = Lf - H | 0;
                        Mf = (Of | 0) > 3;
                        if (Mf) {
                            I_ = H;
                            q_ = kf;
                            $_ = B;
                            ZD = eP;
                            NB = SB
                        } else {
                            TB = SB;
                            XB = 280;
                            break
                        }
                    }
                    if ((XB | 0) == 280) {
                        Y = s[e >> 2] | 0;
                        nt = s[S_ >> 2] | 0;
                        rB = nt * 12 | 0;
                        uv = Y;
                        av = rB;
                        xB = TB;
                        XB = 281;
                        break
                    }
                    lv = s[S_ >> 2] | 0;
                    cv = (lv | 0) > 0;
                    hv = s[e >> 2] | 0;
                    if (cv) {
                        dv = hv;
                        Vv = lv;
                        HP = 0;
                        while (1) {
                            pv = dv + (HP * 12 | 0) | 0;
                            vv = s[pv >> 2] | 0;
                            gv = vv + -1 | 0;
                            yv = gv & vv;
                            bv = (yv | 0) == 0;
                            if (bv) {
                                wv = (dv + (HP * 12 | 0) | 0) + 4 | 0;
                                Ev = s[wv >> 2] | 0;
                                _s(Ev);
                                tt = s[S_ >> 2] | 0;
                                ft = s[e >> 2] | 0;
                                Tv = tt;
                                $v = ft
                            } else {
                                Tv = Vv;
                                $v = dv
                            }
                            Sv = HP + 1 | 0;
                            xv = (Sv | 0) < (Tv | 0);
                            if (xv) {
                                dv = $v;
                                Vv = Tv;
                                HP = Sv
                            } else {
                                U = $v;
                                break
                            }
                        }
                    } else {
                        U = hv
                    }
                    _s(U);
                    b = -1
                } else {
                    uv = 0;
                    av = 0;
                    xB = 0;
                    XB = 281
                }
            } while (0);
            if ((XB | 0) == 281) {
                nv = xB >>> 8;
                rv = nv ^ xB;
                iv = rv & 255;
                ov = e + 13 | 0;
                r[ov >> 0] = iv;
                fv = Ps(uv, av) | 0;
                s[e >> 2] = fv;
                b = 0
            }
            Nv = u & 255;
            Cv = e + 8 | 0;
            r[Cv >> 0] = Nv;
            Lv = uA & 255;
            Av = e + 9 | 0;
            r[Av >> 0] = Lv;
            EB = b;
            _s(RA);
            c = VB;
            return EB | 0
        }

        function Bi(e, t, n, r, i, o, u, a, f, l, h, p, d, v, m, g, y) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            i = i | 0;
            o = o | 0;
            u = u | 0;
            a = a | 0;
            f = f | 0;
            l = l | 0;
            h = h | 0;
            p = p | 0;
            d = d | 0;
            v = v | 0;
            m = m | 0;
            g = g | 0;
            y = y | 0;
            var b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0;
            var q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0;
            var ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0;
            var kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0;
            var $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0;
            var dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0;
            var Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0;
            var er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0,
                ur = 0,
                ar = 0,
                fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0;
            var wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0,
                Tr = 0,
                Nr = 0,
                Cr = 0,
                kr = 0,
                Lr = 0,
                Ar = 0,
                Or = 0,
                Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0;
            var qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0,
                Wr = 0,
                Xr = 0,
                Vr = 0,
                $r = 0,
                Jr = 0,
                Kr = 0,
                Qr = 0,
                Gr = 0,
                Yr = 0,
                Zr = 0,
                ei = 0,
                ti = 0,
                ni = 0,
                ri = 0,
                ii = 0,
                si = 0;
            var oi = 0,
                ui = 0,
                ai = 0,
                fi = 0,
                li = 0,
                ci = 0,
                hi = 0,
                pi = 0,
                di = 0,
                vi = 0,
                mi = 0,
                gi = 0,
                yi = 0,
                bi = 0,
                wi = 0,
                Ei = 0,
                Si = 0,
                xi = 0,
                Ti = 0,
                Ni = 0;
            var Ci = 0,
                ki = 0,
                Li = 0,
                Ai = 0,
                Oi = 0,
                Mi = 0,
                _i = 0,
                Di = 0,
                Pi = 0,
                Hi = 0,
                Bi = 0,
                ji = 0,
                Fi = 0,
                Ii = 0,
                qi = 0,
                Ri = 0,
                Ui = 0,
                zi = 0,
                Wi = 0,
                Xi = 0;
            var Vi = 0,
                $i = 0,
                Ji = 0,
                Ki = 0,
                Qi = 0,
                Gi = 0,
                Yi = 0,
                Zi = 0,
                ts = 0,
                ns = 0,
                rs = 0,
                is = 0,
                ss = 0,
                os = 0,
                us = 0,
                as = 0,
                fs = 0,
                ls = 0,
                cs = 0,
                hs = 0;
            var ps = 0,
                ds = 0,
                vs = 0,
                ms = 0,
                gs = 0,
                ys = 0,
                bs = 0,
                ws = 0,
                Es = 0,
                Ss = 0,
                xs = 0,
                Ts = 0,
                Ns = 0,
                Cs = 0,
                ks = 0,
                Ls = 0,
                As = 0,
                Os = 0,
                Ms = 0,
                _s = 0;
            var Ds = 0,
                Ps = 0,
                Hs = 0,
                Bs = 0,
                js = 0,
                Fs = 0,
                Is = 0,
                qs = 0,
                Rs = 0,
                Us = 0,
                zs = 0,
                Ws = 0,
                Xs = 0,
                Vs = 0,
                $s = 0,
                Js = 0,
                Ks = 0,
                Qs = 0,
                Gs = 0,
                Ys = 0;
            var Zs = 0,
                eo = 0,
                to = 0,
                no = 0,
                so = 0,
                oo = 0,
                uo = 0,
                ao = 0,
                fo = 0,
                lo = 0,
                co = 0,
                ho = 0,
                po = 0,
                mo = 0,
                go = 0,
                yo = 0,
                bo = 0,
                wo = 0,
                Eo = 0,
                So = 0;
            var xo = 0,
                To = 0,
                No = 0,
                Co = 0,
                ko = 0,
                Lo = 0,
                Ao = 0,
                Oo = 0,
                Mo = 0,
                _o = 0,
                Do = 0,
                Po = 0,
                Ho = 0,
                Bo = 0,
                jo = 0,
                Fo = 0,
                Io = 0,
                qo = 0,
                Ro = 0,
                Uo = 0;
            var zo = 0,
                Wo = 0,
                Xo = 0,
                Vo = 0,
                $o = 0,
                Jo = 0,
                Ko = 0,
                Qo = 0,
                Go = 0,
                Yo = 0,
                Zo = 0,
                eu = 0,
                tu = 0,
                nu = 0,
                ru = 0,
                iu = 0,
                su = 0,
                ou = 0,
                uu = 0,
                au = 0;
            var fu = 0,
                lu = 0,
                cu = 0,
                hu = 0,
                pu = 0,
                du = 0,
                vu = 0,
                mu = 0,
                gu = 0,
                yu = 0,
                bu = 0,
                wu = 0,
                Eu = 0,
                Su = 0,
                xu = 0,
                Tu = 0,
                Nu = 0,
                Cu = 0,
                ku = 0,
                Lu = 0;
            var Au = 0,
                Ou = 0,
                Mu = 0,
                _u = 0,
                Du = 0,
                Pu = 0,
                Hu = 0,
                Bu = 0,
                ju = 0,
                Fu = 0,
                Iu = 0,
                qu = 0,
                Ru = 0,
                Uu = 0,
                zu = 0,
                Wu = 0,
                Xu = 0,
                Vu = 0,
                $u = 0,
                Ju = 0;
            var Ku = 0,
                Qu = 0,
                Gu = 0,
                Yu = 0,
                Zu = 0,
                ea = 0,
                ta = 0,
                na = 0,
                ra = 0,
                ia = 0,
                sa = 0,
                oa = 0,
                ua = 0,
                aa = 0,
                fa = 0,
                la = 0,
                ca = 0,
                ha = 0,
                pa = 0,
                da = 0;
            var va = 0,
                ma = 0,
                ga = 0,
                ya = 0,
                ba = 0,
                wa = 0,
                Ea = 0,
                Sa = 0,
                xa = 0,
                Ta = 0,
                Na = 0;
            Na = c;
            N = r - t | 0;
            C = o - t | 0;
            _n = a - t | 0;
            Hi = a - r | 0;
            Lo = a - o | 0;
            Io = i - n | 0;
            Qo = u - n | 0;
            uu = f - n | 0;
            yu = f - i | 0;
            Au = f - u | 0;
            k = rt(Lo, Io) | 0;
            I = rt(Au, N) | 0;
            Q = k - I | 0;
            at = rt(yu, C) | 0;
            bt = rt(Hi, Qo) | 0;
            Ot = at - bt | 0;
            Rt = (k | 0) == (I | 0);
            Yt = (at | 0) == (bt | 0);
            xa = Rt & Yt;
            if (xa) {
                qu = 1
            } else {
                ln = rt(yu, Lo) | 0;
                En = rt(Au, Hi) | 0;
                Dn = ln - En | 0;
                qu = Dn
            }
            Wn = qu + Q | 0;
            tr = rt(Wn, N) | 0;
            hr = qu + Ot | 0;
            xr = rt(hr, C) | 0;
            Pr = rt(Wn, Io) | 0;
            Xr = rt(hr, Qo) | 0;
            ni = rt(Xr, qu) | 0;
            pi = 0 - qu | 0;
            Ti = rt(xr, pi) | 0;
            Bi = rt(Pr, pi) | 0;
            $i = rt(tr, qu) | 0;
            ss = rt(Pr, Ot) | 0;
            ms = rt(Xr, Q) | 0;
            ks = ss - ms | 0;
            Fs = rt(xr, Q) | 0;
            Ks = rt(tr, Ot) | 0;
            ao = Fs - Ks | 0;
            Eo = rt(tr, Xr) | 0;
            ko = rt(xr, Pr) | 0;
            Ao = Eo - ko | 0;
            Oo = (ni | 0) == 0;
            if (Oo) {
                Ru = 0
            } else {
                oa = (ni | 0) > -1;
                Sa = 0 - ni | 0;
                Mo = oa ? ni : Sa;
                _o = Mo >> 1;
                Do = Ao >> 31;
                Po = _o + Do | 0;
                Ho = Po ^ Do;
                Bo = Ho + Ao | 0;
                jo = (Bo | 0) / (Mo | 0) & -1;
                Fo = ni >> 31;
                qo = jo + Fo | 0;
                Ro = qo ^ Fo;
                Ru = Ro
            }
            Uo = (Ti | 0) == 0;
            if (Uo) {
                Uu = 0
            } else {
                sa = (Ti | 0) > -1;
                Ea = 0 - Ti | 0;
                zo = sa ? Ti : Ea;
                Wo = zo >> 1;
                Xo = Ao >> 31;
                Vo = Wo + Xo | 0;
                $o = Vo ^ Xo;
                Jo = $o + Ao | 0;
                Ko = (Jo | 0) / (zo | 0) & -1;
                Go = Ti >> 31;
                Yo = Ko + Go | 0;
                Zo = Yo ^ Go;
                Uu = Zo
            }
            eu = (Bi | 0) == 0;
            if (eu) {
                zu = 0
            } else {
                ia = (Bi | 0) > -1;
                wa = 0 - Bi | 0;
                tu = ia ? Bi : wa;
                nu = tu >> 1;
                ru = Ao >> 31;
                iu = nu + ru | 0;
                su = iu ^ ru;
                ou = su + Ao | 0;
                au = (ou | 0) / (tu | 0) & -1;
                fu = Bi >> 31;
                lu = au + fu | 0;
                cu = lu ^ fu;
                zu = cu
            }
            hu = ($i | 0) == 0;
            if (hu) {
                Wu = 0
            } else {
                ra = ($i | 0) > -1;
                ba = 0 - $i | 0;
                pu = ra ? $i : ba;
                du = pu >> 1;
                vu = Ao >> 31;
                mu = du + vu | 0;
                gu = mu ^ vu;
                bu = gu + Ao | 0;
                wu = (bu | 0) / (pu | 0) & -1;
                Eu = $i >> 31;
                Su = wu + Eu | 0;
                xu = Su ^ Eu;
                Wu = xu
            }
            Tu = (ss | 0) == (ms | 0);
            if (Tu) {
                Xu = ks
            } else {
                na = (ks | 0) > -1;
                ya = 0 - ks | 0;
                Nu = na ? ks : ya;
                Cu = Nu >> 1;
                ku = Ao >> 31;
                Lu = Cu + ku | 0;
                Ou = Lu ^ ku;
                Mu = Ou + Ao | 0;
                _u = (Mu | 0) / (Nu | 0) & -1;
                Du = ks >> 31;
                Pu = _u + Du | 0;
                Hu = Pu ^ Du;
                Xu = Hu
            }
            Bu = (Fs | 0) == (Ks | 0);
            if (Bu) {
                Vu = ao
            } else {
                ta = (ao | 0) > -1;
                ga = 0 - ao | 0;
                ju = ta ? ao : ga;
                Fu = ju >> 1;
                Iu = Ao >> 31;
                L = Fu + Iu | 0;
                A = L ^ Iu;
                O = A + Ao | 0;
                M = (O | 0) / (ju | 0) & -1;
                _ = ao >> 31;
                P = M + _ | 0;
                H = P ^ _;
                Vu = H
            }
            B = p - l | 0;
            j = v - l | 0;
            F = g - l | 0;
            q = g - p | 0;
            R = g - v | 0;
            U = d - h | 0;
            z = m - h | 0;
            W = y - h | 0;
            X = y - d | 0;
            V = y - m | 0;
            $ = rt(R, U) | 0;
            J = rt(V, B) | 0;
            K = $ - J | 0;
            G = rt(X, j) | 0;
            Y = rt(q, z) | 0;
            Z = G - Y | 0;
            et = rt(X, R) | 0;
            tt = rt(V, q) | 0;
            nt = et - tt | 0;
            $u = (B | 0) > -1;
            aa = 0 - B | 0;
            it = $u ? B : aa;
            Zu = (U | 0) > -1;
            va = 0 - U | 0;
            st = Zu ? U : va;
            ot = it - st | 0;
            ut = (st | 0) > (it | 0);
            ft = ut ? ot : 0;
            lt = it - ft | 0;
            ct = es(lt) | 0;
            ht = K + nt | 0;
            ua = (ht | 0) > -1;
            fa = 0 - ht | 0;
            pt = ua ? ht : fa;
            dt = es(pt) | 0;
            vt = dt + ct | 0;
            Ju = (j | 0) > -1;
            la = 0 - j | 0;
            mt = Ju ? j : la;
            Ku = (z | 0) > -1;
            ca = 0 - z | 0;
            gt = Ku ? z : ca;
            yt = mt - gt | 0;
            wt = (gt | 0) > (mt | 0);
            Et = wt ? yt : 0;
            St = mt - Et | 0;
            xt = es(St) | 0;
            Tt = Z + nt | 0;
            Qu = (Tt | 0) > -1;
            ha = 0 - Tt | 0;
            Nt = Qu ? Tt : ha;
            Ct = es(Nt) | 0;
            kt = Ct + xt | 0;
            Gu = (K | 0) > -1;
            pa = 0 - K | 0;
            Lt = Gu ? K : pa;
            Yu = (Z | 0) > -1;
            da = 0 - Z | 0;
            At = Yu ? Z : da;
            Mt = Lt - At | 0;
            _t = (At | 0) > (Lt | 0);
            Dt = _t ? Mt : 0;
            Pt = Lt - Dt | 0;
            ea = (nt | 0) > -1;
            ma = 0 - nt | 0;
            Ht = ea ? nt : ma;
            Bt = Pt - Ht | 0;
            jt = (Ht | 0) > (Pt | 0);
            Ft = jt ? Bt : 0;
            It = Pt - Ft | 0;
            qt = es(It) | 0;
            Ut = vt - kt | 0;
            zt = (kt | 0) > (vt | 0);
            Wt = zt ? Ut : 0;
            Xt = vt - Wt | 0;
            Vt = Xt - qt | 0;
            $t = (qt | 0) > (Xt | 0);
            Jt = $t ? Vt : 0;
            Kt = Xt - Jt | 0;
            Qt = Kt + -27 | 0;
            Gt = (Qt | 0) > 0;
            Zt = Gt ? Qt : 0;
            en = 1 << Zt;
            tn = en >> 1;
            nn = (B | 0) < 0;
            rn = nn << 31 >> 31;
            sn = (ht | 0) < 0;
            on = sn << 31 >> 31;
            un = vo(ht | 0, on | 0, B | 0, rn | 0) | 0;
            an = D;
            fn = (tn | 0) < 0;
            cn = fn << 31 >> 31;
            hn = ro(tn | 0, cn | 0, un | 0, an | 0) | 0;
            pn = D;
            dn = io(hn | 0, pn | 0, Zt | 0) | 0;
            vn = D;
            mn = (j | 0) < 0;
            gn = mn << 31 >> 31;
            yn = (Tt | 0) < 0;
            bn = yn << 31 >> 31;
            wn = vo(Tt | 0, bn | 0, j | 0, gn | 0) | 0;
            Sn = D;
            xn = ro(tn | 0, cn | 0, wn | 0, Sn | 0) | 0;
            Tn = D;
            Nn = io(xn | 0, Tn | 0, Zt | 0) | 0;
            Cn = D;
            kn = (U | 0) < 0;
            Ln = kn << 31 >> 31;
            An = vo(ht | 0, on | 0, U | 0, Ln | 0) | 0;
            On = D;
            Mn = ro(tn | 0, cn | 0, An | 0, On | 0) | 0;
            Pn = D;
            Hn = io(Mn | 0, Pn | 0, Zt | 0) | 0;
            Bn = D;
            jn = (z | 0) < 0;
            Fn = jn << 31 >> 31;
            In = vo(Tt | 0, bn | 0, z | 0, Fn | 0) | 0;
            qn = D;
            Rn = ro(tn | 0, cn | 0, In | 0, qn | 0) | 0;
            Un = D;
            zn = io(Rn | 0, Un | 0, Zt | 0) | 0;
            Xn = D;
            Vn = (Ru | 0) != 0;
            if (Vn) {
                $n = Ru >> 1;
                Jn = dn >> 31;
                Kn = Jn + $n | 0;
                Qn = Kn ^ Jn;
                Gn = Qn + dn | 0;
                Yn = (Gn | 0) / (Ru | 0) & -1;
                ar = Yn
            } else {
                ar = 0
            }
            Zn = (zu | 0) != 0;
            if (Zn) {
                er = zu >> 1;
                nr = Nn >> 31;
                rr = nr + er | 0;
                ir = rr ^ nr;
                sr = ir + Nn | 0;
                or = (sr | 0) / (zu | 0) & -1;
                fr = or
            } else {
                fr = 0
            }
            ur = fr + ar | 0;
            s[e >> 2] = ur;
            lr = (Uu | 0) != 0;
            if (lr) {
                cr = Uu >> 1;
                pr = dn >> 31;
                dr = pr + cr | 0;
                vr = dr ^ pr;
                mr = vr + dn | 0;
                gr = (mr | 0) / (Uu | 0) & -1;
                kr = gr
            } else {
                kr = 0
            }
            yr = (Wu | 0) != 0;
            if (yr) {
                br = Wu >> 1;
                wr = Nn >> 31;
                Er = wr + br | 0;
                Sr = Er ^ wr;
                Tr = Sr + Nn | 0;
                Nr = (Tr | 0) / (Wu | 0) & -1;
                Lr = Nr
            } else {
                Lr = 0
            }
            Cr = Lr + kr | 0;
            Ar = e + 4 | 0;
            s[Ar >> 2] = Cr;
            if (Vn) {
                Or = Ru >> 1;
                Mr = Hn >> 31;
                _r = Mr + Or | 0;
                Dr = _r ^ Mr;
                Hr = Dr + Hn | 0;
                Br = (Hr | 0) / (Ru | 0) & -1;
                Wr = Br
            } else {
                Wr = 0
            }
            if (Zn) {
                jr = zu >> 1;
                Fr = zn >> 31;
                Ir = Fr + jr | 0;
                qr = Ir ^ Fr;
                Rr = qr + zn | 0;
                Ur = (Rr | 0) / (zu | 0) & -1;
                Vr = Ur
            } else {
                Vr = 0
            }
            zr = Vr + Wr | 0;
            $r = e + 12 | 0;
            s[$r >> 2] = zr;
            if (lr) {
                Jr = Uu >> 1;
                Kr = Hn >> 31;
                Qr = Kr + Jr | 0;
                Gr = Qr ^ Kr;
                Yr = Gr + Hn | 0;
                Zr = (Yr | 0) / (Uu | 0) & -1;
                ai = Zr
            } else {
                ai = 0
            }
            if (yr) {
                ei = Wu >> 1;
                ti = zn >> 31;
                ri = ti + ei | 0;
                ii = ri ^ ti;
                si = ii + zn | 0;
                oi = (si | 0) / (Wu | 0) & -1;
                fi = oi
            } else {
                fi = 0
            }
            ui = fi + ai | 0;
            li = e + 16 | 0;
            s[li >> 2] = ui;
            if (Vn) {
                ci = Ru >> 1;
                hi = K >> 31;
                di = ci + hi | 0;
                vi = di ^ hi;
                mi = vi + K | 0;
                gi = (mi | 0) / (Ru | 0) & -1;
                Di = gi
            } else {
                Di = 0
            }
            if (Zn) {
                yi = zu >> 1;
                bi = Z >> 31;
                wi = yi + bi | 0;
                Ei = wi ^ bi;
                Si = Ei + Z | 0;
                xi = (Si | 0) / (zu | 0) & -1;
                ji = xi
            } else {
                ji = 0
            }
            Ni = (Xu | 0) == 0;
            if (Ni) {
                Ii = 0
            } else {
                Ci = Xu >> 1;
                ki = nt >> 31;
                Li = Ci + ki | 0;
                Ai = Li ^ ki;
                Oi = Ai + nt | 0;
                Mi = (Oi | 0) / (Xu | 0) & -1;
                Ii = Mi
            }
            _i = Di + tn | 0;
            Pi = _i + ji | 0;
            Fi = Pi + Ii | 0;
            qi = Fi >> Zt;
            Ri = e + 24 | 0;
            s[Ri >> 2] = qi;
            if (lr) {
                Ui = Uu >> 1;
                zi = K >> 31;
                Wi = Ui + zi | 0;
                Xi = Wi ^ zi;
                Vi = Xi + K | 0;
                Ji = (Vi | 0) / (Uu | 0) & -1;
                cs = Ji
            } else {
                cs = 0
            }
            if (yr) {
                Ki = Wu >> 1;
                Qi = Z >> 31;
                Gi = Ki + Qi | 0;
                Yi = Gi ^ Qi;
                Zi = Yi + Z | 0;
                ts = (Zi | 0) / (Wu | 0) & -1;
                ps = ts
            } else {
                ps = 0
            }
            ns = (Vu | 0) == 0;
            if (ns) {
                vs = 0;
                ls = cs + tn | 0;
                hs = ls + ps | 0;
                ds = hs + vs | 0;
                gs = ds >> Zt;
                ys = e + 28 | 0;
                s[ys >> 2] = gs;
                bs = tn + nt | 0;
                ws = bs >> Zt;
                Es = e + 32 | 0;
                s[Es >> 2] = ws;
                Ss = rt(ur, N) | 0;
                xs = rt(Cr, Io) | 0;
                Ts = rt(zr, N) | 0;
                Ns = rt(ui, Io) | 0;
                Cs = rt(qi, N) | 0;
                Ls = rt(gs, Io) | 0;
                As = Cs + ws | 0;
                Os = As + Ls | 0;
                Ms = rt(Os, B) | 0;
                _s = rt(Os, U) | 0;
                Ds = rt(ur, C) | 0;
                Ps = rt(Cr, Qo) | 0;
                Hs = rt(zr, C) | 0;
                Bs = rt(ui, Qo) | 0;
                js = rt(qi, C) | 0;
                Is = rt(gs, Qo) | 0;
                qs = js + ws | 0;
                Rs = qs + Is | 0;
                Us = rt(Rs, j) | 0;
                zs = rt(Rs, z) | 0;
                Ws = rt(ur, _n) | 0;
                Xs = rt(Cr, uu) | 0;
                Vs = rt(zr, _n) | 0;
                $s = rt(ui, uu) | 0;
                Js = rt(qi, _n) | 0;
                Qs = rt(gs, uu) | 0;
                Gs = Js + ws | 0;
                Ys = Gs + Qs | 0;
                Zs = rt(Ys, F) | 0;
                eo = rt(Ys, W) | 0;
                x = 2 - Ss | 0;
                to = x - Ds | 0;
                E = to - Ws | 0;
                no = E - xs | 0;
                b = no - Ps | 0;
                so = b - Xs | 0;
                oo = so + Ms | 0;
                uo = oo + Us | 0;
                fo = uo + Zs | 0;
                lo = fo >> 2;
                co = e + 8 | 0;
                s[co >> 2] = lo;
                T = 2 - Ts | 0;
                ho = T - Hs | 0;
                S = ho - Vs | 0;
                po = S - Ns | 0;
                w = po - Bs | 0;
                mo = w - $s | 0;
                go = mo + _s | 0;
                yo = go + zs | 0;
                bo = yo + eo | 0;
                wo = bo >> 2;
                So = e + 20 | 0;
                s[So >> 2] = wo;
                xo = e + 36 | 0;
                s[xo >> 2] = l;
                To = e + 40 | 0;
                s[To >> 2] = h;
                No = e + 44 | 0;
                s[No >> 2] = t;
                Co = e + 48 | 0;
                s[Co >> 2] = n;
                c = Na;
                return
            }
            rs = Vu >> 1;
            is = nt >> 31;
            os = rs + is | 0;
            us = os ^ is;
            as = us + nt | 0;
            fs = (as | 0) / (Vu | 0) & -1;
            vs = fs;
            ls = cs + tn | 0;
            hs = ls + ps | 0;
            ds = hs + vs | 0;
            gs = ds >> Zt;
            ys = e + 28 | 0;
            s[ys >> 2] = gs;
            bs = tn + nt | 0;
            ws = bs >> Zt;
            Es = e + 32 | 0;
            s[Es >> 2] = ws;
            Ss = rt(ur, N) | 0;
            xs = rt(Cr, Io) | 0;
            Ts = rt(zr, N) | 0;
            Ns = rt(ui, Io) | 0;
            Cs = rt(qi, N) | 0;
            Ls = rt(gs, Io) | 0;
            As = Cs + ws | 0;
            Os = As + Ls | 0;
            Ms = rt(Os, B) | 0;
            _s = rt(Os, U) | 0;
            Ds = rt(ur, C) | 0;
            Ps = rt(Cr, Qo) | 0;
            Hs = rt(zr, C) | 0;
            Bs = rt(ui, Qo) | 0;
            js = rt(qi, C) | 0;
            Is = rt(gs, Qo) | 0;
            qs = js + ws | 0;
            Rs = qs + Is | 0;
            Us = rt(Rs, j) | 0;
            zs = rt(Rs, z) | 0;
            Ws = rt(ur, _n) | 0;
            Xs = rt(Cr, uu) | 0;
            Vs = rt(zr, _n) | 0;
            $s = rt(ui, uu) | 0;
            Js = rt(qi, _n) | 0;
            Qs = rt(gs, uu) | 0;
            Gs = Js + ws | 0;
            Ys = Gs + Qs | 0;
            Zs = rt(Ys, F) | 0;
            eo = rt(Ys, W) | 0;
            x = 2 - Ss | 0;
            to = x - Ds | 0;
            E = to - Ws | 0;
            no = E - xs | 0;
            b = no - Ps | 0;
            so = b - Xs | 0;
            oo = so + Ms | 0;
            uo = oo + Us | 0;
            fo = uo + Zs | 0;
            lo = fo >> 2;
            co = e + 8 | 0;
            s[co >> 2] = lo;
            T = 2 - Ts | 0;
            ho = T - Hs | 0;
            S = ho - Vs | 0;
            po = S - Ns | 0;
            w = po - Bs | 0;
            mo = w - $s | 0;
            go = mo + _s | 0;
            yo = go + zs | 0;
            bo = yo + eo | 0;
            wo = bo >> 2;
            So = e + 20 | 0;
            s[So >> 2] = wo;
            xo = e + 36 | 0;
            s[xo >> 2] = l;
            To = e + 40 | 0;
            s[To >> 2] = h;
            No = e + 44 | 0;
            s[No >> 2] = t;
            Co = e + 48 | 0;
            s[Co >> 2] = n;
            c = Na;
            return
        }

        function ji(e, t, n, r, i) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            i = i | 0;
            var o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0;
            var k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0;
            var $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0;
            var dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0;
            Ct = c;
            f = t + 44 | 0;
            l = s[f >> 2] | 0;
            S = l << i;
            D = n - S | 0;
            W = t + 48 | 0;
            tt = s[W >> 2] | 0;
            pt = tt << i;
            St = r - pt | 0;
            xt = s[t >> 2] | 0;
            Tt = rt(xt, D) | 0;
            h = t + 4 | 0;
            p = s[h >> 2] | 0;
            d = rt(p, St) | 0;
            v = d + Tt | 0;
            m = t + 8 | 0;
            g = s[m >> 2] | 0;
            y = g << i;
            b = v + y | 0;
            w = t + 12 | 0;
            E = s[w >> 2] | 0;
            x = rt(E, D) | 0;
            T = t + 16 | 0;
            N = s[T >> 2] | 0;
            C = rt(N, St) | 0;
            k = C + x | 0;
            L = t + 20 | 0;
            A = s[L >> 2] | 0;
            O = A << i;
            M = k + O | 0;
            _ = t + 24 | 0;
            P = s[_ >> 2] | 0;
            H = rt(P, D) | 0;
            B = t + 28 | 0;
            j = s[B >> 2] | 0;
            F = rt(j, St) | 0;
            I = F + H | 0;
            q = t + 32 | 0;
            R = s[q >> 2] | 0;
            U = R << i;
            z = I + U | 0;
            X = (z | 0) == 0;
            if (X) {
                V = b >>> 31;
                $ = V + 2147483647 | 0;
                s[e >> 2] = $;
                J = M >>> 31;
                K = J + 2147483647 | 0;
                Q = e + 4 | 0;
                s[Q >> 2] = K;
                c = Ct;
                return
            }
            G = (z | 0) < 0;
            if (G) {
                Y = 0 - b | 0;
                Z = 0 - M | 0;
                et = 0 - z | 0;
                o = et;
                u = Z;
                a = Y
            } else {
                o = z;
                u = M;
                a = b
            }
            nt = o >> 1;
            it = a >> 31;
            st = nt + it | 0;
            ot = st ^ it;
            ut = ot + a | 0;
            at = (ut | 0) / (o | 0) & -1;
            ft = t + 36 | 0;
            lt = s[ft >> 2] | 0;
            ct = lt + at | 0;
            s[e >> 2] = ct;
            ht = u >> 31;
            dt = nt + ht | 0;
            vt = dt ^ ht;
            mt = vt + u | 0;
            gt = (mt | 0) / (o | 0) & -1;
            yt = t + 40 | 0;
            bt = s[yt >> 2] | 0;
            wt = bt + gt | 0;
            Et = e + 4 | 0;
            s[Et >> 2] = wt;
            c = Ct;
            return
        }

        function Fi(e, t, n, i, o, u, a, f) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            i = i | 0;
            o = o | 0;
            u = u | 0;
            a = a | 0;
            f = f | 0;
            var l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0;
            var M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0;
            var G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0;
            var yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0;
            var Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0;
            var sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0;
            var Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0;
            var Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0,
                ur = 0,
                ar = 0,
                fr = 0,
                lr = 0;
            var cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0,
                Tr = 0,
                Nr = 0,
                Cr = 0,
                kr = 0,
                Lr = 0,
                Ar = 0,
                Or = 0;
            var Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0,
                Wr = 0,
                Xr = 0,
                Vr = 0,
                $r = 0,
                Jr = 0,
                Kr = 0,
                Qr = 0;
            var Gr = 0,
                Yr = 0,
                Zr = 0,
                ei = 0,
                ti = 0,
                ni = 0,
                ri = 0,
                ii = 0,
                si = 0,
                oi = 0,
                ui = 0,
                ai = 0,
                fi = 0,
                li = 0,
                ci = 0,
                hi = 0,
                pi = 0,
                di = 0,
                vi = 0,
                mi = 0;
            var gi = 0,
                yi = 0,
                bi = 0,
                wi = 0,
                Ei = 0,
                Si = 0,
                xi = 0,
                Ti = 0,
                Ni = 0,
                Ci = 0,
                ki = 0,
                Li = 0,
                Ai = 0,
                Oi = 0,
                Mi = 0,
                _i = 0,
                Di = 0,
                Pi = 0,
                Hi = 0,
                Bi = 0;
            var ji = 0,
                Fi = 0,
                Ri = 0,
                Ui = 0,
                zi = 0,
                Wi = 0,
                Xi = 0,
                Vi = 0,
                $i = 0,
                Ji = 0,
                Ki = 0,
                Qi = 0,
                Gi = 0,
                Yi = 0,
                Zi = 0,
                es = 0,
                ts = 0,
                ns = 0,
                rs = 0,
                is = 0;
            var ss = 0,
                os = 0,
                us = 0,
                as = 0,
                fs = 0,
                ls = 0,
                cs = 0,
                hs = 0,
                ps = 0,
                ds = 0,
                vs = 0,
                ms = 0,
                gs = 0,
                ys = 0,
                bs = 0,
                ws = 0,
                Es = 0,
                Ss = 0,
                xs = 0,
                Ts = 0;
            var Ns = 0,
                Cs = 0,
                ks = 0,
                Ls = 0,
                As = 0,
                Os = 0,
                Ms = 0,
                _s = 0,
                Ds = 0,
                Ps = 0,
                Hs = 0,
                Bs = 0,
                js = 0,
                Fs = 0,
                Is = 0,
                qs = 0,
                Rs = 0,
                Us = 0,
                zs = 0,
                Ws = 0;
            var Xs = 0,
                Vs = 0,
                $s = 0,
                Js = 0,
                Ks = 0,
                Qs = 0,
                Gs = 0,
                Ys = 0,
                Zs = 0,
                eo = 0,
                to = 0,
                no = 0,
                ro = 0,
                io = 0,
                so = 0,
                oo = 0,
                uo = 0,
                ao = 0,
                fo = 0,
                lo = 0;
            var co = 0,
                ho = 0,
                po = 0,
                vo = 0,
                mo = 0,
                go = 0,
                yo = 0,
                bo = 0,
                wo = 0,
                Eo = 0,
                So = 0,
                xo = 0,
                To = 0,
                No = 0,
                Co = 0,
                ko = 0,
                Lo = 0,
                Ao = 0,
                Oo = 0,
                Mo = 0;
            var _o = 0,
                Do = 0,
                Po = 0,
                Ho = 0,
                Bo = 0,
                jo = 0,
                Fo = 0,
                Io = 0,
                qo = 0,
                Ro = 0,
                Uo = 0,
                zo = 0,
                Wo = 0,
                Xo = 0,
                Vo = 0,
                $o = 0,
                Jo = 0,
                Ko = 0,
                Qo = 0,
                Go = 0;
            var Yo = 0,
                Zo = 0,
                eu = 0,
                tu = 0,
                nu = 0,
                ru = 0,
                iu = 0,
                su = 0,
                ou = 0,
                uu = 0,
                au = 0,
                fu = 0,
                lu = 0,
                cu = 0,
                hu = 0,
                pu = 0,
                du = 0,
                vu = 0,
                mu = 0,
                gu = 0;
            var yu = 0,
                bu = 0,
                wu = 0,
                Eu = 0,
                Su = 0,
                xu = 0,
                Tu = 0,
                Nu = 0,
                Cu = 0,
                ku = 0,
                Lu = 0,
                Au = 0,
                Ou = 0,
                Mu = 0,
                _u = 0,
                Du = 0,
                Pu = 0,
                Hu = 0,
                Bu = 0,
                ju = 0;
            var Fu = 0,
                Iu = 0,
                qu = 0,
                Ru = 0,
                Uu = 0,
                zu = 0,
                Wu = 0,
                Xu = 0,
                Vu = 0,
                $u = 0,
                Ju = 0,
                Ku = 0,
                Qu = 0,
                Gu = 0,
                Yu = 0,
                Zu = 0,
                ea = 0,
                ta = 0,
                na = 0,
                ra = 0;
            var ia = 0,
                sa = 0,
                oa = 0,
                ua = 0,
                aa = 0,
                fa = 0,
                la = 0,
                ca = 0,
                ha = 0,
                pa = 0,
                da = 0,
                va = 0,
                ma = 0,
                ga = 0,
                ya = 0,
                ba = 0,
                wa = 0,
                Ea = 0,
                Sa = 0,
                xa = 0;
            var Ta = 0,
                Na = 0,
                Ca = 0,
                ka = 0,
                La = 0,
                Aa = 0,
                Oa = 0,
                Ma = 0,
                _a = 0,
                Da = 0,
                Pa = 0,
                Ha = 0,
                Ba = 0,
                ja = 0,
                Fa = 0,
                Ia = 0,
                qa = 0,
                Ra = 0,
                Ua = 0,
                za = 0;
            var Wa = 0,
                Xa = 0,
                Va = 0,
                $a = 0,
                Ja = 0,
                Ka = 0,
                Qa = 0,
                Ga = 0,
                Ya = 0,
                Za = 0;
            Za = c;
            c = c + 256 | 0;
            $u = Za + 224 | 0;
            ia = Za + 208 | 0;
            ma = Za + 8 | 0;
            ga = Za;
            w = n + -2 | 0;
            E = t + 44 | 0;
            Cn = s[E >> 2] | 0;
            Ai = w - Cn | 0;
            lo = i + -2 | 0;
            So = t + 48 | 0;
            Do = s[So >> 2] | 0;
            Wo = lo - Do | 0;
            tu = s[t >> 2] | 0;
            hu = rt(tu, Ai) | 0;
            S = t + 4 | 0;
            D = s[S >> 2] | 0;
            W = rt(D, Wo) | 0;
            tt = W + hu | 0;
            pt = t + 8 | 0;
            Tt = s[pt >> 2] | 0;
            Ht = tt + Tt | 0;
            Vt = t + 12 | 0;
            rn = s[Vt >> 2] | 0;
            vn = rt(rn, Ai) | 0;
            kn = t + 16 | 0;
            Fn = s[kn >> 2] | 0;
            Kn = rt(Fn, Wo) | 0;
            or = Kn + vn | 0;
            gr = t + 20 | 0;
            Lr = s[gr >> 2] | 0;
            Ir = or + Lr | 0;
            Qr = t + 24 | 0;
            ui = s[Qr >> 2] | 0;
            yi = rt(ui, Ai) | 0;
            Oi = t + 28 | 0;
            zi = s[Oi >> 2] | 0;
            es = rt(zi, Wo) | 0;
            cs = es + yi | 0;
            Ss = t + 32 | 0;
            Ds = s[Ss >> 2] | 0;
            Ws = cs + Ds | 0;
            to = t + 36 | 0;
            ao = t + 40 | 0;
            Zu = 0;
            Ha = Ws;
            Ua = Ht;
            Ga = Ir;
            while (1) {
                na = 0;
                Oa = Ha;
                ja = Ua;
                Va = Ga;
                while (1) {
                    fo = (ma + (Zu * 40 | 0) | 0) + (na << 3) | 0;
                    co = (Oa | 0) == 0;
                    if (co) {
                        ho = ja >>> 31;
                        po = ho + 2147483647 | 0;
                        s[fo >> 2] = po;
                        vo = Va >>> 31;
                        mo = vo + 2147483647 | 0;
                        go = ((ma + (Zu * 40 | 0) | 0) + (na << 3) | 0) + 4 | 0;
                        s[go >> 2] = mo
                    } else {
                        yo = (Oa | 0) < 0;
                        if (yo) {
                            bo = 0 - ja | 0;
                            wo = 0 - Va | 0;
                            Eo = 0 - Oa | 0;
                            h = Eo;
                            d = wo;
                            m = bo
                        } else {
                            h = Oa;
                            d = Va;
                            m = ja
                        }
                        xo = h >> 1;
                        To = m >> 31;
                        No = xo + To | 0;
                        Co = No ^ To;
                        ko = Co + m | 0;
                        Lo = (ko | 0) / (h | 0) & -1;
                        Ao = s[to >> 2] | 0;
                        Oo = Ao + Lo | 0;
                        s[fo >> 2] = Oo;
                        Mo = d >> 31;
                        _o = xo + Mo | 0;
                        Po = _o ^ Mo;
                        Ho = Po + d | 0;
                        Bo = (Ho | 0) / (h | 0) & -1;
                        jo = s[ao >> 2] | 0;
                        Fo = jo + Bo | 0;
                        Io = ((ma + (Zu * 40 | 0) | 0) + (na << 3) | 0) + 4 | 0;
                        s[Io >> 2] = Fo
                    }
                    qo = ja + tu | 0;
                    Ro = Va + rn | 0;
                    Uo = Oa + ui | 0;
                    zo = na + 1 | 0;
                    Gu = (zo | 0) == 5;
                    if (Gu) {
                        break
                    } else {
                        na = zo;
                        Oa = Uo;
                        ja = qo;
                        Va = Ro
                    }
                }
                Xo = Ua + D | 0;
                Vo = Ga + Fn | 0;
                $o = Ha + zi | 0;
                Jo = Zu + 1 | 0;
                Yu = (Jo | 0) == 5;
                if (Yu) {
                    break
                } else {
                    Zu = Jo;
                    Ha = $o;
                    Ua = Xo;
                    Ga = Vo
                }
            }
            Ko = ma + 96 | 0;
            Qo = s[Ko >> 2] | 0;
            Go = ma + 100 | 0;
            Yo = s[Go >> 2] | 0;
            Zo = Ii(ma, Qo, Yo, u, a, f) | 0;
            eu = (Zo | 0) == 33084991;
            e: do {
                if (eu) {
                    ku = 0;
                    _u = 33084991;
                    Fu = Qo;
                    Xu = Yo
                } else {
                    nu = Zo ^ 33084991;
                    xa = 0;
                    Xa = nu;
                    while (1) {
                        ru = Xa + -1 | 0;
                        iu = ru & Xa;
                        su = xa + 1 | 0;
                        ou = (xa | 0) > 23;
                        uu = (iu | 0) == 0;
                        aa = ou | uu;
                        if (aa) {
                            break
                        } else {
                            xa = su;
                            Xa = iu
                        }
                    }
                    au = (xa | 0) > -1;
                    if (au) {
                        fu = n - Cn | 0;
                        lu = i - Do | 0;
                        cu = o << 2;
                        pu = (cu | 0) > 1;
                        if (pu) {
                            du = rt(zi, lu) | 0;
                            vu = rt(ui, fu) | 0;
                            mu = rt(Fn, lu) | 0;
                            gu = rt(rn, fu) | 0;
                            yu = rt(D, lu) | 0;
                            bu = rt(tu, fu) | 0;
                            wu = du + vu | 0;
                            Eu = mu + gu | 0;
                            Su = yu + bu | 0;
                            x = wu + Ds | 0;
                            T = Eu + Lr | 0;
                            N = Su + Tt | 0;
                            C = x << 2;
                            k = T << 2;
                            L = N << 2;
                            ka = D + tu | 0;
                            La = Fn + rn | 0;
                            Aa = zi + ui | 0;
                            A = ga + 4 | 0;
                            Tu = su;
                            Au = Zo;
                            Pu = Qo;
                            Ru = Yo;
                            ea = 1;
                            Ma = C;
                            Fa = L;
                            $a = k;
                            while (1) {
                                _ = ea << 1;
                                P = _ + -1 | 0;
                                H = Fa - ka | 0;
                                B = $a - La | 0;
                                j = Ma - Aa | 0;
                                F = P << 2;
                                I = (P | 0) > 0;
                                if (I) {
                                    q = P << 1;
                                    R = P * 3 | 0;
                                    Cu = Tu;
                                    Mu = Au;
                                    Bu = Pu;
                                    zu = Ru;
                                    ra = 0;
                                    Da = j;
                                    qa = H;
                                    Ka = B;
                                    while (1) {
                                        X = (Da | 0) == 0;
                                        if (X) {
                                            V = qa >>> 31;
                                            $ = V + 2147483647 | 0;
                                            s[ga >> 2] = $;
                                            J = Ka >>> 31;
                                            K = J + 2147483647 | 0;
                                            yt = $;
                                            Ta = K
                                        } else {
                                            Q = (Da | 0) < 0;
                                            if (Q) {
                                                G = 0 - qa | 0;
                                                Y = 0 - Ka | 0;
                                                Z = 0 - Da | 0;
                                                p = Z;
                                                v = Y;
                                                g = G
                                            } else {
                                                p = Da;
                                                v = Ka;
                                                g = qa
                                            }
                                            et = p >> 1;
                                            nt = g >> 31;
                                            it = et + nt | 0;
                                            st = it ^ nt;
                                            ot = st + g | 0;
                                            ut = (ot | 0) / (p | 0) & -1;
                                            at = s[to >> 2] | 0;
                                            ft = at + ut | 0;
                                            s[ga >> 2] = ft;
                                            lt = v >> 31;
                                            ct = et + lt | 0;
                                            ht = ct ^ lt;
                                            dt = ht + v | 0;
                                            vt = (dt | 0) / (p | 0) & -1;
                                            mt = s[ao >> 2] | 0;
                                            gt = mt + vt | 0;
                                            yt = ft;
                                            Ta = gt
                                        }
                                        s[A >> 2] = Ta;
                                        bt = Ii(ma, yt, Ta, u, a, f) | 0;
                                        wt = (Cu | 0) < 0;
                                        Et = (bt | 0) == 33084991;
                                        ca = wt | Et;
                                        if (ca) {
                                            ba = 0
                                        } else {
                                            St = bt ^ 33084991;
                                            Sa = 0;
                                            Wa = St;
                                            while (1) {
                                                xt = Wa + -1 | 0;
                                                Nt = xt & Wa;
                                                Ct = Sa + 1 | 0;
                                                kt = (Sa | 0) >= (Cu | 0);
                                                Lt = (Nt | 0) == 0;
                                                ua = kt | Lt;
                                                if (ua) {
                                                    ba = Ct;
                                                    break
                                                } else {
                                                    Sa = Ct;
                                                    Wa = Nt
                                                }
                                            }
                                        }
                                        At = (ba | 0) < (Cu | 0);
                                        Ca = At ? Ta : zu;
                                        b = At ? yt : Bu;
                                        wa = At ? ba : Cu;
                                        y = At ? bt : Mu;
                                        Ot = (ra | 0) < (q | 0);
                                        if (Ot) {
                                            Mt = (ra | 0) >= (P | 0);
                                            _t = Mt & 1;
                                            Dt = t + (_t << 2) | 0;
                                            Pt = s[Dt >> 2] | 0;
                                            Bt = Pt + qa | 0;
                                            jt = (t + (_t << 2) | 0) + 12 | 0;
                                            Ft = s[jt >> 2] | 0;
                                            It = Ft + Ka | 0;
                                            qt = (t + (_t << 2) | 0) + 24 | 0;
                                            Rt = s[qt >> 2] | 0;
                                            Ut = Rt + Da | 0;
                                            Pa = Ut;
                                            Ra = Bt;
                                            Qa = It
                                        } else {
                                            zt = (ra | 0) >= (R | 0);
                                            Wt = zt & 1;
                                            Xt = t + (Wt << 2) | 0;
                                            $t = s[Xt >> 2] | 0;
                                            Jt = qa - $t | 0;
                                            Kt = (t + (Wt << 2) | 0) + 12 | 0;
                                            Qt = s[Kt >> 2] | 0;
                                            Gt = Ka - Qt | 0;
                                            Yt = (t + (Wt << 2) | 0) + 24 | 0;
                                            Zt = s[Yt >> 2] | 0;
                                            en = Da - Zt | 0;
                                            Pa = en;
                                            Ra = Jt;
                                            Qa = Gt
                                        }
                                        tn = (wa | 0) == 0;
                                        U = ra + 1 | 0;
                                        if (tn) {
                                            ku = 0;
                                            _u = y;
                                            Fu = b;
                                            Xu = Ca;
                                            break e
                                        }
                                        z = (U | 0) < (F | 0);
                                        if (z) {
                                            Cu = wa;
                                            Mu = y;
                                            Bu = b;
                                            zu = Ca;
                                            ra = U;
                                            Da = Pa;
                                            qa = Ra;
                                            Ka = Qa
                                        } else {
                                            Nu = wa;
                                            Ou = y;
                                            Hu = b;
                                            Uu = Ca;
                                            _a = Pa;
                                            Ia = Ra;
                                            Ja = Qa;
                                            break
                                        }
                                    }
                                } else {
                                    Nu = Tu;
                                    Ou = Au;
                                    Hu = Pu;
                                    Uu = Ru;
                                    _a = j;
                                    Ia = H;
                                    Ja = B
                                }
                                nn = (Nu | 0) == 0;
                                O = ea + 1 | 0;
                                if (nn) {
                                    ku = 0;
                                    _u = Ou;
                                    Fu = Hu;
                                    Xu = Uu;
                                    break e
                                }
                                M = (O | 0) < (cu | 0);
                                if (M) {
                                    Tu = Nu;
                                    Au = Ou;
                                    Pu = Hu;
                                    Ru = Uu;
                                    ea = O;
                                    Ma = _a;
                                    Fa = Ia;
                                    $a = Ja
                                } else {
                                    xu = Nu;
                                    Lu = Ou;
                                    Du = Hu;
                                    qu = Uu;
                                    break
                                }
                            }
                        } else {
                            xu = su;
                            Lu = Zo;
                            Du = Qo;
                            qu = Yo
                        }
                        sn = (xu | 0) > 6;
                        if (sn) {
                            s[e >> 2] = Qo;
                            on = e + 4 | 0;
                            s[on >> 2] = Yo;
                            l = -1;
                            c = Za;
                            return l | 0
                        } else {
                            ku = xu;
                            _u = Lu;
                            Fu = Du;
                            Xu = qu
                        }
                    } else {
                        ku = su;
                        _u = Zo;
                        Fu = Qo;
                        Xu = Yo
                    }
                }
            } while (0);
            un = Fu - Qo | 0;
            an = Xu - Yo | 0;
            s[ia + 0 >> 2] = 0 | 0;
            s[ia + 4 >> 2] = 0 | 0;
            s[ia + 8 >> 2] = 0 | 0;
            s[ia + 12 >> 2] = 0 | 0;
            s[$u + 0 >> 2] = 0 | 0;
            s[$u + 4 >> 2] = 0 | 0;
            s[$u + 8 >> 2] = 0 | 0;
            s[$u + 12 >> 2] = 0 | 0;
            s[$u + 16 >> 2] = 0 | 0;
            s[$u + 20 >> 2] = 0 | 0;
            s[$u + 24 >> 2] = 0 | 0;
            s[$u + 28 >> 2] = 0 | 0;
            fn = ga + 4 | 0;
            ta = 0;
            while (1) {
                mn = 7672 + (ta << 3) | 0;
                gn = s[mn >> 2] | 0;
                yn = gn & _u;
                bn = (7672 + (ta << 3) | 0) + 4 | 0;
                wn = s[bn >> 2] | 0;
                En = (yn | 0) == (wn | 0);
                if (En) {
                    Sn = 7736 + (ta << 1) | 0;
                    xn = r[Sn >> 0] | 0;
                    Tn = xn & 255;
                    Nn = (7736 + (ta << 1) | 0) + 1 | 0;
                    Ln = r[Nn >> 0] | 0;
                    An = Ln & 255;
                    On = (ma + (An * 40 | 0) | 0) + (Tn << 3) | 0;
                    Mn = s[On >> 2] | 0;
                    _n = Mn + un | 0;
                    Dn = _n >> 2;
                    Pn = (Dn | 0) > -1;
                    Hn = (Dn | 0) < (a | 0);
                    sa = Pn & Hn;
                    if (sa) {
                        Bn = ((ma + (An * 40 | 0) | 0) + (Tn << 3) | 0) + 4 | 0;
                        jn = s[Bn >> 2] | 0;
                        In = jn + an | 0;
                        qn = In >> 2;
                        Rn = (qn | 0) > -1;
                        Un = (qn | 0) < (f | 0);
                        fa = Rn & Un;
                        if (fa) {
                            zn = 4 - Tn | 0;
                            Wn = 4 - An | 0;
                            Xn = (ma + (Wn * 40 | 0) | 0) + (zn << 3) | 0;
                            Vn = s[Xn >> 2] | 0;
                            $n = Vn + un | 0;
                            Jn = $n >> 2;
                            Qn = (Jn | 0) > -1;
                            Gn = (Jn | 0) < (a | 0);
                            ha = Qn & Gn;
                            if (ha) {
                                Yn = ((ma + (Wn * 40 | 0) | 0) + (zn << 3) | 0) + 4 | 0;
                                Zn = s[Yn >> 2] | 0;
                                er = Zn + an | 0;
                                tr = er >> 2;
                                nr = (tr | 0) > -1;
                                rr = (tr | 0) < (f | 0);
                                pa = nr & rr;
                                if (pa) {
                                    ir = ta & 1;
                                    sr = qi(u, a, Dn, qn, Jn, tr, ir, ga) | 0;
                                    ur = (sr | 0) == 0;
                                    if (ur) {
                                        ar = s[ga >> 2] | 0;
                                        fr = ar - Fu | 0;
                                        lr = s[fn >> 2] | 0;
                                        cr = lr - Xu | 0;
                                        hr = (ir | 0) == 0;
                                        if (hr) {
                                            Ju = fr;
                                            Ku = cr;
                                            Ba = 1
                                        } else {
                                            pr = fr * 3 | 0;
                                            dr = cr * 3 | 0;
                                            Ju = pr;
                                            Ku = dr;
                                            Ba = 3
                                        }
                                        vr = ta >> 1;
                                        mr = ia + (vr << 2) | 0;
                                        yr = s[mr >> 2] | 0;
                                        br = yr + Ba | 0;
                                        s[mr >> 2] = br;
                                        wr = $u + (vr << 3) | 0;
                                        Er = s[wr >> 2] | 0;
                                        Sr = Er + Ju | 0;
                                        s[wr >> 2] = Sr;
                                        xr = ($u + (vr << 3) | 0) + 4 | 0;
                                        Tr = s[xr >> 2] | 0;
                                        Nr = Tr + Ku | 0;
                                        s[xr >> 2] = Nr
                                    }
                                }
                            }
                        }
                    }
                }
                Cr = ta + 1 | 0;
                Qu = (Cr | 0) == 8;
                if (Qu) {
                    break
                } else {
                    ta = Cr
                }
            }
            ln = s[ia >> 2] | 0;
            cn = ia + 4 | 0;
            hn = s[cn >> 2] | 0;
            pn = (ln | 0) == 0;
            dn = (hn | 0) == 0;
            da = pn | dn;
            if (da) {
                fi = $u + 8 | 0;
                li = s[fi >> 2] | 0;
                ci = s[$u >> 2] | 0;
                hi = ci + li | 0;
                s[$u >> 2] = hi;
                pi = $u + 12 | 0;
                di = s[pi >> 2] | 0;
                vi = $u + 4 | 0;
                mi = s[vi >> 2] | 0;
                gi = mi + di | 0;
                s[vi >> 2] = gi;
                bi = ln + hn | 0;
                wi = bi;
                ro = hi;
                oo = gi
            } else {
                kr = ln - hn | 0;
                Ar = (hn | 0) > (ln | 0);
                Or = Ar ? kr : 0;
                Mr = ln - Or | 0;
                _r = s[$u >> 2] | 0;
                Dr = rt(_r, hn) | 0;
                Pr = $u + 8 | 0;
                Hr = s[Pr >> 2] | 0;
                Br = rt(Hr, ln) | 0;
                jr = Br + Dr | 0;
                Fr = rt(jr, Mr) | 0;
                qr = rt(hn, ln) | 0;
                Rr = qr >> 1;
                Ur = Fr >> 31;
                zr = Ur + Rr | 0;
                Wr = zr ^ Ur;
                Xr = Wr + Fr | 0;
                Vr = (Xr | 0) / (qr | 0) & -1;
                s[$u >> 2] = Vr;
                $r = $u + 4 | 0;
                Jr = s[$r >> 2] | 0;
                Kr = rt(Jr, hn) | 0;
                Gr = $u + 12 | 0;
                Yr = s[Gr >> 2] | 0;
                Zr = rt(Yr, ln) | 0;
                ei = Zr + Kr | 0;
                ti = rt(ei, Mr) | 0;
                ni = ti >> 31;
                ri = ni + Rr | 0;
                ii = ri ^ ni;
                si = ii + ti | 0;
                oi = (si | 0) / (qr | 0) & -1;
                s[$r >> 2] = oi;
                ai = Mr << 1;
                wi = ai;
                ro = Vr;
                oo = oi
            }
            s[ia >> 2] = wi;
            Ei = ia + 8 | 0;
            Si = s[Ei >> 2] | 0;
            xi = ia + 12 | 0;
            Ti = s[xi >> 2] | 0;
            Ni = (Si | 0) == 0;
            Ci = (Ti | 0) == 0;
            va = Ni | Ci;
            if (va) {
                zs = $u + 24 | 0;
                Xs = s[zs >> 2] | 0;
                Vs = $u + 16 | 0;
                $s = s[Vs >> 2] | 0;
                Js = $s + Xs | 0;
                s[Vs >> 2] = Js;
                Ks = $u + 28 | 0;
                Qs = s[Ks >> 2] | 0;
                Gs = $u + 20 | 0;
                Ys = s[Gs >> 2] | 0;
                Zs = Ys + Qs | 0;
                s[Gs >> 2] = Zs;
                eo = Si + Ti | 0;
                no = Js;
                so = Zs;
                Na = eo
            } else {
                us = Si - Ti | 0;
                as = (Ti | 0) > (Si | 0);
                fs = as ? us : 0;
                ls = Si - fs | 0;
                hs = $u + 16 | 0;
                ps = s[hs >> 2] | 0;
                ds = rt(ps, Ti) | 0;
                vs = $u + 24 | 0;
                ms = s[vs >> 2] | 0;
                gs = rt(ms, Si) | 0;
                ys = gs + ds | 0;
                bs = rt(ys, ls) | 0;
                ws = rt(Ti, Si) | 0;
                Es = ws >> 1;
                xs = bs >> 31;
                Ts = xs + Es | 0;
                Ns = Ts ^ xs;
                Cs = Ns + bs | 0;
                ks = (Cs | 0) / (ws | 0) & -1;
                s[hs >> 2] = ks;
                Ls = $u + 20 | 0;
                As = s[Ls >> 2] | 0;
                Os = rt(As, Ti) | 0;
                Ms = $u + 28 | 0;
                _s = s[Ms >> 2] | 0;
                Ps = rt(_s, Si) | 0;
                Hs = Ps + Os | 0;
                Bs = rt(Hs, ls) | 0;
                js = Bs >> 31;
                Fs = js + Es | 0;
                Is = Fs ^ js;
                qs = Is + Bs | 0;
                Rs = (qs | 0) / (ws | 0) & -1;
                s[Ls >> 2] = Rs;
                Us = ls << 1;
                no = ks;
                so = Rs;
                Na = Us
            }
            s[Ei >> 2] = Na;
            _i = ro + no | 0;
            s[$u >> 2] = _i;
            io = $u + 4 | 0;
            Fi = oo + so | 0;
            s[io >> 2] = Fi;
            Li = wi + Na | 0;
            s[ia >> 2] = Li;
            uo = (Li | 0) == 0;
            if (uo) {
                Iu = Fu;
                Vu = Xu
            } else {
                ki = Li >> 1;
                Mi = _i >> 31;
                Di = Mi + ki | 0;
                Pi = Di ^ Mi;
                Hi = Pi + _i | 0;
                Bi = (Hi | 0) / (Li | 0) & -1;
                ji = Fi >> 31;
                Ri = ji + ki | 0;
                Ui = Ri ^ ji;
                Wi = Ui + Fi | 0;
                Xi = (Wi | 0) / (Li | 0) & -1;
                Vi = Bi + Fu | 0;
                $i = Xi + Xu | 0;
                Ji = Ii(ma, Vi, $i, u, a, f) | 0;
                Ki = ku + 1 | 0;
                Qi = (ku | 0) < 0;
                Gi = (Ji | 0) == 33084991;
                la = Qi | Gi;
                if (la) {
                    ya = 0
                } else {
                    Yi = Ji ^ 33084991;
                    Ea = 0;
                    za = Yi;
                    while (1) {
                        Zi = za + -1 | 0;
                        ts = Zi & za;
                        ns = Ea + 1 | 0;
                        rs = (ns | 0) >= (Ki | 0);
                        is = (ts | 0) == 0;
                        oa = rs | is;
                        if (oa) {
                            ya = ns;
                            break
                        } else {
                            Ea = ns;
                            za = ts
                        }
                    }
                }
                ss = (ya | 0) > (Ki | 0);
                Wu = ss ? Xu : $i;
                ju = ss ? Fu : Vi;
                Iu = ju;
                Vu = Wu
            }
            s[e >> 2] = Iu;
            os = e + 4 | 0;
            s[os >> 2] = Vu;
            l = 0;
            c = Za;
            return l | 0
        }

        function Ii(e, t, n, i, o, u) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            i = i | 0;
            o = o | 0;
            u = u | 0;
            var a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0;
            var A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0;
            var K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0;
            var mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0;
            var Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0;
            var nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0;
            var xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0;
            Un = c;
            a = e + 96 | 0;
            f = s[a >> 2] | 0;
            tt = t - f | 0;
            pt = e + 100 | 0;
            Tt = s[pt >> 2] | 0;
            Ht = n - Tt | 0;
            Vt = u + -1 | 0;
            rn = o + -1 | 0;
            Fn = 0;
            In = 0;
            qn = 0;
            while (1) {
                vn = e + (Fn * 40 | 0) | 0;
                Cn = s[vn >> 2] | 0;
                l = tt + Cn | 0;
                S = (e + (Fn * 40 | 0) | 0) + 4 | 0;
                D = s[S >> 2] | 0;
                W = Ht + D | 0;
                K = l >> 2;
                Q = W >> 2;
                G = (Q | 0) >= (u | 0);
                Y = G ? Vt : Q;
                Z = (Y | 0) > 0;
                et = Z ? Y : 0;
                nt = rt(et, o) | 0;
                it = (K | 0) >= (o | 0);
                st = it ? rn : K;
                ot = (st | 0) > 0;
                ut = ot ? st : 0;
                at = nt + ut | 0;
                ft = i + at | 0;
                lt = r[ft >> 0] | 0;
                ct = lt << 24 >> 24 != 0;
                ht = ct & 1;
                dt = ht << In;
                vt = dt | qn;
                mt = In + 1 | 0;
                gt = (e + (Fn * 40 | 0) | 0) + 8 | 0;
                yt = s[gt >> 2] | 0;
                bt = tt + yt | 0;
                wt = (e + (Fn * 40 | 0) | 0) + 12 | 0;
                Et = s[wt >> 2] | 0;
                St = Ht + Et | 0;
                xt = bt >> 2;
                Nt = St >> 2;
                Ct = (Nt | 0) >= (u | 0);
                kt = Ct ? Vt : Nt;
                Lt = (kt | 0) > 0;
                At = Lt ? kt : 0;
                Ot = rt(At, o) | 0;
                Mt = (xt | 0) >= (o | 0);
                _t = Mt ? rn : xt;
                Dt = (_t | 0) > 0;
                Pt = Dt ? _t : 0;
                Bt = Ot + Pt | 0;
                jt = i + Bt | 0;
                Ft = r[jt >> 0] | 0;
                It = Ft << 24 >> 24 != 0;
                qt = It & 1;
                Rt = qt << mt;
                Ut = Rt | vt;
                zt = In + 2 | 0;
                Wt = (e + (Fn * 40 | 0) | 0) + 16 | 0;
                Xt = s[Wt >> 2] | 0;
                $t = tt + Xt | 0;
                Jt = (e + (Fn * 40 | 0) | 0) + 20 | 0;
                Kt = s[Jt >> 2] | 0;
                Qt = Ht + Kt | 0;
                Gt = $t >> 2;
                Yt = Qt >> 2;
                Zt = (Yt | 0) >= (u | 0);
                en = Zt ? Vt : Yt;
                tn = (en | 0) > 0;
                nn = tn ? en : 0;
                sn = rt(nn, o) | 0;
                on = (Gt | 0) >= (o | 0);
                un = on ? rn : Gt;
                an = (un | 0) > 0;
                fn = an ? un : 0;
                ln = sn + fn | 0;
                cn = i + ln | 0;
                hn = r[cn >> 0] | 0;
                pn = hn << 24 >> 24 != 0;
                dn = pn & 1;
                mn = dn << zt;
                gn = mn | Ut;
                yn = In + 3 | 0;
                bn = (e + (Fn * 40 | 0) | 0) + 24 | 0;
                wn = s[bn >> 2] | 0;
                En = tt + wn | 0;
                Sn = (e + (Fn * 40 | 0) | 0) + 28 | 0;
                xn = s[Sn >> 2] | 0;
                Tn = Ht + xn | 0;
                Nn = En >> 2;
                kn = Tn >> 2;
                Ln = (kn | 0) >= (u | 0);
                An = Ln ? Vt : kn;
                On = (An | 0) > 0;
                Mn = On ? An : 0;
                _n = rt(Mn, o) | 0;
                Dn = (Nn | 0) >= (o | 0);
                Pn = Dn ? rn : Nn;
                Hn = (Pn | 0) > 0;
                Bn = Hn ? Pn : 0;
                h = _n + Bn | 0;
                p = i + h | 0;
                d = r[p >> 0] | 0;
                v = d << 24 >> 24 != 0;
                m = v & 1;
                g = m << yn;
                y = g | gn;
                b = In + 4 | 0;
                w = (e + (Fn * 40 | 0) | 0) + 32 | 0;
                E = s[w >> 2] | 0;
                x = tt + E | 0;
                T = (e + (Fn * 40 | 0) | 0) + 36 | 0;
                N = s[T >> 2] | 0;
                C = Ht + N | 0;
                k = x >> 2;
                L = C >> 2;
                A = (L | 0) >= (u | 0);
                O = A ? Vt : L;
                M = (O | 0) > 0;
                _ = M ? O : 0;
                P = rt(_, o) | 0;
                H = (k | 0) >= (o | 0);
                B = H ? rn : k;
                j = (B | 0) > 0;
                F = j ? B : 0;
                I = P + F | 0;
                q = i + I | 0;
                R = r[q >> 0] | 0;
                U = R << 24 >> 24 != 0;
                z = U & 1;
                X = z << b;
                V = X | y;
                $ = In + 5 | 0;
                J = Fn + 1 | 0;
                jn = (J | 0) == 5;
                if (jn) {
                    break
                } else {
                    Fn = J;
                    In = $;
                    qn = V
                }
            }
            c = Un;
            return V | 0
        }

        function qi(e, t, n, i, o, u, a, f) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            i = i | 0;
            o = o | 0;
            u = u | 0;
            a = a | 0;
            f = f | 0;
            var l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0;
            var M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0;
            var G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0;
            var yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0;
            var Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0;
            nn = c;
            c = c + 32 | 0;
            Zt = nn + 24 | 0;
            en = nn + 16 | 0;
            zt = nn + 8 | 0;
            Yt = nn;
            s[Zt >> 2] = n;
            p = Zt + 4 | 0;
            s[p >> 2] = i;
            s[en >> 2] = o;
            d = en + 4 | 0;
            s[d >> 2] = u;
            N = o - n | 0;
            Jt = (N | 0) > -1;
            Qt = 0 - N | 0;
            B = Jt ? N : Qt;
            s[zt >> 2] = B;
            $ = u - i | 0;
            Kt = ($ | 0) > -1;
            Gt = 0 - $ | 0;
            st = Kt ? $ : Gt;
            mt = zt + 4 | 0;
            s[mt >> 2] = st;
            kt = (st | 0) > (B | 0);
            Ft = kt & 1;
            Ut = Ft ^ 1;
            v = zt + (Ut << 2) | 0;
            m = s[v >> 2] | 0;
            g = (n | 0) < (o | 0);
            y = g & 1;
            b = y << 1;
            w = b + -1 | 0;
            s[Yt >> 2] = w;
            E = (i | 0) < (u | 0);
            S = E & 1;
            x = S << 1;
            T = x + -1 | 0;
            C = Yt + 4 | 0;
            s[C >> 2] = T;
            k = Zt + (Ft << 2) | 0;
            L = en + (Ft << 2) | 0;
            A = s[L >> 2] | 0;
            O = Yt + (Ft << 2) | 0;
            M = zt + (Ft << 2) | 0;
            _ = Yt + (Ut << 2) | 0;
            D = Zt + (Ut << 2) | 0;
            Wt = 0;
            while (1) {
                P = s[k >> 2] | 0;
                H = (P | 0) == (A | 0);
                if (H) {
                    l = -1;
                    tn = 13;
                    break
                }
                j = s[O >> 2] | 0;
                F = j + P | 0;
                s[k >> 2] = F;
                I = Wt + m | 0;
                q = I << 1;
                R = s[M >> 2] | 0;
                U = (q | 0) > (R | 0);
                if (U) {
                    z = s[_ >> 2] | 0;
                    W = s[D >> 2] | 0;
                    X = W + z | 0;
                    s[D >> 2] = X;
                    V = I - R | 0;
                    Xt = V
                } else {
                    Xt = I
                }
                J = s[p >> 2] | 0;
                K = rt(J, t) | 0;
                Q = s[Zt >> 2] | 0;
                G = K + Q | 0;
                Y = e + G | 0;
                Z = r[Y >> 0] | 0;
                et = Z << 24 >> 24 == 0;
                tt = et & 1;
                nt = (tt | 0) == (a | 0);
                if (nt) {
                    Wt = Xt
                } else {
                    break
                }
            }
            if ((tn | 0) == 13) {
                c = nn;
                return l | 0
            }
            it = s[k >> 2] | 0;
            ot = en + (Ut << 2) | 0;
            at = A;
            qt = u;
            Rt = o;
            Vt = 0;
            while (1) {
                ut = (it | 0) == (at | 0);
                if (ut) {
                    At = Rt;
                    Pt = qt;
                    break
                }
                ft = at - j | 0;
                s[L >> 2] = ft;
                lt = Vt + m | 0;
                ct = lt << 1;
                ht = (ct | 0) > (R | 0);
                if (ht) {
                    pt = s[_ >> 2] | 0;
                    dt = s[ot >> 2] | 0;
                    vt = dt - pt | 0;
                    s[ot >> 2] = vt;
                    gt = lt - R | 0;
                    $t = gt
                } else {
                    $t = lt
                }
                yt = s[d >> 2] | 0;
                bt = rt(yt, t) | 0;
                wt = s[en >> 2] | 0;
                Et = bt + wt | 0;
                St = e + Et | 0;
                xt = r[St >> 0] | 0;
                Tt = xt << 24 >> 24 == 0;
                Nt = Tt & 1;
                Ct = (Nt | 0) == (a | 0);
                if (!Ct) {
                    At = wt;
                    Pt = yt;
                    break
                }
                h = s[L >> 2] | 0;
                at = h;
                qt = yt;
                Rt = wt;
                Vt = $t
            }
            Lt = At + Q | 0;
            Ot = Lt << 2;
            Mt = Ot + 4 | 0;
            _t = Mt >> 1;
            s[f >> 2] = _t;
            Dt = Pt + J | 0;
            Ht = Dt << 2;
            Bt = Ht + 4 | 0;
            jt = Bt >> 1;
            It = f + 4 | 0;
            s[It >> 2] = jt;
            l = 0;
            c = nn;
            return l | 0
        }

        function Ri(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0;
            N = c;
            n = e + 8 | 0;
            r = s[n >> 2] | 0;
            m = t + 8 | 0;
            g = s[m >> 2] | 0;
            y = (r | 0) > (g | 0);
            b = y & 1;
            w = (r | 0) < (g | 0);
            E = w & 1;
            S = b - E | 0;
            x = S << 1;
            i = e + 12 | 0;
            o = s[i >> 2] | 0;
            u = t + 12 | 0;
            a = s[u >> 2] | 0;
            f = (o | 0) > (a | 0);
            l = f & 1;
            h = x | l;
            p = (o | 0) < (a | 0);
            d = p & 1;
            v = h - d | 0;
            c = N;
            return v | 0
        }

        function Ui(e, t, n, r) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            var i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0;
            var V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0;
            var pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0;
            var Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0;
            var Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0;
            var wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0;
            var qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0;
            var or = 0,
                ur = 0,
                ar = 0,
                fr = 0,
                lr = 0,
                cr = 0,
                hr = 0;
            hr = c;
            c = c + 32 | 0;
            ar = hr + 24 | 0;
            fr = hr + 16 | 0;
            lr = hr;
            d = (e + (r << 2) | 0) + 16 | 0;
            v = s[d >> 2] | 0;
            st = (e + (r << 2) | 0) + 32 | 0;
            mt = s[st >> 2] | 0;
            kt = (mt | 0) > 1;
            if (!kt) {
                Un = 0;
                G = (e + (r << 2) | 0) + 48 | 0;
                s[G >> 2] = Un;
                c = hr;
                return
            }
            Ft = mt + -1 | 0;
            Kt = t + 16 | 0;
            un = s[Kt >> 2] | 0;
            yn = t + 32 | 0;
            An = s[yn >> 2] | 0;
            m = t + 20 | 0;
            k = s[m >> 2] | 0;
            F = t + 36 | 0;
            K = s[F >> 2] | 0;
            Y = t + 44 | 0;
            Z = s[Y >> 2] | 0;
            et = 1 << Z;
            tt = et >> 1;
            nt = t + 24 | 0;
            it = s[nt >> 2] | 0;
            ot = t + 28 | 0;
            ut = s[ot >> 2] | 0;
            at = ar + 4 | 0;
            ft = fr + 4 | 0;
            lt = e + 64 | 0;
            ct = e + 68 | 0;
            ht = r >> 1;
            pt = ar + (ht << 2) | 0;
            dt = fr + (ht << 2) | 0;
            vt = 1 - ht | 0;
            gt = ar + (vt << 2) | 0;
            yt = fr + (vt << 2) | 0;
            bt = mt >> 1;
            wt = mt * 67 | 0;
            Et = wt + -1 | 0;
            St = mt << 1;
            qn = 0;
            Xn = 0;
            er = 17;
            while (1) {
                xt = bs(n, mt) | 0;
                Tt = bs(n, Ft) | 0;
                ur = (Tt | 0) >= (xt | 0);
                Nt = ur & 1;
                i = Nt + Tt | 0;
                Ct = v + (xt << 4) | 0;
                Lt = v + (i << 4) | 0;
                At = s[Ct >> 2] | 0;
                Ot = (v + (xt << 4) | 0) + 4 | 0;
                Mt = s[Ot >> 2] | 0;
                _t = At - An | 0;
                Dt = rt(_t, un) | 0;
                Pt = Mt - K | 0;
                Ht = rt(Pt, k) | 0;
                Bt = Ht + Dt | 0;
                jt = Bt + tt | 0;
                It = jt >> Z;
                qt = rt(it, _t) | 0;
                Rt = rt(ut, Pt) | 0;
                Ut = tt + qt | 0;
                zt = Ut + Rt | 0;
                Wt = zt >> Z;
                Xt = s[Lt >> 2] | 0;
                Vt = (v + (i << 4) | 0) + 4 | 0;
                $t = s[Vt >> 2] | 0;
                Jt = Xt - An | 0;
                Qt = rt(Jt, un) | 0;
                Gt = $t - K | 0;
                Yt = rt(Gt, k) | 0;
                Zt = Yt + Qt | 0;
                en = Zt + tt | 0;
                tn = en >> Z;
                nn = rt(it, Jt) | 0;
                rn = rt(ut, Gt) | 0;
                sn = tt + nn | 0;
                on = sn + rn | 0;
                an = on >> Z;
                fn = s[lt >> 2] | 0;
                ln = s[ct >> 2] | 0;
                cn = It - fn | 0;
                s[ar >> 2] = cn;
                hn = Wt - ln | 0;
                s[at >> 2] = hn;
                pn = tn - fn | 0;
                s[fr >> 2] = pn;
                dn = an - ln | 0;
                s[ft >> 2] = dn;
                vn = s[pt >> 2] | 0;
                mn = s[dt >> 2] | 0;
                gn = vn - mn | 0;
                $n = (gn | 0) > -1;
                nr = 0 - gn | 0;
                bn = $n ? gn : nr;
                wn = s[gt >> 2] | 0;
                En = s[yt >> 2] | 0;
                Sn = wn - En | 0;
                Jn = (Sn | 0) > -1;
                rr = 0 - Sn | 0;
                xn = Jn ? Sn : rr;
                Tn = (bn | 0) > (xn | 0);
                if (Tn) {
                    Rn = qn;
                    tr = er
                } else {
                    _ = At - Xt | 0;
                    D = rt(_, _) | 0;
                    P = Mt - $t | 0;
                    H = rt(P, P) | 0;
                    B = H + D | 0;
                    j = B << 5;
                    S = Yi(j) | 0;
                    l = s[Ct >> 2] | 0;
                    o = s[Ot >> 2] | 0;
                    h = s[Lt >> 2] | 0;
                    u = s[Vt >> 2] | 0;
                    Fn = h - l | 0;
                    y = u - o | 0;
                    Yn = 0;
                    sr = 0;
                    while (1) {
                        Hn = v + (Yn << 4) | 0;
                        p = s[Hn >> 2] | 0;
                        a = (v + (Yn << 4) | 0) + 4 | 0;
                        f = s[a >> 2] | 0;
                        Bn = f - o | 0;
                        jn = rt(Bn, Fn) | 0;
                        In = p - l | 0;
                        g = rt(In, y) | 0;
                        b = jn - g | 0;
                        Kn = (b | 0) > -1;
                        ir = 0 - b | 0;
                        w = Kn ? b : ir;
                        E = (w | 0) > (S | 0);
                        x = (v + (Yn << 4) | 0) + 12 | 0;
                        T = s[x >> 2] | 0;
                        if (E) {
                            L = T & -2;
                            s[x >> 2] = L;
                            or = sr
                        } else {
                            N = T | 1;
                            s[x >> 2] = N;
                            C = sr + 1 | 0;
                            or = C
                        }
                        A = Yn + 1 | 0;
                        zn = (A | 0) == (mt | 0);
                        if (zn) {
                            break
                        } else {
                            Yn = A;
                            sr = or
                        }
                    }
                    Nn = (or | 0) > (qn | 0);
                    if (Nn) {
                        Zn = 0;
                        while (1) {
                            Mn = (v + (Zn << 4) | 0) + 12 | 0;
                            _n = s[Mn >> 2] | 0;
                            Dn = _n << 1;
                            s[Mn >> 2] = Dn;
                            Pn = Zn + 1 | 0;
                            Wn = (Pn | 0) == (mt | 0);
                            if (Wn) {
                                break
                            } else {
                                Zn = Pn
                            }
                        }
                        Cn = (or | 0) > (bt | 0);
                        if (Cn) {
                            kn = rt(or, -63) | 0;
                            Ln = Et + kn | 0;
                            On = (Ln | 0) / (St | 0) & -1;
                            Rn = or;
                            tr = On
                        } else {
                            Rn = or;
                            tr = er
                        }
                    } else {
                        Rn = qn;
                        tr = er
                    }
                }
                O = Xn + 1 | 0;
                M = (O | 0) < (tr | 0);
                if (M) {
                    qn = Rn;
                    Xn = O;
                    er = tr
                } else {
                    break
                }
            }
            I = (Rn | 0) > 0;
            if (!I) {
                Un = Rn;
                G = (e + (r << 2) | 0) + 48 | 0;
                s[G >> 2] = Un;
                c = hr;
                return
            }
            Vn = 0;
            Qn = 0;
            while (1) {
                q = v + (Vn << 4) | 0;
                R = (v + (Vn << 4) | 0) + 12 | 0;
                U = s[R >> 2] | 0;
                z = U & 2;
                W = (z | 0) == 0;
                if (W) {
                    Gn = Qn
                } else {
                    X = (Qn | 0) < (Vn | 0);
                    if (X) {
                        s[lr + 0 >> 2] = s[q + 0 >> 2] | 0;
                        s[lr + 4 >> 2] = s[q + 4 >> 2] | 0;
                        s[lr + 8 >> 2] = s[q + 8 >> 2] | 0;
                        s[lr + 12 >> 2] = s[q + 12 >> 2] | 0;
                        V = v + (Qn << 4) | 0;
                        s[V + 0 >> 2] = s[q + 0 >> 2] | 0;
                        s[V + 4 >> 2] = s[q + 4 >> 2] | 0;
                        s[V + 8 >> 2] = s[q + 8 >> 2] | 0;
                        s[V + 12 >> 2] = s[q + 12 >> 2] | 0;
                        s[q + 0 >> 2] = s[lr + 0 >> 2] | 0;
                        s[q + 4 >> 2] = s[lr + 4 >> 2] | 0;
                        s[q + 8 >> 2] = s[lr + 8 >> 2] | 0;
                        s[q + 12 >> 2] = s[lr + 12 >> 2] | 0
                    }
                    $ = Qn + 1 | 0;
                    Gn = $
                }
                J = Vn + 1 | 0;
                Q = (Gn | 0) < (Rn | 0);
                if (Q) {
                    Vn = J;
                    Qn = Gn
                } else {
                    Un = Rn;
                    break
                }
            }
            G = (e + (r << 2) | 0) + 48 | 0;
            s[G >> 2] = Un;
            c = hr;
            return
        }

        function zi(e, t, n, r, i) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            i = i | 0;
            var o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0;
            var k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0;
            var $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0;
            var dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0;
            var Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0;
            var en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0;
            var En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0;
            var Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0;
            rr = c;
            c = c + 16 | 0;
            tr = rr;
            a = (n + (i << 2) | 0) + 48 | 0;
            f = s[a >> 2] | 0;
            lt = (r + (i << 2) | 0) + 48 | 0;
            Et = s[lt >> 2] | 0;
            _t = f + -1 | 0;
            zt = (f | 0) < 1;
            en = zt ? _t : 0;
            hn = f - en | 0;
            xn = Et + -1 | 0;
            Pn = (Et | 0) < 1;
            l = Pn ? xn : 0;
            S = Et - l | 0;
            D = S + hn | 0;
            W = D << 3;
            tt = Ms(W) | 0;
            st = (f | 0) > 0;
            if (st) {
                ot = (n + (i << 2) | 0) + 16 | 0;
                ut = s[ot >> 2] | 0;
                Yn = 0;
                while (1) {
                    at = ut + (Yn << 4) | 0;
                    ft = s[at >> 2] | 0;
                    ct = tt + (Yn << 3) | 0;
                    s[ct >> 2] = ft;
                    ht = (ut + (Yn << 4) | 0) + 4 | 0;
                    pt = s[ht >> 2] | 0;
                    dt = (tt + (Yn << 3) | 0) + 4 | 0;
                    s[dt >> 2] = pt;
                    vt = Yn + 1 | 0;
                    Gn = (vt | 0) == (f | 0);
                    if (Gn) {
                        er = f;
                        break
                    } else {
                        Yn = vt
                    }
                }
            } else {
                mt = n + 64 | 0;
                gt = s[mt >> 2] | 0;
                s[tr >> 2] = gt;
                yt = n + 68 | 0;
                bt = s[yt >> 2] | 0;
                wt = tr + 4 | 0;
                s[wt >> 2] = bt;
                St = i >> 1;
                xt = n + (St << 2) | 0;
                Tt = s[xt >> 2] | 0;
                Nt = i << 1;
                Ct = Nt & 2;
                kt = Ct + -1 | 0;
                Lt = rt(Tt, kt) | 0;
                At = tr + (St << 2) | 0;
                Ot = s[At >> 2] | 0;
                Mt = Ot + Lt | 0;
                s[At >> 2] = Mt;
                Dt = s[tr >> 2] | 0;
                Pt = s[wt >> 2] | 0;
                Ht = s[t >> 2] | 0;
                Bt = rt(Ht, Dt) | 0;
                jt = t + 4 | 0;
                Ft = s[jt >> 2] | 0;
                It = rt(Ft, Pt) | 0;
                qt = It + Bt | 0;
                Rt = t + 40 | 0;
                Ut = s[Rt >> 2] | 0;
                Wt = Ut + -1 | 0;
                Xt = 1 << Wt;
                Vt = qt + Xt | 0;
                $t = Vt >> Ut;
                Jt = t + 32 | 0;
                Kt = s[Jt >> 2] | 0;
                Qt = $t + Kt | 0;
                s[tt >> 2] = Qt;
                Gt = t + 8 | 0;
                Yt = s[Gt >> 2] | 0;
                Zt = rt(Yt, Dt) | 0;
                tn = t + 12 | 0;
                nn = s[tn >> 2] | 0;
                rn = rt(nn, Pt) | 0;
                sn = Zt + Xt | 0;
                on = sn + rn | 0;
                un = on >> Ut;
                an = t + 36 | 0;
                fn = s[an >> 2] | 0;
                ln = un + fn | 0;
                cn = tt + 4 | 0;
                s[cn >> 2] = ln;
                pn = f + 1 | 0;
                er = pn
            }
            dn = (Et | 0) > 0;
            if (dn) {
                vn = (r + (i << 2) | 0) + 16 | 0;
                mn = s[vn >> 2] | 0;
                Zn = 0;
                while (1) {
                    gn = mn + (Zn << 4) | 0;
                    yn = s[gn >> 2] | 0;
                    bn = Zn + er | 0;
                    wn = tt + (bn << 3) | 0;
                    s[wn >> 2] = yn;
                    En = (mn + (Zn << 4) | 0) + 4 | 0;
                    Sn = s[En >> 2] | 0;
                    Tn = (tt + (bn << 3) | 0) + 4 | 0;
                    s[Tn >> 2] = Sn;
                    Nn = Zn + 1 | 0;
                    Qn = (Nn | 0) == (Et | 0);
                    if (Qn) {
                        break
                    } else {
                        Zn = Nn
                    }
                }
                o = t + 40 | 0;
                u = s[o >> 2] | 0;
                U = u
            } else {
                Cn = r + 64 | 0;
                kn = s[Cn >> 2] | 0;
                s[tr >> 2] = kn;
                Ln = r + 68 | 0;
                An = s[Ln >> 2] | 0;
                On = tr + 4 | 0;
                s[On >> 2] = An;
                Mn = i >> 1;
                _n = r + (Mn << 2) | 0;
                Dn = s[_n >> 2] | 0;
                Hn = i << 1;
                Bn = Hn & 2;
                jn = Bn + -1 | 0;
                Fn = rt(Dn, jn) | 0;
                In = tr + (Mn << 2) | 0;
                qn = s[In >> 2] | 0;
                Rn = qn + Fn | 0;
                s[In >> 2] = Rn;
                Un = tt + (er << 3) | 0;
                zn = s[tr >> 2] | 0;
                Wn = s[On >> 2] | 0;
                h = s[t >> 2] | 0;
                p = rt(h, zn) | 0;
                d = t + 4 | 0;
                v = s[d >> 2] | 0;
                m = rt(v, Wn) | 0;
                g = m + p | 0;
                y = t + 40 | 0;
                b = s[y >> 2] | 0;
                w = b + -1 | 0;
                E = 1 << w;
                x = g + E | 0;
                T = x >> b;
                N = t + 32 | 0;
                C = s[N >> 2] | 0;
                k = T + C | 0;
                s[Un >> 2] = k;
                L = t + 8 | 0;
                A = s[L >> 2] | 0;
                O = rt(A, zn) | 0;
                M = t + 12 | 0;
                _ = s[M >> 2] | 0;
                P = rt(_, Wn) | 0;
                H = O + E | 0;
                B = H + P | 0;
                j = B >> b;
                F = t + 36 | 0;
                I = s[F >> 2] | 0;
                q = j + I | 0;
                R = (tt + (er << 3) | 0) + 4 | 0;
                s[R >> 2] = q;
                U = b
            }
            Xi(e, tt, D, U);
            z = n + 72 | 0;
            X = s[z >> 2] | 0;
            V = s[X >> 2] | 0;
            $ = X + 4 | 0;
            J = s[$ >> 2] | 0;
            Kn = s[e >> 2] | 0;
            Xn = e + 4 | 0;
            Vn = s[Xn >> 2] | 0;
            $n = e + 8 | 0;
            Jn = s[$n >> 2] | 0;
            K = rt(Kn, V) | 0;
            Q = rt(Vn, J) | 0;
            G = Jn + K | 0;
            Y = G + Q | 0;
            Z = (Y | 0) < 0;
            if (!Z) {
                _s(tt);
                c = rr;
                return
            }
            et = 0 - Kn | 0;
            s[e >> 2] = et;
            nt = 0 - Vn | 0;
            s[Xn >> 2] = nt;
            it = 0 - Jn | 0;
            s[$n >> 2] = it;
            _s(tt);
            c = rr;
            return
        }

        function Wi(e, t, n, r, i, o) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            i = i | 0;
            o = o | 0;
            var u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0;
            var L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0;
            var J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0;
            ht = c;
            a = e + (r << 2) | 0;
            f = s[a >> 2] | 0;
            E = rt(f, t) | 0;
            _ = (e + (r << 2) | 0) + 8 | 0;
            z = s[_ >> 2] | 0;
            G = rt(z, n) | 0;
            Y = G + E | 0;
            Z = 1 - r | 0;
            et = e + (Z << 2) | 0;
            tt = s[et >> 2] | 0;
            l = rt(tt, t) | 0;
            h = (e + (Z << 2) | 0) + 8 | 0;
            p = s[h >> 2] | 0;
            d = rt(p, n) | 0;
            v = d + l | 0;
            m = (v | 0) < 0;
            if (m) {
                g = 0 - Y | 0;
                y = 0 - v | 0;
                nt = y;
                ut = g
            } else {
                nt = v;
                ut = Y
            }
            b = es(i) | 0;
            it = (ut | 0) > -1;
            at = 0 - ut | 0;
            w = it ? ut : at;
            S = es(w) | 0;
            x = es(i) | 0;
            T = es(w) | 0;
            N = x + -29 | 0;
            C = N + T | 0;
            k = (C | 0) > 0;
            L = b + -29 | 0;
            A = L + S | 0;
            O = k ? A : 0;
            M = 1 << O;
            D = M >> 1;
            P = D + ut | 0;
            H = P >> O;
            B = D + nt | 0;
            j = B >> O;
            st = (H | 0) > -1;
            ft = 0 - H | 0;
            F = st ? H : ft;
            I = (F | 0) < (j | 0);
            if (!I) {
                u = -1;
                c = ht;
                return u | 0
            }
            q = 0 - i | 0;
            R = rt(H, q) | 0;
            U = j >> 1;
            W = R >> 31;
            X = W + U | 0;
            V = X ^ W;
            $ = V + R | 0;
            J = ($ | 0) / (j | 0) & -1;
            ot = (J | 0) > -1;
            lt = 0 - J | 0;
            K = ot ? J : lt;
            Q = (K | 0) < (i | 0);
            if (!Q) {
                u = -1;
                c = ht;
                return u | 0
            }
            s[o >> 2] = J;
            u = 0;
            c = ht;
            return u | 0
        }

        function Xi(e, t, n, r) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            var i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0;
            var V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0;
            var pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0;
            var Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0;
            var Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0;
            var wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0;
            var qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0;
            $n = c;
            u = (n | 0) > 0;
            if (u) {
                Sn = 0;
                An = 0;
                Hn = 0;
                In = -2147483648;
                Rn = 2147483647;
                zn = -2147483648;
                Xn = 2147483647;
                while (1) {
                    a = t + (Sn << 3) | 0;
                    F = s[a >> 2] | 0;
                    K = F + An | 0;
                    ut = (F | 0) < (Rn | 0);
                    yt = ut ? F : Rn;
                    At = In - F | 0;
                    qt = (F | 0) > (In | 0);
                    Gt = qt ? At : 0;
                    fn = In - Gt | 0;
                    f = (t + (Sn << 3) | 0) + 4 | 0;
                    E = s[f >> 2] | 0;
                    O = E + Hn | 0;
                    M = (E | 0) < (Xn | 0);
                    _ = M ? E : Xn;
                    D = zn - E | 0;
                    P = (E | 0) > (zn | 0);
                    H = P ? D : 0;
                    B = zn - H | 0;
                    j = Sn + 1 | 0;
                    En = (j | 0) == (n | 0);
                    if (En) {
                        Ln = K;
                        Pn = O;
                        Fn = fn;
                        qn = yt;
                        Un = B;
                        Wn = _;
                        break
                    } else {
                        Sn = j;
                        An = K;
                        Hn = O;
                        In = fn;
                        Rn = yt;
                        zn = B;
                        Xn = _
                    }
                }
            } else {
                Ln = 0;
                Pn = 0;
                Fn = -2147483648;
                qn = 2147483647;
                Un = -2147483648;
                Wn = 2147483647
            }
            I = n >> 1;
            q = Ln + I | 0;
            R = (q | 0) / (n | 0) & -1;
            U = Pn + I | 0;
            z = (U | 0) / (n | 0) & -1;
            W = Fn - R | 0;
            X = R - qn | 0;
            V = W - X | 0;
            $ = (X | 0) > (W | 0);
            J = $ ? V : 0;
            Q = W - J | 0;
            G = Un - z | 0;
            Y = z - Wn | 0;
            Z = G - Y | 0;
            et = (Y | 0) > (G | 0);
            tt = et ? Z : 0;
            nt = G - tt | 0;
            it = Q - nt | 0;
            st = (nt | 0) > (Q | 0);
            ot = st ? it : 0;
            at = Q - ot | 0;
            ft = rt(at, n) | 0;
            lt = es(ft) | 0;
            ct = es(ft) | 0;
            ht = ct + -15 | 0;
            pt = (ht | 0) > 0;
            dt = lt + -15 | 0;
            vt = pt ? dt : 0;
            mt = 1 << vt;
            gt = mt >> 1;
            if (u) {
                bt = gt - R | 0;
                wt = gt - z | 0;
                xn = 0;
                Mn = 0;
                Dn = 0;
                jn = 0;
                while (1) {
                    Et = t + (xn << 3) | 0;
                    St = s[Et >> 2] | 0;
                    xt = bt + St | 0;
                    Tt = xt >> vt;
                    Nt = (t + (xn << 3) | 0) + 4 | 0;
                    Ct = s[Nt >> 2] | 0;
                    kt = wt + Ct | 0;
                    Lt = kt >> vt;
                    Ot = rt(Tt, Tt) | 0;
                    Mt = Ot + Mn | 0;
                    _t = rt(Lt, Tt) | 0;
                    Dt = _t + Dn | 0;
                    Pt = rt(Lt, Lt) | 0;
                    Ht = Pt + jn | 0;
                    Bt = xn + 1 | 0;
                    wn = (Bt | 0) == (n | 0);
                    if (wn) {
                        On = Mt;
                        _n = Dt;
                        Bn = Ht;
                        break
                    } else {
                        xn = Bt;
                        Mn = Mt;
                        Dn = Dt;
                        jn = Ht
                    }
                }
            } else {
                On = 0;
                _n = 0;
                Bn = 0
            }
            jt = On - Bn | 0;
            Tn = (jt | 0) > -1;
            Cn = 0 - jt | 0;
            Ft = Tn ? jt : Cn;
            It = 0 - _n | 0;
            Rt = It << 1;
            Ut = Zi(Ft, Rt) | 0;
            zt = es(Ft) | 0;
            Wt = es(Ft) | 0;
            Nn = (Rt | 0) > -1;
            kn = 0 - Rt | 0;
            Xt = Nn ? Rt : kn;
            Vt = es(Xt) | 0;
            $t = es(Xt) | 0;
            Jt = es(Ft) | 0;
            Kt = ($t | 0) > (Jt | 0);
            Qt = Vt - Wt | 0;
            i = Kt ? Qt : 0;
            Yt = r + 1 | 0;
            Zt = Yt >> 1;
            en = es(Ft) | 0;
            tn = es(Ft) | 0;
            nn = es(Xt) | 0;
            rn = es(Xt) | 0;
            sn = es(Ft) | 0;
            on = (rn | 0) > (sn | 0);
            un = nn - tn | 0;
            o = on ? un : 0;
            an = 1 - Zt | 0;
            ln = en + an | 0;
            cn = ln + o | 0;
            hn = (cn | 0) > 0;
            pn = zt + an | 0;
            dn = pn + i | 0;
            vn = hn ? dn : 0;
            mn = 1 << vn;
            gn = mn >> 1;
            yn = (On | 0) > (Bn | 0);
            if (yn) {
                bn = gn + Rt | 0;
                l = bn >> vn;
                s[e >> 2] = l;
                h = Ut + Ft | 0;
                p = h + gn | 0;
                d = p >> vn;
                v = e + 4 | 0;
                s[v >> 2] = d;
                T = l;
                C = d;
                x = rt(T, R) | 0;
                N = rt(C, z) | 0;
                k = x + N | 0;
                L = 0 - k | 0;
                A = e + 8 | 0;
                s[A >> 2] = L;
                c = $n;
                return
            } else {
                m = Ut + Ft | 0;
                g = m + gn | 0;
                y = g >> vn;
                s[e >> 2] = y;
                b = gn + Rt | 0;
                w = b >> vn;
                S = e + 4 | 0;
                s[S >> 2] = w;
                T = y;
                C = w;
                x = rt(T, R) | 0;
                N = rt(C, z) | 0;
                k = x + N | 0;
                L = 0 - k | 0;
                A = e + 8 | 0;
                s[A >> 2] = L;
                c = $n;
                return
            }
        }

        function Vi(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0;
            var V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0;
            var ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0;
            var Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0;
            var Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0;
            var wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0;
            var qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0;
            var ur = 0,
                ar = 0,
                fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0,
                Tr = 0,
                Nr = 0,
                Cr = 0;
            var kr = 0,
                Lr = 0,
                Ar = 0,
                Or = 0,
                Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0,
                Wr = 0,
                Xr = 0,
                Vr = 0;
            var $r = 0,
                Jr = 0,
                Kr = 0,
                Qr = 0,
                Gr = 0,
                Yr = 0,
                Zr = 0,
                ei = 0,
                ti = 0,
                ri = 0,
                oi = 0,
                ui = 0,
                ai = 0,
                fi = 0,
                li = 0,
                ci = 0,
                hi = 0,
                pi = 0,
                di = 0,
                vi = 0;
            var mi = 0,
                gi = 0,
                yi = 0,
                bi = 0,
                wi = 0,
                Ei = 0,
                Si = 0,
                xi = 0,
                Ti = 0,
                Ni = 0,
                Ci = 0,
                ki = 0,
                Li = 0,
                Ai = 0,
                Oi = 0,
                Mi = 0,
                _i = 0,
                Di = 0,
                Pi = 0,
                Hi = 0;
            var Bi = 0,
                ji = 0,
                Fi = 0,
                Ii = 0,
                qi = 0,
                Ri = 0,
                Ui = 0,
                zi = 0,
                Wi = 0,
                Xi = 0,
                Vi = 0,
                $i = 0,
                Ji = 0,
                Ki = 0,
                Qi = 0,
                Gi = 0,
                Yi = 0,
                Zi = 0,
                es = 0,
                ts = 0;
            var ns = 0,
                rs = 0,
                is = 0,
                ss = 0,
                os = 0,
                us = 0,
                as = 0,
                fs = 0,
                ls = 0,
                cs = 0,
                hs = 0,
                ps = 0,
                ds = 0,
                vs = 0,
                ms = 0,
                gs = 0,
                ys = 0,
                bs = 0,
                Es = 0,
                Ss = 0;
            var Ts = 0,
                Ns = 0,
                Cs = 0,
                ks = 0,
                Ls = 0,
                As = 0,
                Os = 0,
                Hs = 0,
                Bs = 0,
                js = 0,
                Fs = 0,
                Is = 0,
                qs = 0,
                Rs = 0,
                Us = 0,
                zs = 0,
                Xs = 0,
                Vs = 0,
                $s = 0,
                Js = 0;
            var Ks = 0,
                Gs = 0,
                Ys = 0,
                Zs = 0,
                to = 0,
                no = 0,
                ro = 0,
                io = 0,
                so = 0,
                uo = 0,
                ao = 0,
                fo = 0,
                lo = 0,
                co = 0,
                ho = 0,
                po = 0,
                vo = 0,
                mo = 0,
                go = 0,
                yo = 0;
            var bo = 0,
                wo = 0,
                Eo = 0,
                So = 0,
                xo = 0,
                To = 0,
                No = 0,
                Co = 0,
                ko = 0,
                Lo = 0,
                Ao = 0,
                Oo = 0,
                Mo = 0,
                _o = 0,
                Do = 0,
                Po = 0,
                Ho = 0,
                Bo = 0,
                jo = 0,
                Fo = 0;
            var Io = 0,
                qo = 0,
                Ro = 0,
                Uo = 0,
                zo = 0,
                Wo = 0,
                Xo = 0,
                Vo = 0,
                $o = 0,
                Jo = 0,
                Ko = 0,
                Qo = 0,
                Go = 0,
                Yo = 0,
                Zo = 0,
                eu = 0,
                tu = 0,
                nu = 0,
                ru = 0,
                iu = 0;
            var su = 0,
                ou = 0,
                uu = 0,
                au = 0,
                fu = 0,
                lu = 0,
                cu = 0,
                hu = 0,
                pu = 0,
                du = 0,
                vu = 0,
                mu = 0,
                gu = 0,
                yu = 0,
                bu = 0,
                wu = 0,
                Eu = 0,
                Su = 0,
                xu = 0,
                Tu = 0;
            var Nu = 0,
                Cu = 0,
                ku = 0,
                Lu = 0,
                Au = 0,
                Ou = 0,
                Mu = 0,
                _u = 0,
                Du = 0,
                Pu = 0,
                Hu = 0,
                Bu = 0,
                ju = 0,
                Fu = 0,
                Iu = 0,
                qu = 0,
                Ru = 0,
                Uu = 0,
                zu = 0,
                Wu = 0;
            var Xu = 0,
                Vu = 0,
                $u = 0,
                Ju = 0,
                Ku = 0,
                Qu = 0,
                Gu = 0,
                Yu = 0,
                Zu = 0,
                ea = 0,
                ta = 0,
                na = 0,
                ra = 0,
                ia = 0,
                sa = 0,
                oa = 0,
                ua = 0,
                aa = 0,
                fa = 0,
                la = 0;
            var ca = 0,
                ha = 0,
                pa = 0,
                da = 0,
                va = 0,
                ma = 0,
                ga = 0,
                ya = 0,
                ba = 0,
                wa = 0,
                Ea = 0,
                Sa = 0,
                xa = 0,
                Ta = 0,
                Na = 0,
                Ca = 0,
                ka = 0,
                La = 0,
                Aa = 0,
                Oa = 0;
            var Ma = 0,
                _a = 0,
                Da = 0,
                Pa = 0,
                Ha = 0,
                Ba = 0,
                ja = 0,
                Fa = 0,
                Ia = 0,
                qa = 0,
                Ra = 0,
                Ua = 0,
                za = 0,
                Wa = 0,
                Xa = 0,
                Va = 0,
                $a = 0,
                Ja = 0,
                Ka = 0,
                Qa = 0;
            var Ga = 0,
                Ya = 0,
                Za = 0,
                ef = 0,
                tf = 0,
                nf = 0,
                rf = 0,
                sf = 0,
                of = 0,
                uf = 0,
                af = 0,
                ff = 0,
                lf = 0,
                cf = 0,
                hf = 0,
                pf = 0,
                df = 0,
                vf = 0,
                mf = 0,
                gf = 0;
            var yf = 0,
                bf = 0,
                wf = 0,
                Ef = 0,
                Sf = 0,
                xf = 0,
                Tf = 0,
                Nf = 0,
                Cf = 0,
                kf = 0,
                Lf = 0,
                Af = 0,
                Of = 0,
                Mf = 0,
                _f = 0,
                Df = 0,
                Pf = 0,
                Hf = 0,
                Bf = 0,
                jf = 0;
            var Ff = 0,
                If = 0,
                qf = 0,
                Rf = 0,
                Uf = 0,
                zf = 0,
                Wf = 0,
                Xf = 0,
                Vf = 0,
                $f = 0,
                Jf = 0,
                Kf = 0,
                Qf = 0,
                Gf = 0,
                Yf = 0,
                Zf = 0,
                el = 0,
                tl = 0,
                nl = 0,
                rl = 0;
            var il = 0,
                sl = 0,
                ol = 0,
                ul = 0,
                al = 0,
                fl = 0,
                ll = 0,
                cl = 0,
                hl = 0,
                pl = 0,
                dl = 0,
                vl = 0,
                ml = 0,
                gl = 0,
                yl = 0,
                bl = 0,
                wl = 0,
                El = 0,
                Sl = 0,
                xl = 0;
            var Tl = 0,
                Nl = 0,
                Cl = 0,
                kl = 0,
                Ll = 0,
                Al = 0,
                Ol = 0,
                Ml = 0,
                _l = 0,
                Dl = 0,
                Pl = 0,
                Hl = 0,
                Bl = 0,
                jl = 0,
                Fl = 0,
                Il = 0,
                ql = 0,
                Rl = 0,
                Ul = 0,
                zl = 0;
            var Wl = 0,
                Xl = 0,
                Vl = 0,
                $l = 0,
                Jl = 0,
                Kl = 0,
                Ql = 0,
                Gl = 0,
                Yl = 0,
                Zl = 0,
                ec = 0,
                tc = 0,
                nc = 0,
                rc = 0,
                ic = 0,
                sc = 0,
                oc = 0,
                uc = 0,
                ac = 0,
                fc = 0;
            var lc = 0,
                cc = 0,
                hc = 0,
                pc = 0,
                dc = 0,
                vc = 0,
                mc = 0,
                gc = 0,
                yc = 0,
                bc = 0,
                wc = 0,
                Ec = 0,
                Sc = 0,
                xc = 0,
                Tc = 0,
                Nc = 0,
                Cc = 0,
                kc = 0,
                Lc = 0,
                Ac = 0;
            var Oc = 0,
                Mc = 0,
                _c = 0,
                Dc = 0,
                Pc = 0,
                Hc = 0,
                Bc = 0,
                jc = 0,
                Fc = 0,
                Ic = 0,
                qc = 0,
                Rc = 0,
                Uc = 0,
                zc = 0,
                Wc = 0,
                Xc = 0,
                Vc = 0,
                $c = 0,
                Jc = 0,
                Kc = 0;
            var Qc = 0,
                Gc = 0,
                Yc = 0,
                Zc = 0,
                eh = 0,
                th = 0,
                nh = 0,
                rh = 0,
                ih = 0,
                sh = 0,
                oh = 0,
                uh = 0,
                ah = 0,
                fh = 0,
                lh = 0,
                ch = 0,
                hh = 0,
                ph = 0,
                dh = 0;
            dh = c;
            c = c + 144 | 0;
            Qc = dh;
            Cl = dh + 104 | 0;
            kc = dh + 40 | 0;
            Kc = dh + 32 | 0;
            al = dh + 24 | 0;
            rc = dh + 16 | 0;
            xc = dh + 12 | 0;
            nc = dh + 8 | 0;
            Sc = dh + 4 | 0;
            ol = dh + 120 | 0;
            W = s[e >> 2] | 0;
            X = e + 4 | 0;
            Qn = s[X >> 2] | 0;
            rs = Ds(Qn, 1) | 0;
            gu = ws(7888, 7896) | 0;
            sf = ws(7888, 7912) | 0;
            mf = ws(7888, 7888) | 0;
            kf = (Qn | 0) > 0;
            e: do {
                if (kf) {
                    Ff = Cl + 4 | 0;
                    Kf = Cl + 8 | 0;
                    V = n + 4 | 0;
                    rt = n + 8 | 0;
                    dt = al + 4 | 0;
                    Ct = (mf | 0) == (-1 | 0);
                    Gl = 0;
                    t: while (1) {
                        jt = rs + Gl | 0;
                        Jt = r[jt >> 0] | 0;
                        on = Jt << 24 >> 24 == 0;
                        n: do {
                            if (on) {
                                s[Kc >> 2] = 0;
                                gn = (W + (Gl * 48 | 0) | 0) + 11 | 0;
                                Ln = r[gn >> 0] | 0;
                                In = Ln << 24 >> 24 == 0;
                                if (In) {
                                    s[kc >> 2] = Gl;
                                    Uc = 1;
                                    ph = 16
                                } else {
                                    Gn = Ln & 255;
                                    fr = (W + (Gl * 48 | 0) | 0) + 12 | 0;
                                    wr = r[fr >> 0] | 0;
                                    Mr = (Ln & 255) > 1;
                                    v = Gn << 2;
                                    Ur = Mr ? v : 4;
                                    eo(kc | 0, -1, Ur | 0) | 0;
                                    Ga = 1;
                                    oc = Gl;
                                    while (1) {
                                        Zr = rs + oc | 0;
                                        if (Ga) {
                                            pi = (W + (oc * 48 | 0) | 0) + 11 | 0;
                                            Ti = r[pi >> 0] | 0;
                                            Hi = Ti << 24 >> 24 == Ln << 24 >> 24;
                                            if (Hi) {
                                                Vi = (W + (oc * 48 | 0) | 0) + 12 | 0;
                                                is = r[Vi >> 0] | 0;
                                                vs = is << 24 >> 24 == wr << 24 >> 24;
                                                if (vs) {
                                                    Ls = (W + (oc * 48 | 0) | 0) + 10 | 0;
                                                    zs = r[Ls >> 0] | 0;
                                                    ro = zs & 255;
                                                    mo = kc + (ro << 2) | 0;
                                                    ko = s[mo >> 2] | 0;
                                                    Fo = (ko | 0) < 0;
                                                    if (Fo) {
                                                        s[mo >> 2] = oc;
                                                        r[Zr >> 0] = 1
                                                    }
                                                }
                                            }
                                        }
                                        Ko = oc + 1 | 0;
                                        Ml = (Ko | 0) == (Qn | 0);
                                        if (Ml) {
                                            break
                                        }
                                        N = rs + Ko | 0;
                                        z = r[N >> 0] | 0;
                                        Nc = z << 24 >> 24 == 0;
                                        Ga = Nc;
                                        oc = Ko
                                    }
                                    ou = Ln << 24 >> 24 == 0;
                                    if (ou) {
                                        yu = Ms(1) | 0;
                                        s[Cl >> 2] = sf;
                                        s[Ff >> 2] = gu;
                                        s[Kf >> 2] = mf;
                                        Wo = yu;
                                        Xo = 1;
                                        Dl = 0;
                                        Pc = 0;
                                        zc = 0
                                    } else {
                                        Uc = Gn;
                                        ph = 16
                                    }
                                }
                                do {
                                    if ((ph | 0) == 16) {
                                        ph = 0;
                                        Hl = 0;
                                        Il = 0;
                                        zl = 0;
                                        uc = 0;
                                        Lc = 0;
                                        while (1) {
                                            Au = kc + (uc << 2) | 0;
                                            qu = s[Au >> 2] | 0;
                                            Gu = (qu | 0) > -1;
                                            if (Gu) {
                                                aa = (W + (qu * 48 | 0) | 0) + 4 | 0;
                                                ba = s[aa >> 2] | 0;
                                                Oa = (ba | 0) > 0;
                                                if (Oa) {
                                                    Ra = W + (qu * 48 | 0) | 0;
                                                    Ya = s[Ra >> 2] | 0;
                                                    Bl = Hl;
                                                    ql = Il;
                                                    Wl = zl;
                                                    pc = 0;
                                                    Ac = Lc;
                                                    while (1) {
                                                        rf = Ya + (pc * 12 | 0) | 0;
                                                        of = s[rf >> 2] | 0;
                                                        if ((of | 0) == 5) {
                                                            uf = (Bl | 0) == 0;
                                                            i = uf ? 1 : Bl;
                                                            jl = i;
                                                            Rl = ql;
                                                            $l = Wl;
                                                            Oc = Ac
                                                        } else if ((of | 0) == 8) {
                                                            Xl = 1;
                                                            ph = 25
                                                        } else if ((of | 0) == 4) {
                                                            Xl = Wl;
                                                            ph = 25
                                                        } else if ((of | 0) == 9) {
                                                            af = (Bl | 0) == 0;
                                                            if (af) {
                                                                ff = (Ya + (pc * 12 | 0) | 0) + 4 | 0;
                                                                lf = s[ff >> 2] | 0;
                                                                cf = Ac + 2 | 0;
                                                                jl = 2;
                                                                Rl = lf;
                                                                $l = Wl;
                                                                Oc = cf
                                                            } else {
                                                                jl = Bl;
                                                                Rl = ql;
                                                                $l = Wl;
                                                                Oc = Ac
                                                            }
                                                        } else {
                                                            Vl = Wl;
                                                            Vc = 0;
                                                            ph = 26
                                                        }
                                                        if ((ph | 0) == 25) {
                                                            ph = 0;
                                                            Vl = Xl;
                                                            Vc = 2;
                                                            ph = 26
                                                        }
                                                        if ((ph | 0) == 26) {
                                                            ph = 0;
                                                            hf = of + -1 | 0;
                                                            pf = hf & of;
                                                            df = (pf | 0) == 0;
                                                            if (df) {
                                                                vf = (Ya + (pc * 12 | 0) | 0) + 8 | 0;
                                                                gf = s[vf >> 2] | 0;
                                                                yf = gf << Vc;
                                                                bf = yf + Ac | 0;
                                                                jl = Bl;
                                                                Rl = ql;
                                                                $l = Vl;
                                                                Oc = bf
                                                            } else {
                                                                jl = Bl;
                                                                Rl = ql;
                                                                $l = Vl;
                                                                Oc = Ac
                                                            }
                                                        }
                                                        wf = pc + 1 | 0;
                                                        Ef = (wf | 0) < (ba | 0);
                                                        if (Ef) {
                                                            Bl = jl;
                                                            ql = Rl;
                                                            Wl = $l;
                                                            pc = wf;
                                                            Ac = Oc
                                                        } else {
                                                            Fl = jl;
                                                            Ul = Rl;
                                                            Jl = $l;
                                                            Mc = Oc;
                                                            break
                                                        }
                                                    }
                                                } else {
                                                    Fl = Hl;
                                                    Ul = Il;
                                                    Jl = zl;
                                                    Mc = Lc
                                                }
                                            } else {
                                                Fl = Hl;
                                                Ul = Il;
                                                Jl = zl;
                                                Mc = Lc
                                            }
                                            Sf = uc + 1 | 0;
                                            xf = (Sf | 0) < (Uc | 0);
                                            if (xf) {
                                                Hl = Fl;
                                                Il = Ul;
                                                zl = Jl;
                                                uc = Sf;
                                                Lc = Mc
                                            } else {
                                                break
                                            }
                                        }
                                        Tf = Mc + 1 | 0;
                                        Nf = Ms(Tf) | 0;
                                        Cf = (Fl | 0) == 2;
                                        do {
                                            if (Cf) {
                                                Lf = (Ul | 0) < 100;
                                                if (Lf) {
                                                    Af = (Ul | 0) / 10 & -1;
                                                    Of = Af + 48 | 0;
                                                    Mf = Of & 255;
                                                    r[Nf >> 0] = Mf;
                                                    _f = (Ul | 0) % 10 & -1;
                                                    Df = _f + 48 | 0;
                                                    Pf = Df & 255;
                                                    Hf = Nf + 1 | 0;
                                                    r[Hf >> 0] = Pf;
                                                    s[Cl >> 2] = sf;
                                                    s[Ff >> 2] = gu;
                                                    s[Kf >> 2] = mf;
                                                    Pl = Fl;
                                                    _c = 2;
                                                    break
                                                } else {
                                                    Bf = Ul + 156 | 0;
                                                    jf = Bf & 255;
                                                    r[Nf >> 0] = jf;
                                                    s[Cl >> 2] = sf;
                                                    s[Ff >> 2] = gu;
                                                    s[Kf >> 2] = mf;
                                                    Pl = 2;
                                                    _c = 1;
                                                    break
                                                }
                                            } else {
                                                s[Cl >> 2] = sf;
                                                s[Ff >> 2] = gu;
                                                s[Kf >> 2] = mf;
                                                Pl = Fl;
                                                _c = 0
                                            }
                                        } while (0);
                                        If = (Pl | 0) == 0;
                                        qf = (Jl | 0) == 0;
                                        Rf = Nf;
                                        fl = -1;
                                        vl = -1;
                                        ac = 0;
                                        Hc = _c;
                                        $c = Kc;
                                        r: while (1) {
                                            Uf = ii(t, 64, 0) | 0;
                                            s[$c >> 2] = Uf;
                                            zf = Uf + 16 | 0;
                                            s[zf >> 2] = Hc;
                                            Wf = kc + (ac << 2) | 0;
                                            Xf = s[Wf >> 2] | 0;
                                            Vf = (Xf | 0) < 0;
                                            if (Vf) {
                                                s[Uf >> 2] = 1;
                                                lc = ac;
                                                while (1) {
                                                    fc = lc + 1 | 0;
                                                    $f = (fc | 0) < (Uc | 0);
                                                    if (!$f) {
                                                        Za = 1;
                                                        dl = vl;
                                                        Dc = Hc;
                                                        break r
                                                    }
                                                    Jf = kc + (fc << 2) | 0;
                                                    Qf = s[Jf >> 2] | 0;
                                                    Gf = (Qf | 0) < 0;
                                                    if (Gf) {
                                                        lc = fc
                                                    } else {
                                                        break
                                                    }
                                                }
                                                Yf = Hc + 1 | 0;
                                                Zf = Nf + Hc | 0;
                                                r[Zf >> 0] = 0;
                                                el = s[$c >> 2] | 0;
                                                tl = el + 16 | 0;
                                                s[tl >> 2] = Yf;
                                                nl = el + 44 | 0;
                                                rl = ii(t, 64, 0) | 0;
                                                s[nl >> 2] = rl;
                                                G = rl;
                                                sl = Qf;
                                                cc = fc;
                                                Bc = Yf;
                                                Jc = nl
                                            } else {
                                                G = Uf;
                                                sl = Xf;
                                                cc = ac;
                                                Bc = Hc;
                                                Jc = $c
                                            }
                                            il = (W + (sl * 48 | 0) | 0) + 16 | 0;
                                            $ = s[il >> 2] | 0;
                                            J = (W + (sl * 48 | 0) | 0) + 20 | 0;
                                            K = s[J >> 2] | 0;
                                            Q = G + 28 | 0;
                                            Y = s[Q >> 2] | 0;
                                            Z = Y + 1 | 0;
                                            s[Q >> 2] = Z;
                                            et = G + 24 | 0;
                                            tt = s[et >> 2] | 0;
                                            nt = Z >>> 0 < tt >>> 0;
                                            g = G + 32 | 0;
                                            k = s[g >> 2] | 0;
                                            if (nt) {
                                                L = k;
                                                at = k;
                                                mt = G
                                            } else {
                                                it = tt + 1 | 0;
                                                s[et >> 2] = it;
                                                st = it << 3;
                                                ot = Ps(k, st) | 0;
                                                s[g >> 2] = ot;
                                                F = s[Jc >> 2] | 0;
                                                b = F + 32 | 0;
                                                A = s[b >> 2] | 0;
                                                L = A;
                                                at = ot;
                                                mt = F
                                            }
                                            ut = at + (Y << 3) | 0;
                                            s[ut >> 2] = $;
                                            ft = (at + (Y << 3) | 0) + 4 | 0;
                                            s[ft >> 2] = K;
                                            lt = (W + (sl * 48 | 0) | 0) + 32 | 0;
                                            ct = s[lt >> 2] | 0;
                                            ht = (W + (sl * 48 | 0) | 0) + 36 | 0;
                                            pt = s[ht >> 2] | 0;
                                            vt = mt + 28 | 0;
                                            yt = s[vt >> 2] | 0;
                                            bt = yt + 1 | 0;
                                            s[vt >> 2] = bt;
                                            wt = mt + 24 | 0;
                                            Et = s[wt >> 2] | 0;
                                            St = bt >>> 0 < Et >>> 0;
                                            if (St) {
                                                O = L;
                                                Lt = L;
                                                Ht = mt
                                            } else {
                                                y = mt + 32 | 0;
                                                xt = Et + 1 | 0;
                                                s[wt >> 2] = xt;
                                                Tt = xt << 3;
                                                Nt = Ps(L, Tt) | 0;
                                                s[y >> 2] = Nt;
                                                I = s[Jc >> 2] | 0;
                                                E = I + 32 | 0;
                                                M = s[E >> 2] | 0;
                                                O = M;
                                                Lt = Nt;
                                                Ht = I
                                            }
                                            kt = Lt + (yt << 3) | 0;
                                            s[kt >> 2] = ct;
                                            At = (Lt + (yt << 3) | 0) + 4 | 0;
                                            s[At >> 2] = pt;
                                            Ot = (W + (sl * 48 | 0) | 0) + 40 | 0;
                                            Mt = s[Ot >> 2] | 0;
                                            _t = (W + (sl * 48 | 0) | 0) + 44 | 0;
                                            Dt = s[_t >> 2] | 0;
                                            Pt = Ht + 28 | 0;
                                            Bt = s[Pt >> 2] | 0;
                                            Ft = Bt + 1 | 0;
                                            s[Pt >> 2] = Ft;
                                            It = Ht + 24 | 0;
                                            qt = s[It >> 2] | 0;
                                            Rt = Ft >>> 0 < qt >>> 0;
                                            if (Rt) {
                                                _ = O;
                                                Vt = O;
                                                en = Ht
                                            } else {
                                                w = Ht + 32 | 0;
                                                Ut = qt + 1 | 0;
                                                s[It >> 2] = Ut;
                                                zt = Ut << 3;
                                                Wt = Ps(O, zt) | 0;
                                                s[w >> 2] = Wt;
                                                q = s[Jc >> 2] | 0;
                                                x = q + 32 | 0;
                                                D = s[x >> 2] | 0;
                                                _ = D;
                                                Vt = Wt;
                                                en = q
                                            }
                                            Xt = Vt + (Bt << 3) | 0;
                                            s[Xt >> 2] = Mt;
                                            $t = (Vt + (Bt << 3) | 0) + 4 | 0;
                                            s[$t >> 2] = Dt;
                                            Kt = (W + (sl * 48 | 0) | 0) + 24 | 0;
                                            Qt = s[Kt >> 2] | 0;
                                            Gt = (W + (sl * 48 | 0) | 0) + 28 | 0;
                                            Yt = s[Gt >> 2] | 0;
                                            Zt = en + 28 | 0;
                                            tn = s[Zt >> 2] | 0;
                                            nn = tn + 1 | 0;
                                            s[Zt >> 2] = nn;
                                            rn = en + 24 | 0;
                                            sn = s[rn >> 2] | 0;
                                            un = nn >>> 0 < sn >>> 0;
                                            if (un) {
                                                hn = _;
                                                Rn = en
                                            } else {
                                                S = en + 32 | 0;
                                                an = sn + 1 | 0;
                                                s[rn >> 2] = an;
                                                fn = an << 3;
                                                ln = Ps(_, fn) | 0;
                                                s[S >> 2] = ln;
                                                R = s[Jc >> 2] | 0;
                                                hn = ln;
                                                Rn = R
                                            }
                                            cn = hn + (tn << 3) | 0;
                                            s[cn >> 2] = Qt;
                                            pn = (hn + (tn << 3) | 0) + 4 | 0;
                                            s[pn >> 2] = Yt;
                                            dn = s[il >> 2] | 0;
                                            vn = s[lt >> 2] | 0;
                                            mn = dn - vn | 0;
                                            yn = s[Kt >> 2] | 0;
                                            bn = mn + yn | 0;
                                            wn = s[Ot >> 2] | 0;
                                            En = bn - wn | 0;
                                            s[al >> 2] = En;
                                            Sn = s[ht >> 2] | 0;
                                            xn = s[J >> 2] | 0;
                                            Tn = Sn - xn | 0;
                                            Nn = s[_t >> 2] | 0;
                                            Cn = Tn + Nn | 0;
                                            kn = s[Gt >> 2] | 0;
                                            An = Cn - kn | 0;
                                            s[dt >> 2] = An;
                                            ic = (En | 0) > -1;
                                            vc = 0 - En | 0;
                                            On = ic ? En : vc;
                                            sc = (An | 0) > -1;
                                            mc = 0 - An | 0;
                                            Mn = sc ? An : mc;
                                            _n = (On | 0) > (Mn | 0);
                                            Dn = _n & 1;
                                            Pn = Dn ^ 1;
                                            Hn = al + (Pn << 2) | 0;
                                            Bn = s[Hn >> 2] | 0;
                                            l = Bn >>> 31;
                                            jn = l << 1;
                                            Fn = Dn | jn;
                                            qn = Rn + 36 | 0;
                                            s[qn >> 2] = Fn;
                                            Un = (W + (sl * 48 | 0) | 0) + 4 | 0;
                                            zn = s[Un >> 2] | 0;
                                            Wn = (zn | 0) > 0;
                                            i: do {
                                                if (Wn) {
                                                    Xn = W + (sl * 48 | 0) | 0;
                                                    cl = fl;
                                                    gl = vl;
                                                    dc = 0;
                                                    Fc = Bc;
                                                    while (1) {
                                                        Vn = s[Xn >> 2] | 0;
                                                        $n = Vn + (dc * 12 | 0) | 0;
                                                        Jn = s[$n >> 2] | 0;
                                                        s: do {
                                                            switch (Jn | 0) {
                                                                case 2:
                                                                    {
                                                                        ur = (Vn + (dc * 12 | 0) | 0) + 4 | 0;
                                                                        ar = s[ur >> 2] | 0;
                                                                        s[nc >> 2] = ar;
                                                                        lr = (Vn + (dc * 12 | 0) | 0) + 8 | 0;
                                                                        cr = s[lr >> 2] | 0;
                                                                        s[rc >> 2] = cr;
                                                                        do {
                                                                            if (If) {
                                                                                Ir = cr;
                                                                                Rr = ar;
                                                                                qc = Fc
                                                                            } else {
                                                                                hr = Qs(ar, 37, cr) | 0;
                                                                                pr = (hr | 0) == (0 | 0);
                                                                                if (pr) {
                                                                                    Ir = cr;
                                                                                    Rr = ar;
                                                                                    qc = Fc;
                                                                                    break
                                                                                } else {
                                                                                    dr = hr;
                                                                                    mr = ar;
                                                                                    Cr = cr;
                                                                                    Ic = Fc
                                                                                }
                                                                                while (1) {
                                                                                    vr = dr;
                                                                                    gr = mr;
                                                                                    yr = vr - gr | 0;
                                                                                    br = Mc - Ic | 0;
                                                                                    Er = yr + 1 | 0;
                                                                                    Sr = br >>> 0 < Er >>> 0;
                                                                                    if (Sr) {
                                                                                        ll = cl;
                                                                                        ml = gl;
                                                                                        kl = 1;
                                                                                        jc = Ic;
                                                                                        break i
                                                                                    }
                                                                                    xr = Nf + Ic | 0;
                                                                                    oo(xr | 0, mr | 0, yr | 0) | 0;
                                                                                    Tr = yr + Ic | 0;
                                                                                    Nr = Er >>> 0 < Cr >>> 0;
                                                                                    if (Nr) {
                                                                                        kr = dr + 1 | 0;
                                                                                        Lr = r[kr >> 0] | 0;
                                                                                        Ar = Lr << 24 >> 24 == 37;
                                                                                        if (Ar) {
                                                                                            ul = 37;
                                                                                            Tc = kr;
                                                                                            Cc = Er
                                                                                        } else {
                                                                                            ph = 59
                                                                                        }
                                                                                    } else {
                                                                                        ph = 59
                                                                                    }
                                                                                    if ((ph | 0) == 59) {
                                                                                        ph = 0;
                                                                                        ul = 29;
                                                                                        Tc = dr;
                                                                                        Cc = yr
                                                                                    }
                                                                                    Or = Tr + 1 | 0;
                                                                                    _r = Nf + Tr | 0;
                                                                                    r[_r >> 0] = ul;
                                                                                    h = Cc ^ -1;
                                                                                    Dr = Cr + h | 0;
                                                                                    s[rc >> 2] = Dr;
                                                                                    Pr = Tc + 1 | 0;
                                                                                    s[nc >> 2] = Pr;
                                                                                    Hr = Qs(Pr, 37, Dr) | 0;
                                                                                    Br = (Hr | 0) == (0 | 0);
                                                                                    if (Br) {
                                                                                        Ir = Dr;
                                                                                        Rr = Pr;
                                                                                        qc = Or;
                                                                                        break
                                                                                    } else {
                                                                                        dr = Hr;
                                                                                        mr = Pr;
                                                                                        Cr = Dr;
                                                                                        Ic = Or
                                                                                    }
                                                                                }
                                                                            }
                                                                        } while (0);
                                                                        jr = Mc - qc | 0;
                                                                        Fr = jr >>> 0 < Ir >>> 0;
                                                                        if (Fr) {
                                                                            ll = cl;
                                                                            ml = gl;
                                                                            kl = 1;
                                                                            jc = qc;
                                                                            break i
                                                                        }
                                                                        qr = Nf + qc | 0;
                                                                        oo(qr | 0, Rr | 0, Ir | 0) | 0;
                                                                        zr = Ir + qc | 0;
                                                                        hl = cl;
                                                                        yl = gl;
                                                                        Ol = 0;
                                                                        Rc = zr;
                                                                        break
                                                                    };
                                                                case 1:
                                                                    {
                                                                        Kn = Mc - Fc | 0;
                                                                        Yn = (Vn + (dc * 12 | 0) | 0) + 8 | 0;
                                                                        er = s[Yn >> 2] | 0;
                                                                        tr = Kn >>> 0 < er >>> 0;
                                                                        if (tr) {
                                                                            ll = cl;
                                                                            ml = gl;
                                                                            kl = 1;
                                                                            jc = Fc;
                                                                            break i
                                                                        }
                                                                        nr = Nf + Fc | 0;
                                                                        rr = (Vn + (dc * 12 | 0) | 0) + 4 | 0;
                                                                        ir = s[rr >> 2] | 0;
                                                                        oo(nr | 0, ir | 0, er | 0) | 0;
                                                                        sr = s[Yn >> 2] | 0;
                                                                        or = sr + Fc | 0;
                                                                        hl = cl;
                                                                        yl = gl;
                                                                        Ol = 0;
                                                                        Rc = or;
                                                                        break
                                                                    };
                                                                case 7:
                                                                    {
                                                                        wo = (Vn + (dc * 12 | 0) | 0) + 4 | 0;
                                                                        Eo = s[wo >> 2] | 0;
                                                                        So = Eo >>> 0 < 19;
                                                                        xo = (Eo | 0) != 14;
                                                                        gc = So & xo;
                                                                        do {
                                                                            if (gc) {
                                                                                if ((Eo | 0) == 0 | (Eo | 0) == 2) {
                                                                                    Nl = 7936;
                                                                                    break
                                                                                }
                                                                                To = Eo >>> 0 < 3;
                                                                                d = 3 - Eo | 0;
                                                                                p = To ? d : 0;
                                                                                No = Eo + -2 | 0;
                                                                                Co = No + p | 0;
                                                                                s[Qc >> 2] = Co;
                                                                                Ws(ol, 7920, Qc) | 0;
                                                                                Nl = ol
                                                                            } else {
                                                                                if ((Eo | 0) == 20) {
                                                                                    Nl = 7912;
                                                                                    break
                                                                                } else if (!((Eo | 0) == 26)) {
                                                                                    hl = cl;
                                                                                    yl = gl;
                                                                                    Ol = 0;
                                                                                    Rc = Fc;
                                                                                    break s
                                                                                }
                                                                                Nl = 7888
                                                                            }
                                                                        } while (0);
                                                                        Lo = ws(7888, Nl) | 0;
                                                                        hl = Eo;
                                                                        yl = Lo;
                                                                        Ol = 0;
                                                                        Rc = Fc;
                                                                        break
                                                                    };
                                                                case 8:
                                                                case 4:
                                                                    {
                                                                        Wr = (Vn + (dc * 12 | 0) | 0) + 4 | 0;
                                                                        Xr = s[Wr >> 2] | 0;
                                                                        s[nc >> 2] = Xr;
                                                                        Vr = (Vn + (dc * 12 | 0) | 0) + 8 | 0;
                                                                        $r = s[Vr >> 2] | 0;
                                                                        s[rc >> 2] = $r;
                                                                        Jr = Nf + Fc | 0;
                                                                        s[Sc >> 2] = Jr;
                                                                        Kr = Mc - Fc | 0;
                                                                        s[xc >> 2] = Kr;
                                                                        Qr = (cl | 0) < 0;
                                                                        if (!Qr) {
                                                                            co = (gl | 0) == (-1 | 0);
                                                                            if (co) {
                                                                                ll = cl;
                                                                                ml = -1;
                                                                                kl = 1;
                                                                                jc = Fc;
                                                                                break i
                                                                            }
                                                                            ho = xs(gl, nc, rc, Sc, xc) | 0;
                                                                            po = (ho | 0) == -1;
                                                                            vo = po & 1;
                                                                            if (po) {
                                                                                hl = cl;
                                                                                yl = gl;
                                                                                Ol = vo;
                                                                                Rc = Fc;
                                                                                break s
                                                                            }
                                                                            go = s[Sc >> 2] | 0;
                                                                            yo = go;
                                                                            bo = yo - Rf | 0;
                                                                            hl = cl;
                                                                            yl = gl;
                                                                            Ol = vo;
                                                                            Rc = bo;
                                                                            break s
                                                                        }
                                                                        o: do {
                                                                            if (qf) {
                                                                                hi = $r >>> 0 > 2;
                                                                                do {
                                                                                    if (hi) {
                                                                                        di = r[Xr >> 0] | 0;
                                                                                        vi = di << 24 >> 24 == -17;
                                                                                        if (!vi) {
                                                                                            break
                                                                                        }
                                                                                        mi = Xr + 1 | 0;
                                                                                        gi = r[mi >> 0] | 0;
                                                                                        yi = gi << 24 >> 24 == -69;
                                                                                        if (!yi) {
                                                                                            break
                                                                                        }
                                                                                        bi = Xr + 2 | 0;
                                                                                        wi = r[bi >> 0] | 0;
                                                                                        Ei = wi << 24 >> 24 == -65;
                                                                                        if (!Ei) {
                                                                                            break
                                                                                        }
                                                                                        Si = Xr + 3 | 0;
                                                                                        s[nc >> 2] = Si;
                                                                                        xi = $r + -3 | 0;
                                                                                        s[rc >> 2] = xi;
                                                                                        do {
                                                                                            if (Ct) {
                                                                                                ef = 1
                                                                                            } else {
                                                                                                Ni = xs(mf, nc, rc, Sc, xc) | 0;
                                                                                                Ci = (Ni | 0) == -1;
                                                                                                ki = Ci & 1;
                                                                                                if (Ci) {
                                                                                                    ef = ki;
                                                                                                    break
                                                                                                }
                                                                                                Li = s[Sc >> 2] | 0;
                                                                                                Ai = Li;
                                                                                                Oi = Ai - Rf | 0;
                                                                                                Zl = 0;
                                                                                                while (1) {
                                                                                                    Di = Cl + (Zl << 2) | 0;
                                                                                                    Pi = s[Di >> 2] | 0;
                                                                                                    Bi = (Pi | 0) == (mf | 0);
                                                                                                    Mi = Zl + 1 | 0;
                                                                                                    if (Bi) {
                                                                                                        break
                                                                                                    }
                                                                                                    _i = (Mi | 0) < 3;
                                                                                                    if (_i) {
                                                                                                        Zl = Mi
                                                                                                    } else {
                                                                                                        hl = cl;
                                                                                                        yl = gl;
                                                                                                        Ol = ki;
                                                                                                        Rc = Oi;
                                                                                                        break s
                                                                                                    }
                                                                                                }
                                                                                                ji = (Zl | 0) > 0;
                                                                                                if (ji) {
                                                                                                    u = Zl;
                                                                                                    while (1) {
                                                                                                        Fi = u + -1 | 0;
                                                                                                        Ii = Cl + (Fi << 2) | 0;
                                                                                                        qi = s[Ii >> 2] | 0;
                                                                                                        Ri = Cl + (u << 2) | 0;
                                                                                                        s[Ri >> 2] = qi;
                                                                                                        Ui = (Fi | 0) > 0;
                                                                                                        if (Ui) {
                                                                                                            u = Fi
                                                                                                        } else {
                                                                                                            break
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                s[Cl >> 2] = mf;
                                                                                                hl = cl;
                                                                                                yl = gl;
                                                                                                Ol = ki;
                                                                                                Rc = Oi;
                                                                                                break s
                                                                                            }
                                                                                        } while (0);
                                                                                        zi = s[Wr >> 2] | 0;
                                                                                        s[nc >> 2] = zi;
                                                                                        Wi = s[Vr >> 2] | 0;
                                                                                        s[rc >> 2] = Wi;
                                                                                        s[Sc >> 2] = Jr;
                                                                                        s[xc >> 2] = Kr;
                                                                                        gs = Wi;
                                                                                        Ts = zi;
                                                                                        bl = 0;
                                                                                        Ll = ef;
                                                                                        break o
                                                                                    }
                                                                                } while (0);
                                                                                Xi = ($r | 0) > 0;
                                                                                if (Xi) {
                                                                                    Kl = 0;
                                                                                    while (1) {
                                                                                        Ki = Xr + Kl | 0;
                                                                                        Qi = r[Ki >> 0] | 0;
                                                                                        Gi = Qi << 24 >> 24 < 0;
                                                                                        $i = Kl + 1 | 0;
                                                                                        if (Gi) {
                                                                                            gs = $r;
                                                                                            Ts = Xr;
                                                                                            bl = 0;
                                                                                            Ll = 0;
                                                                                            break o
                                                                                        }
                                                                                        Ji = ($i | 0) < ($r | 0);
                                                                                        if (Ji) {
                                                                                            Kl = $i
                                                                                        } else {
                                                                                            ec = 0;
                                                                                            break
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    ec = 0
                                                                                }
                                                                                while (1) {
                                                                                    es = Cl + (ec << 2) | 0;
                                                                                    ts = s[es >> 2] | 0;
                                                                                    ns = (ts | 0) == (mf | 0);
                                                                                    Yi = ec + 1 | 0;
                                                                                    if (ns) {
                                                                                        break
                                                                                    }
                                                                                    Zi = (Yi | 0) < 3;
                                                                                    if (Zi) {
                                                                                        ec = Yi
                                                                                    } else {
                                                                                        gs = $r;
                                                                                        Ts = Xr;
                                                                                        bl = 0;
                                                                                        Ll = 0;
                                                                                        break o
                                                                                    }
                                                                                }
                                                                                ss = (ec | 0) > 0;
                                                                                if (ss) {
                                                                                    a = ec;
                                                                                    while (1) {
                                                                                        os = a + -1 | 0;
                                                                                        us = Cl + (os << 2) | 0;
                                                                                        as = s[us >> 2] | 0;
                                                                                        fs = Cl + (a << 2) | 0;
                                                                                        s[fs >> 2] = as;
                                                                                        ls = (os | 0) > 0;
                                                                                        if (ls) {
                                                                                            a = os
                                                                                        } else {
                                                                                            break
                                                                                        }
                                                                                    }
                                                                                }
                                                                                s[Cl >> 2] = mf;
                                                                                gs = $r;
                                                                                Ts = Xr;
                                                                                bl = 0;
                                                                                Ll = 0
                                                                            } else {
                                                                                Yl = 0;
                                                                                while (1) {
                                                                                    ei = Cl + (Yl << 2) | 0;
                                                                                    ti = s[ei >> 2] | 0;
                                                                                    ri = (ti | 0) == (sf | 0);
                                                                                    Gr = Yl + 1 | 0;
                                                                                    if (ri) {
                                                                                        break
                                                                                    }
                                                                                    Yr = (Gr | 0) < 3;
                                                                                    if (Yr) {
                                                                                        Yl = Gr
                                                                                    } else {
                                                                                        gs = $r;
                                                                                        Ts = Xr;
                                                                                        bl = 0;
                                                                                        Ll = 0;
                                                                                        break o
                                                                                    }
                                                                                }
                                                                                oi = (Yl | 0) > 0;
                                                                                if (oi) {
                                                                                    o = Yl;
                                                                                    while (1) {
                                                                                        ui = o + -1 | 0;
                                                                                        ai = Cl + (ui << 2) | 0;
                                                                                        fi = s[ai >> 2] | 0;
                                                                                        li = Cl + (o << 2) | 0;
                                                                                        s[li >> 2] = fi;
                                                                                        ci = (ui | 0) > 0;
                                                                                        if (ci) {
                                                                                            o = ui
                                                                                        } else {
                                                                                            break
                                                                                        }
                                                                                    }
                                                                                }
                                                                                s[Cl >> 2] = sf;
                                                                                gs = $r;
                                                                                Ts = Xr;
                                                                                bl = 0;
                                                                                Ll = 0
                                                                            }
                                                                        } while (0);
                                                                        while (1) {
                                                                            cs = Cl + (bl << 2) | 0;
                                                                            hs = s[cs >> 2] | 0;
                                                                            ps = (hs | 0) == (-1 | 0);
                                                                            if (ps) {
                                                                                tf = gs;
                                                                                nf = Ts;
                                                                                Al = Ll
                                                                            } else {
                                                                                ds = (bl | 0) < 2;
                                                                                ms = (hs | 0) == (gu | 0);
                                                                                bc = ds & ms;
                                                                                u: do {
                                                                                    if (bc) {
                                                                                        ys = (gs | 0) > 0;
                                                                                        if (ys) {
                                                                                            Ql = 0
                                                                                        } else {
                                                                                            js = gu;
                                                                                            break
                                                                                        }
                                                                                        while (1) {
                                                                                            Ss = Ts + Ql | 0;
                                                                                            Ns = r[Ss >> 0] | 0;
                                                                                            Cs = Ns << 24 >> 24 < 0;
                                                                                            ks = (Ns & 255) < 160;
                                                                                            yc = Cs & ks;
                                                                                            bs = Ql + 1 | 0;
                                                                                            if (yc) {
                                                                                                break
                                                                                            }
                                                                                            Es = (bs | 0) < (gs | 0);
                                                                                            if (Es) {
                                                                                                Ql = bs
                                                                                            } else {
                                                                                                js = gu;
                                                                                                break u
                                                                                            }
                                                                                        }
                                                                                        xl = bl + 1 | 0;
                                                                                        As = (xl | 0) < 3;
                                                                                        if (As) {
                                                                                            El = bl;
                                                                                            Tl = xl;
                                                                                            while (1) {
                                                                                                Os = Cl + (Tl << 2) | 0;
                                                                                                Hs = s[Os >> 2] | 0;
                                                                                                Bs = Cl + (El << 2) | 0;
                                                                                                s[Bs >> 2] = Hs;
                                                                                                wl = Tl + 1 | 0;
                                                                                                _l = (wl | 0) == 3;
                                                                                                if (_l) {
                                                                                                    break
                                                                                                } else {
                                                                                                    Sl = Tl;
                                                                                                    Tl = wl;
                                                                                                    El = Sl
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        s[Kf >> 2] = gu;
                                                                                        U = s[cs >> 2] | 0;
                                                                                        js = U
                                                                                    } else {
                                                                                        js = hs
                                                                                    }
                                                                                } while (0);
                                                                                Fs = xs(js, nc, rc, Sc, xc) | 0;
                                                                                Is = (Fs | 0) == -1;
                                                                                qs = Is & 1;
                                                                                if (!Is) {
                                                                                    break
                                                                                }
                                                                                uo = s[Wr >> 2] | 0;
                                                                                s[nc >> 2] = uo;
                                                                                ao = s[Vr >> 2] | 0;
                                                                                s[rc >> 2] = ao;
                                                                                s[Sc >> 2] = Jr;
                                                                                s[xc >> 2] = Kr;
                                                                                tf = ao;
                                                                                nf = uo;
                                                                                Al = qs
                                                                            }
                                                                            fo = bl + 1 | 0;
                                                                            lo = (fo | 0) < 3;
                                                                            if (lo) {
                                                                                gs = tf;
                                                                                Ts = nf;
                                                                                bl = fo;
                                                                                Ll = Al
                                                                            } else {
                                                                                hl = cl;
                                                                                yl = gl;
                                                                                Ol = Al;
                                                                                Rc = Fc;
                                                                                break s
                                                                            }
                                                                        }
                                                                        Rs = s[Sc >> 2] | 0;
                                                                        Us = Rs;
                                                                        Xs = Us - Rf | 0;
                                                                        tc = 0;
                                                                        while (1) {
                                                                            Js = Cl + (tc << 2) | 0;
                                                                            Ks = s[Js >> 2] | 0;
                                                                            Gs = (Ks | 0) == (js | 0);
                                                                            Vs = tc + 1 | 0;
                                                                            if (Gs) {
                                                                                break
                                                                            }
                                                                            $s = (Vs | 0) < 3;
                                                                            if ($s) {
                                                                                tc = Vs
                                                                            } else {
                                                                                hl = cl;
                                                                                yl = gl;
                                                                                Ol = qs;
                                                                                Rc = Xs;
                                                                                break s
                                                                            }
                                                                        }
                                                                        Ys = (tc | 0) > 0;
                                                                        if (Ys) {
                                                                            f = tc;
                                                                            while (1) {
                                                                                Zs = f + -1 | 0;
                                                                                to = Cl + (Zs << 2) | 0;
                                                                                no = s[to >> 2] | 0;
                                                                                io = Cl + (f << 2) | 0;
                                                                                s[io >> 2] = no;
                                                                                so = (Zs | 0) > 0;
                                                                                if (so) {
                                                                                    f = Zs
                                                                                } else {
                                                                                    break
                                                                                }
                                                                            }
                                                                        }
                                                                        s[Cl >> 2] = js;
                                                                        hl = cl;
                                                                        yl = gl;
                                                                        Ol = qs;
                                                                        Rc = Xs;
                                                                        break
                                                                    };
                                                                default:
                                                                    {
                                                                        hl = cl;
                                                                        yl = gl;
                                                                        Ol = 0;
                                                                        Rc = Fc
                                                                    }
                                                            }
                                                        } while (0);
                                                        Ao = dc + 1 | 0;
                                                        Oo = s[Un >> 2] | 0;
                                                        Mo = (Ao | 0) < (Oo | 0);
                                                        _o = (Ol | 0) == 0;
                                                        Ec = Mo & _o;
                                                        if (Ec) {
                                                            cl = hl;
                                                            gl = yl;
                                                            dc = Ao;
                                                            Fc = Rc
                                                        } else {
                                                            ll = hl;
                                                            ml = yl;
                                                            kl = Ol;
                                                            jc = Rc;
                                                            break i
                                                        }
                                                    }
                                                } else {
                                                    ll = fl;
                                                    ml = vl;
                                                    kl = 0;
                                                    jc = Bc
                                                }
                                            } while (0);
                                            Do = (ll | 0) < 2;
                                            if (Do) {
                                                Po = (ml | 0) == (-1 | 0);
                                                if (Po) {
                                                    pl = -1
                                                } else {
                                                    pl = -1
                                                }
                                            } else {
                                                pl = ll
                                            }
                                            Ho = cc + 1 | 0;
                                            Bo = (Ho | 0) < (Uc | 0);
                                            jo = (kl | 0) == 0;
                                            wc = Bo & jo;
                                            if (!wc) {
                                                Za = jo;
                                                dl = ml;
                                                Dc = jc;
                                                break
                                            }
                                            Io = s[Jc >> 2] | 0;
                                            qo = Io + 44 | 0;
                                            fl = pl;
                                            vl = ml;
                                            ac = Ho;
                                            Hc = jc;
                                            $c = qo
                                        }
                                        Ro = (dl | 0) == (-1 | 0);
                                        if (Ro) {
                                            if (Za) {
                                                Wo = Nf;
                                                Xo = Tf;
                                                Dl = Pl;
                                                Pc = Dc;
                                                zc = Uc;
                                                break
                                            }
                                        } else {
                                            if (Za) {
                                                Wo = Nf;
                                                Xo = Tf;
                                                Dl = Pl;
                                                Pc = Dc;
                                                zc = Uc;
                                                break
                                            }
                                        }
                                        Xa = s[Kc >> 2] | 0;
                                        ni(t, Xa);
                                        _s(Nf);
                                        break n
                                    }
                                } while (0);
                                Uo = Pc + 1 | 0;
                                zo = Wo + Pc | 0;
                                r[zo >> 0] = 0;
                                Vo = Xo >>> 0 > Uo >>> 0;
                                if (Vo) {
                                    $o = Ps(Wo, Uo) | 0;
                                    Xc = $o
                                } else {
                                    Xc = Wo
                                }
                                Jo = (zc | 0) == 1;
                                if (Jo) {
                                    Qo = s[Kc >> 2] | 0;
                                    Wc = Qo
                                } else {
                                    Go = s[V >> 2] | 0;
                                    Yo = s[rt >> 2] | 0;
                                    Zo = ii(t, 64, 0) | 0;
                                    eu = Zn() | 0;
                                    tu = Zo + 48 | 0;
                                    s[tu >> 2] = eu;
                                    nu = s[Kc >> 2] | 0;
                                    ru = eu + 8 | 0;
                                    s[ru >> 2] = nu;
                                    iu = (nu | 0) == (0 | 0);
                                    if (iu) {
                                        Wc = Zo
                                    } else {
                                        uu = nu;
                                        Gc = -2;
                                        th = Go;
                                        sh = -2;
                                        fh = Yo;
                                        while (1) {
                                            su = uu + 40 | 0;
                                            au = s[su >> 2] | 0;
                                            fu = au + 1 | 0;
                                            s[su >> 2] = fu;
                                            lu = (au | 0) > -2;
                                            if (!lu) {
                                                ph = 133;
                                                break t
                                            }
                                            cu = s[uu >> 2] | 0;
                                            hu = (cu | 0) == 1;
                                            if (hu) {
                                                s[Zo >> 2] = 1;
                                                eh = Gc;
                                                ih = th;
                                                ah = sh;
                                                hh = fh
                                            } else {
                                                pu = uu + 28 | 0;
                                                du = s[pu >> 2] | 0;
                                                vu = (du | 0) == 0;
                                                if (vu) {
                                                    eh = Gc;
                                                    ih = th;
                                                    ah = sh;
                                                    hh = fh
                                                } else {
                                                    m = uu + 32 | 0;
                                                    C = s[m >> 2] | 0;
                                                    hc = 0;
                                                    Yc = Gc;
                                                    rh = th;
                                                    oh = sh;
                                                    ch = fh;
                                                    while (1) {
                                                        mu = C + (hc << 3) | 0;
                                                        bu = s[mu >> 2] | 0;
                                                        wu = (rh | 0) < (bu | 0);
                                                        Eu = bu + -1 | 0;
                                                        nh = wu ? rh : Eu;
                                                        Su = (Yc | 0) > (bu | 0);
                                                        xu = bu + 1 | 0;
                                                        Zc = Su ? Yc : xu;
                                                        Tu = (C + (hc << 3) | 0) + 4 | 0;
                                                        Nu = s[Tu >> 2] | 0;
                                                        Cu = (ch | 0) < (Nu | 0);
                                                        ku = Nu + -1 | 0;
                                                        lh = Cu ? ch : ku;
                                                        Lu = (oh | 0) > (Nu | 0);
                                                        Ou = Nu + 1 | 0;
                                                        uh = Lu ? oh : Ou;
                                                        Mu = hc + 1 | 0;
                                                        _u = Mu >>> 0 < du >>> 0;
                                                        if (_u) {
                                                            hc = Mu;
                                                            Yc = Zc;
                                                            rh = nh;
                                                            oh = uh;
                                                            ch = lh
                                                        } else {
                                                            eh = Zc;
                                                            ih = nh;
                                                            ah = uh;
                                                            hh = lh;
                                                            break
                                                        }
                                                    }
                                                }
                                            }
                                            Du = uu + 16 | 0;
                                            Pu = s[Du >> 2] | 0;
                                            Hu = Xc + Pu | 0;
                                            Bu = uu + 20 | 0;
                                            s[Bu >> 2] = Hu;
                                            ju = s[Kc >> 2] | 0;
                                            Fu = ju + 44 | 0;
                                            Iu = s[Fu >> 2] | 0;
                                            Ru = (Iu | 0) == (0 | 0);
                                            if (Ru) {
                                                Vu = Uo
                                            } else {
                                                Uu = Iu + 16 | 0;
                                                zu = s[Uu >> 2] | 0;
                                                Vu = zu
                                            }
                                            Wu = ju + 16 | 0;
                                            Xu = s[Wu >> 2] | 0;
                                            $u = Vu >>> 0 > Xu >>> 0;
                                            if (!$u) {
                                                ph = 142;
                                                break t
                                            }
                                            Ju = Vu + -1 | 0;
                                            Ku = Ju - Xu | 0;
                                            s[Wu >> 2] = Ku;
                                            s[Kc >> 2] = Iu;
                                            if (Ru) {
                                                break
                                            } else {
                                                uu = Iu;
                                                Gc = eh;
                                                th = ih;
                                                sh = ah;
                                                fh = hh
                                            }
                                        }
                                        Qu = (eh | 0) > -2;
                                        if (Qu) {
                                            Yu = Zo + 28 | 0;
                                            Zu = s[Yu >> 2] | 0;
                                            ea = Zu + 1 | 0;
                                            s[Yu >> 2] = ea;
                                            ta = Zo + 24 | 0;
                                            na = s[ta >> 2] | 0;
                                            ra = ea >>> 0 < na >>> 0;
                                            T = Zo + 32 | 0;
                                            j = s[T >> 2] | 0;
                                            if (ra) {
                                                B = j
                                            } else {
                                                ia = na + 1 | 0;
                                                s[ta >> 2] = ia;
                                                sa = ia << 3;
                                                oa = Ps(j, sa) | 0;
                                                s[T >> 2] = oa;
                                                B = oa
                                            }
                                            ua = B + (Zu << 3) | 0;
                                            s[ua >> 2] = ih;
                                            fa = (B + (Zu << 3) | 0) + 4 | 0;
                                            s[fa >> 2] = hh;
                                            la = s[Yu >> 2] | 0;
                                            ca = la + 1 | 0;
                                            s[Yu >> 2] = ca;
                                            ha = s[ta >> 2] | 0;
                                            pa = ca >>> 0 < ha >>> 0;
                                            if (pa) {
                                                H = B
                                            } else {
                                                da = ha + 1 | 0;
                                                s[ta >> 2] = da;
                                                va = da << 3;
                                                ma = Ps(B, va) | 0;
                                                s[T >> 2] = ma;
                                                H = ma
                                            }
                                            ga = H + (la << 3) | 0;
                                            s[ga >> 2] = ih;
                                            ya = (H + (la << 3) | 0) + 4 | 0;
                                            s[ya >> 2] = ah;
                                            wa = s[Yu >> 2] | 0;
                                            Ea = wa + 1 | 0;
                                            s[Yu >> 2] = Ea;
                                            Sa = s[ta >> 2] | 0;
                                            xa = Ea >>> 0 < Sa >>> 0;
                                            if (xa) {
                                                P = H
                                            } else {
                                                Ta = Sa + 1 | 0;
                                                s[ta >> 2] = Ta;
                                                Na = Ta << 3;
                                                Ca = Ps(H, Na) | 0;
                                                s[T >> 2] = Ca;
                                                P = Ca
                                            }
                                            ka = P + (wa << 3) | 0;
                                            s[ka >> 2] = eh;
                                            La = (P + (wa << 3) | 0) + 4 | 0;
                                            s[La >> 2] = ah;
                                            Aa = s[Yu >> 2] | 0;
                                            Ma = Aa + 1 | 0;
                                            s[Yu >> 2] = Ma;
                                            _a = s[ta >> 2] | 0;
                                            Da = Ma >>> 0 < _a >>> 0;
                                            if (Da) {
                                                Fa = P
                                            } else {
                                                Pa = _a + 1 | 0;
                                                s[ta >> 2] = Pa;
                                                Ha = Pa << 3;
                                                Ba = Ps(P, Ha) | 0;
                                                s[T >> 2] = Ba;
                                                Fa = Ba
                                            }
                                            ja = Fa + (Aa << 3) | 0;
                                            s[ja >> 2] = eh;
                                            Ia = (Fa + (Aa << 3) | 0) + 4 | 0;
                                            s[Ia >> 2] = hh;
                                            Wc = Zo
                                        } else {
                                            Wc = Zo
                                        }
                                    }
                                }
                                qa = Wc + 20 | 0;
                                s[qa >> 2] = Xc;
                                Ua = Wc + 12 | 0;
                                s[Ua >> 2] = Uo;
                                za = Wc + 16 | 0;
                                s[za >> 2] = Pc;
                                Wa = Wc + 8 | 0;
                                s[Wa >> 2] = Dl;
                                si(t, Wc)
                            }
                        } while (0);
                        Va = Gl + 1 | 0;
                        $a = (Va | 0) < (Qn | 0);
                        if ($a) {
                            Gl = Va
                        } else {
                            break e
                        }
                    }
                    if ((ph | 0) == 133) {
                        gt(8024 | 0, 8032 | 0, 87, 8048 | 0)
                    } else if ((ph | 0) == 142) {
                        gt(7944 | 0, 7968 | 0, 516, 7992 | 0)
                    }
                }
            } while (0);
            Ja = (mf | 0) == (-1 | 0);
            if (!Ja) {}
            Ka = (sf | 0) == (-1 | 0);
            if (!Ka) {}
            Qa = (gu | 0) == (-1 | 0);
            if (Qa) {
                _s(rs);
                c = dh;
                return 0
            }
            _s(rs);
            c = dh;
            return 0
        }

        function $i(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                i = 0,
                s = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0;
            k = c;
            x = 0;
            N = 1;
            while (1) {
                n = N & 255;
                i = x + 255 | 0;
                p = (e + i | 0) + 256 | 0;
                r[p >> 0] = n;
                d = (e + x | 0) + 256 | 0;
                r[d >> 0] = n;
                v = N << 1;
                m = N >>> 7;
                g = 0 - m | 0;
                y = g & t;
                b = y ^ v;
                w = b & 255;
                s = x + 1 | 0;
                S = (s | 0) == 256;
                if (S) {
                    T = 0;
                    break
                } else {
                    x = s;
                    N = w
                }
            }
            while (1) {
                o = T & 255;
                u = (e + T | 0) + 256 | 0;
                a = r[u >> 0] | 0;
                f = a & 255;
                l = e + f | 0;
                r[l >> 0] = o;
                h = T + 1 | 0;
                E = (h | 0) == 255;
                if (E) {
                    break
                } else {
                    T = h
                }
            }
            r[e >> 0] = 0;
            c = k;
            return
        }

        function Ji(e, t, n, i, s, o, u) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            i = i | 0;
            s = s | 0;
            o = o | 0;
            u = u | 0;
            var a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0;
            var A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0;
            var K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0;
            var mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0;
            var Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0;
            var nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0;
            var xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0;
            var zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0,
                ur = 0,
                ar = 0;
            var fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0,
                Tr = 0,
                Nr = 0,
                Cr = 0,
                kr = 0,
                Lr = 0;
            var Ar = 0,
                Or = 0,
                Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0,
                Wr = 0,
                Xr = 0,
                Vr = 0,
                $r = 0,
                Jr = 0;
            var Kr = 0,
                Qr = 0,
                Gr = 0,
                Yr = 0,
                Zr = 0,
                ei = 0,
                ti = 0,
                ni = 0,
                ri = 0,
                ii = 0,
                si = 0,
                oi = 0,
                ui = 0,
                ai = 0,
                fi = 0,
                li = 0,
                ci = 0,
                hi = 0,
                pi = 0,
                di = 0;
            var vi = 0,
                mi = 0,
                gi = 0,
                yi = 0,
                bi = 0,
                wi = 0,
                Ei = 0,
                Si = 0,
                xi = 0,
                Ti = 0,
                Ni = 0,
                Ci = 0,
                ki = 0,
                Li = 0,
                Ai = 0,
                Oi = 0,
                Mi = 0,
                _i = 0,
                Di = 0,
                Pi = 0;
            var Hi = 0,
                Bi = 0,
                ji = 0,
                Fi = 0,
                Ii = 0,
                qi = 0,
                Ri = 0,
                Ui = 0,
                zi = 0,
                Wi = 0,
                Xi = 0,
                Vi = 0,
                $i = 0,
                Ji = 0,
                Qi = 0,
                Gi = 0,
                Yi = 0,
                Zi = 0,
                es = 0,
                ts = 0;
            var ns = 0,
                rs = 0,
                is = 0,
                ss = 0,
                os = 0,
                us = 0,
                as = 0,
                fs = 0,
                ls = 0,
                cs = 0,
                hs = 0,
                ps = 0,
                ds = 0,
                vs = 0,
                ms = 0,
                gs = 0,
                ys = 0,
                bs = 0,
                ws = 0,
                Es = 0;
            var Ss = 0,
                xs = 0,
                Ts = 0,
                Ns = 0,
                Cs = 0,
                ks = 0,
                Ls = 0,
                As = 0,
                Os = 0,
                Ms = 0,
                _s = 0,
                Ds = 0,
                Ps = 0,
                Hs = 0,
                Bs = 0,
                js = 0,
                Fs = 0,
                Is = 0,
                qs = 0,
                Rs = 0;
            var Us = 0,
                zs = 0,
                Ws = 0,
                Xs = 0,
                Vs = 0,
                $s = 0,
                Js = 0,
                Ks = 0,
                Qs = 0,
                Gs = 0,
                Ys = 0,
                Zs = 0,
                to = 0,
                no = 0,
                ro = 0,
                io = 0,
                so = 0,
                ao = 0,
                fo = 0,
                lo = 0;
            var co = 0,
                ho = 0,
                po = 0,
                vo = 0,
                mo = 0,
                go = 0,
                yo = 0,
                bo = 0,
                wo = 0,
                Eo = 0,
                So = 0,
                xo = 0,
                To = 0,
                No = 0,
                Co = 0,
                ko = 0,
                Lo = 0,
                Ao = 0,
                Oo = 0,
                Mo = 0;
            var _o = 0,
                Do = 0,
                Po = 0,
                Ho = 0,
                Bo = 0,
                jo = 0,
                Fo = 0,
                Io = 0,
                qo = 0,
                Ro = 0,
                Uo = 0,
                zo = 0,
                Wo = 0,
                Xo = 0,
                Vo = 0,
                $o = 0,
                Jo = 0,
                Ko = 0,
                Qo = 0,
                Go = 0;
            var Yo = 0,
                Zo = 0,
                eu = 0,
                tu = 0,
                nu = 0,
                ru = 0,
                iu = 0,
                su = 0,
                ou = 0,
                uu = 0,
                au = 0,
                fu = 0,
                lu = 0,
                cu = 0,
                hu = 0,
                pu = 0,
                du = 0,
                vu = 0,
                mu = 0,
                gu = 0;
            var yu = 0,
                bu = 0,
                wu = 0,
                Eu = 0,
                Su = 0,
                xu = 0,
                Tu = 0,
                Nu = 0,
                Cu = 0,
                ku = 0,
                Lu = 0,
                Au = 0,
                Ou = 0,
                Mu = 0;
            Mu = c;
            c = c + 1280 | 0;
            Au = Mu + 1024 | 0;
            cu = Mu + 768 | 0;
            wu = Mu + 512 | 0;
            Oo = Mu + 256 | 0;
            Tu = Mu;
            g = (u | 0) > (s | 0);
            if (g) {
                a = -1;
                c = Mu;
                return a | 0
            }
            y = (s | 0) > 0;
            if (!y) {
                a = 0;
                c = Mu;
                return a | 0
            }
            xn = (i | 0) > 0;
            if (xn) {
                su = 0;
                while (1) {
                    Tn = su + t | 0;
                    Hn = (e + Tn | 0) + 256 | 0;
                    Vn = r[Hn >> 0] | 0;
                    rr = Vn & 255;
                    dr = e + rr | 0;
                    Nr = r[dr >> 0] | 0;
                    lt = Nr & 255;
                    Xo = 0;
                    Nu = 0;
                    while (1) {
                        ks = n + Xo | 0;
                        Fs = r[ks >> 0] | 0;
                        Ks = Fs & 255;
                        fo = (Nu | 0) == 0;
                        if (fo) {
                            en = 0
                        } else {
                            b = e + Nu | 0;
                            O = r[b >> 0] | 0;
                            R = O & 255;
                            Y = R + lt | 0;
                            Et = (e + Y | 0) + 256 | 0;
                            _t = r[Et >> 0] | 0;
                            zt = _t & 255;
                            en = zt
                        }
                        Ci = en ^ Ks;
                        hn = Xo + 1 | 0;
                        _o = (hn | 0) == (i | 0);
                        if (_o) {
                            break
                        } else {
                            Xo = hn;
                            Nu = Ci
                        }
                    }
                    Su = Ci & 255;
                    ss = Tu + su | 0;
                    r[ss >> 0] = Su;
                    ms = su + 1 | 0;
                    zo = (ms | 0) == (s | 0);
                    if (zo) {
                        break
                    } else {
                        su = ms
                    }
                }
                if (y) {
                    Qo = 0
                } else {
                    a = 0;
                    c = Mu;
                    return a | 0
                }
            } else {
                eo(Tu | 0, 0, s | 0) | 0;
                Qo = 0
            }
            while (1) {
                ii = Tu + Qo | 0;
                vi = r[ii >> 0] | 0;
                ki = vi << 24 >> 24 == 0;
                Br = Qo + 1 | 0;
                if (!ki) {
                    break
                }
                $r = (Br | 0) < (s | 0);
                if ($r) {
                    Qo = Br
                } else {
                    a = 0;
                    Ou = 86;
                    break
                }
            }
            if ((Ou | 0) == 86) {
                c = Mu;
                return a | 0
            }
            Fi = (s | 0) < 4;
            Eo = s + 1 | 0;
            Qi = Fi ? 5 : Eo;
            eo(cu | 0, 0, Qi | 0) | 0;
            r[cu >> 0] = 1;
            Yi = (u | 0) > 0;
            if (Yi) {
                Zi = i + -1 | 0;
                Jo = 0;
                while (1) {
                    es = Jo + 1 | 0;
                    ts = o + Jo | 0;
                    ru = es;
                    while (1) {
                        ns = ru + -1 | 0;
                        rs = cu + ns | 0;
                        is = r[rs >> 0] | 0;
                        os = is << 24 >> 24 == 0;
                        if (os) {
                            xs = 0
                        } else {
                            us = r[ts >> 0] | 0;
                            as = us & 255;
                            fs = is & 255;
                            ls = Zi - as | 0;
                            cs = e + fs | 0;
                            hs = r[cs >> 0] | 0;
                            ps = hs & 255;
                            ds = ls + ps | 0;
                            vs = (e + ds | 0) + 256 | 0;
                            gs = r[vs >> 0] | 0;
                            ys = gs & 255;
                            xs = ys
                        }
                        bs = cu + ru | 0;
                        ws = r[bs >> 0] | 0;
                        Es = ws & 255;
                        Ss = Es ^ xs;
                        Ts = Ss & 255;
                        r[bs >> 0] = Ts;
                        Ns = (ns | 0) > 0;
                        if (Ns) {
                            ru = ns
                        } else {
                            break
                        }
                    }
                    Do = (es | 0) == (u | 0);
                    if (Do) {
                        break
                    } else {
                        Jo = es
                    }
                }
            }
            oo(Au | 0, cu | 0, Eo | 0) | 0;
            Cs = (u | 0) < (s | 0);
            e: do {
                if (Cs) {
                    Ls = Au + 1 | 0;
                    au = 0;
                    lu = u;
                    hu = u;
                    while (1) {
                        As = (lu | 0) < 0;
                        Os = lu + 1 | 0;
                        du = hu;
                        t: while (1) {
                            pu = du + 1 | 0;
                            Ms = pu - au | 0;
                            uo(Ls | 0, Au | 0, Ms | 0) | 0;
                            r[Au >> 0] = 0;
                            n: do {
                                if (!As) {
                                    Ao = 0;
                                    Vo = 0;
                                    while (1) {
                                        _s = cu + Vo | 0;
                                        Ds = r[_s >> 0] | 0;
                                        Ps = du - Vo | 0;
                                        Hs = Tu + Ps | 0;
                                        Bs = r[Hs >> 0] | 0;
                                        js = Ds << 24 >> 24 == 0;
                                        Is = Bs << 24 >> 24 == 0;
                                        Eu = js | Is;
                                        if (Eu) {
                                            to = 0
                                        } else {
                                            qs = Bs & 255;
                                            Rs = Ds & 255;
                                            Us = e + Rs | 0;
                                            zs = r[Us >> 0] | 0;
                                            Ws = zs & 255;
                                            Xs = e + qs | 0;
                                            Vs = r[Xs >> 0] | 0;
                                            $s = Vs & 255;
                                            Js = $s + Ws | 0;
                                            Qs = (e + Js | 0) + 256 | 0;
                                            Gs = r[Qs >> 0] | 0;
                                            Ys = Gs & 255;
                                            to = Ys
                                        }
                                        Zs = to ^ Ao;
                                        no = Vo + 1 | 0;
                                        Bo = (no | 0) == (Os | 0);
                                        if (Bo) {
                                            break
                                        } else {
                                            Ao = Zs;
                                            Vo = no
                                        }
                                    }
                                    ro = (to | 0) == (Ao | 0);
                                    if (!ro) {
                                        so = e + Zs | 0;
                                        ao = r[so >> 0] | 0;
                                        lo = ao & 255;
                                        co = (lu | 0) < (Ms | 0);
                                        if (co) {
                                            break t
                                        } else {
                                            V = 0;
                                            eu = 0
                                        }
                                        while (1) {
                                            z = cu + eu | 0;
                                            W = r[z >> 0] | 0;
                                            X = W & 255;
                                            $ = V << 24 >> 24 == 0;
                                            if ($) {
                                                st = 0
                                            } else {
                                                J = V & 255;
                                                K = e + J | 0;
                                                Q = r[K >> 0] | 0;
                                                G = Q & 255;
                                                Z = G + lo | 0;
                                                et = (e + Z | 0) + 256 | 0;
                                                tt = r[et >> 0] | 0;
                                                nt = tt & 255;
                                                st = nt
                                            }
                                            it = st ^ X;
                                            ot = it & 255;
                                            r[z >> 0] = ot;
                                            ut = eu + 1 | 0;
                                            qo = (ut | 0) == (Os | 0);
                                            if (qo) {
                                                break n
                                            }
                                            h = Au + ut | 0;
                                            d = r[h >> 0] | 0;
                                            V = d;
                                            eu = ut
                                        }
                                    }
                                }
                            } while (0);
                            io = (pu | 0) < (s | 0);
                            if (io) {
                                du = pu
                            } else {
                                fu = lu;
                                break e
                            }
                        }
                        ho = (Ms | 0) < 0;
                        r: do {
                            if (!ho) {
                                po = lo ^ 255;
                                go = 0;
                                Go = 0;
                                while (1) {
                                    vo = Au + Go | 0;
                                    mo = go & 255;
                                    yo = cu + Go | 0;
                                    bo = r[yo >> 0] | 0;
                                    wo = bo << 24 >> 24 == 0;
                                    m = bo & 255;
                                    if (wo) {
                                        C = 0
                                    } else {
                                        w = e + m | 0;
                                        E = r[w >> 0] | 0;
                                        S = E & 255;
                                        x = S + po | 0;
                                        T = (e + x | 0) + 256 | 0;
                                        N = r[T >> 0] | 0;
                                        C = N
                                    }
                                    r[vo >> 0] = C;
                                    k = go << 24 >> 24 == 0;
                                    if (k) {
                                        j = 0
                                    } else {
                                        L = e + mo | 0;
                                        A = r[L >> 0] | 0;
                                        M = A & 255;
                                        _ = M + lo | 0;
                                        D = (e + _ | 0) + 256 | 0;
                                        P = r[D >> 0] | 0;
                                        H = P & 255;
                                        j = H
                                    }
                                    B = j ^ m;
                                    F = B & 255;
                                    r[yo >> 0] = F;
                                    I = Go + 1 | 0;
                                    Uo = (Go | 0) == (Ms | 0);
                                    if (Uo) {
                                        break r
                                    }
                                    p = Au + I | 0;
                                    v = r[p >> 0] | 0;
                                    go = v;
                                    Go = I
                                }
                            }
                        } while (0);
                        q = pu - lu | 0;
                        U = (pu | 0) < (s | 0);
                        if (U) {
                            au = q;
                            lu = Ms;
                            hu = pu
                        } else {
                            fu = Ms;
                            break
                        }
                    }
                } else {
                    fu = u
                }
            } while (0);
            at = fu + 1 | 0;
            eo(wu | 0, 0, s | 0) | 0;
            ft = (at | 0) < (s | 0);
            ct = ft ? at : s;
            ht = (ct | 0) > 0;
            i: do {
                if (ht) {
                    pt = s ^ -1;
                    dt = -2 - fu | 0;
                    vt = (dt | 0) > (pt | 0);
                    ku = vt ? dt : pt;
                    mt = ku ^ -1;
                    Ko = 0;
                    tu = pt;
                    while (1) {
                        gt = (tu | 0) > (pt | 0);
                        Cu = gt ? tu : pt;
                        yt = Cu ^ -1;
                        bt = cu + Ko | 0;
                        wt = r[bt >> 0] | 0;
                        St = wt << 24 >> 24 == 0;
                        if (!St) {
                            xt = s - Ko | 0;
                            Tt = (xt | 0) < (s | 0);
                            l = Tt ? xt : s;
                            Nt = wt & 255;
                            Ct = e + Nt | 0;
                            kt = r[Ct >> 0] | 0;
                            Lt = kt & 255;
                            At = (l | 0) > 0;
                            if (At) {
                                iu = 0;
                                while (1) {
                                    Ot = Tu + iu | 0;
                                    Mt = r[Ot >> 0] | 0;
                                    Dt = Mt << 24 >> 24 == 0;
                                    if (Dt) {
                                        Jt = 0
                                    } else {
                                        Pt = Mt & 255;
                                        Ht = e + Pt | 0;
                                        Bt = r[Ht >> 0] | 0;
                                        jt = Bt & 255;
                                        Ft = jt + Lt | 0;
                                        It = (e + Ft | 0) + 256 | 0;
                                        qt = r[It >> 0] | 0;
                                        Rt = qt & 255;
                                        Jt = Rt
                                    }
                                    Ut = iu + Ko | 0;
                                    Wt = wu + Ut | 0;
                                    Xt = r[Wt >> 0] | 0;
                                    Vt = Xt & 255;
                                    $t = Vt ^ Jt;
                                    Kt = $t & 255;
                                    r[Wt >> 0] = Kt;
                                    Qt = iu + 1 | 0;
                                    Ho = (Qt | 0) == (yt | 0);
                                    if (Ho) {
                                        break
                                    } else {
                                        iu = Qt
                                    }
                                }
                            }
                        }
                        Gt = Ko + 1 | 0;
                        Wo = (Gt | 0) == (mt | 0);
                        if (Wo) {
                            break i
                        }
                        nu = tu + 1 | 0;
                        Ko = Gt;
                        tu = nu
                    }
                }
            } while (0);
            Yt = (fu | 0) < 1;
            if (Yt) {
                a = -1;
                c = Mu;
                return a | 0
            }
            Zt = fu - u | 0;
            tn = s - u | 0;
            nn = tn >> 1;
            rn = (Zt | 0) > (nn | 0);
            if (rn) {
                a = -1;
                c = Mu;
                return a | 0
            }
            sn = (fu | 0) < 5;
            s: do {
                if (sn) {
                    cn = cu + 1 | 0;
                    pn = r[cn >> 0] | 0;
                    dn = pn & 255;
                    vn = cu + 2 | 0;
                    mn = r[vn >> 0] | 0;
                    gn = mn & 255;
                    yn = cu + 3 | 0;
                    bn = r[yn >> 0] | 0;
                    wn = bn & 255;
                    En = cu + 4 | 0;
                    Sn = r[En >> 0] | 0;
                    Nn = Sn & 255;
                    Cn = Ki(e, dn, gn, wn, Nn, Oo) | 0;
                    kn = (Cn | 0) > 0;
                    if (kn) {
                        $o = 0;
                        vu = 0;
                        while (1) {
                            Ln = Oo + $o | 0;
                            An = r[Ln >> 0] | 0;
                            On = An << 24 >> 24 == 0;
                            if (On) {
                                mu = vu
                            } else {
                                Mn = An & 255;
                                _n = e + Mn | 0;
                                Dn = r[_n >> 0] | 0;
                                Pn = Dn & 255;
                                Bn = (Pn | 0) < (i | 0);
                                if (Bn) {
                                    jn = vu + 1 | 0;
                                    Fn = Oo + vu | 0;
                                    r[Fn >> 0] = Dn;
                                    mu = jn
                                } else {
                                    mu = vu
                                }
                            }
                            In = $o + 1 | 0;
                            Po = (In | 0) == (Cn | 0);
                            if (Po) {
                                f = mu;
                                break
                            } else {
                                $o = In;
                                vu = mu
                            }
                        }
                    } else {
                        f = 0
                    }
                } else {
                    on = (i | 0) > 0;
                    if (on) {
                        un = (fu | 0) < 0;
                        if (un) {
                            yu = 0;
                            while (1) {
                                an = yu & 255;
                                fn = yu + 1 | 0;
                                ln = Oo + yu | 0;
                                r[ln >> 0] = an;
                                Io = (fn | 0) == (i | 0);
                                if (Io) {
                                    f = i;
                                    break s
                                } else {
                                    yu = fn
                                }
                            }
                        } else {
                            xo = 0;
                            gu = 0
                        }
                        while (1) {
                            To = 0;
                            Zo = 0;
                            Lu = 0;
                            while (1) {
                                qn = fu - Zo | 0;
                                Rn = cu + qn | 0;
                                Un = r[Rn >> 0] | 0;
                                zn = Un << 24 >> 24 == 0;
                                if (zn) {
                                    er = 0
                                } else {
                                    Wn = Un & 255;
                                    Xn = e + Wn | 0;
                                    $n = r[Xn >> 0] | 0;
                                    Jn = $n & 255;
                                    Kn = Jn + To | 0;
                                    Qn = (e + Kn | 0) + 256 | 0;
                                    Gn = r[Qn >> 0] | 0;
                                    Yn = Gn & 255;
                                    er = Yn
                                }
                                Zn = er ^ Lu;
                                tr = To + xo | 0;
                                nr = (e + tr | 0) + 256 | 0;
                                ir = r[nr >> 0] | 0;
                                sr = ir & 255;
                                or = e + sr | 0;
                                ur = r[or >> 0] | 0;
                                ar = ur & 255;
                                fr = Zo + 1 | 0;
                                jo = (Zo | 0) == (fu | 0);
                                if (jo) {
                                    break
                                } else {
                                    To = ar;
                                    Zo = fr;
                                    Lu = Zn
                                }
                            }
                            xu = (er | 0) == (Lu | 0);
                            if (xu) {
                                lr = xo & 255;
                                cr = gu + 1 | 0;
                                hr = Oo + gu | 0;
                                r[hr >> 0] = lr;
                                bu = cr
                            } else {
                                bu = gu
                            }
                            pr = xo + 1 | 0;
                            Fo = (pr | 0) == (i | 0);
                            if (Fo) {
                                f = bu;
                                break
                            } else {
                                xo = pr;
                                gu = bu
                            }
                        }
                    } else {
                        f = 0
                    }
                }
            } while (0);
            vr = (f | 0) < (fu | 0);
            if (vr) {
                a = -1;
                c = Mu;
                return a | 0
            }
            mr = (fu | 0) > 0;
            if (!mr) {
                a = fu;
                c = Mu;
                return a | 0
            }
            gr = (s | 0) < 1;
            yr = i + -1 | 0;
            Yo = 0;
            while (1) {
                br = Oo + Yo | 0;
                wr = r[br >> 0] | 0;
                Er = wr & 255;
                Sr = Er ^ 255;
                So = 0;
                No = 0;
                ou = 0;
                while (1) {
                    xr = wu + ou | 0;
                    Tr = r[xr >> 0] | 0;
                    Cr = Tr << 24 >> 24 == 0;
                    if (Cr) {
                        jr = 0
                    } else {
                        kr = Tr & 255;
                        Lr = e + kr | 0;
                        Ar = r[Lr >> 0] | 0;
                        Or = Ar & 255;
                        Mr = Or + No | 0;
                        _r = (e + Mr | 0) + 256 | 0;
                        Dr = r[_r >> 0] | 0;
                        Pr = Dr & 255;
                        jr = Pr
                    }
                    Hr = jr ^ So;
                    Fr = No + Sr | 0;
                    Ir = (e + Fr | 0) + 256 | 0;
                    qr = r[Ir >> 0] | 0;
                    Rr = qr & 255;
                    Ur = e + Rr | 0;
                    zr = r[Ur >> 0] | 0;
                    Wr = zr & 255;
                    Xr = ou + 1 | 0;
                    Mo = (Xr | 0) == (s | 0);
                    if (Mo) {
                        break
                    } else {
                        So = Hr;
                        No = Wr;
                        ou = Xr
                    }
                }
                Vr = Sr << 1;
                Jr = (e + Vr | 0) + 256 | 0;
                Kr = r[Jr >> 0] | 0;
                Qr = Kr & 255;
                Gr = e + Qr | 0;
                Yr = r[Gr >> 0] | 0;
                Zr = Yr & 255;
                o: do {
                    if (gr) {
                        ko = 0
                    } else {
                        ei = rt(Er, t) | 0;
                        ti = (ei >>> 0) % 255 & -1;
                        ni = ti + Sr | 0;
                        Co = ni;
                        Lo = 0;
                        uu = 1;
                        while (1) {
                            ri = cu + uu | 0;
                            si = r[ri >> 0] | 0;
                            oi = si << 24 >> 24 == 0;
                            if (oi) {
                                gi = 0
                            } else {
                                ui = si & 255;
                                ai = e + ui | 0;
                                fi = r[ai >> 0] | 0;
                                li = fi & 255;
                                ci = li + Co | 0;
                                hi = (e + ci | 0) + 256 | 0;
                                pi = r[hi >> 0] | 0;
                                di = pi & 255;
                                gi = di
                            }
                            mi = gi ^ Lo;
                            yi = uu + 2 | 0;
                            bi = (yi | 0) > (s | 0);
                            if (bi) {
                                ko = mi;
                                break o
                            }
                            wi = Co + Zr | 0;
                            Ei = (e + wi | 0) + 256 | 0;
                            Si = r[Ei >> 0] | 0;
                            xi = Si & 255;
                            Ti = e + xi | 0;
                            Ni = r[Ti >> 0] | 0;
                            Li = Ni & 255;
                            Co = Li;
                            Lo = mi;
                            uu = yi
                        }
                    }
                } while (0);
                Ai = (jr | 0) == (So | 0);
                if (Ai) {
                    $i = 0
                } else {
                    Oi = e + Hr | 0;
                    Mi = r[Oi >> 0] | 0;
                    _i = Mi & 255;
                    Di = _i + 255 | 0;
                    Pi = e + ko | 0;
                    Hi = r[Pi >> 0] | 0;
                    Bi = Hi & 255;
                    ji = Di - Bi | 0;
                    Ii = (e + ji | 0) + 256 | 0;
                    qi = r[Ii >> 0] | 0;
                    Ri = qi & 255;
                    $i = Ri
                }
                Ui = yr - Er | 0;
                zi = n + Ui | 0;
                Wi = r[zi >> 0] | 0;
                Xi = Wi & 255;
                Vi = Xi ^ $i;
                Ji = Vi & 255;
                r[zi >> 0] = Ji;
                Gi = Yo + 1 | 0;
                Ro = (Gi | 0) == (fu | 0);
                if (Ro) {
                    a = fu;
                    break
                } else {
                    Yo = Gi
                }
            }
            c = Mu;
            return a | 0
        }

        function Ki(e, t, n, i, s, o) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            i = i | 0;
            s = s | 0;
            o = o | 0;
            var u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0;
            var L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0;
            var J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0;
            var dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0;
            var Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0;
            var en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0;
            var En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0;
            var Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0;
            var ur = 0,
                ar = 0,
                fr = 0,
                lr = 0,
                cr = 0;
            cr = c;
            l = (s | 0) == 0;
            if (l) {
                h = Qi(e, t, n, i, o) | 0;
                kt = (i | 0) == 0;
                if (kt) {
                    u = h;
                    c = cr;
                    return u | 0
                }
                Ft = h + 1 | 0;
                Kt = o + h | 0;
                r[Kt >> 0] = 0;
                u = Ft;
                c = cr;
                return u | 0
            }
            un = (t | 0) == 0;
            if (un) {
                w = (i | 0) == 0;
                if (w) {
                    E = (n | 0) == 0;
                    if (E) {
                        f = 0
                    } else {
                        S = e + n | 0;
                        x = r[S >> 0] | 0;
                        N = x & 255;
                        C = N & 1;
                        k = 0 - C | 0;
                        L = k & 255;
                        A = L + N | 0;
                        O = A >>> 1;
                        M = (e + O | 0) + 256 | 0;
                        _ = r[M >> 0] | 0;
                        D = _ & 255;
                        f = D
                    }
                    P = e + s | 0;
                    B = r[P >> 0] | 0;
                    j = B & 255;
                    F = j & 1;
                    I = 0 - F | 0;
                    q = I & 255;
                    R = q + j | 0;
                    U = R >>> 1;
                    z = (e + U | 0) + 256 | 0;
                    W = r[z >> 0] | 0;
                    X = W & 255;
                    $ = Gi(e, f, X, o) | 0;
                    u = $;
                    c = cr;
                    return u | 0
                }
                J = Qi(e, 0, n, i, o) | 0;
                K = (J | 0) < 1;
                if (K) {
                    u = 0;
                    c = cr;
                    return u | 0
                }
                Q = r[o >> 0] | 0;
                G = Q & 255;
                Y = e + i | 0;
                Z = r[Y >> 0] | 0;
                et = Z & 255;
                tt = et + 255 | 0;
                nt = e + G | 0;
                it = r[nt >> 0] | 0;
                st = it & 255;
                ot = tt - st | 0;
                ut = (e + ot | 0) + 256 | 0;
                at = r[ut >> 0] | 0;
                ft = at & 255;
                lt = Gi(e, ft, s, o) | 0;
                ct = (lt | 0) < 2;
                if (ct) {
                    u = 0;
                    c = cr;
                    return u | 0
                }
                ht = r[o >> 0] | 0;
                pt = ht & 255;
                vt = o + 1 | 0;
                mt = r[vt >> 0] | 0;
                gt = mt & 255;
                yt = Gi(e, G, pt, o) | 0;
                bt = o + yt | 0;
                wt = Gi(e, G, gt, bt) | 0;
                Et = wt + yt | 0;
                u = Et;
                c = cr;
                return u | 0
            }
            yn = e + t | 0;
            An = r[yn >> 0] | 0;
            qn = An & 255;
            Gn = (i | 0) == 0;
            if (Gn) {
                a = 0;
                Zt = s;
                tn = 0;
                tr = 0
            } else {
                p = qn ^ 255;
                T = e + i | 0;
                H = r[T >> 0] | 0;
                V = H & 255;
                rt = V + p | 0;
                dt = (e + rt | 0) + 256 | 0;
                xt = r[dt >> 0] | 0;
                Tt = xt & 255;
                Nt = xt << 24 >> 24 == 0;
                if (Nt) {
                    a = 0;
                    Zt = s;
                    tn = 0;
                    tr = 0
                } else {
                    Ct = e + Tt | 0;
                    Lt = r[Ct >> 0] | 0;
                    At = Lt & 255;
                    Ot = At & 1;
                    Mt = 0 - Ot | 0;
                    _t = Mt & 255;
                    Dt = _t + At | 0;
                    Pt = Dt >>> 1;
                    Ht = (e + Pt | 0) + 256 | 0;
                    Bt = r[Ht >> 0] | 0;
                    jt = Bt & 255;
                    It = (n | 0) == 0;
                    if (It) {
                        St = s
                    } else {
                        qt = e + n | 0;
                        Rt = r[qt >> 0] | 0;
                        Ut = Rt & 255;
                        zt = At + Ut | 0;
                        Wt = (e + zt | 0) + 256 | 0;
                        Xt = r[Wt >> 0] | 0;
                        Vt = Xt & 255;
                        $t = Vt ^ s;
                        St = $t
                    }
                    Jt = At << 1;
                    Qt = (e + Jt | 0) + 256 | 0;
                    Gt = r[Qt >> 0] | 0;
                    Yt = Gt & 255;
                    a = jt;
                    Zt = St;
                    tn = Yt;
                    tr = Tt
                }
            }
            en = (Zt | 0) == (tn | 0);
            if (en) {
                er = tr ^ n;
                nr = Gi(e, t, er, o) | 0;
                rr = (nr | 0) == 2;
                if (rr) {
                    ir = r[o >> 0] | 0;
                    sr = ir & 255;
                    or = (sr | 0) == (a | 0);
                    if (or) {
                        u = 2;
                        c = cr;
                        return u | 0
                    }
                    ur = o + 1 | 0;
                    d = r[ur >> 0] | 0;
                    v = d & 255;
                    m = (v | 0) == (a | 0);
                    if (m) {
                        u = 2;
                        c = cr;
                        return u | 0
                    }
                }
                g = a & 255;
                y = nr + 1 | 0;
                b = o + nr | 0;
                r[b >> 0] = g;
                u = y;
                c = cr;
                return u | 0
            }
            nn = tn ^ Zt;
            rn = e + nn | 0;
            sn = r[rn >> 0] | 0;
            on = sn & 255;
            an = on ^ 255;
            fn = (a | 0) == 0;
            if (fn) {
                gn = 0
            } else {
                ln = e + a | 0;
                cn = r[ln >> 0] | 0;
                hn = cn & 255;
                pn = hn + qn | 0;
                dn = (e + pn | 0) + 256 | 0;
                vn = r[dn >> 0] | 0;
                mn = vn & 255;
                gn = mn
            }
            bn = (gn | 0) == (n | 0);
            if (bn) {
                Bn = 0
            } else {
                wn = gn ^ n;
                En = e + wn | 0;
                Sn = r[En >> 0] | 0;
                xn = Sn & 255;
                Tn = xn + an | 0;
                Nn = (e + Tn | 0) + 256 | 0;
                Cn = r[Nn >> 0] | 0;
                kn = Cn & 255;
                Bn = kn
            }
            Ln = an + qn | 0;
            On = (e + Ln | 0) + 256 | 0;
            Mn = r[On >> 0] | 0;
            _n = Mn & 255;
            Dn = (e + an | 0) + 256 | 0;
            Pn = r[Dn >> 0] | 0;
            Hn = Pn & 255;
            jn = Ki(e, 0, Bn, _n, Hn, o) | 0;
            Fn = (jn | 0) > 0;
            if (Fn) {
                fr = 0
            } else {
                u = jn;
                c = cr;
                return u | 0
            }
            while (1) {
                In = o + fr | 0;
                Rn = r[In >> 0] | 0;
                Un = Rn & 255;
                zn = e + Un | 0;
                Wn = r[zn >> 0] | 0;
                Xn = Wn & 255;
                Vn = Xn ^ 255;
                $n = (e + Vn | 0) + 256 | 0;
                Jn = r[$n >> 0] | 0;
                Kn = Jn & 255;
                Qn = Kn ^ a;
                Yn = Qn & 255;
                r[In >> 0] = Yn;
                Zn = fr + 1 | 0;
                ar = (Zn | 0) == (jn | 0);
                if (ar) {
                    u = jn;
                    break
                } else {
                    fr = Zn
                }
            }
            c = cr;
            return u | 0
        }

        function Qi(e, t, n, i, s) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            i = i | 0;
            s = s | 0;
            var o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0;
            var k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0;
            var $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0;
            var pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0;
            var Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0;
            var Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0;
            var wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0;
            kn = c;
            u = (i | 0) == 0;
            if (u) {
                a = Gi(e, t, n, s) | 0;
                U = (n | 0) == 0;
                if (U) {
                    o = a;
                    c = kn;
                    return o | 0
                }
                Z = a + 1 | 0;
                lt = s + a | 0;
                r[lt >> 0] = 0;
                o = Z;
                c = kn;
                return o | 0
            }
            Et = (t | 0) == 0;
            _t = (n | 0) == 0;
            Nn = Et | _t;
            if (Nn) {
                q = 0
            } else {
                zt = e + t | 0;
                en = r[zt >> 0] | 0;
                hn = en & 255;
                f = e + n | 0;
                E = r[f >> 0] | 0;
                _ = E & 255;
                H = _ + hn | 0;
                B = (e + H | 0) + 256 | 0;
                j = r[B >> 0] | 0;
                F = j & 255;
                q = F
            }
            I = q ^ i;
            if (Et) {
                K = 0
            } else {
                R = e + t | 0;
                z = r[R >> 0] | 0;
                W = z & 255;
                X = W << 1;
                V = (e + X | 0) + 256 | 0;
                $ = r[V >> 0] | 0;
                J = $ & 255;
                K = J
            }
            Q = (K | 0) == (n | 0);
            if (Q) {
                G = (q | 0) == (i | 0);
                if (G) {
                    Y = t & 255;
                    r[s >> 0] = Y;
                    o = 1;
                    c = kn;
                    return o | 0
                }
                et = e + I | 0;
                tt = r[et >> 0] | 0;
                nt = (tt & 255) % 3 & -1;
                rt = nt << 24 >> 24 == 0;
                if (!rt) {
                    o = 0;
                    c = kn;
                    return o | 0
                }
                xn = (tt & 255) / 3 & -1;
                it = xn & 255;
                st = (e + it | 0) + 256 | 0;
                ot = r[st >> 0] | 0;
                ut = ot & 255;
                at = ut ^ t;
                ft = at & 255;
                r[s >> 0] = ft;
                ct = it + 85 | 0;
                ht = (e + ct | 0) + 256 | 0;
                pt = r[ht >> 0] | 0;
                dt = pt & 255;
                vt = dt ^ t;
                mt = vt & 255;
                gt = s + 1 | 0;
                r[gt >> 0] = mt;
                yt = ft ^ pt;
                bt = s + 2 | 0;
                r[bt >> 0] = yt;
                o = 3;
                c = kn;
                return o | 0
            }
            wt = K ^ n;
            St = e + wt | 0;
            xt = r[St >> 0] | 0;
            Tt = xt & 255;
            Nt = Tt & 1;
            Ct = 0 - Nt | 0;
            kt = Ct & 255;
            Lt = kt + Tt | 0;
            At = Lt >>> 1;
            Ot = (q | 0) == (i | 0);
            if (Ot) {
                Jt = 0
            } else {
                Mt = At + Tt | 0;
                Dt = (e + Mt | 0) + 256 | 0;
                Pt = r[Dt >> 0] | 0;
                Ht = Pt & 255;
                Bt = e + I | 0;
                jt = r[Bt >> 0] | 0;
                Ft = jt & 255;
                It = Ft + 255 | 0;
                qt = e + Ht | 0;
                Rt = r[qt >> 0] | 0;
                Ut = Rt & 255;
                Wt = It - Ut | 0;
                Xt = (e + Wt | 0) + 256 | 0;
                Vt = r[Xt >> 0] | 0;
                $t = Vt & 255;
                Jt = $t
            }
            Kt = Gi(e, Jt, 1, s) | 0;
            Qt = (Kt | 0) < 1;
            if (Qt) {
                o = 0;
                c = kn;
                return o | 0
            }
            Gt = r[s >> 0] | 0;
            Yt = Gt & 255;
            Zt = e + Yt | 0;
            tn = r[Zt >> 0] | 0;
            nn = tn << 24 >> 24 == 0;
            if (nn) {
                P = t & 255;
                r[s >> 0] = P;
                o = 1;
                c = kn;
                return o | 0
            }
            rn = (tn & 255) % 3 & -1;
            sn = rn << 24 >> 24 == 0;
            if (!sn) {
                o = 0;
                c = kn;
                return o | 0
            }
            Tn = (tn & 255) / 3 & -1;
            on = Tn & 255;
            un = (e + on | 0) + 256 | 0;
            an = r[un >> 0] | 0;
            fn = on ^ 255;
            ln = (e + fn | 0) + 256 | 0;
            cn = r[ln >> 0] | 0;
            pn = cn ^ an;
            dn = pn & 255;
            vn = e + dn | 0;
            mn = r[vn >> 0] | 0;
            gn = mn & 255;
            yn = gn + At | 0;
            bn = (e + yn | 0) + 256 | 0;
            wn = r[bn >> 0] | 0;
            En = wn & 255;
            Sn = En ^ t;
            l = Sn & 255;
            r[s >> 0] = l;
            h = on + 85 | 0;
            p = (e + h | 0) + 256 | 0;
            d = r[p >> 0] | 0;
            v = 170 - on | 0;
            m = (e + v | 0) + 256 | 0;
            g = r[m >> 0] | 0;
            y = g ^ d;
            b = y & 255;
            w = e + b | 0;
            S = r[w >> 0] | 0;
            x = S & 255;
            T = x + At | 0;
            N = (e + T | 0) + 256 | 0;
            C = r[N >> 0] | 0;
            k = C & 255;
            L = k ^ t;
            A = L & 255;
            O = s + 1 | 0;
            r[O >> 0] = A;
            M = l ^ C;
            D = s + 2 | 0;
            r[D >> 0] = M;
            o = 3;
            c = kn;
            return o | 0
        }

        function Gi(e, t, n, i) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            i = i | 0;
            var s = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0;
            var V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0;
            var ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0;
            var _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0;
            var Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0;
            var bn = 0,
                wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0;
            var In = 0,
                qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0;
            var sr = 0,
                or = 0,
                ur = 0,
                ar = 0,
                fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0,
                Tr = 0;
            var Nr = 0,
                Cr = 0,
                kr = 0,
                Lr = 0,
                Ar = 0,
                Or = 0,
                Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0,
                Wr = 0;
            var Xr = 0,
                Vr = 0,
                $r = 0,
                Jr = 0,
                Kr = 0,
                Qr = 0,
                Gr = 0,
                Yr = 0,
                Zr = 0,
                ei = 0,
                ti = 0,
                ni = 0,
                ri = 0,
                ii = 0,
                si = 0,
                oi = 0,
                ui = 0,
                ai = 0,
                fi = 0,
                li = 0;
            var ci = 0,
                hi = 0,
                pi = 0,
                di = 0,
                vi = 0,
                mi = 0,
                gi = 0,
                yi = 0,
                bi = 0,
                wi = 0,
                Ei = 0,
                Si = 0,
                xi = 0,
                Ti = 0,
                Ni = 0,
                Ci = 0,
                ki = 0,
                Li = 0,
                Ai = 0,
                Oi = 0;
            var Mi = 0,
                _i = 0,
                Di = 0,
                Pi = 0,
                Hi = 0,
                Bi = 0,
                ji = 0,
                Fi = 0,
                Ii = 0,
                qi = 0,
                Ri = 0,
                Ui = 0,
                zi = 0,
                Wi = 0,
                Xi = 0,
                Vi = 0,
                $i = 0,
                Ji = 0,
                Ki = 0,
                Qi = 0;
            var Gi = 0,
                Yi = 0,
                Zi = 0,
                es = 0,
                ts = 0,
                ns = 0,
                rs = 0,
                is = 0,
                ss = 0,
                os = 0,
                us = 0,
                as = 0,
                fs = 0,
                ls = 0,
                cs = 0;
            cs = c;
            a = (t | 0) == 0;
            f = (n | 0) == 0;
            if (a) {
                if (f) {
                    o = 0
                } else {
                    dn = e + n | 0;
                    Fr = r[dn >> 0] | 0;
                    Kr = Fr & 255;
                    oi = Kr & 1;
                    gi = 0 - oi | 0;
                    Li = gi & 255;
                    Ii = Li + Kr | 0;
                    Qi = Ii >>> 1;
                    l = (e + Qi | 0) + 256 | 0;
                    S = r[l >> 0] | 0;
                    o = S
                }
                r[i >> 0] = o;
                s = 1;
                c = cs;
                return s | 0
            }
            if (f) {
                r[i >> 0] = 0;
                D = t & 255;
                W = i + 1 | 0;
                r[W >> 0] = D;
                s = 2;
                c = cs;
                return s | 0
            }
            tt = e + t | 0;
            ht = r[tt >> 0] | 0;
            xt = ht & 255;
            Pt = e + n | 0;
            Xt = r[Pt >> 0] | 0;
            nn = Xt & 255;
            vn = (ht & 255) % 17 & -1;
            Cn = vn << 24 >> 24 == 0;
            jn = Cn & 1;
            if (Cn) {
                Jn = xt + 254 | 0;
                sr = (e + Jn | 0) + 256 | 0;
                mr = r[sr >> 0] | 0;
                kr = mr & 255;
                Hr = e + kr | 0;
                Br = r[Hr >> 0] | 0;
                jr = Br & 255;
                Ir = nn + 253 | 0;
                qr = (e + Ir | 0) + 256 | 0;
                Rr = r[qr >> 0] | 0;
                Ur = Rr & 255;
                zr = e + Ur | 0;
                Wr = r[zr >> 0] | 0;
                Xr = Wr & 255;
                u = Ur;
                us = kr;
                as = jr;
                fs = Xr
            } else {
                u = n;
                us = t;
                as = xt;
                fs = nn
            }
            Vr = as << 1;
            $r = (e + Vr | 0) + 256 | 0;
            Jr = r[$r >> 0] | 0;
            Qr = Jr & 255;
            Gr = e + Qr | 0;
            Yr = r[Gr >> 0] | 0;
            Zr = Yr & 255;
            ei = Zr << 1;
            ti = (e + ei | 0) + 256 | 0;
            ni = r[ti >> 0] | 0;
            ri = ni & 255;
            ii = e + ri | 0;
            si = r[ii >> 0] | 0;
            ui = si & 255;
            ai = ui << 1;
            fi = (e + ai | 0) + 256 | 0;
            li = r[fi >> 0] | 0;
            ci = li & 255;
            hi = e + ci | 0;
            pi = r[hi >> 0] | 0;
            di = pi & 255;
            vi = di + ui | 0;
            mi = (e + vi | 0) + 256 | 0;
            yi = r[mi >> 0] | 0;
            bi = yi & 255;
            wi = e + bi | 0;
            Ei = r[wi >> 0] | 0;
            Si = Ei & 255;
            xi = Si + Zr | 0;
            Ti = (e + xi | 0) + 256 | 0;
            Ni = r[Ti >> 0] | 0;
            Ci = Ni & 255;
            ki = e + Ci | 0;
            Ai = r[ki >> 0] | 0;
            Oi = Ai & 255;
            Mi = fs << 1;
            _i = (e + Mi | 0) + 256 | 0;
            Di = r[_i >> 0] | 0;
            Pi = Di & 255;
            Hi = e + Pi | 0;
            Bi = r[Hi >> 0] | 0;
            ji = Bi & 255;
            Fi = ji << 1;
            qi = (e + Fi | 0) + 256 | 0;
            Ri = r[qi >> 0] | 0;
            Ui = Ri & 255;
            zi = e + Ui | 0;
            Wi = r[zi >> 0] | 0;
            Xi = Wi & 255;
            Vi = Xi << 1;
            $i = (e + Vi | 0) + 256 | 0;
            Ji = r[$i >> 0] | 0;
            Ki = Oi + fs | 0;
            Gi = (e + Ki | 0) + 256 | 0;
            Yi = r[Gi >> 0] | 0;
            Zi = ji + Si | 0;
            es = (e + Zi | 0) + 256 | 0;
            ts = r[es >> 0] | 0;
            ns = ts ^ Yi;
            rs = Xi + di | 0;
            is = (e + rs | 0) + 256 | 0;
            ss = r[is >> 0] | 0;
            os = ns ^ ss;
            h = os << 24 >> 24 == Ji << 24 >> 24;
            if (h) {
                T = 0
            } else {
                p = os ^ Ji;
                d = p & 255;
                v = e + d | 0;
                m = r[v >> 0] | 0;
                g = m & 255;
                y = g + as | 0;
                b = (e + y | 0) + 256 | 0;
                w = r[b >> 0] | 0;
                E = w & 255;
                T = E
            }
            x = e + T | 0;
            N = r[x >> 0] | 0;
            C = (N & 255) % 17 & -1;
            k = C << 24 >> 24 == 0;
            if (!k) {
                s = 0;
                c = cs;
                return s | 0
            }
            L = (T | 0) == 0;
            if (L) {
                st = 0;
                ot = 0;
                Er = 0
            } else {
                A = di << 1;
                O = (e + A | 0) + 256 | 0;
                M = r[O >> 0] | 0;
                _ = M & 255;
                P = _ ^ us;
                H = N & 255;
                B = H + 255 | 0;
                j = e + P | 0;
                F = r[j >> 0] | 0;
                I = F & 255;
                q = B - I | 0;
                R = (e + q | 0) + 256 | 0;
                U = r[R >> 0] | 0;
                z = U & 255;
                X = U << 24 >> 24 == 0;
                if (X) {
                    st = 0;
                    ot = 0;
                    Er = 0
                } else {
                    V = e + z | 0;
                    $ = r[V >> 0] | 0;
                    J = $ & 255;
                    K = J << 1;
                    Q = (e + K | 0) + 256 | 0;
                    G = r[Q >> 0] | 0;
                    Y = G & 255;
                    Z = J + as | 0;
                    et = (e + Z | 0) + 256 | 0;
                    nt = r[et >> 0] | 0;
                    rt = nt & 255;
                    st = Y;
                    ot = rt;
                    Er = z
                }
            }
            it = ot ^ st;
            ut = (it | 0) == (u | 0);
            if (ut) {
                Mn = 0;
                _n = 0;
                Pn = 0;
                er = 0;
                Pr = 1
            } else {
                at = it ^ u;
                ft = Zr ^ 255;
                lt = e + at | 0;
                ct = r[lt >> 0] | 0;
                pt = ct & 255;
                dt = pt + ft | 0;
                vt = (e + dt | 0) + 256 | 0;
                mt = r[vt >> 0] | 0;
                gt = mt << 24 >> 24 == 0;
                if (gt) {
                    Mn = 0;
                    _n = 0;
                    Pn = 0;
                    er = 0;
                    Pr = 1
                } else {
                    yt = mt & 255;
                    bt = e + yt | 0;
                    wt = r[bt >> 0] | 0;
                    Et = wt & 255;
                    St = Et + 221 | 0;
                    Tt = (e + St | 0) + 256 | 0;
                    Nt = r[Tt >> 0] | 0;
                    Ct = Nt & 255;
                    kt = Nt << 24 >> 24 == 0;
                    if (kt) {
                        Mn = 0;
                        _n = 0;
                        Pn = 0;
                        er = 0;
                        Pr = 1
                    } else {
                        Lt = e + Ct | 0;
                        At = r[Lt >> 0] | 0;
                        Ot = At & 255;
                        Mt = Ot + 221 | 0;
                        _t = (e + Mt | 0) + 256 | 0;
                        Dt = r[_t >> 0] | 0;
                        Ht = Ot << 1;
                        Bt = (e + Ht | 0) + 256 | 0;
                        jt = r[Bt >> 0] | 0;
                        Ft = Dt << 24 >> 24 == jt << 24 >> 24;
                        if (Ft) {
                            Mn = 0;
                            _n = 0;
                            Pn = Ct;
                            er = 0;
                            Pr = 1
                        } else {
                            It = jt ^ Dt;
                            qt = It & 255;
                            Rt = e + qt | 0;
                            Ut = r[Rt >> 0] | 0;
                            zt = Ut & 255;
                            Wt = zt + 238 | 0;
                            Vt = (e + Wt | 0) + 256 | 0;
                            $t = r[Vt >> 0] | 0;
                            Jt = $t << 24 >> 24 == 0;
                            if (Jt) {
                                Mn = 0;
                                _n = 0;
                                Pn = Ct;
                                er = 0;
                                Pr = 1
                            } else {
                                Kt = $t & 255;
                                Qt = e + 494 | 0;
                                Gt = e + 443 | 0;
                                Yt = r[Qt >> 0] | 0;
                                Zt = r[Gt >> 0] | 0;
                                en = Zt ^ Yt;
                                tn = en & 255;
                                rn = e + Kt | 0;
                                sn = r[rn >> 0] | 0;
                                on = sn & 255;
                                un = on + 255 | 0;
                                an = e + tn | 0;
                                fn = r[an >> 0] | 0;
                                ln = fn & 255;
                                cn = un - ln | 0;
                                hn = (e + cn | 0) + 256 | 0;
                                pn = r[hn >> 0] | 0;
                                mn = pn & 255;
                                gn = pn << 24 >> 24 == 0;
                                if (gn) {
                                    Mn = 0;
                                    _n = 0;
                                    Pn = Ct;
                                    er = 0;
                                    Pr = 1
                                } else {
                                    yn = e + mn | 0;
                                    bn = r[yn >> 0] | 0;
                                    wn = bn & 255;
                                    En = wn << 1;
                                    Sn = (e + En | 0) + 256 | 0;
                                    xn = r[Sn >> 0] | 0;
                                    Tn = xn & 255;
                                    Nn = wn + 238 | 0;
                                    kn = (e + Nn | 0) + 256 | 0;
                                    Ln = r[kn >> 0] | 0;
                                    An = Ln & 255;
                                    Mn = Tn;
                                    _n = An;
                                    Pn = Ct;
                                    er = mn;
                                    Pr = 0
                                }
                            }
                        }
                    }
                }
            }
            On = _n ^ Mn;
            Dn = (On | 0) == (Pn | 0);
            if (Dn) {
                ar = 0
            } else {
                Hn = On ^ Pn;
                Bn = e + Hn | 0;
                Fn = r[Bn >> 0] | 0;
                In = Fn & 255;
                qn = In + 34 | 0;
                Rn = (e + qn | 0) + 256 | 0;
                Un = r[Rn >> 0] | 0;
                zn = Un << 24 >> 24 == 0;
                if (zn) {
                    ar = 0
                } else {
                    Wn = Un & 255;
                    Xn = e + Wn | 0;
                    Vn = r[Xn >> 0] | 0;
                    $n = Vn & 255;
                    Kn = $n + 85 | 0;
                    Qn = (e + Kn | 0) + 256 | 0;
                    Gn = r[Qn >> 0] | 0;
                    Yn = Gn & 255;
                    ar = Yn
                }
            }
            if (Pr) {
                lr = 0
            } else {
                Zn = e + er | 0;
                tr = r[Zn >> 0] | 0;
                nr = tr & 255;
                rr = nr + 17 | 0;
                ir = (e + rr | 0) + 256 | 0;
                or = r[ir >> 0] | 0;
                ur = or & 255;
                lr = ur
            }
            fr = (ar | 0) == (lr | 0);
            if (fr) {
                Sr = 0
            } else {
                cr = lr ^ ar;
                hr = e + cr | 0;
                pr = r[hr >> 0] | 0;
                dr = pr & 255;
                vr = dr + as | 0;
                gr = (e + vr | 0) + 256 | 0;
                yr = r[gr >> 0] | 0;
                br = yr & 255;
                Sr = br
            }
            wr = Sr ^ Er;
            xr = e + wr | 0;
            Tr = r[xr >> 0] | 0;
            Nr = Tr & 255;
            Cr = Nr + jn | 0;
            Lr = (e + Cr | 0) + 256 | 0;
            Ar = r[Lr >> 0] | 0;
            r[i >> 0] = Ar;
            Or = Ar & 255;
            Mr = Or ^ t;
            _r = Mr & 255;
            Dr = i + 1 | 0;
            r[Dr >> 0] = _r;
            s = 2;
            c = cs;
            return s | 0
        }

        function Yi(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                s = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0;
            y = c;
            t = e;
            o = 15;
            d = 32768;
            v = 0;
            while (1) {
                r = v << 1;
                i = r + d | 0;
                s = i << o;
                u = s >>> 0 > t >>> 0;
                if (u) {
                    n = t;
                    m = v
                } else {
                    a = d + v | 0;
                    f = t - s | 0;
                    n = f;
                    m = a
                }
                l = d >>> 1;
                h = o + -1 | 0;
                p = (o | 0) > 0;
                if (p) {
                    t = n;
                    o = h;
                    d = l;
                    v = m
                } else {
                    break
                }
            }
            c = y;
            return m | 0
        }

        function Zi(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                s = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0;
            var x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0;
            var W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0;
            var lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0;
            var Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0;
            Xt = c;
            It = (e | 0) > -1;
            Rt = 0 - e | 0;
            u = It ? e : Rt;
            qt = (t | 0) > -1;
            Ut = 0 - t | 0;
            a = qt ? t : Ut;
            w = u >>> 0 > a >>> 0;
            M = a ^ u;
            z = w ? M : 0;
            et = z ^ u;
            ct = z ^ a;
            St = ct >>> 0 > 65535;
            Dt = St & 1;
            Bt = Dt << 4;
            f = ct >>> Bt;
            l = f & 65280;
            h = (l | 0) != 0;
            p = h & 1;
            d = p << 3;
            v = f >>> d;
            m = d | Bt;
            g = v & 240;
            y = (g | 0) != 0;
            b = y & 1;
            E = b << 2;
            S = v >>> E;
            x = m | E;
            T = S & 12;
            N = (T | 0) != 0;
            C = N & 1;
            k = C << 1;
            L = S >>> k;
            A = x | k;
            O = L >>> 1;
            r = O & 1;
            _ = A | r;
            P = (L | 0) != 0;
            i = P << 31 >> 31;
            s = i + 31 | 0;
            H = s - _ | 0;
            B = H >> 31;
            o = B ^ -1;
            j = H & o;
            F = et << j;
            vo(F | 0, 0, -1686835798, 0) | 0;
            I = D;
            q = ct << j;
            R = (q | 0) < 0;
            U = R << 31 >> 31;
            W = vo(q | 0, U | 0, -1686835799, 0) | 0;
            X = D;
            V = so(W | 0, X | 0, 63) | 0;
            $ = D;
            J = 0 - V | 0;
            K = X - V | 0;
            Q = K ^ J;
            G = Q + I | 0;
            Y = I - V | 0;
            Z = Y ^ J;
            tt = X - Z | 0;
            nt = G + 1 | 0;
            rt = nt >>> 1;
            it = tt + 1 | 0;
            st = it >> 1;
            ot = tt >> 31;
            ut = st + ot | 0;
            at = ut ^ ot;
            ft = at + G | 0;
            lt = rt + ot | 0;
            ht = lt ^ ot;
            pt = tt - ht | 0;
            n = pt;
            Ft = 1;
            zt = ft;
            while (1) {
                dt = zt + 1 | 0;
                vt = dt >>> 2;
                mt = Ft << 1;
                gt = 1 << mt;
                yt = gt >> 1;
                bt = yt + n | 0;
                wt = bt >> mt;
                Et = n >> 31;
                xt = wt + Et | 0;
                Tt = xt ^ Et;
                Nt = Tt + zt | 0;
                Ct = Et + vt | 0;
                kt = Ct ^ Et;
                Lt = n - kt | 0;
                At = Lt << 1;
                Ot = Ft + 1 | 0;
                jt = (Ot | 0) == 16;
                if (jt) {
                    break
                } else {
                    n = At;
                    Ft = Ot;
                    zt = Nt
                }
            }
            Mt = 1 << j;
            _t = Mt >>> 1;
            Pt = Nt + _t | 0;
            Ht = Pt >>> j;
            c = Xt;
            return Ht | 0
        }

        function es(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                s = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0;
            var S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0;
            M = c;
            n = e >>> 0 > 65535;
            r = n & 1;
            v = r << 4;
            x = e >>> v;
            T = x & 65280;
            N = (T | 0) != 0;
            C = N & 1;
            k = C << 3;
            L = x >>> k;
            A = k | v;
            i = L & 240;
            s = (i | 0) != 0;
            o = s & 1;
            u = o << 2;
            a = L >>> u;
            f = A | u;
            l = a & 12;
            h = (l | 0) != 0;
            p = h & 1;
            d = p << 1;
            m = a >>> d;
            g = f | d;
            y = m >>> 1;
            t = y & 1;
            b = g | t;
            w = (m | 0) != 0;
            E = w & 1;
            S = b + E | 0;
            c = M;
            return S | 0
        }

        function ts() {
            var e = 0,
                t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0;
            f = c;
            e = Ds(1, 136) | 0;
            t = e + 88 | 0;
            s[t >> 2] = 32;
            n = Ms(32) | 0;
            r = e + 96 | 0;
            s[r >> 2] = n;
            i = e + 132 | 0;
            s[i >> 2] = 1;
            u = e + 0 | 0;
            l = u + 88 | 0;
            do {
                s[u >> 2] = 0 | 0;
                u = u + 4 | 0
            } while ((u | 0) < (l | 0));
            o = e + 108 | 0;
            s[o >> 2] = 0;
            c = f;
            return e | 0
        }

        function ns(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0;
            i = c;
            n = e + 0 | 0;
            o = n + 88 | 0;
            do {
                s[n >> 2] = 0 | 0;
                n = n + 4 | 0
            } while ((n | 0) < (o | 0));
            t = e + 108 | 0;
            s[t >> 2] = 0;
            c = i;
            return
        }

        function rs(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0;
            o = c;
            t = e + 96 | 0;
            n = s[t >> 2] | 0;
            r = (n | 0) == (0 | 0);
            if (!r) {
                _s(n)
            }
            _s(e);
            c = o;
            return
        }

        function is(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0;
            f = c;
            t = e + 4 | 0;
            u = t + 0 | 0;
            l = u + 64 | 0;
            do {
                s[u >> 2] = 0 | 0;
                u = u + 4 | 0
            } while ((u | 0) < (l | 0));
            n = e + 72 | 0;
            s[n >> 2] = 0;
            r[e >> 0] = 0;
            i = e + 84 | 0;
            s[i >> 2] = 0;
            o = e + 108 | 0;
            s[o >> 2] = 0;
            c = f;
            return
        }

        function ss(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            t = e + 96 | 0;
            n = s[t >> 2] | 0;
            c = i;
            return n | 0
        }

        function os(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            t = e + 92 | 0;
            n = s[t >> 2] | 0;
            c = i;
            return n | 0
        }

        function us(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            t = e + 80 | 0;
            n = s[t >> 2] | 0;
            c = i;
            return n | 0
        }

        function as(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0;
            o = c;
            n = e + 104 | 0;
            r = s[n >> 2] | 0;
            s[n >> 2] = t;
            c = o;
            return r | 0
        }

        function fs(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0;
            i = c;
            n = e + 100 | 0;
            s[n >> 2] = t;
            c = i;
            return
        }

        function ls(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            t = e + 100 | 0;
            n = s[t >> 2] | 0;
            c = i;
            return n | 0
        }

        function cs(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            t = e + 68 | 0;
            n = s[t >> 2] | 0;
            c = i;
            return n | 0
        }

        function hs(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0;
            i = c;
            t = e + 76 | 0;
            n = s[t >> 2] | 0;
            c = i;
            return n | 0
        }

        function ps(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0;
            var V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0;
            Z = c;
            c = c + 32 | 0;
            V = Z;
            i = r[e >> 0] | 0;
            o = i & 255;
            b = o & 15;
            O = (e + (b << 2) | 0) + 4 | 0;
            s[O >> 2] = t;
            I = r[e >> 0] | 0;
            q = I & 255;
            R = q + 9 | 0;
            U = R & 15;
            z = (e + (U << 2) | 0) + 4 | 0;
            W = s[z >> 2] | 0;
            u = e + 84 | 0;
            a = s[u >> 2] | 0;
            f = a - W | 0;
            s[u >> 2] = f;
            l = q + 15 | 0;
            h = l & 15;
            p = (e + (h << 2) | 0) + 4 | 0;
            d = s[p >> 2] | 0;
            v = d + f | 0;
            s[u >> 2] = v;
            m = e + 132 | 0;
            y = s[m >> 2] | 0;
            w = y & 1;
            E = (w | 0) == 0;
            if (E) {
                S = I + 1 << 24 >> 24;
                r[e >> 0] = S;
                x = e + 68 | 0;
                s[x >> 2] = 0;
                X = 0;
                c = Z;
                return X | 0
            }
            T = wi(e) | 0;
            N = T >>> 0 > 1;
            n = N ? T : 0;
            C = r[e >> 0] | 0;
            k = C + 1 << 24 >> 24;
            r[e >> 0] = k;
            L = e + 68 | 0;
            s[L >> 2] = n;
            A = (n | 0) == 0;
            if (A) {
                X = 0;
                c = Z;
                return X | 0
            }
            M = e + 72 | 0;
            _ = s[M >> 2] | 0;
            D = (_ | 0) == 0;
            do {
                if (!D) {
                    if (!((n | 0) == 1 | (n | 0) == 64)) {
                        P = (_ | 0) == (n | 0);
                        if (P) {
                            s[M >> 2] = 0;
                            break
                        } else {
                            H = s[g >> 2] | 0;
                            s[V >> 2] = 8128;
                            $ = V + 4 | 0;
                            s[$ >> 2] = 263;
                            J = V + 8 | 0;
                            s[J >> 2] = 8152;
                            K = V + 12 | 0;
                            s[K >> 2] = 8168;
                            Q = V + 16 | 0;
                            s[Q >> 2] = _;
                            G = V + 20 | 0;
                            s[G >> 2] = n;
                            Yt(H | 0, 8064 | 0, V | 0) | 0;
                            break
                        }
                    }
                }
            } while (0);
            B = e + 104 | 0;
            j = s[B >> 2] | 0;
            F = (j | 0) == (0 | 0);
            if (F) {
                X = n;
                c = Z;
                return X | 0
            }
            _o[j & 7](e);
            X = n;
            c = Z;
            return X | 0
        }

        function ds(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0;
            l = c;
            u = (t | 0) == 64;
            r = e + 132 | 0;
            a = u ? r : 0;
            i = (a | 0) == (0 | 0);
            if (i) {
                n = 0;
                c = l;
                return n | 0
            }
            o = s[a >> 2] | 0;
            n = o;
            c = l;
            return n | 0
        }

        function vs(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0;
            var W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0;
            var lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0;
            var Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0;
            var Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0;
            var gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0;
            var jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0;
            var rr = 0,
                ir = 0,
                sr = 0,
                or = 0,
                ur = 0,
                ar = 0,
                fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0;
            var xr = 0,
                Tr = 0,
                Nr = 0,
                Cr = 0,
                kr = 0,
                Lr = 0,
                Ar = 0,
                Or = 0,
                Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0;
            var zr = 0,
                Wr = 0,
                Xr = 0,
                Vr = 0,
                $r = 0,
                Jr = 0,
                Kr = 0,
                Qr = 0,
                Gr = 0,
                Yr = 0,
                Zr = 0,
                ei = 0,
                ti = 0,
                ni = 0,
                ri = 0,
                ii = 0,
                si = 0,
                oi = 0,
                ui = 0,
                ai = 0;
            var fi = 0,
                li = 0,
                ci = 0,
                hi = 0,
                pi = 0,
                di = 0,
                vi = 0,
                mi = 0,
                gi = 0,
                yi = 0,
                bi = 0,
                wi = 0,
                Ei = 0,
                Si = 0,
                xi = 0,
                Ti = 0,
                Ni = 0,
                Ci = 0,
                ki = 0,
                Li = 0;
            var Ai = 0,
                Oi = 0,
                Mi = 0,
                _i = 0,
                Di = 0,
                Pi = 0,
                Hi = 0,
                Bi = 0,
                ji = 0,
                Fi = 0,
                Ii = 0,
                qi = 0,
                Ri = 0,
                Ui = 0,
                zi = 0,
                Wi = 0,
                Xi = 0,
                Vi = 0,
                $i = 0,
                Ji = 0;
            var Ki = 0,
                Qi = 0,
                Gi = 0,
                Yi = 0,
                Zi = 0,
                es = 0,
                ts = 0,
                ns = 0,
                rs = 0,
                is = 0,
                ss = 0,
                os = 0,
                us = 0,
                as = 0,
                fs = 0,
                ls = 0,
                cs = 0,
                hs = 0,
                ps = 0,
                ds = 0;
            var vs = 0,
                ms = 0,
                gs = 0,
                ys = 0,
                bs = 0,
                ws = 0,
                Es = 0,
                Ss = 0,
                xs = 0,
                Ts = 0,
                Ns = 0,
                Cs = 0,
                ks = 0,
                Ls = 0,
                As = 0,
                Os = 0,
                Ms = 0,
                _s = 0,
                Ds = 0,
                Ps = 0;
            var Hs = 0,
                Bs = 0,
                js = 0,
                Fs = 0,
                Is = 0,
                qs = 0,
                Rs = 0,
                Us = 0,
                zs = 0,
                Ws = 0,
                Xs = 0,
                Vs = 0,
                $s = 0,
                Js = 0,
                Ks = 0,
                Qs = 0,
                Gs = 0,
                Ys = 0;
            Ys = c;
            c = c + 32 | 0;
            ys = Ys + 12 | 0;
            Ji = Ys;
            l = s[e >> 2] | 0;
            ts = 0;
            Es = 0;
            while (1) {
                h = 1 << ts;
                mn = h & l;
                Tr = (mn | 0) == 0;
                if (Tr) {
                    si = Es
                } else {
                    Hr = 8208 + ts | 0;
                    Vr = r[Hr >> 0] | 0;
                    ri = Vr & 255;
                    di = ri ^ Es;
                    si = di
                }
                Ni = ts + 1 | 0;
                Qi = (Ni | 0) == 15;
                if (Qi) {
                    break
                } else {
                    ts = Ni;
                    Es = si
                }
            }
            Bi = l & 1;
            p = l & 2;
            T = (p | 0) == 0;
            H = p << 2;
            V = H | Bi;
            rt = l & 4;
            dt = (rt | 0) == 0;
            Nt = V ^ 12;
            Ss = dt ? V : Nt;
            Bt = l & 8;
            $t = (Bt | 0) == 0;
            sn = Ss ^ 10;
            _s = $t ? Ss : sn;
            gn = l & 16;
            Ln = (gn | 0) == 0;
            In = _s ^ 15;
            As = Ln ? _s : In;
            Qn = l & 32;
            ur = (Qn | 0) == 0;
            n = Qn >>> 5;
            Cs = As ^ n;
            yr = l & 64;
            wr = (yr | 0) == 0;
            Er = Cs ^ 8;
            Ns = wr ? Cs : Er;
            Sr = l & 128;
            xr = (Sr | 0) == 0;
            Nr = Ns ^ 12;
            Ls = xr ? Ns : Nr;
            Cr = l & 256;
            kr = (Cr | 0) == 0;
            Lr = Ls ^ 10;
            ks = kr ? Ls : Lr;
            Ar = l & 512;
            Or = (Ar | 0) == 0;
            Mr = ks ^ 15;
            Ps = Or ? ks : Mr;
            _r = l & 1024;
            Dr = (_r | 0) == 0;
            i = _r >>> 10;
            Ds = Ps ^ i;
            Pr = l & 2048;
            Br = (Pr | 0) == 0;
            jr = Ds ^ 8;
            Ts = Br ? Ds : jr;
            Fr = l & 4096;
            Ir = (Fr | 0) == 0;
            qr = Ts ^ 12;
            xs = Ir ? Ts : qr;
            Rr = l & 8192;
            Ur = (Rr | 0) == 0;
            zr = xs ^ 10;
            Ms = Ur ? xs : zr;
            Wr = l & 16384;
            Xr = (Wr | 0) == 0;
            $r = Ms ^ 15;
            Os = Xr ? Ms : $r;
            Jr = Bi | 6;
            Hs = T ? Bi : Jr;
            Kr = Hs ^ 7;
            Ws = dt ? Hs : Kr;
            o = Bt >>> 3;
            qs = Ws ^ o;
            Qr = qs ^ 6;
            js = Ln ? qs : Qr;
            Gr = js ^ 7;
            Bs = ur ? js : Gr;
            u = yr >>> 6;
            Vs = Bs ^ u;
            Yr = Vs ^ 6;
            Xs = xr ? Vs : Yr;
            Zr = Xs ^ 7;
            Us = kr ? Xs : Zr;
            a = Ar >>> 9;
            Rs = Us ^ a;
            ei = Rs ^ 6;
            Is = Dr ? Rs : ei;
            ti = Is ^ 7;
            Fs = Br ? Is : ti;
            f = Fr >>> 12;
            Js = Fs ^ f;
            ni = Js ^ 6;
            $s = Ur ? Js : ni;
            ii = $s ^ 7;
            zs = Xr ? $s : ii;
            oi = (si | 0) == 0;
            do {
                if (oi) {
                    ui = Os | zs;
                    ai = (ui | 0) == 0;
                    if (ai) {
                        t = 0;
                        c = Ys;
                        return t | 0
                    } else {
                        s[ys >> 2] = si;
                        d = Os;
                        fn = Ji;
                        br = ys;
                        Pi = Os;
                        ji = 0;
                        Ii = 0;
                        break
                    }
                } else {
                    s[ys >> 2] = si;
                    fi = 8192 + si | 0;
                    li = r[fi >> 0] | 0;
                    ci = li << 24 >> 24;
                    hi = ci << 1;
                    pi = 8208 + hi | 0;
                    vi = r[pi >> 0] | 0;
                    mi = vi & 255;
                    gi = 8192 + mi | 0;
                    yi = r[gi >> 0] | 0;
                    bi = yi << 24 >> 24;
                    wi = bi + ci | 0;
                    Ei = 8208 + wi | 0;
                    Si = r[Ei >> 0] | 0;
                    xi = Si & 255;
                    Ti = xi ^ Os;
                    Ci = (Os | 0) == 0;
                    if (Ci) {
                        d = Ti;
                        fn = Ji;
                        br = ys;
                        Pi = 0;
                        ji = xi;
                        Ii = 0
                    } else {
                        ki = 8192 + Os | 0;
                        Li = r[ki >> 0] | 0;
                        Ai = Li << 24 >> 24;
                        Oi = Ai + bi | 0;
                        Mi = 8208 + Oi | 0;
                        _i = r[Mi >> 0] | 0;
                        Di = _i & 255;
                        d = Ti;
                        fn = Ji;
                        br = ys;
                        Pi = Os;
                        ji = xi;
                        Ii = Di
                    }
                }
            } while (0);
            Hi = (Pi | 0) == (ji | 0);
            Fi = (zs | 0) == (Ii | 0);
            ws = Hi | Fi;
            if (ws) {
                qi = ys + 4 | 0;
                s[qi >> 2] = 0;
                P = 0;
                z = 0
            } else {
                Ri = Ii ^ zs;
                Ui = 8192 + Ri | 0;
                zi = r[Ui >> 0] | 0;
                Wi = zi << 24 >> 24;
                Xi = Wi + 15 | 0;
                Vi = 8192 + d | 0;
                v = r[Vi >> 0] | 0;
                m = v << 24 >> 24;
                g = Xi - m | 0;
                y = 8208 + g | 0;
                b = r[y >> 0] | 0;
                w = b & 255;
                E = ys + 4 | 0;
                s[E >> 2] = w;
                if (oi) {
                    P = 0;
                    z = w
                } else {
                    S = 8192 + si | 0;
                    x = r[S >> 0] | 0;
                    N = x << 24 >> 24;
                    C = 8192 + w | 0;
                    k = r[C >> 0] | 0;
                    L = k << 24 >> 24;
                    A = L + N | 0;
                    O = 8208 + A | 0;
                    M = r[O >> 0] | 0;
                    _ = M & 255;
                    P = _;
                    z = w
                }
            }
            D = P ^ d;
            B = ys + 8 | 0;
            s[B >> 2] = D;
            $i = 3;
            while (1) {
                j = ($i | 0) > 0;
                if (!j) {
                    t = -1;
                    Gs = 41;
                    break
                }
                F = $i + -1 | 0;
                I = ys + (F << 2) | 0;
                q = s[I >> 2] | 0;
                R = (q | 0) == 0;
                if (R) {
                    $i = F
                } else {
                    break
                }
            }
            if ((Gs | 0) == 41) {
                c = Ys;
                return t | 0
            }
            U = ($i | 0) == 1;
            do {
                if (U) {
                    on = 8192 + si | 0;
                    un = r[on >> 0] | 0;
                    an = un << 24 >> 24;
                    s[fn >> 2] = an;
                    gs = 1;
                    Gs = 37
                } else {
                    W = (z | 0) == 0;
                    X = 8192 + z | 0;
                    e: do {
                        if (oi) {
                            if (W) {
                                is = 0;
                                ls = 0;
                                while (1) {
                                    $ = is << 1;
                                    J = 8208 + $ | 0;
                                    K = r[J >> 0] | 0;
                                    Q = K & 255;
                                    G = 8192 + Q | 0;
                                    Y = r[G >> 0] | 0;
                                    Z = Y << 24 >> 24;
                                    et = Z + is | 0;
                                    tt = 8208 + et | 0;
                                    nt = r[tt >> 0] | 0;
                                    it = nt & 255;
                                    st = (it | 0) == (D | 0);
                                    if (st) {
                                        ot = ls + 1 | 0;
                                        ut = Ji + (ls << 2) | 0;
                                        s[ut >> 2] = is;
                                        ds = ot
                                    } else {
                                        ds = ls
                                    }
                                    at = is + 1 | 0;
                                    Zi = (at | 0) == 15;
                                    if (Zi) {
                                        us = ds;
                                        break
                                    } else {
                                        is = at;
                                        ls = ds
                                    }
                                }
                            } else {
                                rs = 0;
                                fs = 0;
                                while (1) {
                                    vt = rs << 1;
                                    mt = 8208 + vt | 0;
                                    gt = r[mt >> 0] | 0;
                                    yt = gt & 255;
                                    bt = 8192 + yt | 0;
                                    wt = r[bt >> 0] | 0;
                                    Et = wt << 24 >> 24;
                                    St = Et + rs | 0;
                                    xt = 8208 + St | 0;
                                    Tt = r[xt >> 0] | 0;
                                    Ct = r[X >> 0] | 0;
                                    kt = Ct << 24 >> 24;
                                    Lt = kt + rs | 0;
                                    At = 8208 + Lt | 0;
                                    Ot = r[At >> 0] | 0;
                                    Mt = Ot ^ Tt;
                                    _t = Mt & 255;
                                    Dt = (_t | 0) == (D | 0);
                                    if (Dt) {
                                        Pt = fs + 1 | 0;
                                        Ht = Ji + (fs << 2) | 0;
                                        s[Ht >> 2] = rs;
                                        ps = Pt
                                    } else {
                                        ps = fs
                                    }
                                    jt = rs + 1 | 0;
                                    Yi = (jt | 0) == 15;
                                    if (Yi) {
                                        us = ps;
                                        break
                                    } else {
                                        rs = jt;
                                        fs = ps
                                    }
                                }
                            }
                        } else {
                            ft = 8192 + si | 0;
                            lt = r[ft >> 0] | 0;
                            ct = lt << 24 >> 24;
                            if (W) {
                                ss = 0;
                                cs = 0;
                                while (1) {
                                    Ft = ss << 1;
                                    It = 8208 + Ft | 0;
                                    qt = r[It >> 0] | 0;
                                    Rt = qt & 255;
                                    Ut = 8192 + Rt | 0;
                                    zt = r[Ut >> 0] | 0;
                                    Wt = zt << 24 >> 24;
                                    Xt = Wt + ss | 0;
                                    Vt = 8208 + Xt | 0;
                                    Jt = r[Vt >> 0] | 0;
                                    Kt = ct + Wt | 0;
                                    Qt = 8208 + Kt | 0;
                                    Gt = r[Qt >> 0] | 0;
                                    Yt = Gt ^ Jt;
                                    Zt = Yt & 255;
                                    en = (Zt | 0) == (D | 0);
                                    if (en) {
                                        tn = cs + 1 | 0;
                                        nn = Ji + (cs << 2) | 0;
                                        s[nn >> 2] = ss;
                                        vs = tn
                                    } else {
                                        vs = cs
                                    }
                                    rn = ss + 1 | 0;
                                    es = (rn | 0) == 15;
                                    if (es) {
                                        us = vs;
                                        break e
                                    } else {
                                        ss = rn;
                                        cs = vs
                                    }
                                }
                            }
                            ht = r[X >> 0] | 0;
                            pt = ht << 24 >> 24;
                            ns = 0;
                            as = 0;
                            while (1) {
                                ln = ns << 1;
                                cn = 8208 + ln | 0;
                                hn = r[cn >> 0] | 0;
                                pn = hn & 255;
                                dn = 8192 + pn | 0;
                                vn = r[dn >> 0] | 0;
                                yn = vn << 24 >> 24;
                                bn = yn + ns | 0;
                                wn = 8208 + bn | 0;
                                En = r[wn >> 0] | 0;
                                Sn = ct + yn | 0;
                                xn = 8208 + Sn | 0;
                                Tn = r[xn >> 0] | 0;
                                Nn = Tn ^ En;
                                Cn = pt + ns | 0;
                                kn = 8208 + Cn | 0;
                                An = r[kn >> 0] | 0;
                                On = Nn ^ An;
                                Mn = On & 255;
                                _n = (Mn | 0) == (D | 0);
                                if (_n) {
                                    Dn = as + 1 | 0;
                                    Pn = Ji + (as << 2) | 0;
                                    s[Pn >> 2] = ns;
                                    hs = Dn
                                } else {
                                    hs = as
                                }
                                Hn = ns + 1 | 0;
                                Gi = (Hn | 0) == 15;
                                if (Gi) {
                                    us = hs;
                                    break
                                } else {
                                    ns = Hn;
                                    as = hs
                                }
                            }
                        }
                    } while (0);
                    Bn = (us | 0) >= ($i | 0);
                    jn = (us | 0) > 0;
                    bs = Bn & jn;
                    if (bs) {
                        Fn = (us | 0) > 0;
                        if (Fn) {
                            gs = us;
                            Gs = 37;
                            break
                        } else {
                            ms = us;
                            Ks = l;
                            break
                        }
                    } else {
                        t = -1;
                        c = Ys;
                        return t | 0
                    }
                }
            } while (0);
            if ((Gs | 0) == 37) {
                os = 0;
                Qs = l;
                while (1) {
                    qn = Ji + (os << 2) | 0;
                    Rn = s[qn >> 2] | 0;
                    Un = 1 << Rn;
                    zn = Un ^ Qs;
                    Wn = os + 1 | 0;
                    Ki = (Wn | 0) == (gs | 0);
                    if (Ki) {
                        ms = gs;
                        Ks = zn;
                        break
                    } else {
                        os = Wn;
                        Qs = zn
                    }
                }
            }
            Xn = Ks >>> 10;
            Vn = Xn & 1;
            $n = 0 - Vn | 0;
            Jn = $n & 1335;
            Kn = Ks >>> 11;
            Gn = Kn & 1;
            Yn = 0 - Gn | 0;
            Zn = Yn & 2670;
            er = Zn ^ Jn;
            tr = Ks >>> 12;
            nr = tr & 1;
            rr = 0 - nr | 0;
            ir = rr & 4587;
            sr = er ^ ir;
            or = Ks >>> 13;
            ar = or & 1;
            fr = 0 - ar | 0;
            lr = fr & 9174;
            cr = sr ^ lr;
            hr = Ks >>> 14;
            pr = hr & 1;
            dr = 0 - pr | 0;
            vr = dr & 17051;
            mr = cr ^ vr;
            gr = (mr | 0) == (Ks | 0);
            if (!gr) {
                t = -1;
                c = Ys;
                return t | 0
            }
            s[e >> 2] = Ks;
            t = ms;
            c = Ys;
            return t | 0
        }

        function ms(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0;
            var V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0;
            var pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0;
            var Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0;
            var Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0;
            var wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0;
            var qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0;
            var or = 0,
                ur = 0,
                ar = 0,
                fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0,
                Tr = 0,
                Nr = 0;
            var Cr = 0,
                kr = 0,
                Lr = 0,
                Ar = 0,
                Or = 0,
                Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0;
            zr = c;
            f = (t | 0) / 4 & -1;
            l = (n | 0) / 4 & -1;
            Ft = (t | 0) > 0;
            Kt = (n | 0) > 0;
            Ar = Ft & Kt;
            if (!Ar) {
                Lr = 0;
                c = zr;
                return Lr | 0
            }
            un = rt(n, t) | 0;
            yn = Ms(un) | 0;
            An = t + 7 | 0;
            qn = An >> 3;
            Tr = 4;
            while (1) {
                h = 1 << Tr;
                x = (h | 0) < (qn | 0);
                Gn = Tr + 1 | 0;
                if (!x) {
                    xr = Tr;
                    break
                }
                ar = (Gn | 0) < 8;
                if (ar) {
                    Tr = Gn
                } else {
                    xr = Gn;
                    break
                }
            }
            P = n + 7 | 0;
            X = P >> 3;
            Sr = 4;
            while (1) {
                Nt = 1 << Sr;
                Ht = (Nt | 0) < (X | 0);
                nt = Sr + 1 | 0;
                if (!Ht) {
                    Er = Sr;
                    break
                }
                dt = (nt | 0) < 8;
                if (dt) {
                    Sr = nt
                } else {
                    Er = nt;
                    break
                }
            }
            Bt = 1 << xr;
            jt = 1 << Er;
            It = t << 2;
            qt = Ms(It) | 0;
            Rt = f << 2;
            Ut = (t | 0) > 3;
            if (Ut) {
                zt = Er + -1 | 0;
                Or = 0;
                while (1) {
                    fn = e + Or | 0;
                    ln = r[fn >> 0] | 0;
                    cn = ln & 255;
                    hn = cn << zt;
                    pn = hn + cn | 0;
                    dn = qt + (Or << 2) | 0;
                    s[dn >> 2] = pn;
                    vn = Or + 1 | 0;
                    mn = (vn | 0) < (Rt | 0);
                    if (mn) {
                        Or = vn
                    } else {
                        break
                    }
                }
            }
            Wt = jt >> 1;
            Xt = (Wt | 0) > 1;
            if (Xt) {
                Vt = n + -1 | 0;
                if (Ut) {
                    Ir = 1;
                    while (1) {
                        on = (Ir | 0) >= (n | 0);
                        an = on ? Vt : Ir;
                        Qt = rt(an, t) | 0;
                        Mr = 0;
                        while (1) {
                            Jt = Mr + Qt | 0;
                            Gt = e + Jt | 0;
                            Yt = r[Gt >> 0] | 0;
                            Zt = Yt & 255;
                            en = qt + (Mr << 2) | 0;
                            tn = s[en >> 2] | 0;
                            nn = tn + Zt | 0;
                            s[en >> 2] = nn;
                            rn = Mr + 1 | 0;
                            sn = (rn | 0) < (Rt | 0);
                            if (sn) {
                                Mr = rn
                            } else {
                                break
                            }
                        }
                        $t = Ir + 1 | 0;
                        wr = ($t | 0) == (Wt | 0);
                        if (wr) {
                            break
                        } else {
                            Ir = $t
                        }
                    }
                }
            }
            gn = l << 2;
            bn = (n | 0) > 3;
            e: do {
                if (bn) {
                    wn = xr + -1 | 0;
                    En = Bt >> 1;
                    Sn = (En | 0) > 1;
                    xn = Er + xr | 0;
                    Tn = t + -1 | 0;
                    Nn = n + -1 | 0;
                    if (Sn) {
                        Rr = 0
                    } else {
                        qr = 0;
                        while (1) {
                            O = s[qt >> 2] | 0;
                            M = O << wn;
                            _ = M + O | 0;
                            D = rt(qr, t) | 0;
                            Cr = _;
                            Pr = 0;
                            t: while (1) {
                                Dr = Pr;
                                while (1) {
                                    H = (Dr | 0) < (Rt | 0);
                                    if (!H) {
                                        break t
                                    }
                                    B = Dr + D | 0;
                                    j = e + B | 0;
                                    F = r[j >> 0] | 0;
                                    I = F & 255;
                                    q = I + 3 | 0;
                                    R = q << xn;
                                    U = R >>> 0 < Cr >>> 0;
                                    z = U << 31 >> 31;
                                    W = yn + B | 0;
                                    r[W >> 0] = z;
                                    V = Dr + 1 | 0;
                                    $ = (V | 0) < (t | 0);
                                    if ($) {
                                        break
                                    } else {
                                        Dr = V
                                    }
                                }
                                J = Dr - En | 0;
                                K = (J | 0) > 0;
                                Q = K ? J : 0;
                                G = Dr + En | 0;
                                Y = (G | 0) >= (t | 0);
                                Z = Y ? Tn : G;
                                et = qt + (Z << 2) | 0;
                                tt = s[et >> 2] | 0;
                                it = qt + (Q << 2) | 0;
                                st = s[it >> 2] | 0;
                                ot = tt + Cr | 0;
                                ut = ot - st | 0;
                                Cr = ut;
                                Pr = V
                            }
                            at = qr + 1 | 0;
                            ft = (at | 0) < (n | 0);
                            n: do {
                                if (ft) {
                                    ct = qr - Wt | 0;
                                    ht = (ct | 0) > 0;
                                    pt = ht ? ct : 0;
                                    vt = rt(pt, t) | 0;
                                    mt = qr + Wt | 0;
                                    gt = (mt | 0) >= (n | 0);
                                    yt = gt ? Nn : mt;
                                    bt = rt(yt, t) | 0;
                                    if (Ut) {
                                        kt = O;
                                        jr = 0;
                                        while (1) {
                                            wt = jr + vt | 0;
                                            Et = e + wt | 0;
                                            St = r[Et >> 0] | 0;
                                            xt = St & 255;
                                            Tt = qt + (jr << 2) | 0;
                                            Ct = kt - xt | 0;
                                            Lt = jr + bt | 0;
                                            At = e + Lt | 0;
                                            Ot = r[At >> 0] | 0;
                                            Mt = Ot & 255;
                                            _t = Mt + Ct | 0;
                                            s[Tt >> 2] = _t;
                                            Dt = jr + 1 | 0;
                                            Pt = (Dt | 0) < (Rt | 0);
                                            if (!Pt) {
                                                break n
                                            }
                                            o = qt + (Dt << 2) | 0;
                                            a = s[o >> 2] | 0;
                                            kt = a;
                                            jr = Dt
                                        }
                                    }
                                }
                            } while (0);
                            lt = (at | 0) < (gn | 0);
                            if (lt) {
                                qr = at
                            } else {
                                break e
                            }
                        }
                    }
                    while (1) {
                        C = s[qt >> 2] | 0;
                        k = C << wn;
                        L = k + C | 0;
                        Nr = L;
                        _r = 1;
                        while (1) {
                            b = (_r | 0) >= (t | 0);
                            w = b ? Tn : _r;
                            E = qt + (w << 2) | 0;
                            S = s[E >> 2] | 0;
                            T = S + Nr | 0;
                            N = _r + 1 | 0;
                            br = (N | 0) == (En | 0);
                            if (br) {
                                break
                            } else {
                                Nr = T;
                                _r = N
                            }
                        }
                        tr = rt(Rr, t) | 0;
                        kr = T;
                        Hr = 0;
                        r: while (1) {
                            Br = Hr;
                            while (1) {
                                Cn = (Br | 0) < (Rt | 0);
                                if (!Cn) {
                                    break r
                                }
                                er = Br + tr | 0;
                                nr = e + er | 0;
                                rr = r[nr >> 0] | 0;
                                ir = rr & 255;
                                sr = ir + 3 | 0;
                                or = sr << xn;
                                ur = or >>> 0 < kr >>> 0;
                                fr = ur << 31 >> 31;
                                lr = yn + er | 0;
                                r[lr >> 0] = fr;
                                cr = Br + 1 | 0;
                                hr = (cr | 0) < (t | 0);
                                if (hr) {
                                    break
                                } else {
                                    Br = cr
                                }
                            }
                            pr = Br - En | 0;
                            dr = (pr | 0) > 0;
                            vr = dr ? pr : 0;
                            mr = Br + En | 0;
                            gr = (mr | 0) >= (t | 0);
                            yr = gr ? Tn : mr;
                            p = qt + (yr << 2) | 0;
                            d = s[p >> 2] | 0;
                            v = qt + (vr << 2) | 0;
                            m = s[v >> 2] | 0;
                            g = d + kr | 0;
                            y = g - m | 0;
                            kr = y;
                            Hr = cr
                        }
                        kn = Rr + 1 | 0;
                        Ln = (kn | 0) < (n | 0);
                        i: do {
                            if (Ln) {
                                On = Rr - Wt | 0;
                                Mn = (On | 0) > 0;
                                _n = Mn ? On : 0;
                                Dn = rt(_n, t) | 0;
                                Pn = Rr + Wt | 0;
                                Hn = (Pn | 0) >= (n | 0);
                                Bn = Hn ? Nn : Pn;
                                jn = rt(Bn, t) | 0;
                                if (Ut) {
                                    Xn = C;
                                    Fr = 0;
                                    while (1) {
                                        Fn = Fr + Dn | 0;
                                        In = e + Fn | 0;
                                        Rn = r[In >> 0] | 0;
                                        Un = Rn & 255;
                                        zn = qt + (Fr << 2) | 0;
                                        Wn = Xn - Un | 0;
                                        Vn = Fr + jn | 0;
                                        $n = e + Vn | 0;
                                        Jn = r[$n >> 0] | 0;
                                        Kn = Jn & 255;
                                        Qn = Kn + Wn | 0;
                                        s[zn >> 2] = Qn;
                                        Yn = Fr + 1 | 0;
                                        Zn = (Yn | 0) < (Rt | 0);
                                        if (!Zn) {
                                            break i
                                        }
                                        i = qt + (Yn << 2) | 0;
                                        u = s[i >> 2] | 0;
                                        Xn = u;
                                        Fr = Yn
                                    }
                                }
                            }
                        } while (0);
                        A = (kn | 0) < (gn | 0);
                        if (A) {
                            Rr = kn
                        } else {
                            break
                        }
                    }
                }
            } while (0);
            _s(qt);
            Lr = yn;
            c = zr;
            return Lr | 0
        }

        function gs(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0;
            var V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0;
            var ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0;
            var _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0;
            var Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0;
            var bn = 0,
                wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0;
            var In = 0,
                qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0;
            var sr = 0,
                or = 0,
                ur = 0,
                ar = 0,
                fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0,
                Tr = 0;
            var Nr = 0,
                Cr = 0,
                kr = 0,
                Lr = 0,
                Ar = 0,
                Or = 0,
                Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0,
                Wr = 0;
            var Xr = 0,
                Vr = 0,
                $r = 0,
                Jr = 0,
                Kr = 0,
                Qr = 0,
                Gr = 0,
                Yr = 0,
                Zr = 0,
                ei = 0,
                ti = 0,
                ni = 0,
                ri = 0,
                ii = 0,
                si = 0,
                oi = 0,
                ui = 0,
                ai = 0,
                fi = 0,
                li = 0;
            var ci = 0,
                hi = 0,
                pi = 0,
                di = 0,
                vi = 0,
                mi = 0,
                gi = 0,
                yi = 0,
                bi = 0,
                wi = 0,
                Ei = 0,
                Si = 0,
                xi = 0,
                Ti = 0,
                Ni = 0,
                Ci = 0,
                ki = 0,
                Li = 0,
                Ai = 0,
                Oi = 0;
            var Mi = 0,
                _i = 0,
                Di = 0,
                Pi = 0,
                Hi = 0,
                Bi = 0,
                ji = 0,
                Fi = 0,
                Ii = 0,
                qi = 0,
                Ri = 0,
                Ui = 0,
                zi = 0,
                Wi = 0,
                Xi = 0,
                Vi = 0,
                $i = 0,
                Ji = 0,
                Ki = 0,
                Qi = 0;
            var Gi = 0,
                Yi = 0,
                Zi = 0,
                es = 0,
                ts = 0,
                ns = 0,
                rs = 0,
                is = 0,
                ss = 0,
                os = 0,
                us = 0;
            us = c;
            c = c + 32 | 0;
            ss = us;
            l = e + 2060 | 0;
            s[l >> 2] = 0;
            h = e + 2056 | 0;
            s[h >> 2] = 0;
            mn = e + 2052 | 0;
            s[mn >> 2] = 0;
            Tr = ss + 28 | 0;
            s[Tr >> 2] = -1640531527;
            Hr = ss + 24 | 0;
            s[Hr >> 2] = -1640531527;
            Vr = ss + 20 | 0;
            s[Vr >> 2] = -1640531527;
            ri = ss + 16 | 0;
            s[ri >> 2] = -1640531527;
            di = ss + 12 | 0;
            s[di >> 2] = -1640531527;
            Ni = ss + 8 | 0;
            s[Ni >> 2] = -1640531527;
            Bi = ss + 4 | 0;
            s[Bi >> 2] = -1640531527;
            s[ss >> 2] = -1640531527;
            Yi = 0;
            while (1) {
                Ki = 0;
                while (1) {
                    p = Ki | 1;
                    T = ss + (p << 2) | 0;
                    H = s[T >> 2] | 0;
                    V = 8240 + Ki | 0;
                    rt = r[V >> 0] | 0;
                    dt = rt & 255;
                    Nt = H << dt;
                    Bt = ss + (Ki << 2) | 0;
                    $t = s[Bt >> 2] | 0;
                    sn = Nt ^ $t;
                    s[Bt >> 2] = sn;
                    gn = Ki + 3 | 0;
                    Ln = gn & 7;
                    In = ss + (Ln << 2) | 0;
                    Qn = s[In >> 2] | 0;
                    ur = sn + Qn | 0;
                    s[In >> 2] = ur;
                    yr = Ki + 2 | 0;
                    wr = yr & 6;
                    Er = ss + (wr << 2) | 0;
                    Sr = s[Er >> 2] | 0;
                    xr = s[T >> 2] | 0;
                    Nr = xr + Sr | 0;
                    s[T >> 2] = Nr;
                    Cr = s[Er >> 2] | 0;
                    kr = 8240 + p | 0;
                    Lr = r[kr >> 0] | 0;
                    Ar = Lr & 255;
                    Or = Cr >>> Ar;
                    Mr = Or ^ Nr;
                    s[T >> 2] = Mr;
                    _r = Ki + 4 | 0;
                    Dr = _r & 6;
                    Pr = ss + (Dr << 2) | 0;
                    Br = s[Pr >> 2] | 0;
                    jr = Mr + Br | 0;
                    s[Pr >> 2] = jr;
                    Fr = s[In >> 2] | 0;
                    Ir = s[Er >> 2] | 0;
                    qr = Ir + Fr | 0;
                    s[Er >> 2] = qr;
                    Rr = (yr | 0) < 8;
                    if (Rr) {
                        Ki = yr
                    } else {
                        break
                    }
                }
                Ur = Yi + 1 | 0;
                Ji = (Ur | 0) == 4;
                if (Ji) {
                    break
                } else {
                    Yi = Ur
                }
            }
            zr = (n | 0) > 1024;
            i = zr ? 1024 : n;
            Wr = i >> 2;
            Xr = (Wr | 0) > 0;
            if (Xr) {
                es = 0;
                while (1) {
                    $r = es << 2;
                    Jr = $r | 3;
                    Kr = t + Jr | 0;
                    Qr = r[Kr >> 0] | 0;
                    Gr = Qr & 255;
                    Yr = Gr << 24;
                    Zr = $r | 2;
                    ei = t + Zr | 0;
                    ti = r[ei >> 0] | 0;
                    ni = ti & 255;
                    ii = ni << 16;
                    si = ii | Yr;
                    oi = $r | 1;
                    ui = t + oi | 0;
                    ai = r[ui >> 0] | 0;
                    fi = ai & 255;
                    li = fi << 8;
                    ci = si | li;
                    hi = t + $r | 0;
                    pi = r[hi >> 0] | 0;
                    vi = pi & 255;
                    mi = ci | vi;
                    gi = (e + (es << 2) | 0) + 4 | 0;
                    s[gi >> 2] = mi;
                    yi = es + 1 | 0;
                    $i = (yi | 0) == (Wr | 0);
                    if ($i) {
                        Zi = Wr;
                        break
                    } else {
                        es = yi
                    }
                }
            } else {
                Zi = 0
            }
            bi = i & 3;
            wi = (bi | 0) == 0;
            if (wi) {
                ts = Zi
            } else {
                Ei = Zi << 2;
                Si = t + Ei | 0;
                xi = r[Si >> 0] | 0;
                Ti = xi & 255;
                Ci = (e + (Zi << 2) | 0) + 4 | 0;
                s[Ci >> 2] = Ti;
                ki = bi >>> 0 > 1;
                if (ki) {
                    Hi = Ti;
                    is = 1;
                    while (1) {
                        Li = is | Ei;
                        Ai = t + Li | 0;
                        Oi = r[Ai >> 0] | 0;
                        Mi = Oi & 255;
                        _i = is << 3;
                        Di = Mi << _i;
                        Pi = Di + Hi | 0;
                        s[Ci >> 2] = Pi;
                        ji = is + 1 | 0;
                        Fi = (ji | 0) < (bi | 0);
                        if (Fi) {
                            Hi = Pi;
                            is = ji
                        } else {
                            break
                        }
                    }
                }
                Ii = Zi + 1 | 0;
                ts = Ii
            }
            qi = (e + (ts << 2) | 0) + 4 | 0;
            Ri = 256 - ts | 0;
            Ui = Ri << 2;
            eo(qi | 0, 0, Ui | 0) | 0;
            ns = 0;
            while (1) {
                zi = (e + (ns << 2) | 0) + 4 | 0;
                Wi = s[zi >> 2] | 0;
                Xi = s[ss >> 2] | 0;
                Vi = Xi + Wi | 0;
                s[ss >> 2] = Vi;
                d = ns | 1;
                v = (e + (d << 2) | 0) + 4 | 0;
                m = s[v >> 2] | 0;
                g = s[Bi >> 2] | 0;
                y = g + m | 0;
                s[Bi >> 2] = y;
                b = ns | 2;
                w = (e + (b << 2) | 0) + 4 | 0;
                E = s[w >> 2] | 0;
                S = s[Ni >> 2] | 0;
                x = S + E | 0;
                s[Ni >> 2] = x;
                N = ns | 3;
                C = (e + (N << 2) | 0) + 4 | 0;
                k = s[C >> 2] | 0;
                L = s[di >> 2] | 0;
                A = L + k | 0;
                s[di >> 2] = A;
                O = ns | 4;
                M = (e + (O << 2) | 0) + 4 | 0;
                _ = s[M >> 2] | 0;
                D = s[ri >> 2] | 0;
                P = D + _ | 0;
                s[ri >> 2] = P;
                B = ns | 5;
                j = (e + (B << 2) | 0) + 4 | 0;
                F = s[j >> 2] | 0;
                I = s[Vr >> 2] | 0;
                q = I + F | 0;
                s[Vr >> 2] = q;
                R = ns | 6;
                U = (e + (R << 2) | 0) + 4 | 0;
                z = s[U >> 2] | 0;
                W = s[Hr >> 2] | 0;
                X = W + z | 0;
                s[Hr >> 2] = X;
                $ = ns | 7;
                J = (e + ($ << 2) | 0) + 4 | 0;
                K = s[J >> 2] | 0;
                Q = s[Tr >> 2] | 0;
                G = Q + K | 0;
                s[Tr >> 2] = G;
                at = Vi;
                Qi = 0;
                while (1) {
                    Y = Qi | 1;
                    Z = ss + (Y << 2) | 0;
                    et = s[Z >> 2] | 0;
                    tt = 8240 + Qi | 0;
                    nt = r[tt >> 0] | 0;
                    it = nt & 255;
                    st = et << it;
                    ot = ss + (Qi << 2) | 0;
                    ut = st ^ at;
                    s[ot >> 2] = ut;
                    ft = Qi + 3 | 0;
                    lt = ft & 7;
                    ct = ss + (lt << 2) | 0;
                    ht = s[ct >> 2] | 0;
                    pt = ut + ht | 0;
                    s[ct >> 2] = pt;
                    vt = Qi + 2 | 0;
                    mt = vt & 6;
                    gt = ss + (mt << 2) | 0;
                    yt = s[gt >> 2] | 0;
                    bt = s[Z >> 2] | 0;
                    wt = bt + yt | 0;
                    s[Z >> 2] = wt;
                    Et = s[gt >> 2] | 0;
                    St = 8240 + Y | 0;
                    xt = r[St >> 0] | 0;
                    Tt = xt & 255;
                    Ct = Et >>> Tt;
                    kt = Ct ^ wt;
                    s[Z >> 2] = kt;
                    Lt = Qi + 4 | 0;
                    At = Lt & 6;
                    Ot = ss + (At << 2) | 0;
                    Mt = s[Ot >> 2] | 0;
                    _t = kt + Mt | 0;
                    s[Ot >> 2] = _t;
                    Dt = s[ct >> 2] | 0;
                    Pt = s[gt >> 2] | 0;
                    Ht = Pt + Dt | 0;
                    s[gt >> 2] = Ht;
                    jt = (vt | 0) < 8;
                    if (!jt) {
                        break
                    }
                    o = ss + (vt << 2) | 0;
                    a = s[o >> 2] | 0;
                    at = a;
                    Qi = vt
                }
                Ft = (e + (ns << 2) | 0) + 1028 | 0;
                s[Ft + 0 >> 2] = s[ss + 0 >> 2] | 0;
                s[Ft + 4 >> 2] = s[ss + 4 >> 2] | 0;
                s[Ft + 8 >> 2] = s[ss + 8 >> 2] | 0;
                s[Ft + 12 >> 2] = s[ss + 12 >> 2] | 0;
                s[Ft + 16 >> 2] = s[ss + 16 >> 2] | 0;
                s[Ft + 20 >> 2] = s[ss + 20 >> 2] | 0;
                s[Ft + 24 >> 2] = s[ss + 24 >> 2] | 0;
                s[Ft + 28 >> 2] = s[ss + 28 >> 2] | 0;
                It = ns + 8 | 0;
                qt = (It | 0) < 256;
                if (qt) {
                    ns = It
                } else {
                    rs = 0;
                    break
                }
            }
            while (1) {
                Rt = (e + (rs << 2) | 0) + 1028 | 0;
                Ut = s[Rt >> 2] | 0;
                zt = s[ss >> 2] | 0;
                Wt = zt + Ut | 0;
                s[ss >> 2] = Wt;
                Xt = rs | 1;
                Vt = (e + (Xt << 2) | 0) + 1028 | 0;
                Jt = s[Vt >> 2] | 0;
                Kt = s[Bi >> 2] | 0;
                Qt = Kt + Jt | 0;
                s[Bi >> 2] = Qt;
                Gt = rs | 2;
                Yt = (e + (Gt << 2) | 0) + 1028 | 0;
                Zt = s[Yt >> 2] | 0;
                en = s[Ni >> 2] | 0;
                tn = en + Zt | 0;
                s[Ni >> 2] = tn;
                nn = rs | 3;
                rn = (e + (nn << 2) | 0) + 1028 | 0;
                on = s[rn >> 2] | 0;
                un = s[di >> 2] | 0;
                an = un + on | 0;
                s[di >> 2] = an;
                fn = rs | 4;
                ln = (e + (fn << 2) | 0) + 1028 | 0;
                cn = s[ln >> 2] | 0;
                hn = s[ri >> 2] | 0;
                pn = hn + cn | 0;
                s[ri >> 2] = pn;
                dn = rs | 5;
                vn = (e + (dn << 2) | 0) + 1028 | 0;
                yn = s[vn >> 2] | 0;
                bn = s[Vr >> 2] | 0;
                wn = bn + yn | 0;
                s[Vr >> 2] = wn;
                En = rs | 6;
                Sn = (e + (En << 2) | 0) + 1028 | 0;
                xn = s[Sn >> 2] | 0;
                Tn = s[Hr >> 2] | 0;
                Nn = Tn + xn | 0;
                s[Hr >> 2] = Nn;
                Cn = rs | 7;
                kn = (e + (Cn << 2) | 0) + 1028 | 0;
                An = s[kn >> 2] | 0;
                On = s[Tr >> 2] | 0;
                Mn = On + An | 0;
                s[Tr >> 2] = Mn;
                Un = Wt;
                Gi = 0;
                while (1) {
                    _n = Gi | 1;
                    Dn = ss + (_n << 2) | 0;
                    Pn = s[Dn >> 2] | 0;
                    Hn = 8240 + Gi | 0;
                    Bn = r[Hn >> 0] | 0;
                    jn = Bn & 255;
                    Fn = Pn << jn;
                    qn = ss + (Gi << 2) | 0;
                    Rn = Fn ^ Un;
                    s[qn >> 2] = Rn;
                    zn = Gi + 3 | 0;
                    Wn = zn & 7;
                    Xn = ss + (Wn << 2) | 0;
                    Vn = s[Xn >> 2] | 0;
                    $n = Rn + Vn | 0;
                    s[Xn >> 2] = $n;
                    Jn = Gi + 2 | 0;
                    Kn = Jn & 6;
                    Gn = ss + (Kn << 2) | 0;
                    Yn = s[Gn >> 2] | 0;
                    Zn = s[Dn >> 2] | 0;
                    er = Zn + Yn | 0;
                    s[Dn >> 2] = er;
                    tr = s[Gn >> 2] | 0;
                    nr = 8240 + _n | 0;
                    rr = r[nr >> 0] | 0;
                    ir = rr & 255;
                    sr = tr >>> ir;
                    or = sr ^ er;
                    s[Dn >> 2] = or;
                    ar = Gi + 4 | 0;
                    fr = ar & 6;
                    lr = ss + (fr << 2) | 0;
                    cr = s[lr >> 2] | 0;
                    hr = or + cr | 0;
                    s[lr >> 2] = hr;
                    pr = s[Xn >> 2] | 0;
                    dr = s[Gn >> 2] | 0;
                    vr = dr + pr | 0;
                    s[Gn >> 2] = vr;
                    mr = (Jn | 0) < 8;
                    if (!mr) {
                        break
                    }
                    u = ss + (Jn << 2) | 0;
                    f = s[u >> 2] | 0;
                    Un = f;
                    Gi = Jn
                }
                s[Rt + 0 >> 2] = s[ss + 0 >> 2] | 0;
                s[Rt + 4 >> 2] = s[ss + 4 >> 2] | 0;
                s[Rt + 8 >> 2] = s[ss + 8 >> 2] | 0;
                s[Rt + 12 >> 2] = s[ss + 12 >> 2] | 0;
                s[Rt + 16 >> 2] = s[ss + 16 >> 2] | 0;
                s[Rt + 20 >> 2] = s[ss + 20 >> 2] | 0;
                s[Rt + 24 >> 2] = s[ss + 24 >> 2] | 0;
                s[Rt + 28 >> 2] = s[ss + 28 >> 2] | 0;
                gr = rs + 8 | 0;
                br = (gr | 0) < 256;
                if (br) {
                    rs = gr
                } else {
                    break
                }
            }
            ys(e);
            c = us;
            return
        }

        function ys(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0;
            var x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0;
            var z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0;
            var ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0;
            var At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0;
            var Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0;
            var mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0;
            var Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0;
            var nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0,
                ur = 0,
                ar = 0,
                fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0;
            var Sr = 0,
                xr = 0,
                Tr = 0,
                Nr = 0,
                Cr = 0,
                kr = 0;
            kr = c;
            t = e + 2052 | 0;
            n = s[t >> 2] | 0;
            It = e + 2056 | 0;
            Qt = s[It >> 2] | 0;
            an = e + 2060 | 0;
            bn = s[an >> 2] | 0;
            On = bn + 1 | 0;
            s[an >> 2] = On;
            Rn = On + Qt | 0;
            wr = n;
            Sr = Rn;
            Tr = 0;
            while (1) {
                Yn = (e + (Tr << 2) | 0) + 1028 | 0;
                fr = s[Yn >> 2] | 0;
                r = wr << 13;
                m = r ^ wr;
                k = Tr + 128 | 0;
                F = (e + (k << 2) | 0) + 1028 | 0;
                K = s[F >> 2] | 0;
                ot = K + m | 0;
                gt = fr >>> 2;
                Lt = gt & 255;
                jt = (e + (Lt << 2) | 0) + 1028 | 0;
                Ft = s[jt >> 2] | 0;
                qt = ot + Sr | 0;
                Rt = qt + Ft | 0;
                s[Yn >> 2] = Rt;
                Ut = Rt >>> 10;
                zt = Ut & 255;
                Wt = (e + (zt << 2) | 0) + 1028 | 0;
                Xt = s[Wt >> 2] | 0;
                Vt = Xt + fr | 0;
                $t = (e + (Tr << 2) | 0) + 4 | 0;
                s[$t >> 2] = Vt;
                Jt = Tr | 1;
                Kt = (e + (Jt << 2) | 0) + 1028 | 0;
                Gt = s[Kt >> 2] | 0;
                Yt = ot >>> 6;
                Zt = Yt ^ ot;
                en = Tr + 129 | 0;
                tn = (e + (en << 2) | 0) + 1028 | 0;
                nn = s[tn >> 2] | 0;
                rn = nn + Zt | 0;
                sn = Gt >>> 2;
                on = sn & 255;
                un = (e + (on << 2) | 0) + 1028 | 0;
                fn = s[un >> 2] | 0;
                ln = rn + Vt | 0;
                cn = ln + fn | 0;
                s[Kt >> 2] = cn;
                hn = cn >>> 10;
                pn = hn & 255;
                dn = (e + (pn << 2) | 0) + 1028 | 0;
                vn = s[dn >> 2] | 0;
                mn = vn + Gt | 0;
                gn = (e + (Jt << 2) | 0) + 4 | 0;
                s[gn >> 2] = mn;
                yn = Tr | 2;
                wn = (e + (yn << 2) | 0) + 1028 | 0;
                En = s[wn >> 2] | 0;
                Sn = rn << 2;
                xn = Sn ^ rn;
                Tn = Tr + 130 | 0;
                Nn = (e + (Tn << 2) | 0) + 1028 | 0;
                Cn = s[Nn >> 2] | 0;
                kn = Cn + xn | 0;
                Ln = En >>> 2;
                An = Ln & 255;
                Mn = (e + (An << 2) | 0) + 1028 | 0;
                _n = s[Mn >> 2] | 0;
                Dn = kn + mn | 0;
                Pn = Dn + _n | 0;
                s[wn >> 2] = Pn;
                Hn = Pn >>> 10;
                Bn = Hn & 255;
                jn = (e + (Bn << 2) | 0) + 1028 | 0;
                Fn = s[jn >> 2] | 0;
                In = Fn + En | 0;
                qn = (e + (yn << 2) | 0) + 4 | 0;
                s[qn >> 2] = In;
                Un = Tr | 3;
                zn = (e + (Un << 2) | 0) + 1028 | 0;
                Wn = s[zn >> 2] | 0;
                Xn = kn >>> 16;
                Vn = Xn ^ kn;
                $n = Tr + 131 | 0;
                Jn = (e + ($n << 2) | 0) + 1028 | 0;
                Kn = s[Jn >> 2] | 0;
                Qn = Kn + Vn | 0;
                Gn = Wn >>> 2;
                Zn = Gn & 255;
                er = (e + (Zn << 2) | 0) + 1028 | 0;
                tr = s[er >> 2] | 0;
                nr = Qn + In | 0;
                rr = nr + tr | 0;
                s[zn >> 2] = rr;
                ir = rr >>> 10;
                sr = ir & 255;
                or = (e + (sr << 2) | 0) + 1028 | 0;
                ur = s[or >> 2] | 0;
                ar = ur + Wn | 0;
                lr = (e + (Un << 2) | 0) + 4 | 0;
                s[lr >> 2] = ar;
                cr = Tr + 4 | 0;
                hr = (cr | 0) < 128;
                if (hr) {
                    wr = Qn;
                    Sr = ar;
                    Tr = cr
                } else {
                    Er = Qn;
                    xr = ar;
                    Nr = 128;
                    break
                }
            }
            while (1) {
                pr = (e + (Nr << 2) | 0) + 1028 | 0;
                dr = s[pr >> 2] | 0;
                vr = Er << 13;
                mr = vr ^ Er;
                gr = Nr + -128 | 0;
                yr = (e + (gr << 2) | 0) + 1028 | 0;
                br = s[yr >> 2] | 0;
                i = br + mr | 0;
                o = dr >>> 2;
                u = o & 255;
                a = (e + (u << 2) | 0) + 1028 | 0;
                f = s[a >> 2] | 0;
                l = i + xr | 0;
                h = l + f | 0;
                s[pr >> 2] = h;
                p = h >>> 10;
                d = p & 255;
                v = (e + (d << 2) | 0) + 1028 | 0;
                g = s[v >> 2] | 0;
                y = g + dr | 0;
                b = (e + (Nr << 2) | 0) + 4 | 0;
                s[b >> 2] = y;
                w = Nr | 1;
                E = (e + (w << 2) | 0) + 1028 | 0;
                S = s[E >> 2] | 0;
                x = i >>> 6;
                T = x ^ i;
                N = Nr + -127 | 0;
                C = (e + (N << 2) | 0) + 1028 | 0;
                L = s[C >> 2] | 0;
                A = L + T | 0;
                O = S >>> 2;
                M = O & 255;
                _ = (e + (M << 2) | 0) + 1028 | 0;
                D = s[_ >> 2] | 0;
                P = A + y | 0;
                H = P + D | 0;
                s[E >> 2] = H;
                B = H >>> 10;
                j = B & 255;
                I = (e + (j << 2) | 0) + 1028 | 0;
                q = s[I >> 2] | 0;
                R = q + S | 0;
                U = (e + (w << 2) | 0) + 4 | 0;
                s[U >> 2] = R;
                z = Nr | 2;
                W = (e + (z << 2) | 0) + 1028 | 0;
                X = s[W >> 2] | 0;
                V = A << 2;
                $ = V ^ A;
                J = Nr + -126 | 0;
                Q = (e + (J << 2) | 0) + 1028 | 0;
                G = s[Q >> 2] | 0;
                Y = G + $ | 0;
                Z = X >>> 2;
                et = Z & 255;
                tt = (e + (et << 2) | 0) + 1028 | 0;
                nt = s[tt >> 2] | 0;
                rt = Y + R | 0;
                it = rt + nt | 0;
                s[W >> 2] = it;
                st = it >>> 10;
                ut = st & 255;
                at = (e + (ut << 2) | 0) + 1028 | 0;
                ft = s[at >> 2] | 0;
                lt = ft + X | 0;
                ct = (e + (z << 2) | 0) + 4 | 0;
                s[ct >> 2] = lt;
                ht = Nr | 3;
                pt = (e + (ht << 2) | 0) + 1028 | 0;
                dt = s[pt >> 2] | 0;
                vt = Y >>> 16;
                mt = vt ^ Y;
                yt = Nr + -125 | 0;
                bt = (e + (yt << 2) | 0) + 1028 | 0;
                wt = s[bt >> 2] | 0;
                Et = wt + mt | 0;
                St = dt >>> 2;
                xt = St & 255;
                Tt = (e + (xt << 2) | 0) + 1028 | 0;
                Nt = s[Tt >> 2] | 0;
                Ct = Et + lt | 0;
                kt = Ct + Nt | 0;
                s[pt >> 2] = kt;
                At = kt >>> 10;
                Ot = At & 255;
                Mt = (e + (Ot << 2) | 0) + 1028 | 0;
                _t = s[Mt >> 2] | 0;
                Dt = _t + dt | 0;
                Pt = (e + (ht << 2) | 0) + 4 | 0;
                s[Pt >> 2] = Dt;
                Ht = Nr + 4 | 0;
                Bt = (Ht | 0) < 256;
                if (Bt) {
                    Er = Et;
                    xr = Dt;
                    Nr = Ht
                } else {
                    break
                }
            }
            s[It >> 2] = Dt;
            s[t >> 2] = Et;
            s[e >> 2] = 256;
            c = kr;
            return
        }

        function bs(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0;
            y = c;
            i = t + -1 | 0;
            n = s[e >> 2] | 0;
            o = n;
            while (1) {
                a = (o | 0) == 0;
                if (a) {
                    ys(e);
                    r = s[e >> 2] | 0;
                    l = r
                } else {
                    l = o
                }
                f = l + -1 | 0;
                s[e >> 2] = f;
                h = (e + (f << 2) | 0) + 4 | 0;
                p = s[h >> 2] | 0;
                d = (p >>> 0) % (t >>> 0) & -1;
                v = p - d | 0;
                m = i + v | 0;
                u = m >>> 0 < v >>> 0;
                if (u) {
                    o = f
                } else {
                    break
                }
            }
            c = y;
            return d | 0
        }

        function ws(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0;
            y = c;
            i = Es(e) | 0;
            o = (i | 0) == -1;
            if (!o) {
                a = Es(t) | 0;
                f = (a | 0) == -1;
                if (!f) {
                    l = 8248 + i | 0;
                    h = r[l >> 0] | 0;
                    p = (h & 255) > 207;
                    if (!p) {
                        v = a << 16;
                        m = v | i;
                        u = m;
                        n = u;
                        c = y;
                        return n | 0
                    }
                }
            }
            d = zt() | 0;
            s[d >> 2] = 22;
            n = -1;
            c = y;
            return n | 0
        }

        function Es(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                i = 0,
                s = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0;
            var x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0;
            var z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0;
            var ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0;
            var At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0;
            Xt = c;
            g = r[e >> 0] | 0;
            y = g << 24 >> 24 == 0;
            e: do {
                if (y) {
                    Rt = 8248;
                    while (1) {
                        A = r[Rt >> 0] | 0;
                        q = A << 24 >> 24 == 0;
                        if (q) {
                            Ut = Rt;
                            break e
                        }
                        G = no(Rt | 0) | 0;
                        at = G + 1 | 0;
                        bt = Rt + at | 0;
                        Ot = r[bt >> 0] | 0;
                        Pt = Ot << 24 >> 24 == 0;
                        do {
                            if (Pt) {
                                h = G + 2 | 0;
                                Ht = Rt + h | 0;
                                b = r[Ht >> 0] | 0;
                                w = (b & 255) > 128;
                                if (w) {
                                    m = G + 3 | 0;
                                    k = Rt + m | 0;
                                    It = k;
                                    break
                                } else {
                                    E = b & 255;
                                    S = 128 - E | 0;
                                    x = S >>> 2;
                                    T = x * 5 | 0;
                                    N = G + 3 | 0;
                                    d = N + T | 0;
                                    C = Rt + d | 0;
                                    It = C;
                                    break
                                }
                            } else {
                                It = bt
                            }
                        } while (0);
                        L = r[It >> 0] | 0;
                        O = L << 24 >> 24 == 0;
                        if (O) {
                            t = -1;
                            break
                        } else {
                            Rt = It
                        }
                    }
                    c = Xt;
                    return t | 0
                } else {
                    qt = 8248;
                    while (1) {
                        i = qt;
                        s = e;
                        D = g;
                        while (1) {
                            M = r[i >> 0] | 0;
                            _ = M << 24 >> 24 == 0;
                            if (_) {
                                n = i;
                                a = D;
                                Wt = 16;
                                break
                            }
                            P = D << 24 >> 24 == 0;
                            t: do {
                                if (P) {
                                    o = s;
                                    J = 0
                                } else {
                                    H = D & 255;
                                    u = s;
                                    U = H;
                                    Dt = D;
                                    while (1) {
                                        R = U | 32;
                                        z = R + -97 | 0;
                                        W = z >>> 0 > 26;
                                        X = U + -48 | 0;
                                        V = X >>> 0 > 10;
                                        Bt = W & V;
                                        j = u + 1 | 0;
                                        if (!Bt) {
                                            o = u;
                                            J = Dt;
                                            break t
                                        }
                                        B = r[j >> 0] | 0;
                                        F = B & 255;
                                        I = B << 24 >> 24 == 0;
                                        if (I) {
                                            o = j;
                                            J = 0;
                                            break
                                        } else {
                                            u = j;
                                            U = F;
                                            Dt = B
                                        }
                                    }
                                }
                            } while (0);
                            $ = J & 255;
                            K = $ | 32;
                            Q = M & 255;
                            Y = (K | 0) == (Q | 0);
                            if (!Y) {
                                break
                            }
                            Z = o + 1 | 0;
                            et = i + 1 | 0;
                            tt = r[Z >> 0] | 0;
                            nt = tt << 24 >> 24 == 0;
                            if (nt) {
                                n = et;
                                a = 0;
                                Wt = 16;
                                break
                            } else {
                                i = et;
                                s = Z;
                                D = tt
                            }
                        }
                        if ((Wt | 0) == 16) {
                            Wt = 0;
                            rt = r[n >> 0] | 0;
                            it = a << 24 >> 24 == rt << 24 >> 24;
                            if (it) {
                                break
                            }
                        }
                        dt = no(qt | 0) | 0;
                        vt = dt + 1 | 0;
                        mt = qt + vt | 0;
                        gt = r[mt >> 0] | 0;
                        yt = gt << 24 >> 24 == 0;
                        do {
                            if (yt) {
                                l = dt + 2 | 0;
                                wt = qt + l | 0;
                                Et = r[wt >> 0] | 0;
                                St = (Et & 255) > 128;
                                if (St) {
                                    v = dt + 3 | 0;
                                    xt = qt + v | 0;
                                    Ft = xt;
                                    break
                                } else {
                                    Ct = Et & 255;
                                    kt = 128 - Ct | 0;
                                    Lt = kt >>> 2;
                                    At = Lt * 5 | 0;
                                    Mt = dt + 3 | 0;
                                    p = Mt + At | 0;
                                    _t = qt + p | 0;
                                    Ft = _t;
                                    break
                                }
                            } else {
                                Ft = mt
                            }
                        } while (0);
                        Tt = r[Ft >> 0] | 0;
                        Nt = Tt << 24 >> 24 == 0;
                        if (Nt) {
                            t = -1;
                            Wt = 25;
                            break
                        } else {
                            qt = Ft
                        }
                    }
                    if ((Wt | 0) == 25) {
                        c = Xt;
                        return t | 0
                    }
                    f = r[qt >> 0] | 0;
                    jt = f << 24 >> 24 == 0;
                    if (jt) {
                        Ut = qt
                    } else {
                        zt = qt;
                        while (1) {
                            st = no(zt | 0) | 0;
                            ot = st + 1 | 0;
                            ut = zt + ot | 0;
                            ft = r[ut >> 0] | 0;
                            lt = ft << 24 >> 24 == 0;
                            if (lt) {
                                Ut = ut;
                                break
                            } else {
                                zt = ut
                            }
                        }
                    }
                }
            } while (0);
            ct = Ut + 1 | 0;
            ht = ct;
            pt = ht - 8248 | 0;
            t = pt;
            c = Xt;
            return t | 0
        }

        function Ss(e) {
            e = e | 0;
            var t = 0,
                n = 0;
            n = c;
            c = n;
            return 0
        }

        function xs(e, t, n, o, u) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            o = o | 0;
            u = u | 0;
            var a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0;
            var A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0;
            var K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0;
            var vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0;
            var Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0;
            var nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0;
            var xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0;
            var zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0,
                ur = 0,
                ar = 0;
            var fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0,
                Tr = 0,
                Nr = 0,
                Cr = 0,
                kr = 0,
                Lr = 0;
            var Ar = 0,
                Or = 0,
                Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0,
                Wr = 0,
                Xr = 0,
                Vr = 0,
                $r = 0,
                Jr = 0;
            var Kr = 0,
                Qr = 0,
                Gr = 0,
                Yr = 0,
                Zr = 0,
                ei = 0,
                ti = 0,
                ni = 0,
                ri = 0,
                ii = 0,
                si = 0,
                oi = 0,
                ui = 0,
                ai = 0,
                fi = 0,
                li = 0,
                ci = 0,
                hi = 0,
                pi = 0,
                di = 0;
            var vi = 0,
                mi = 0,
                gi = 0,
                yi = 0,
                bi = 0,
                wi = 0,
                Ei = 0,
                Si = 0,
                xi = 0,
                Ti = 0,
                Ni = 0,
                Ci = 0,
                ki = 0,
                Li = 0,
                Ai = 0,
                Oi = 0,
                Mi = 0,
                _i = 0,
                Di = 0,
                Pi = 0;
            var Hi = 0,
                Bi = 0,
                ji = 0,
                Fi = 0,
                Ii = 0,
                qi = 0,
                Ri = 0,
                Ui = 0,
                zi = 0,
                Wi = 0,
                Xi = 0,
                Vi = 0,
                $i = 0,
                Ji = 0,
                Ki = 0,
                Qi = 0,
                Gi = 0,
                Yi = 0,
                Zi = 0,
                es = 0;
            var ts = 0,
                ns = 0,
                rs = 0,
                is = 0,
                ss = 0,
                os = 0,
                us = 0,
                as = 0,
                fs = 0,
                ls = 0,
                cs = 0,
                hs = 0,
                ps = 0,
                ds = 0,
                vs = 0,
                ms = 0,
                gs = 0,
                ys = 0,
                bs = 0,
                ws = 0;
            var Es = 0,
                Ss = 0,
                Ns = 0,
                Cs = 0,
                ks = 0,
                Ls = 0,
                As = 0,
                Os = 0,
                Ms = 0,
                _s = 0,
                Ds = 0,
                Ps = 0,
                Hs = 0,
                Bs = 0,
                js = 0,
                Fs = 0,
                qs = 0,
                Rs = 0,
                Us = 0,
                zs = 0;
            var Ws = 0,
                Xs = 0,
                Vs = 0,
                $s = 0,
                Js = 0,
                Ks = 0,
                Qs = 0,
                Gs = 0,
                Ys = 0,
                Zs = 0,
                eo = 0,
                to = 0,
                no = 0,
                ro = 0,
                io = 0,
                so = 0,
                uo = 0,
                ao = 0,
                fo = 0,
                lo = 0;
            var co = 0,
                ho = 0,
                po = 0,
                vo = 0,
                mo = 0,
                go = 0,
                yo = 0,
                bo = 0,
                wo = 0,
                Eo = 0,
                So = 0,
                xo = 0,
                To = 0,
                No = 0,
                Co = 0,
                ko = 0,
                Lo = 0,
                Ao = 0,
                Oo = 0,
                Mo = 0;
            var _o = 0,
                Do = 0,
                Po = 0,
                Ho = 0,
                Bo = 0,
                jo = 0,
                Fo = 0,
                Io = 0,
                qo = 0,
                Ro = 0,
                Uo = 0,
                zo = 0,
                Wo = 0,
                Xo = 0,
                Vo = 0,
                $o = 0,
                Jo = 0,
                Ko = 0,
                Qo = 0,
                Go = 0;
            var Yo = 0,
                Zo = 0,
                eu = 0,
                tu = 0,
                nu = 0,
                ru = 0,
                iu = 0,
                su = 0,
                ou = 0,
                uu = 0,
                au = 0,
                fu = 0,
                lu = 0,
                cu = 0,
                hu = 0,
                pu = 0,
                du = 0,
                vu = 0,
                mu = 0,
                gu = 0;
            var yu = 0,
                bu = 0,
                wu = 0,
                Eu = 0,
                Su = 0,
                xu = 0,
                Tu = 0,
                Nu = 0,
                Cu = 0,
                ku = 0,
                Lu = 0,
                Au = 0,
                Ou = 0,
                Mu = 0,
                _u = 0,
                Du = 0,
                Pu = 0,
                Hu = 0,
                Bu = 0,
                ju = 0;
            var Fu = 0,
                Iu = 0,
                qu = 0,
                Ru = 0,
                Uu = 0,
                zu = 0,
                Wu = 0,
                Xu = 0,
                Vu = 0,
                $u = 0,
                Ju = 0,
                Ku = 0,
                Qu = 0,
                Gu = 0,
                Yu = 0,
                Zu = 0,
                ea = 0,
                ta = 0,
                na = 0,
                ra = 0;
            var ia = 0,
                sa = 0,
                oa = 0,
                ua = 0,
                aa = 0,
                fa = 0,
                la = 0,
                ca = 0,
                ha = 0,
                pa = 0,
                da = 0,
                va = 0,
                ma = 0,
                ga = 0,
                ya = 0,
                ba = 0,
                wa = 0,
                Ea = 0,
                Sa = 0,
                xa = 0;
            var Ta = 0,
                Na = 0,
                Ca = 0,
                ka = 0,
                La = 0,
                Aa = 0,
                Oa = 0,
                Ma = 0,
                _a = 0,
                Da = 0,
                Pa = 0,
                Ha = 0,
                Ba = 0,
                ja = 0,
                Fa = 0,
                Ia = 0,
                qa = 0,
                Ra = 0,
                Ua = 0,
                za = 0;
            var Wa = 0,
                Xa = 0,
                Va = 0,
                $a = 0,
                Ja = 0,
                Ka = 0,
                Qa = 0,
                Ga = 0,
                Ya = 0,
                Za = 0,
                ef = 0,
                tf = 0,
                nf = 0,
                rf = 0,
                sf = 0,
                of = 0,
                uf = 0,
                af = 0,
                ff = 0,
                lf = 0;
            var cf = 0,
                hf = 0,
                pf = 0,
                df = 0,
                vf = 0,
                mf = 0,
                gf = 0,
                yf = 0;
            yf = c;
            c = c + 32 | 0;
            lf = yf;
            hf = yf + 16 | 0;
            A = yf + 12 | 0;
            O = yf + 8 | 0;
            cf = yf + 20 | 0;
            Hn = e;
            Fi = Hn & 65535;
            Vo = Hn >>> 16;
            b = Vo + 1 | 0;
            k = Fi + 1 | 0;
            du = lf;
            Nu = du;
            s[Nu >> 2] = 0;
            Bu = du + 4 | 0;
            $u = Bu;
            s[$u >> 2] = 0;
            ia = 8248 + Vo | 0;
            M = r[ia >> 0] | 0;
            U = 8248 + Fi | 0;
            Z = r[U >> 0] | 0;
            lt = (t | 0) == (0 | 0);
            if (lt) {
                f = 0;
                c = yf;
                return f | 0
            }
            Et = s[t >> 2] | 0;
            _t = (Et | 0) == (0 | 0);
            if (_t) {
                f = 0;
                c = yf;
                return f | 0
            }
            Wt = s[n >> 2] | 0;
            tn = (Wt | 0) == 0;
            if (tn) {
                f = 0;
                c = yf;
                return f | 0
            }
            pn = M & 255;
            Tn = pn + 128 | 0;
            Bn = Vo + 2 | 0;
            $n = pn & 3;
            ir = $n ^ 1;
            vr = $n ^ 2;
            Cr = $n ^ 3;
            jr = pn & 1;
            Jr = jr ^ 1;
            si = pn + -196 | 0;
            mi = si >>> 0 < 2;
            N = jr | 2;
            C = Jr | 2;
            ki = M << 24 >> 24 == -38;
            Ii = M << 24 >> 24 == -40;
            Qi = Z & 255;
            us = Qi + -192 | 0;
            ys = us >>> 0 > 8;
            Ms = Fi;
            zs = 86296 + us | 0;
            eo = Qi + 128 | 0;
            ho = 128 - Qi | 0;
            To = Z << 24 >> 24 == -128;
            Ho = Fi + 2 | 0;
            $o = Qi & 1;
            iu = $o ^ 1;
            x = $o | 2;
            T = iu | 2;
            ou = Qi & 3;
            uu = ou ^ 1;
            au = ou ^ 2;
            fu = ou ^ 3;
            lu = pn + -192 | 0;
            cu = lu >>> 0 < 7;
            pu = Et;
            gu = Wt;
            pf = 0;
            e: while (1) {
                hu = r[pu >> 0] | 0;
                vu = hu & 255;
                mu = hu << 24 >> 24 < 0;
                va = mu | cu;
                t: do {
                    if (va) {
                        do {
                            switch (pn | 0) {
                                case 209:
                                    {
                                        F = vu + -161 | 0;
                                        I = F >>> 0 < 63;
                                        if (I) {
                                            q = vu + 65216 | 0;
                                            Ca = q;
                                            Ga = 1;
                                            gf = 90;
                                            break t
                                        }
                                        R = gu >>> 0 < 2;
                                        if (R) {
                                            _a = 22;
                                            break e
                                        }
                                        z = pu + 1 | 0;
                                        W = r[z >> 0] | 0;
                                        X = W & 255;
                                        V = vu + -129 | 0;
                                        $ = V >>> 0 < 31;
                                        if ($) {
                                            ya = V
                                        } else {
                                            J = vu + -224 | 0;
                                            K = J >>> 0 < 16;
                                            if (!K) {
                                                Da = 84;
                                                gf = 115;
                                                break e
                                            }
                                            Q = vu + -193 | 0;
                                            ya = Q
                                        }
                                        G = ya << 1;
                                        Y = X + -64 | 0;
                                        et = Y >>> 0 < 95;
                                        if (et) {
                                            tt = W << 24 >> 24 == 127;
                                            if (tt) {
                                                Da = 84;
                                                gf = 115;
                                                break e
                                            }
                                            m = W << 24 >> 24 >> 7;
                                            nt = m << 24 >> 24;
                                            rt = Y + nt | 0;
                                            Ea = G;
                                            La = rt
                                        } else {
                                            it = X + -159 | 0;
                                            st = it >>> 0 < 94;
                                            ot = st & 1;
                                            l = G | ot;
                                            h = st ? it : X;
                                            Ea = l;
                                            La = h
                                        }
                                        ut = (12280 + (Ea * 188 | 0) | 0) + (La << 1) | 0;
                                        at = i[ut >> 1] | 0;
                                        ft = at & 65535;
                                        ct = at << 16 >> 16 == 0;
                                        if (ct) {
                                            Da = 84;
                                            gf = 115;
                                            break e
                                        } else {
                                            Ca = ft;
                                            Ga = 2;
                                            gf = 90;
                                            break t
                                        }
                                        break
                                    };
                                case 195:
                                case 192:
                                    {
                                        Su = gu >>> 0 < 4;
                                        if (Su) {
                                            _a = 22;
                                            break e
                                        }
                                        xu = pu + $n | 0;
                                        Tu = r[xu >> 0] | 0;
                                        Cu = Tu & 255;
                                        ku = Cu << 24;
                                        Lu = pu + ir | 0;
                                        Au = r[Lu >> 0] | 0;
                                        Ou = Au & 255;
                                        Mu = Ou << 16;
                                        _u = Mu | ku;
                                        Du = pu + vr | 0;
                                        Pu = r[Du >> 0] | 0;
                                        Hu = Pu & 255;
                                        ju = Hu << 8;
                                        Fu = _u | ju;
                                        Iu = pu + Cr | 0;
                                        qu = r[Iu >> 0] | 0;
                                        Ru = qu & 255;
                                        Uu = Fu | Ru;
                                        ga = Uu;
                                        gf = 14;
                                        break
                                    };
                                case 224:
                                    {
                                        An = gu >>> 0 < 2;
                                        if (An) {
                                            _a = 22;
                                            break e
                                        }
                                        On = pu + 1 | 0;
                                        Mn = r[On >> 0] | 0;
                                        _n = Mn & 255;
                                        Dn = _n + -64 | 0;
                                        Pn = Dn >>> 0 > 190;
                                        jn = _n + -127 | 0;
                                        Fn = jn >>> 0 < 34;
                                        of = Pn | Fn;
                                        if (of) {
                                            Da = 84;
                                            gf = 115;
                                            break e
                                        }
                                        In = Dn >>> 0 > 62;
                                        qn = _n + -98 | 0;
                                        d = In ? qn : Dn;
                                        Rn = vu + -161 | 0;
                                        Un = Rn >>> 0 > 88;
                                        if (!Un) {
                                            Er = (86336 + (Rn * 314 | 0) | 0) + (d << 1) | 0;
                                            Sr = i[Er >> 1] | 0;
                                            xr = Sr & 65535;
                                            Tr = (Rn | 0) == 39;
                                            if (Tr) {
                                                if ((d | 0) == 66 | (d | 0) == 58 | (d | 0) == 60) {
                                                    kr = 131072
                                                } else {
                                                    kr = 0
                                                }
                                            } else {
                                                kr = 0
                                            }
                                            Nr = kr | xr;
                                            Lr = (Nr | 0) == 0;
                                            if (Lr) {
                                                Da = 84;
                                                gf = 115;
                                                break e
                                            } else {
                                                Ca = Nr;
                                                Ga = 2;
                                                gf = 90;
                                                break t
                                            }
                                        }
                                        zn = vu + -135 | 0;
                                        Wn = zn >>> 0 > 119;
                                        if (Wn) {
                                            Da = 84;
                                            gf = 115;
                                            break e
                                        }
                                        Xn = (hu & 255) < 161;
                                        Vn = vu + -224 | 0;
                                        xa = Xn ? zn : Vn;
                                        Jn = xa * 157 | 0;
                                        Kn = d + Jn | 0;
                                        Qn = Kn >>> 4;
                                        Gn = Qn + 4867 | 0;
                                        Yn = 75952 + (Gn << 1) | 0;
                                        Zn = i[Yn >> 1] | 0;
                                        er = Zn & 65535;
                                        tr = Kn & 15;
                                        nr = er >>> tr;
                                        rr = (nr | 0) % 2 & -1;
                                        sr = rr << 17;
                                        or = 75952 + (Kn << 1) | 0;
                                        ur = i[or >> 1] | 0;
                                        ar = ur & 65535;
                                        fr = ar | sr;
                                        g = fr & -65792;
                                        lr = (g | 0) == 56320;
                                        if (!lr) {
                                            wr = (fr | 0) == 0;
                                            if (wr) {
                                                Da = 84;
                                                gf = 115;
                                                break e
                                            } else {
                                                Ca = fr;
                                                Ga = 2;
                                                gf = 90;
                                                break t
                                            }
                                        }
                                        if (ys) {
                                            Xa = 2
                                        } else {
                                            cr = r[zs >> 0] | 0;
                                            hr = cr << 24 >> 24;
                                            Xa = hr
                                        }
                                        pr = s[u >> 2] | 0;
                                        dr = Xa >>> 0 > pr >>> 0;
                                        if (dr) {
                                            Da = 7;
                                            gf = 115;
                                            break e
                                        }
                                        mr = ar & 255;
                                        gr = 86312 + mr | 0;
                                        s[A >> 2] = gr;
                                        s[O >> 2] = 4;
                                        yr = xs(Ms, A, O, o, u) | 0;
                                        br = yr + pf | 0;
                                        Ya = 2;
                                        mf = br;
                                        break t;
                                        break
                                    };
                                case 193:
                                case 194:
                                case 197:
                                case 196:
                                    {
                                        Vu = gu >>> 0 < 2;
                                        if (Vu) {
                                            _a = 22;
                                            break e
                                        }
                                        Ju = pu + jr | 0;
                                        Ku = r[Ju >> 0] | 0;
                                        Qu = Ku & 255;
                                        Gu = Qu << 8;
                                        Yu = pu + Jr | 0;
                                        Zu = r[Yu >> 0] | 0;
                                        ea = Zu & 255;
                                        ta = Gu | ea;
                                        na = ta + -56320 | 0;
                                        ra = na >>> 0 < 1024;
                                        if (ra) {
                                            Da = 84;
                                            gf = 115;
                                            break e
                                        }
                                        sa = ta + -55296 | 0;
                                        oa = sa >>> 0 < 1024;
                                        if (!oa) {
                                            Ca = ta;
                                            Ga = 2;
                                            gf = 90;
                                            break t
                                        }
                                        if (mi) {
                                            Da = 84;
                                            gf = 115;
                                            break e
                                        }
                                        ua = gu >>> 0 < 4;
                                        if (ua) {
                                            _a = 22;
                                            break e
                                        }
                                        aa = pu + N | 0;
                                        fa = r[aa >> 0] | 0;
                                        la = fa & 255;
                                        ca = la << 8;
                                        ha = pu + C | 0;
                                        pa = r[ha >> 0] | 0;
                                        da = pa & 255;
                                        _ = ca | da;
                                        D = _ + -56320 | 0;
                                        P = D >>> 0 > 1023;
                                        if (P) {
                                            Da = 84;
                                            gf = 115;
                                            break e
                                        }
                                        H = ta << 10;
                                        B = H + -56557568 | 0;
                                        j = B + D | 0;
                                        Ca = j;
                                        Ga = 4;
                                        gf = 90;
                                        break t;
                                        break
                                    };
                                case 216:
                                case 217:
                                    {
                                        break
                                    };
                                case 208:
                                    {
                                        ht = gu >>> 0 < 2;
                                        if (ht) {
                                            _a = 22;
                                            break e
                                        }
                                        pt = pu + 1 | 0;
                                        dt = r[pt >> 0] | 0;
                                        vt = dt & 255;
                                        mt = hu << 24 >> 24 == -114;
                                        if (mt) {
                                            gt = vt + -161 | 0;
                                            yt = gt >>> 0 > 62;
                                            if (yt) {
                                                Da = 84;
                                                gf = 115;
                                                break e
                                            }
                                            bt = vt + 65216 | 0;
                                            Ca = bt;
                                            Ga = 2;
                                            gf = 90;
                                            break t
                                        } else {
                                            wt = vu + -161 | 0;
                                            St = vt + -161 | 0;
                                            xt = wt >>> 0 > 83;
                                            Tt = St >>> 0 > 93;
                                            nf = xt | Tt;
                                            if (nf) {
                                                Da = 84;
                                                gf = 115;
                                                break e
                                            }
                                            Nt = (12280 + (wt * 188 | 0) | 0) + (St << 1) | 0;
                                            Ct = i[Nt >> 1] | 0;
                                            kt = Ct & 65535;
                                            Lt = Ct << 16 >> 16 == 0;
                                            if (Lt) {
                                                Da = 84;
                                                gf = 115;
                                                break e
                                            } else {
                                                Ca = kt;
                                                Ga = 2;
                                                gf = 90;
                                                break t
                                            }
                                        }
                                        break
                                    };
                                case 198:
                                    {
                                        wu = gu >>> 0 < 4;
                                        if (wu) {
                                            _a = 22;
                                            break e
                                        }
                                        Eu = s[pu >> 2] | 0;
                                        ga = Eu;
                                        gf = 14;
                                        break
                                    };
                                case 232:
                                    {
                                        Ar = gu >>> 0 < 2;
                                        if (Ar) {
                                            _a = 22;
                                            break e
                                        }
                                        Or = pu + 1 | 0;
                                        Mr = r[Or >> 0] | 0;
                                        _r = Mr & 255;
                                        Dr = vu + -161 | 0;
                                        Pr = _r + -161 | 0;
                                        Hr = Dr >>> 0 > 92;
                                        Br = Pr >>> 0 > 93;
                                        uf = Hr | Br;
                                        if (!uf) {
                                            vi = (114288 + (Dr * 188 | 0) | 0) + (Pr << 1) | 0;
                                            gi = i[vi >> 1] | 0;
                                            yi = gi & 65535;
                                            bi = gi << 16 >> 16 == 0;
                                            if (bi) {
                                                Da = 84;
                                                gf = 115;
                                                break e
                                            } else {
                                                Ca = yi;
                                                Ga = 2;
                                                gf = 90;
                                                break t
                                            }
                                        }
                                        Fr = vu + -129 | 0;
                                        Ir = Fr >>> 0 > 92;
                                        if (Ir) {
                                            Da = 84;
                                            gf = 115;
                                            break e
                                        }
                                        qr = Fr >>> 0 > 68;
                                        Rr = (Mr & 255) > 82;
                                        af = qr & Rr;
                                        if (af) {
                                            Da = 84;
                                            gf = 115;
                                            break e
                                        }
                                        Ur = _r + -65 | 0;
                                        zr = Ur >>> 0 < 26;
                                        do {
                                            if (zr) {
                                                Oa = Ur
                                            } else {
                                                Wr = _r + -97 | 0;
                                                Xr = Wr >>> 0 < 26;
                                                if (Xr) {
                                                    Vr = _r + -71 | 0;
                                                    Oa = Vr;
                                                    break
                                                }
                                                $r = _r + -129 | 0;
                                                Kr = $r >>> 0 < 126;
                                                if (!Kr) {
                                                    Da = 84;
                                                    gf = 115;
                                                    break e
                                                }
                                                Qr = _r + -77 | 0;
                                                Oa = Qr
                                            }
                                        } while (0);
                                        Gr = Fr >>> 0 < 32;
                                        if (Gr) {
                                            Yr = Fr * 178 | 0;
                                            y = Yr
                                        } else {
                                            Zr = Dr * 84 | 0;
                                            ei = Zr + 5696 | 0;
                                            y = ei
                                        }
                                        Ta = Oa + 44032 | 0;
                                        ti = Ta + y | 0;
                                        ni = ti >>> 0 < 44032;
                                        if (ni) {
                                            Ca = ti;
                                            Ga = 2;
                                            gf = 90;
                                            break t
                                        } else {
                                            Na = ti;
                                            Ma = 44032
                                        }
                                        while (1) {
                                            ri = Na - Ma | 0;
                                            Ia = 0;
                                            Va = 0;
                                            while (1) {
                                                Ra = 0;
                                                Ja = Va;
                                                while (1) {
                                                    ii = (114288 + (Ia * 188 | 0) | 0) + (Ra << 1) | 0;
                                                    oi = i[ii >> 1] | 0;
                                                    ui = oi & 65535;
                                                    ai = ui - Ma | 0;
                                                    Za = ai >>> 0 <= ri >>> 0;
                                                    fi = Za & 1;
                                                    $a = fi + Ja | 0;
                                                    li = Ra + 1 | 0;
                                                    Pa = (li | 0) == 94;
                                                    if (Pa) {
                                                        break
                                                    } else {
                                                        Ra = li;
                                                        Ja = $a
                                                    }
                                                }
                                                ci = Ia + 1 | 0;
                                                Ha = (ci | 0) == 93;
                                                if (Ha) {
                                                    break
                                                } else {
                                                    Ia = ci;
                                                    Va = $a
                                                }
                                            }
                                            hi = Na + 1 | 0;
                                            pi = $a + Na | 0;
                                            di = hi >>> 0 > pi >>> 0;
                                            if (di) {
                                                Ca = pi;
                                                Ga = 2;
                                                gf = 90;
                                                break t
                                            } else {
                                                Na = pi;
                                                Ma = hi
                                            }
                                        }
                                        break
                                    };
                                case 218:
                                    {
                                        At = (hu & 255) < 161;
                                        if (At) {
                                            Da = 84;
                                            gf = 115;
                                            break e
                                        }
                                        break
                                    };
                                case 199:
                                    {
                                        Da = 84;
                                        gf = 115;
                                        break e;
                                        break
                                    };
                                case 200:
                                    {
                                        yu = Ts(hf, pu, gu, lf) | 0;
                                        if ((yu | 0) == 0) {
                                            Qa = 1
                                        } else if ((yu | 0) == -1) {
                                            Da = 84;
                                            gf = 115;
                                            break e
                                        } else if ((yu | 0) == -2) {
                                            _a = 22;
                                            break e
                                        } else {
                                            Qa = yu
                                        }
                                        bu = s[hf >> 2] | 0;
                                        Ca = bu;
                                        Ga = Qa;
                                        gf = 90;
                                        break t;
                                        break
                                    };
                                default:
                                    {
                                        wi = vu >>> 0 < Tn >>> 0;
                                        if (wi) {
                                            Ca = vu;
                                            Ga = 1;
                                            gf = 90;
                                            break t
                                        }
                                        Ei = vu - Tn | 0;
                                        Si = Ei * 5 | 0;
                                        xi = Si >>> 2;
                                        E = xi + b | 0;
                                        Ti = 8248 + E | 0;
                                        Ni = r[Ti >> 0] | 0;
                                        Ci = Ni & 255;
                                        Li = Ei << 1;
                                        Ai = Li & 6;
                                        Oi = Ci >>> Ai;
                                        S = Bn + xi | 0;
                                        Mi = 8248 + S | 0;
                                        _i = r[Mi >> 0] | 0;
                                        Di = _i & 255;
                                        Pi = 8 - Ai | 0;
                                        Hi = Di << Pi;
                                        Bi = Hi & 1023;
                                        ji = Bi | Oi;
                                        qi = 131776 + (ji << 1) | 0;
                                        Ri = i[qi >> 1] | 0;
                                        Ui = Ri & 65535;
                                        zi = (ji | 0) == 0;
                                        a = zi ? vu : Ui;
                                        Wi = (a | 0) == 1;
                                        if (Wi) {
                                            Da = 84;
                                            gf = 115;
                                            break e
                                        } else {
                                            Ca = a;
                                            Ga = 1;
                                            gf = 90;
                                            break t
                                        }
                                    }
                            }
                        } while (0);
                        if ((gf | 0) == 14) {
                            gf = 0;
                            zu = ga + -55296 | 0;
                            Wu = zu >>> 0 < 2048;
                            Xu = ga >>> 0 > 1114111;
                            tf = Wu | Xu;
                            if (tf) {
                                Da = 84;
                                gf = 115;
                                break e
                            } else {
                                Ca = ga;
                                Ga = 4;
                                gf = 90;
                                break
                            }
                        }
                        Ot = vu + -129 | 0;
                        Mt = Ot >>> 0 > 125;
                        if (Mt) {
                            Da = 84;
                            gf = 115;
                            break e
                        }
                        Dt = gu >>> 0 < 2;
                        if (Dt) {
                            _a = 22;
                            break e
                        }
                        Pt = pu + 1 | 0;
                        Ht = r[Pt >> 0] | 0;
                        Bt = Ht & 255;
                        jt = (Ht & 255) < 161;
                        rf = jt & ki;
                        if (rf) {
                            Da = 84;
                            gf = 115;
                            break e
                        }
                        Ft = Bt + -64 | 0;
                        It = Ft >>> 0 > 190;
                        qt = Ht << 24 >> 24 == 127;
                        ff = It | qt;
                        if (!ff) {
                            xn = Ft >>> 0 > 63;
                            Nn = Bt + -65 | 0;
                            p = xn ? Nn : Ft;
                            Cn = (28072 + (Ot * 380 | 0) | 0) + (p << 1) | 0;
                            kn = i[Cn >> 1] | 0;
                            Ln = kn & 65535;
                            Ca = Ln;
                            Ga = 2;
                            gf = 90;
                            break
                        }
                        Rt = Bt + -48 | 0;
                        Ut = Rt >>> 0 < 10;
                        sf = Ut & Ii;
                        if (!sf) {
                            Da = 84;
                            gf = 115;
                            break e
                        }
                        Xt = gu >>> 0 < 4;
                        if (Xt) {
                            _a = 22;
                            break e
                        }
                        Vt = pu + 2 | 0;
                        $t = r[Vt >> 0] | 0;
                        Jt = $t & 255;
                        Kt = Jt + -129 | 0;
                        Qt = Kt >>> 0 > 126;
                        if (Qt) {
                            Da = 84;
                            gf = 115;
                            break e
                        }
                        Gt = pu + 3 | 0;
                        Yt = r[Gt >> 0] | 0;
                        Zt = Yt & 255;
                        en = Zt + -48 | 0;
                        nn = en >>> 0 > 9;
                        if (nn) {
                            Da = 84;
                            gf = 115;
                            break e
                        }
                        rn = Ot * 10 | 0;
                        sn = Bt + rn | 0;
                        on = sn * 1260 | 0;
                        un = Kt * 10 | 0;
                        an = on + -60352 | 0;
                        fn = an + un | 0;
                        ln = fn + en | 0;
                        Sa = ln;
                        Aa = 0;
                        while (1) {
                            cn = Sa - Aa | 0;
                            Fa = 0;
                            Ua = 0;
                            while (1) {
                                qa = 0;
                                Wa = Ua;
                                while (1) {
                                    hn = (28072 + (Fa * 380 | 0) | 0) + (qa << 1) | 0;
                                    dn = i[hn >> 1] | 0;
                                    vn = dn & 65535;
                                    mn = vn - Aa | 0;
                                    ef = mn >>> 0 <= cn >>> 0;
                                    gn = ef & 1;
                                    za = gn + Wa | 0;
                                    yn = qa + 1 | 0;
                                    Ba = (yn | 0) == 190;
                                    if (Ba) {
                                        break
                                    } else {
                                        qa = yn;
                                        Wa = za
                                    }
                                }
                                bn = Fa + 1 | 0;
                                ja = (bn | 0) == 126;
                                if (ja) {
                                    break
                                } else {
                                    Fa = bn;
                                    Ua = za
                                }
                            }
                            wn = Sa + 1 | 0;
                            En = za + Sa | 0;
                            Sn = wn >>> 0 > En >>> 0;
                            if (Sn) {
                                Ca = En;
                                Ga = 4;
                                gf = 90;
                                break
                            } else {
                                Sa = En;
                                Aa = wn
                            }
                        }
                    } else {
                        Ca = vu;
                        Ga = 1;
                        gf = 90
                    }
                } while (0);
                n: do {
                    if ((gf | 0) == 90) {
                        gf = 0;
                        switch (Qi | 0) {
                            case 193:
                            case 194:
                            case 197:
                            case 196:
                                {
                                    Ks = Ca >>> 0 < 65536;
                                    ma = Ks | mi;
                                    if (ma) {
                                        Qs = Ca >>> 0 > 65535;
                                        v = Qs ? 65533 : Ca;
                                        Gs = s[u >> 2] | 0;
                                        Ys = Gs >>> 0 < 2;
                                        if (Ys) {
                                            Da = 7;
                                            gf = 115;
                                            break e
                                        }
                                        Zs = s[o >> 2] | 0;
                                        to = v >>> 8;
                                        no = to & 255;
                                        ro = Zs + $o | 0;
                                        r[ro >> 0] = no;
                                        io = v & 255;
                                        so = Zs + iu | 0;
                                        r[so >> 0] = io;
                                        uo = Zs + 2 | 0;
                                        s[o >> 2] = uo;
                                        ao = s[u >> 2] | 0;
                                        fo = ao + -2 | 0;
                                        s[u >> 2] = fo;
                                        Ya = Ga;
                                        mf = pf;
                                        break n
                                    } else {
                                        lo = s[u >> 2] | 0;
                                        co = lo >>> 0 < 4;
                                        if (co) {
                                            Da = 7;
                                            gf = 115;
                                            break e
                                        }
                                        po = Ca + -65536 | 0;
                                        vo = s[o >> 2] | 0;
                                        mo = po >>> 10;
                                        go = po >>> 18;
                                        yo = go | 216;
                                        bo = yo & 255;
                                        wo = vo + $o | 0;
                                        r[wo >> 0] = bo;
                                        Eo = mo & 255;
                                        So = vo + iu | 0;
                                        r[So >> 0] = Eo;
                                        xo = po >>> 8;
                                        No = xo & 3;
                                        Co = No | 220;
                                        ko = Co & 255;
                                        Lo = vo + x | 0;
                                        r[Lo >> 0] = ko;
                                        Ao = po & 255;
                                        Oo = vo + T | 0;
                                        r[Oo >> 0] = Ao;
                                        Mo = vo + 4 | 0;
                                        s[o >> 2] = Mo;
                                        _o = s[u >> 2] | 0;
                                        Do = _o + -4 | 0;
                                        s[u >> 2] = Do;
                                        Ya = Ga;
                                        mf = pf;
                                        break n
                                    }
                                    break
                                };
                            case 195:
                            case 192:
                                {
                                    Po = s[u >> 2] | 0;
                                    Bo = Po >>> 0 < 4;
                                    if (Bo) {
                                        Da = 7;
                                        gf = 115;
                                        break e
                                    }
                                    jo = s[o >> 2] | 0;
                                    Fo = Ca >>> 24;
                                    Io = Fo & 255;
                                    qo = jo + ou | 0;
                                    r[qo >> 0] = Io;
                                    Ro = Ca >>> 16;
                                    Uo = Ro & 255;
                                    zo = jo + uu | 0;
                                    r[zo >> 0] = Uo;
                                    Wo = Ca >>> 8;
                                    Xo = Wo & 255;
                                    Jo = jo + au | 0;
                                    r[Jo >> 0] = Xo;
                                    Ko = Ca & 255;
                                    Qo = jo + fu | 0;
                                    r[Qo >> 0] = Ko;
                                    Go = jo + 4 | 0;
                                    s[o >> 2] = Go;
                                    Yo = s[u >> 2] | 0;
                                    Zo = Yo + -4 | 0;
                                    s[u >> 2] = Zo;
                                    Ya = Ga;
                                    mf = pf;
                                    break n;
                                    break
                                };
                            case 198:
                                {
                                    Xi = s[u >> 2] | 0;
                                    Vi = Xi >>> 0 < 4;
                                    if (Vi) {
                                        Da = 7;
                                        gf = 115;
                                        break e
                                    }
                                    $i = s[o >> 2] | 0;
                                    s[$i >> 2] = Ca;
                                    Ji = $i + 4 | 0;
                                    s[o >> 2] = Ji;
                                    Ki = s[u >> 2] | 0;
                                    Gi = Ki + -4 | 0;
                                    s[u >> 2] = Gi;
                                    Ya = Ga;
                                    mf = pf;
                                    break n;
                                    break
                                };
                            case 200:
                                {
                                    Yi = s[u >> 2] | 0;
                                    Zi = Yi >>> 0 < 4;
                                    if (Zi) {
                                        es = Is(cf, Ca) | 0;
                                        ts = s[u >> 2] | 0;
                                        ns = ts >>> 0 < es >>> 0;
                                        if (ns) {
                                            Da = 7;
                                            gf = 115;
                                            break e
                                        }
                                        rs = s[o >> 2] | 0;
                                        oo(rs | 0, cf | 0, es | 0) | 0;
                                        as = rs;
                                        Ka = es
                                    } else {
                                        is = s[o >> 2] | 0;
                                        ss = Is(is, Ca) | 0;
                                        as = is;
                                        Ka = ss
                                    }
                                    os = as + Ka | 0;
                                    s[o >> 2] = os;
                                    fs = s[u >> 2] | 0;
                                    ls = fs - Ka | 0;
                                    s[u >> 2] = ls;
                                    Ya = Ga;
                                    mf = pf;
                                    break n;
                                    break
                                };
                            case 199:
                                {
                                    cs = Ca >>> 0 > 127;
                                    if (cs) {
                                        df = pf;
                                        gf = 99
                                    } else {
                                        ka = Ca;
                                        vf = pf
                                    }
                                    break
                                };
                            default:
                                {
                                    ka = Ca;
                                    vf = pf
                                }
                        }
                        r: while (1) {
                            if ((gf | 0) == 99) {
                                gf = 0;
                                hs = df + 1 | 0;
                                ka = 42;
                                vf = hs
                            }
                            ps = s[u >> 2] | 0;
                            ds = (ps | 0) == 0;
                            if (ds) {
                                Da = 7;
                                gf = 115;
                                break e
                            }
                            vs = ka >>> 0 < eo >>> 0;
                            if (vs) {
                                ba = ka;
                                break
                            }
                            if (To) {
                                df = vf;
                                gf = 99;
                                continue
                            } else {
                                wa = 0
                            }
                            while (1) {
                                Cs = wa * 5 | 0;
                                ks = Cs >>> 2;
                                L = ks + k | 0;
                                Ls = 8248 + L | 0;
                                As = r[Ls >> 0] | 0;
                                Os = As & 255;
                                _s = wa << 1;
                                Ds = _s & 6;
                                Ps = Os >>> Ds;
                                w = Ho + ks | 0;
                                Hs = 8248 + w | 0;
                                Bs = r[Hs >> 0] | 0;
                                js = Bs & 255;
                                Fs = 8 - Ds | 0;
                                qs = js << Fs;
                                Rs = qs & 1023;
                                Us = Rs | Ps;
                                Ws = 131776 + (Us << 1) | 0;
                                Xs = i[Ws >> 1] | 0;
                                Vs = Xs & 65535;
                                $s = (ka | 0) == (Vs | 0);
                                Ss = wa + 1 | 0;
                                if ($s) {
                                    gf = 106;
                                    break r
                                }
                                Ns = Ss >>> 0 < ho >>> 0;
                                if (Ns) {
                                    wa = Ss
                                } else {
                                    df = vf;
                                    gf = 99;
                                    continue r
                                }
                            }
                        }
                        if ((gf | 0) == 106) {
                            gf = 0;
                            Js = wa + 128 | 0;
                            ba = Js
                        }
                        ms = ba & 255;
                        gs = s[o >> 2] | 0;
                        bs = gs + 1 | 0;
                        s[o >> 2] = bs;
                        r[gs >> 0] = ms;
                        ws = s[u >> 2] | 0;
                        Es = ws + -1 | 0;
                        s[u >> 2] = Es;
                        Ya = Ga;
                        mf = vf
                    }
                } while (0);
                eu = s[t >> 2] | 0;
                tu = eu + Ya | 0;
                s[t >> 2] = tu;
                nu = gu - Ya | 0;
                s[n >> 2] = nu;
                ru = (gu | 0) == (Ya | 0);
                if (ru) {
                    f = mf;
                    gf = 117;
                    break
                } else {
                    pu = tu;
                    gu = nu;
                    pf = mf
                }
            }
            if ((gf | 0) == 115) {
                _a = Da
            } else if ((gf | 0) == 117) {
                c = yf;
                return f | 0
            }
            su = zt() | 0;
            s[su >> 2] = _a;
            f = -1;
            c = yf;
            return f | 0
        }

        function Ts(e, t, n, i) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            i = i | 0;
            var o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0;
            var k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0;
            var $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0;
            ut = c;
            c = c + 16 | 0;
            l = ut;
            s[l >> 2] = e;
            h = (i | 0) == (0 | 0);
            u = h ? 133232 : i;
            x = s[u >> 2] | 0;
            P = (t | 0) == (0 | 0);
            e: do {
                if (P) {
                    X = (x | 0) == 0;
                    if (X) {
                        o = 0;
                        c = ut;
                        return o | 0
                    }
                } else {
                    Q = (e | 0) == (0 | 0);
                    if (Q) {
                        s[l >> 2] = l;
                        d = l
                    } else {
                        d = e
                    }
                    G = (n | 0) == 0;
                    if (G) {
                        o = -2;
                        c = ut;
                        return o | 0
                    }
                    Y = (x | 0) == 0;
                    do {
                        if (Y) {
                            Z = r[t >> 0] | 0;
                            et = Z & 255;
                            p = Z << 24 >> 24 > -1;
                            if (p) {
                                s[d >> 2] = et;
                                v = Z << 24 >> 24 != 0;
                                m = v & 1;
                                o = m;
                                c = ut;
                                return o | 0
                            } else {
                                g = et + -194 | 0;
                                y = g >>> 0 > 50;
                                if (y) {
                                    break e
                                }
                                b = t + 1 | 0;
                                w = 133024 + (g << 2) | 0;
                                E = s[w >> 2] | 0;
                                S = n + -1 | 0;
                                a = S;
                                tt = E;
                                it = b;
                                break
                            }
                        } else {
                            a = n;
                            tt = x;
                            it = t
                        }
                    } while (0);
                    T = (a | 0) == 0;
                    t: do {
                        if (T) {
                            rt = tt
                        } else {
                            N = r[it >> 0] | 0;
                            C = N & 255;
                            k = C >>> 3;
                            L = k + -16 | 0;
                            A = tt >> 26;
                            O = k + A | 0;
                            M = L | O;
                            _ = M >>> 0 > 7;
                            if (_) {
                                break e
                            } else {
                                f = a;
                                j = N;
                                nt = tt;
                                st = it
                            }
                            while (1) {
                                D = nt << 6;
                                H = st + 1 | 0;
                                B = j & 255;
                                F = B + -128 | 0;
                                I = F | D;
                                q = f + -1 | 0;
                                R = (I | 0) < 0;
                                if (!R) {
                                    break
                                }
                                z = (q | 0) == 0;
                                if (z) {
                                    rt = I;
                                    break t
                                }
                                W = r[H >> 0] | 0;
                                V = W & 255;
                                $ = V + -128 | 0;
                                J = $ >>> 0 > 63;
                                if (J) {
                                    break e
                                } else {
                                    f = q;
                                    j = W;
                                    nt = I;
                                    st = H
                                }
                            }
                            s[u >> 2] = 0;
                            s[d >> 2] = I;
                            U = n - q | 0;
                            o = U;
                            c = ut;
                            return o | 0
                        }
                    } while (0);
                    s[u >> 2] = rt;
                    o = -2;
                    c = ut;
                    return o | 0
                }
            } while (0);
            s[u >> 2] = 0;
            K = zt() | 0;
            s[K >> 2] = 84;
            o = -1;
            c = ut;
            return o | 0
        }

        function Ns(e, t, n, r) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            var i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0;
            var V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0;
            var pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0;
            var Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0;
            var Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0;
            var wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0;
            var qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0;
            var or = 0,
                ur = 0,
                ar = 0,
                fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0,
                Tr = 0,
                Nr = 0;
            var Cr = 0,
                kr = 0,
                Lr = 0,
                Ar = 0,
                Or = 0,
                Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0,
                Wr = 0,
                Xr = 0;
            var Vr = 0,
                $r = 0,
                Jr = 0,
                Kr = 0,
                Qr = 0,
                Gr = 0,
                Yr = 0,
                Zr = 0,
                ei = 0,
                ti = 0,
                ni = 0,
                ri = 0,
                ii = 0,
                si = 0,
                oi = 0,
                ui = 0,
                ai = 0,
                fi = 0,
                li = 0,
                ci = 0;
            var hi = 0,
                pi = 0,
                di = 0,
                vi = 0,
                mi = 0,
                gi = 0,
                yi = 0,
                bi = 0,
                wi = 0,
                Ei = 0,
                Si = 0,
                xi = 0,
                Ti = 0,
                Ni = 0,
                Ci = 0,
                ki = 0,
                Li = 0,
                Ai = 0,
                Oi = 0,
                Mi = 0;
            var _i = 0,
                Di = 0;
            Di = c;
            c = c + 944 | 0;
            Mi = Di + 680 | 0;
            Oi = Di + 424 | 0;
            ui = Di + 192 | 0;
            wi = Di;
            j = rt(n, t) | 0;
            F = (j | 0) == 0;
            if (F) {
                c = Di;
                return
            }
            D = j - n | 0;
            Cn = wi + 4 | 0;
            s[Cn >> 2] = n;
            s[wi >> 2] = n;
            Jn = n;
            gr = n;
            pi = 2;
            while (1) {
                jn = Jn + n | 0;
                or = jn + gr | 0;
                Lr = wi + (pi << 2) | 0;
                s[Lr >> 2] = or;
                Ir = or >>> 0 < j >>> 0;
                Qr = pi + 1 | 0;
                if (Ir) {
                    Kn = gr;
                    gr = or;
                    pi = Qr;
                    Jn = Kn
                } else {
                    break
                }
            }
            I = 0 - n | 0;
            Q = e + D | 0;
            at = (D | 0) > 0;
            if (at) {
                bt = (n | 0) == 0;
                Ot = n >>> 0 > 256;
                Rt = Ot ? 256 : n;
                Yt = (Rt | 0) == (n | 0);
                ln = Q;
                Nn = 1;
                br = 0;
                ci = e;
                Ti = 1;
                while (1) {
                    En = Nn & 3;
                    kn = (En | 0) == 3;
                    do {
                        if (kn) {
                            s[ui >> 2] = ci;
                            Ln = (Ti | 0) > 1;
                            e: do {
                                if (Ln) {
                                    d = Ti;
                                    S = ci;
                                    Pn = ci;
                                    yi = 1;
                                    while (1) {
                                        An = S + I | 0;
                                        On = d + -2 | 0;
                                        Mn = wi + (On << 2) | 0;
                                        _n = s[Mn >> 2] | 0;
                                        Li = _n + n | 0;
                                        P = 0 - Li | 0;
                                        Dn = S + P | 0;
                                        Hn = Ho[r & 7](Pn, Dn) | 0;
                                        Bn = (Hn | 0) > -1;
                                        if (Bn) {
                                            Fn = Ho[r & 7](Pn, An) | 0;
                                            In = (Fn | 0) > -1;
                                            if (In) {
                                                di = yi;
                                                break
                                            }
                                        }
                                        qn = Ho[r & 7](Dn, An) | 0;
                                        Rn = (qn | 0) > -1;
                                        Un = yi + 1 | 0;
                                        zn = ui + (yi << 2) | 0;
                                        if (Rn) {
                                            s[zn >> 2] = Dn;
                                            Wn = d + -1 | 0;
                                            u = Dn;
                                            l = Wn
                                        } else {
                                            s[zn >> 2] = An;
                                            u = An;
                                            l = On
                                        }
                                        Xn = (l | 0) > 1;
                                        if (!Xn) {
                                            di = Un;
                                            break
                                        }
                                        A = s[ui >> 2] | 0;
                                        d = l;
                                        S = u;
                                        Pn = A;
                                        yi = Un
                                    }
                                    Vn = (di | 0) < 2;
                                    if (!Vn) {
                                        $n = ui + (di << 2) | 0;
                                        s[$n >> 2] = Oi;
                                        if (!bt) {
                                            Qn = (di | 0) > 0;
                                            if (Qn) {
                                                w = n;
                                                lr = Oi
                                            } else {
                                                Gn = s[ui >> 2] | 0;
                                                oo(Oi | 0, Gn | 0, Rt | 0) | 0;
                                                if (Yt) {
                                                    break
                                                } else {
                                                    b = n;
                                                    hr = Rt
                                                }
                                                while (1) {
                                                    cr = b - hr | 0;
                                                    pr = cr >>> 0 > 256;
                                                    dr = pr ? 256 : cr;
                                                    oo(Oi | 0, Gn | 0, dr | 0) | 0;
                                                    vr = (cr | 0) == (dr | 0);
                                                    if (vr) {
                                                        break e
                                                    } else {
                                                        b = cr;
                                                        hr = dr
                                                    }
                                                }
                                            }
                                            while (1) {
                                                ar = w >>> 0 > 256;
                                                Zn = ar ? 256 : w;
                                                fr = s[ui >> 2] | 0;
                                                oo(lr | 0, fr | 0, Zn | 0) | 0;
                                                sr = fr;
                                                mi = 0;
                                                while (1) {
                                                    tr = ui + (mi << 2) | 0;
                                                    nr = mi + 1 | 0;
                                                    rr = ui + (nr << 2) | 0;
                                                    ir = s[rr >> 2] | 0;
                                                    oo(sr | 0, ir | 0, Zn | 0) | 0;
                                                    ur = sr + Zn | 0;
                                                    s[tr >> 2] = ur;
                                                    ai = (nr | 0) == (di | 0);
                                                    if (ai) {
                                                        break
                                                    } else {
                                                        sr = ir;
                                                        mi = nr
                                                    }
                                                }
                                                Yn = (w | 0) == (Zn | 0);
                                                if (Yn) {
                                                    break e
                                                }
                                                er = w - Zn | 0;
                                                _ = s[$n >> 2] | 0;
                                                w = er;
                                                lr = _
                                            }
                                        }
                                    }
                                }
                            } while (0);
                            mr = Nn >>> 2;
                            yr = br << 30;
                            wr = mr | yr;
                            Er = br >>> 2;
                            Sr = Ti + 2 | 0;
                            ct = wr;
                            Tn = Er;
                            Ni = Sr
                        } else {
                            xr = Ti + -1 | 0;
                            Tr = wi + (xr << 2) | 0;
                            Nr = s[Tr >> 2] | 0;
                            Cr = ci;
                            kr = ln - Cr | 0;
                            Ar = Nr >>> 0 < kr >>> 0;
                            t: do {
                                if (Ar) {
                                    s[ui >> 2] = ci;
                                    Or = (Ti | 0) > 1;
                                    if (Or) {
                                        v = Ti;
                                        x = ci;
                                        Br = ci;
                                        bi = 1;
                                        while (1) {
                                            Mr = x + I | 0;
                                            _r = v + -2 | 0;
                                            Dr = wi + (_r << 2) | 0;
                                            Pr = s[Dr >> 2] | 0;
                                            Ai = Pr + n | 0;
                                            H = 0 - Ai | 0;
                                            Hr = x + H | 0;
                                            jr = Ho[r & 7](Br, Hr) | 0;
                                            Fr = (jr | 0) > -1;
                                            if (Fr) {
                                                qr = Ho[r & 7](Br, Mr) | 0;
                                                Rr = (qr | 0) > -1;
                                                if (Rr) {
                                                    vi = bi;
                                                    break
                                                }
                                            }
                                            Ur = Ho[r & 7](Hr, Mr) | 0;
                                            zr = (Ur | 0) > -1;
                                            Wr = bi + 1 | 0;
                                            Xr = ui + (bi << 2) | 0;
                                            if (zr) {
                                                s[Xr >> 2] = Hr;
                                                Vr = v + -1 | 0;
                                                a = Hr;
                                                h = Vr
                                            } else {
                                                s[Xr >> 2] = Mr;
                                                a = Mr;
                                                h = _r
                                            }
                                            $r = (h | 0) > 1;
                                            if (!$r) {
                                                vi = Wr;
                                                break
                                            }
                                            O = s[ui >> 2] | 0;
                                            v = h;
                                            x = a;
                                            Br = O;
                                            bi = Wr
                                        }
                                        Jr = (vi | 0) < 2;
                                        if (!Jr) {
                                            Kr = ui + (vi << 2) | 0;
                                            s[Kr >> 2] = Mi;
                                            if (!bt) {
                                                Gr = (vi | 0) > 0;
                                                if (Gr) {
                                                    E = n;
                                                    z = Mi
                                                } else {
                                                    Yr = s[ui >> 2] | 0;
                                                    oo(Mi | 0, Yr | 0, Rt | 0) | 0;
                                                    if (Yt) {
                                                        break
                                                    } else {
                                                        y = n;
                                                        X = Rt
                                                    }
                                                    while (1) {
                                                        W = y - X | 0;
                                                        V = W >>> 0 > 256;
                                                        $ = V ? 256 : W;
                                                        oo(Mi | 0, Yr | 0, $ | 0) | 0;
                                                        J = (W | 0) == ($ | 0);
                                                        if (J) {
                                                            break t
                                                        } else {
                                                            y = W;
                                                            X = $
                                                        }
                                                    }
                                                }
                                                while (1) {
                                                    R = E >>> 0 > 256;
                                                    ei = R ? 256 : E;
                                                    U = s[ui >> 2] | 0;
                                                    oo(z | 0, U | 0, ei | 0) | 0;
                                                    oi = U;
                                                    gi = 0;
                                                    while (1) {
                                                        ni = ui + (gi << 2) | 0;
                                                        ri = gi + 1 | 0;
                                                        ii = ui + (ri << 2) | 0;
                                                        si = s[ii >> 2] | 0;
                                                        oo(oi | 0, si | 0, ei | 0) | 0;
                                                        q = oi + ei | 0;
                                                        s[ni >> 2] = q;
                                                        fi = (ri | 0) == (vi | 0);
                                                        if (fi) {
                                                            break
                                                        } else {
                                                            oi = si;
                                                            gi = ri
                                                        }
                                                    }
                                                    Zr = (E | 0) == (ei | 0);
                                                    if (Zr) {
                                                        break t
                                                    }
                                                    ti = E - ei | 0;
                                                    M = s[Kr >> 2] | 0;
                                                    E = ti;
                                                    z = M
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    Cs(ci, n, r, Nn, br, Ti, 0, wi)
                                }
                            } while (0);
                            K = (Ti | 0) == 1;
                            if (K) {
                                G = br << 1;
                                Y = Nn >>> 31;
                                Z = Y | G;
                                et = Nn << 1;
                                ct = et;
                                Tn = Z;
                                Ni = 0;
                                break
                            } else {
                                tt = xr >>> 0 > 31;
                                nt = Ti + -33 | 0;
                                i = tt ? 0 : Nn;
                                T = tt ? Nn : br;
                                N = tt ? nt : xr;
                                it = T << N;
                                st = 32 - N | 0;
                                ot = i >>> st;
                                ut = ot | it;
                                ft = i << N;
                                ct = ft;
                                Tn = ut;
                                Ni = 1;
                                break
                            }
                        }
                    } while (0);
                    lt = ct | 1;
                    ht = ci + n | 0;
                    pt = ht >>> 0 < Q >>> 0;
                    if (pt) {
                        Nn = lt;
                        br = Tn;
                        ci = ht;
                        Ti = Ni
                    } else {
                        C = Tn;
                        k = lt;
                        li = ht;
                        xi = Ni;
                        break
                    }
                }
            } else {
                C = 0;
                k = 1;
                li = e;
                xi = 1
            }
            Cs(li, n, r, k, C, xi, 0, wi);
            vt = k;
            gt = C;
            hi = li;
            Ci = xi;
            while (1) {
                dt = (Ci | 0) == 1;
                if (dt) {
                    mt = (vt | 0) == 1;
                    if (mt) {
                        yt = (gt | 0) == 0;
                        if (yt) {
                            break
                        } else {
                            _i = 52
                        }
                    }
                } else {
                    _i = 52
                }
                if ((_i | 0) == 52) {
                    _i = 0;
                    wt = (Ci | 0) < 2;
                    if (!wt) {
                        tn = gt << 2;
                        nn = vt >>> 30;
                        rn = nn | tn;
                        sn = Ci + -2 | 0;
                        on = vt << 1;
                        un = on & 2147483646;
                        an = nn << 31;
                        fn = un | an;
                        cn = fn ^ 3;
                        hn = rn >>> 1;
                        pn = wi + (sn << 2) | 0;
                        dn = s[pn >> 2] | 0;
                        ki = dn + n | 0;
                        B = 0 - ki | 0;
                        vn = hi + B | 0;
                        mn = Ci + -1 | 0;
                        Cs(vn, n, r, cn, hn, mn, 1, wi);
                        gn = hn << 1;
                        yn = nn & 1;
                        bn = gn | yn;
                        wn = cn << 1;
                        Sn = wn | 1;
                        xn = hi + I | 0;
                        Cs(xn, n, r, Sn, bn, sn, 1, wi);
                        vt = Sn;
                        gt = bn;
                        hi = xn;
                        Ci = sn;
                        continue
                    }
                }
                Et = vt + -1 | 0;
                St = (Et | 0) == 0;
                if (St) {
                    Wt = 32;
                    _i = 62
                } else {
                    xt = Et & 1;
                    Tt = (xt | 0) == 0;
                    if (Tt) {
                        m = Et;
                        Ei = 0;
                        while (1) {
                            Nt = Ei + 1 | 0;
                            Ct = m >>> 1;
                            kt = Ct & 1;
                            Lt = (kt | 0) == 0;
                            if (Lt) {
                                m = Ct;
                                Ei = Nt
                            } else {
                                break
                            }
                        }
                        At = (Nt | 0) == 0;
                        if (At) {
                            _i = 57
                        } else {
                            qt = Nt
                        }
                    } else {
                        _i = 57
                    }
                    if ((_i | 0) == 57) {
                        _i = 0;
                        Mt = (gt | 0) == 0;
                        if (Mt) {
                            p = 32
                        } else {
                            _t = gt & 1;
                            Dt = (_t | 0) == 0;
                            if (Dt) {
                                g = gt;
                                Si = 0;
                                while (1) {
                                    Pt = Si + 1 | 0;
                                    Ht = g >>> 1;
                                    Bt = Ht & 1;
                                    jt = (Bt | 0) == 0;
                                    if (jt) {
                                        g = Ht;
                                        Si = Pt
                                    } else {
                                        p = Pt;
                                        break
                                    }
                                }
                            } else {
                                p = 0
                            }
                        }
                        Ft = p + 32 | 0;
                        It = (p | 0) == 0;
                        o = It ? 0 : Ft;
                        qt = o
                    }
                    Ut = qt >>> 0 > 31;
                    if (Ut) {
                        Wt = qt;
                        _i = 62
                    } else {
                        f = qt;
                        Vt = vt;
                        Kt = gt;
                        en = qt
                    }
                }
                if ((_i | 0) == 62) {
                    _i = 0;
                    zt = Wt + -32 | 0;
                    f = zt;
                    Vt = gt;
                    Kt = 0;
                    en = Wt
                }
                Xt = Vt >>> f;
                $t = 32 - f | 0;
                Jt = Kt << $t;
                Qt = Jt | Xt;
                Gt = Kt >>> f;
                Zt = en + Ci | 0;
                L = hi + I | 0;
                vt = Qt;
                gt = Gt;
                hi = L;
                Ci = Zt
            }
            c = Di;
            return
        }

        function Cs(e, t, n, r, i, o, u, a) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            i = i | 0;
            o = o | 0;
            u = u | 0;
            a = a | 0;
            var f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0;
            var O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0;
            var Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0;
            var mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0;
            var Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0;
            var nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0;
            var xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0;
            var zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0,
                ur = 0,
                ar = 0;
            var fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0;
            xr = c;
            c = c + 720 | 0;
            Er = xr + 456 | 0;
            ir = xr + 228 | 0;
            rr = xr;
            s[rr >> 2] = e;
            j = 0 - t | 0;
            F = (r | 0) == 1;
            St = (i | 0) == 0;
            yr = F & St;
            e: do {
                if (yr) {
                    p = e;
                    g = o;
                    C = u;
                    ur = 1;
                    Sr = 18
                } else {
                    b = o;
                    w = e;
                    A = u;
                    kt = r;
                    jt = i;
                    Tn = e;
                    hr = 1;
                    while (1) {
                        Dt = a + (b << 2) | 0;
                        Wt = s[Dt >> 2] | 0;
                        tn = 0 - Wt | 0;
                        pn = w + tn | 0;
                        Hn = Ho[n & 7](pn, Tn) | 0;
                        Vn = (Hn | 0) < 1;
                        if (Vn) {
                            p = w;
                            g = b;
                            C = A;
                            ur = hr;
                            Sr = 18;
                            break e
                        }
                        I = (A | 0) == 0;
                        Q = (b | 0) > 1;
                        mr = I & Q;
                        if (mr) {
                            ut = w + j | 0;
                            vt = b + -2 | 0;
                            mt = a + (vt << 2) | 0;
                            gt = s[mt >> 2] | 0;
                            yt = Ho[n & 7](ut, pn) | 0;
                            bt = (yt | 0) > -1;
                            if (bt) {
                                d = w;
                                y = b;
                                fr = hr;
                                break e
                            }
                            br = gt + t | 0;
                            H = 0 - br | 0;
                            wt = w + H | 0;
                            Et = Ho[n & 7](wt, pn) | 0;
                            xt = (Et | 0) > -1;
                            if (xt) {
                                d = w;
                                y = b;
                                fr = hr;
                                break e
                            }
                        }
                        Tt = hr + 1 | 0;
                        Nt = rr + (hr << 2) | 0;
                        s[Nt >> 2] = pn;
                        Ct = kt + -1 | 0;
                        Lt = (Ct | 0) == 0;
                        if (Lt) {
                            Gt = 32;
                            Sr = 15
                        } else {
                            At = Ct & 1;
                            Ot = (At | 0) == 0;
                            if (Ot) {
                                S = Ct;
                                dr = 0;
                                while (1) {
                                    Mt = dr + 1 | 0;
                                    _t = S >>> 1;
                                    Pt = _t & 1;
                                    Ht = (Pt | 0) == 0;
                                    if (Ht) {
                                        S = _t;
                                        dr = Mt
                                    } else {
                                        break
                                    }
                                }
                                Bt = (Mt | 0) == 0;
                                if (Bt) {
                                    Sr = 10
                                } else {
                                    Jt = Mt
                                }
                            } else {
                                Sr = 10
                            }
                            if ((Sr | 0) == 10) {
                                Sr = 0;
                                Ft = (jt | 0) == 0;
                                if (Ft) {
                                    m = 32
                                } else {
                                    It = jt & 1;
                                    qt = (It | 0) == 0;
                                    if (qt) {
                                        N = jt;
                                        vr = 0;
                                        while (1) {
                                            Rt = vr + 1 | 0;
                                            Ut = N >>> 1;
                                            zt = Ut & 1;
                                            Xt = (zt | 0) == 0;
                                            if (Xt) {
                                                N = Ut;
                                                vr = Rt
                                            } else {
                                                m = Rt;
                                                break
                                            }
                                        }
                                    } else {
                                        m = 0
                                    }
                                }
                                Vt = m + 32 | 0;
                                $t = (m | 0) == 0;
                                f = $t ? 0 : Vt;
                                Jt = f
                            }
                            Kt = Jt >>> 0 > 31;
                            if (Kt) {
                                Gt = Jt;
                                Sr = 15
                            } else {
                                h = Jt;
                                Zt = kt;
                                rn = jt;
                                an = Jt
                            }
                        }
                        if ((Sr | 0) == 15) {
                            Sr = 0;
                            Qt = Gt + -32 | 0;
                            h = Qt;
                            Zt = jt;
                            rn = 0;
                            an = Gt
                        }
                        Yt = Zt >>> h;
                        en = 32 - h | 0;
                        nn = rn << en;
                        sn = nn | Yt;
                        on = rn >>> h;
                        un = an + b | 0;
                        fn = (sn | 0) == 1;
                        ln = (on | 0) == 0;
                        gr = fn & ln;
                        if (gr) {
                            d = pn;
                            y = un;
                            fr = Tt;
                            break e
                        }
                        M = s[rr >> 2] | 0;
                        b = un;
                        w = pn;
                        A = 0;
                        kt = sn;
                        jt = on;
                        Tn = M;
                        hr = Tt
                    }
                }
            } while (0);
            if ((Sr | 0) == 18) {
                cn = (C | 0) == 0;
                if (cn) {
                    d = p;
                    y = g;
                    fr = ur
                } else {
                    c = xr;
                    return
                }
            }
            hn = (fr | 0) < 2;
            t: do {
                if (!hn) {
                    dn = rr + (fr << 2) | 0;
                    s[dn >> 2] = Er;
                    vn = (t | 0) == 0;
                    if (!vn) {
                        mn = (fr | 0) > 0;
                        if (mn) {
                            L = t;
                            Dn = Er
                        } else {
                            gn = t >>> 0 > 256;
                            yn = gn ? 256 : t;
                            bn = s[rr >> 2] | 0;
                            oo(Er | 0, bn | 0, yn | 0) | 0;
                            wn = (yn | 0) == (t | 0);
                            if (wn) {
                                break
                            } else {
                                x = t;
                                Bn = yn
                            }
                            while (1) {
                                Pn = x - Bn | 0;
                                jn = Pn >>> 0 > 256;
                                Fn = jn ? 256 : Pn;
                                oo(Er | 0, bn | 0, Fn | 0) | 0;
                                In = (Pn | 0) == (Fn | 0);
                                if (In) {
                                    break t
                                } else {
                                    x = Pn;
                                    Bn = Fn
                                }
                            }
                        }
                        while (1) {
                            Mn = L >>> 0 > 256;
                            Sn = Mn ? 256 : L;
                            _n = s[rr >> 2] | 0;
                            oo(Dn | 0, _n | 0, Sn | 0) | 0;
                            An = _n;
                            cr = 0;
                            while (1) {
                                Nn = rr + (cr << 2) | 0;
                                Cn = cr + 1 | 0;
                                kn = rr + (Cn << 2) | 0;
                                Ln = s[kn >> 2] | 0;
                                oo(An | 0, Ln | 0, Sn | 0) | 0;
                                On = An + Sn | 0;
                                s[Nn >> 2] = On;
                                or = (Cn | 0) == (fr | 0);
                                if (or) {
                                    break
                                } else {
                                    An = Ln;
                                    cr = Cn
                                }
                            }
                            En = (L | 0) == (Sn | 0);
                            if (En) {
                                break t
                            }
                            xn = L - Sn | 0;
                            P = s[dn >> 2] | 0;
                            L = xn;
                            Dn = P
                        }
                    }
                }
            } while (0);
            s[ir >> 2] = d;
            qn = (y | 0) > 1;
            n: do {
                if (qn) {
                    E = y;
                    O = d;
                    $n = d;
                    pr = 1;
                    while (1) {
                        Rn = O + j | 0;
                        Un = E + -2 | 0;
                        zn = a + (Un << 2) | 0;
                        Wn = s[zn >> 2] | 0;
                        wr = Wn + t | 0;
                        B = 0 - wr | 0;
                        Xn = O + B | 0;
                        Jn = Ho[n & 7]($n, Xn) | 0;
                        Kn = (Jn | 0) > -1;
                        if (Kn) {
                            Qn = Ho[n & 7]($n, Rn) | 0;
                            Gn = (Qn | 0) > -1;
                            if (Gn) {
                                ar = pr;
                                break
                            }
                        }
                        Yn = Ho[n & 7](Xn, Rn) | 0;
                        Zn = (Yn | 0) > -1;
                        er = pr + 1 | 0;
                        tr = ir + (pr << 2) | 0;
                        if (Zn) {
                            s[tr >> 2] = Xn;
                            nr = E + -1 | 0;
                            l = Xn;
                            v = nr
                        } else {
                            s[tr >> 2] = Rn;
                            l = Rn;
                            v = Un
                        }
                        q = (v | 0) > 1;
                        if (!q) {
                            ar = er;
                            break
                        }
                        _ = s[ir >> 2] | 0;
                        E = v;
                        O = l;
                        $n = _;
                        pr = er
                    }
                    R = (ar | 0) < 2;
                    if (R) {
                        dt = Er
                    } else {
                        U = ir + (ar << 2) | 0;
                        s[U >> 2] = Er;
                        z = (t | 0) == 0;
                        if (z) {
                            dt = Er
                        } else {
                            W = (ar | 0) > 0;
                            if (W) {
                                k = t;
                                at = Er
                            } else {
                                X = t >>> 0 > 256;
                                V = X ? 256 : t;
                                $ = s[ir >> 2] | 0;
                                oo(Er | 0, $ | 0, V | 0) | 0;
                                J = (V | 0) == (t | 0);
                                if (J) {
                                    dt = Er;
                                    break
                                } else {
                                    T = t;
                                    lt = V
                                }
                                while (1) {
                                    ft = T - lt | 0;
                                    ct = ft >>> 0 > 256;
                                    ht = ct ? 256 : ft;
                                    oo(Er | 0, $ | 0, ht | 0) | 0;
                                    pt = (ft | 0) == (ht | 0);
                                    if (pt) {
                                        dt = Er;
                                        break n
                                    } else {
                                        T = ft;
                                        lt = ht
                                    }
                                }
                            }
                            while (1) {
                                st = k >>> 0 > 256;
                                G = st ? 256 : k;
                                ot = s[ir >> 2] | 0;
                                oo(at | 0, ot | 0, G | 0) | 0;
                                rt = ot;
                                lr = 0;
                                while (1) {
                                    Z = ir + (lr << 2) | 0;
                                    et = lr + 1 | 0;
                                    tt = ir + (et << 2) | 0;
                                    nt = s[tt >> 2] | 0;
                                    oo(rt | 0, nt | 0, G | 0) | 0;
                                    it = rt + G | 0;
                                    s[Z >> 2] = it;
                                    sr = (et | 0) == (ar | 0);
                                    if (sr) {
                                        break
                                    } else {
                                        rt = nt;
                                        lr = et
                                    }
                                }
                                K = (k | 0) == (G | 0);
                                if (K) {
                                    dt = Er;
                                    break n
                                }
                                Y = k - G | 0;
                                D = s[U >> 2] | 0;
                                k = Y;
                                at = D
                            }
                        }
                    }
                } else {
                    dt = Er
                }
            } while (0);
            c = xr;
            return
        }

        function ks(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                i = 0,
                s = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0;
            f = c;
            n = Ls(e, t) | 0;
            i = r[n >> 0] | 0;
            s = t & 255;
            o = i << 24 >> 24 == s << 24 >> 24;
            u = o ? n : 0;
            c = f;
            return u | 0
        }

        function Ls(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0;
            var N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0;
            var X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0;
            et = c;
            a = t & 255;
            f = (a | 0) == 0;
            if (f) {
                V = no(e | 0) | 0;
                $ = e + V | 0;
                n = $;
                c = et;
                return n | 0
            }
            E = e;
            _ = E & 3;
            z = (_ | 0) == 0;
            e: do {
                if (z) {
                    i = e
                } else {
                    X = t & 255;
                    o = e;
                    while (1) {
                        p = r[o >> 0] | 0;
                        d = p << 24 >> 24 == 0;
                        if (d) {
                            n = o;
                            Z = 13;
                            break
                        }
                        v = p << 24 >> 24 == X << 24 >> 24;
                        J = o + 1 | 0;
                        if (v) {
                            n = o;
                            Z = 13;
                            break
                        }
                        K = J;
                        l = K & 3;
                        h = (l | 0) == 0;
                        if (h) {
                            i = J;
                            break e
                        } else {
                            o = J
                        }
                    }
                    if ((Z | 0) == 13) {
                        c = et;
                        return n | 0
                    }
                }
            } while (0);
            m = rt(a, 16843009) | 0;
            g = s[i >> 2] | 0;
            y = g + -16843009 | 0;
            b = g & -2139062144;
            w = b ^ -2139062144;
            S = w & y;
            x = (S | 0) == 0;
            t: do {
                if (x) {
                    D = g;
                    Y = i;
                    while (1) {
                        M = D ^ m;
                        P = M + -16843009 | 0;
                        H = M & -2139062144;
                        B = H ^ -2139062144;
                        j = B & P;
                        F = (j | 0) == 0;
                        N = Y + 4 | 0;
                        if (!F) {
                            G = Y;
                            break t
                        }
                        T = s[N >> 2] | 0;
                        C = T + -16843009 | 0;
                        k = T & -2139062144;
                        L = k ^ -2139062144;
                        A = L & C;
                        O = (A | 0) == 0;
                        if (O) {
                            D = T;
                            Y = N
                        } else {
                            G = N;
                            break
                        }
                    }
                } else {
                    G = i
                }
            } while (0);
            I = t & 255;
            u = G;
            while (1) {
                q = r[u >> 0] | 0;
                R = q << 24 >> 24 == 0;
                U = q << 24 >> 24 == I << 24 >> 24;
                Q = R | U;
                W = u + 1 | 0;
                if (Q) {
                    n = u;
                    break
                } else {
                    u = W
                }
            }
            c = et;
            return n | 0
        }

        function As(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                s = 0,
                o = 0,
                u = 0;
            u = c;
            n = no(e | 0) | 0;
            r = n + 1 | 0;
            i = Ms(r) | 0;
            s = (i | 0) == (0 | 0);
            if (s) {
                t = 0;
                c = u;
                return t | 0
            }
            oo(i | 0, e | 0, r | 0) | 0;
            t = i;
            c = u;
            return t | 0
        }

        function Os(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0;
            var N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0;
            var X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0;
            var ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0;
            var Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0;
            var Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0;
            var yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0;
            var Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0;
            var ir = 0,
                sr = 0,
                or = 0,
                ur = 0,
                ar = 0,
                fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0;
            var Tr = 0,
                Nr = 0,
                Cr = 0,
                kr = 0,
                Lr = 0,
                Ar = 0,
                Or = 0,
                Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0;
            var Wr = 0,
                Xr = 0,
                Vr = 0,
                $r = 0,
                Jr = 0,
                Kr = 0,
                Qr = 0,
                Gr = 0,
                Yr = 0,
                Zr = 0,
                ei = 0,
                ti = 0,
                ni = 0,
                ri = 0,
                ii = 0,
                si = 0,
                oi = 0,
                ui = 0,
                ai = 0,
                fi = 0;
            var li = 0,
                ci = 0,
                hi = 0,
                pi = 0,
                di = 0,
                vi = 0,
                mi = 0,
                gi = 0,
                yi = 0,
                bi = 0,
                wi = 0,
                Ei = 0,
                Si = 0,
                xi = 0,
                Ti = 0,
                Ni = 0,
                Ci = 0,
                ki = 0,
                Li = 0,
                Ai = 0;
            var Oi = 0,
                Mi = 0,
                _i = 0,
                Di = 0,
                Pi = 0,
                Hi = 0,
                Bi = 0,
                ji = 0,
                Fi = 0,
                Ii = 0,
                qi = 0,
                Ri = 0,
                Ui = 0,
                zi = 0,
                Wi = 0,
                Xi = 0,
                Vi = 0,
                $i = 0,
                Ji = 0,
                Ki = 0;
            var Qi = 0,
                Gi = 0,
                Yi = 0,
                Zi = 0,
                es = 0,
                ts = 0,
                ns = 0,
                rs = 0,
                is = 0,
                ss = 0,
                os = 0,
                us = 0,
                as = 0,
                fs = 0,
                ls = 0,
                cs = 0,
                hs = 0,
                ps = 0,
                ds = 0,
                vs = 0;
            var ms = 0,
                gs = 0,
                ys = 0,
                bs = 0,
                ws = 0,
                Es = 0,
                Ss = 0,
                xs = 0,
                Ts = 0,
                Ns = 0,
                Cs = 0,
                Ls = 0,
                As = 0,
                Os = 0,
                Ms = 0,
                _s = 0,
                Ds = 0,
                Ps = 0,
                Hs = 0,
                Bs = 0;
            var js = 0,
                Fs = 0,
                Is = 0,
                qs = 0,
                Rs = 0,
                Us = 0,
                zs = 0,
                Ws = 0,
                Xs = 0,
                Vs = 0,
                $s = 0,
                Js = 0,
                Ks = 0,
                Ys = 0,
                Zs = 0,
                eo = 0,
                to = 0,
                no = 0,
                ro = 0,
                io = 0;
            var so = 0,
                oo = 0,
                uo = 0,
                ao = 0,
                fo = 0,
                lo = 0,
                co = 0,
                ho = 0,
                po = 0,
                vo = 0,
                mo = 0,
                go = 0,
                yo = 0,
                bo = 0,
                wo = 0,
                Eo = 0,
                So = 0,
                xo = 0,
                To = 0;
            To = c;
            c = c + 1056 | 0;
            Ms = To + 1024 | 0;
            yo = To;
            S = r[t >> 0] | 0;
            x = S << 24 >> 24 == 0;
            if (x) {
                u = e;
                c = To;
                return u | 0
            }
            kn = S << 24 >> 24;
            ui = ks(e, kn) | 0;
            yi = (ui | 0) == (0 | 0);
            if (yi) {
                u = 0;
                c = To;
                return u | 0
            }
            Ai = t + 1 | 0;
            qi = r[Ai >> 0] | 0;
            Gi = qi << 24 >> 24 == 0;
            if (Gi) {
                u = ui;
                c = To;
                return u | 0
            }
            as = ui + 1 | 0;
            bs = r[as >> 0] | 0;
            T = bs << 24 >> 24 == 0;
            if (T) {
                u = 0;
                c = To;
                return u | 0
            }
            H = t + 2 | 0;
            V = r[H >> 0] | 0;
            rt = V << 24 >> 24 == 0;
            if (rt) {
                dt = S & 255;
                Nt = dt << 8;
                Bt = qi & 255;
                $t = Bt | Nt;
                sn = r[ui >> 0] | 0;
                mn = sn & 255;
                Ln = bs & 255;
                In = mn << 8;
                Qn = In | Ln;
                h = as;
                Yr = bs;
                _s = Qn;
                while (1) {
                    ur = _s & 65535;
                    yr = (ur | 0) == ($t | 0);
                    if (yr) {
                        a = h;
                        fi = Yr;
                        break
                    }
                    Ar = ur << 8;
                    qr = h + 1 | 0;
                    Gr = r[qr >> 0] | 0;
                    si = Gr & 255;
                    oi = si | Ar;
                    ai = Gr << 24 >> 24 == 0;
                    if (ai) {
                        a = qr;
                        fi = 0;
                        break
                    } else {
                        h = qr;
                        Yr = Gr;
                        _s = oi
                    }
                }
                li = fi << 24 >> 24 == 0;
                ci = a + -1 | 0;
                n = li ? 0 : ci;
                u = n;
                c = To;
                return u | 0
            }
            hi = ui + 2 | 0;
            pi = r[hi >> 0] | 0;
            di = pi << 24 >> 24 == 0;
            if (di) {
                u = 0;
                c = To;
                return u | 0
            }
            vi = t + 3 | 0;
            mi = r[vi >> 0] | 0;
            gi = mi << 24 >> 24 == 0;
            if (gi) {
                bi = S & 255;
                wi = bi << 24;
                Ei = qi & 255;
                Si = Ei << 16;
                xi = Si | wi;
                Ti = V & 255;
                Ni = Ti << 8;
                Ci = xi | Ni;
                ki = r[ui >> 0] | 0;
                Li = ki & 255;
                Oi = Li << 24;
                Mi = bs & 255;
                _i = Mi << 16;
                Di = pi & 255;
                Pi = Di << 8;
                Hi = Pi | _i;
                Bi = Hi | Oi;
                ji = (Bi | 0) == (Ci | 0);
                if (ji) {
                    l = hi;
                    g = 0
                } else {
                    v = hi;
                    Ds = Bi;
                    while (1) {
                        Fi = v + 1 | 0;
                        Ii = r[Fi >> 0] | 0;
                        Ri = Ii & 255;
                        Ui = Ri | Ds;
                        zi = Ui << 8;
                        Wi = Ii << 24 >> 24 == 0;
                        Xi = (zi | 0) == (Ci | 0);
                        uo = Wi | Xi;
                        if (uo) {
                            l = Fi;
                            g = Wi;
                            break
                        } else {
                            v = Fi;
                            Ds = zi
                        }
                    }
                }
                Vi = l + -2 | 0;
                o = g ? 0 : Vi;
                u = o;
                c = To;
                return u | 0
            }
            $i = ui + 3 | 0;
            Ji = r[$i >> 0] | 0;
            Ki = Ji << 24 >> 24 == 0;
            if (Ki) {
                u = 0;
                c = To;
                return u | 0
            }
            Qi = t + 4 | 0;
            Yi = r[Qi >> 0] | 0;
            Zi = Yi << 24 >> 24 == 0;
            if (Zi) {
                es = S & 255;
                ts = es << 24;
                ns = qi & 255;
                rs = ns << 16;
                is = rs | ts;
                ss = V & 255;
                os = ss << 8;
                us = is | os;
                fs = mi & 255;
                ls = us | fs;
                cs = r[ui >> 0] | 0;
                hs = cs & 255;
                ps = hs << 24;
                ds = bs & 255;
                vs = ds << 16;
                ms = pi & 255;
                gs = ms << 8;
                ys = Ji & 255;
                ws = gs | vs;
                Es = ws | ys;
                Ss = Es | ps;
                xs = (Ss | 0) == (ls | 0);
                if (xs) {
                    f = $i;
                    y = 0
                } else {
                    d = $i;
                    Ps = Ss;
                    while (1) {
                        Ts = Ps << 8;
                        Ns = d + 1 | 0;
                        Cs = r[Ns >> 0] | 0;
                        Ls = Cs & 255;
                        As = Ls | Ts;
                        Os = Cs << 24 >> 24 == 0;
                        N = (As | 0) == (ls | 0);
                        ao = Os | N;
                        if (ao) {
                            f = Ns;
                            y = Os;
                            break
                        } else {
                            d = Ns;
                            Ps = As
                        }
                    }
                }
                C = f + -3 | 0;
                i = y ? 0 : C;
                u = i;
                c = To;
                return u | 0
            }
            s[Ms + 0 >> 2] = 0 | 0;
            s[Ms + 4 >> 2] = 0 | 0;
            s[Ms + 8 >> 2] = 0 | 0;
            s[Ms + 12 >> 2] = 0 | 0;
            s[Ms + 16 >> 2] = 0 | 0;
            s[Ms + 20 >> 2] = 0 | 0;
            s[Ms + 24 >> 2] = 0 | 0;
            s[Ms + 28 >> 2] = 0 | 0;
            M = S;
            ro = 0;
            while (1) {
                k = ui + ro | 0;
                L = r[k >> 0] | 0;
                A = L << 24 >> 24 == 0;
                if (A) {
                    u = 0;
                    xo = 79;
                    break
                }
                O = M & 255;
                _ = O & 31;
                D = 1 << _;
                P = O >>> 5;
                B = Ms + (P << 2) | 0;
                j = s[B >> 2] | 0;
                F = j | D;
                s[B >> 2] = F;
                I = ro + 1 | 0;
                q = yo + (O << 2) | 0;
                s[q >> 2] = I;
                R = t + I | 0;
                U = r[R >> 0] | 0;
                z = U << 24 >> 24 == 0;
                if (z) {
                    break
                } else {
                    M = U;
                    ro = I
                }
            }
            if ((xo | 0) == 79) {
                c = To;
                return u | 0
            }
            W = I >>> 0 > 1;
            e: do {
                if (W) {
                    Zr = 1;
                    js = -1;
                    Ws = 0;
                    t: while (1) {
                        ei = Zr;
                        Us = Ws;
                        ho = 1;
                        while (1) {
                            ti = ei;
                            zs = Us;
                            n: while (1) {
                                $ = ti;
                                Js = 1;
                                while (1) {
                                    Y = Js + js | 0;
                                    Z = t + Y | 0;
                                    et = r[Z >> 0] | 0;
                                    tt = t + $ | 0;
                                    nt = r[tt >> 0] | 0;
                                    it = et << 24 >> 24 == nt << 24 >> 24;
                                    if (!it) {
                                        break n
                                    }
                                    st = (Js | 0) == (ho | 0);
                                    Q = Js + 1 | 0;
                                    if (st) {
                                        break
                                    }
                                    K = Q + zs | 0;
                                    G = K >>> 0 < I >>> 0;
                                    if (G) {
                                        $ = K;
                                        Js = Q
                                    } else {
                                        Hs = js;
                                        lo = ho;
                                        break t
                                    }
                                }
                                ot = zs + ho | 0;
                                ut = ot + 1 | 0;
                                at = ut >>> 0 < I >>> 0;
                                if (at) {
                                    ti = ut;
                                    zs = ot
                                } else {
                                    Hs = js;
                                    lo = ho;
                                    break t
                                }
                            }
                            ft = (et & 255) > (nt & 255);
                            lt = $ - js | 0;
                            if (!ft) {
                                break
                            }
                            X = $ + 1 | 0;
                            J = X >>> 0 < I >>> 0;
                            if (J) {
                                ei = X;
                                Us = $;
                                ho = lt
                            } else {
                                Hs = js;
                                lo = lt;
                                break t
                            }
                        }
                        ct = zs + 1 | 0;
                        ht = zs + 2 | 0;
                        pt = ht >>> 0 < I >>> 0;
                        if (pt) {
                            Zr = ht;
                            js = zs;
                            Ws = ct
                        } else {
                            Hs = zs;
                            lo = 1;
                            break
                        }
                    }
                    ni = 1;
                    Rs = -1;
                    $s = 0;
                    while (1) {
                        ii = ni;
                        Xs = $s;
                        mo = 1;
                        while (1) {
                            ri = ii;
                            Vs = Xs;
                            r: while (1) {
                                St = ri;
                                Ks = 1;
                                while (1) {
                                    yt = Ks + Rs | 0;
                                    bt = t + yt | 0;
                                    wt = r[bt >> 0] | 0;
                                    Et = t + St | 0;
                                    xt = r[Et >> 0] | 0;
                                    Tt = wt << 24 >> 24 == xt << 24 >> 24;
                                    if (!Tt) {
                                        break r
                                    }
                                    Ct = (Ks | 0) == (mo | 0);
                                    mt = Ks + 1 | 0;
                                    if (Ct) {
                                        break
                                    }
                                    vt = mt + Vs | 0;
                                    gt = vt >>> 0 < I >>> 0;
                                    if (gt) {
                                        St = vt;
                                        Ks = mt
                                    } else {
                                        Bs = Hs;
                                        qs = Rs;
                                        co = lo;
                                        vo = mo;
                                        break e
                                    }
                                }
                                kt = Vs + mo | 0;
                                Lt = kt + 1 | 0;
                                At = Lt >>> 0 < I >>> 0;
                                if (At) {
                                    ri = Lt;
                                    Vs = kt
                                } else {
                                    Bs = Hs;
                                    qs = Rs;
                                    co = lo;
                                    vo = mo;
                                    break e
                                }
                            }
                            Ot = (wt & 255) < (xt & 255);
                            Mt = St - Rs | 0;
                            if (!Ot) {
                                break
                            }
                            _t = St + 1 | 0;
                            Dt = _t >>> 0 < I >>> 0;
                            if (Dt) {
                                ii = _t;
                                Xs = St;
                                mo = Mt
                            } else {
                                Bs = Hs;
                                qs = Rs;
                                co = lo;
                                vo = Mt;
                                break e
                            }
                        }
                        Pt = Vs + 1 | 0;
                        Ht = Vs + 2 | 0;
                        jt = Ht >>> 0 < I >>> 0;
                        if (jt) {
                            ni = Ht;
                            Rs = Vs;
                            $s = Pt
                        } else {
                            Bs = Hs;
                            qs = Vs;
                            co = lo;
                            vo = 1;
                            break
                        }
                    }
                } else {
                    Bs = -1;
                    qs = -1;
                    co = 1;
                    vo = 1
                }
            } while (0);
            Ft = qs + 1 | 0;
            It = Bs + 1 | 0;
            qt = Ft >>> 0 > It >>> 0;
            po = qt ? vo : co;
            Is = qt ? qs : Bs;
            Rt = t + po | 0;
            Ut = Is + 1 | 0;
            zt = Gs(t, Rt, Ut) | 0;
            Wt = (zt | 0) == 0;
            if (Wt) {
                Gt = I - po | 0;
                Yt = I | 63;
                so = (I | 0) == (po | 0);
                if (so) {
                    sr = Yt;
                    go = I
                } else {
                    m = ui;
                    io = 0;
                    wo = ui;
                    i: while (1) {
                        en = wo;
                        tn = m;
                        nn = en - tn | 0;
                        rn = nn >>> 0 < I >>> 0;
                        do {
                            if (rn) {
                                on = Qs(wo, 0, Yt) | 0;
                                un = (on | 0) == (0 | 0);
                                if (un) {
                                    cn = wo + Yt | 0;
                                    So = cn;
                                    break
                                } else {
                                    an = on;
                                    fn = an - tn | 0;
                                    ln = fn >>> 0 < I >>> 0;
                                    if (ln) {
                                        u = 0;
                                        xo = 79;
                                        break i
                                    } else {
                                        So = on;
                                        break
                                    }
                                }
                            } else {
                                So = wo
                            }
                        } while (0);
                        hn = m + ro | 0;
                        pn = r[hn >> 0] | 0;
                        dn = pn & 255;
                        vn = dn >>> 5;
                        gn = Ms + (vn << 2) | 0;
                        yn = s[gn >> 2] | 0;
                        bn = dn & 31;
                        wn = 1 << bn;
                        En = wn & yn;
                        Sn = (En | 0) == 0;
                        if (Sn) {
                            er = m + I | 0;
                            m = er;
                            io = 0;
                            wo = So;
                            continue
                        }
                        xn = yo + (dn << 2) | 0;
                        Tn = s[xn >> 2] | 0;
                        Nn = I - Tn | 0;
                        Cn = (I | 0) == (Tn | 0);
                        if (!Cn) {
                            oo = (io | 0) != 0;
                            An = Nn >>> 0 < po >>> 0;
                            fo = oo & An;
                            Ys = fo ? Gt : Nn;
                            On = m + Ys | 0;
                            m = On;
                            io = 0;
                            wo = So;
                            continue
                        }
                        Mn = Ut >>> 0 > io >>> 0;
                        b = Mn ? Ut : io;
                        _n = t + b | 0;
                        Dn = r[_n >> 0] | 0;
                        Pn = Dn << 24 >> 24 == 0;
                        s: do {
                            if (Pn) {
                                no = Ut
                            } else {
                                E = Dn;
                                eo = b;
                                while (1) {
                                    qn = m + eo | 0;
                                    Rn = r[qn >> 0] | 0;
                                    Un = E << 24 >> 24 == Rn << 24 >> 24;
                                    Bn = eo + 1 | 0;
                                    if (!Un) {
                                        break
                                    }
                                    Hn = t + Bn | 0;
                                    jn = r[Hn >> 0] | 0;
                                    Fn = jn << 24 >> 24 == 0;
                                    if (Fn) {
                                        no = Ut;
                                        break s
                                    } else {
                                        E = jn;
                                        eo = Bn
                                    }
                                }
                                zn = eo - Is | 0;
                                Wn = m + zn | 0;
                                m = Wn;
                                io = 0;
                                wo = So;
                                continue i
                            }
                        } while (0);
                        while (1) {
                            Xn = no >>> 0 > io >>> 0;
                            if (!Xn) {
                                u = m;
                                xo = 79;
                                break i
                            }
                            Vn = no + -1 | 0;
                            $n = t + Vn | 0;
                            Jn = r[$n >> 0] | 0;
                            Kn = m + Vn | 0;
                            Gn = r[Kn >> 0] | 0;
                            Yn = Jn << 24 >> 24 == Gn << 24 >> 24;
                            if (Yn) {
                                no = Vn
                            } else {
                                break
                            }
                        }
                        Zn = m + po | 0;
                        m = Zn;
                        io = Gt;
                        wo = So
                    }
                    if ((xo | 0) == 79) {
                        c = To;
                        return u | 0
                    }
                }
            } else {
                Xt = I - Is | 0;
                Vt = Xt + -1 | 0;
                Jt = Is >>> 0 > Vt >>> 0;
                Fs = Jt ? Is : Vt;
                Kt = Fs + 1 | 0;
                Qt = I | 63;
                sr = Qt;
                go = Kt
            }
            Zt = t + Ut | 0;
            p = ui;
            bo = ui;
            o: while (1) {
                tr = bo;
                nr = p;
                rr = tr - nr | 0;
                ir = rr >>> 0 < I >>> 0;
                do {
                    if (ir) {
                        or = Qs(bo, 0, sr) | 0;
                        ar = (or | 0) == (0 | 0);
                        if (ar) {
                            hr = bo + sr | 0;
                            Eo = hr;
                            break
                        } else {
                            fr = or;
                            lr = fr - nr | 0;
                            cr = lr >>> 0 < I >>> 0;
                            if (cr) {
                                u = 0;
                                xo = 79;
                                break o
                            } else {
                                Eo = or;
                                break
                            }
                        }
                    } else {
                        Eo = bo
                    }
                } while (0);
                pr = p + ro | 0;
                dr = r[pr >> 0] | 0;
                vr = dr & 255;
                mr = vr >>> 5;
                gr = Ms + (mr << 2) | 0;
                br = s[gr >> 2] | 0;
                wr = vr & 31;
                Er = 1 << wr;
                Sr = Er & br;
                xr = (Sr | 0) == 0;
                if (xr) {
                    Or = p + I | 0;
                    p = Or;
                    bo = Eo;
                    continue
                }
                Tr = yo + (vr << 2) | 0;
                Nr = s[Tr >> 2] | 0;
                Cr = (I | 0) == (Nr | 0);
                if (!Cr) {
                    kr = I - Nr | 0;
                    Lr = p + kr | 0;
                    p = Lr;
                    bo = Eo;
                    continue
                }
                Mr = r[Zt >> 0] | 0;
                _r = Mr << 24 >> 24 == 0;
                u: do {
                    if (_r) {
                        to = Ut
                    } else {
                        w = Mr;
                        Zs = Ut;
                        while (1) {
                            jr = p + Zs | 0;
                            Fr = r[jr >> 0] | 0;
                            Ir = w << 24 >> 24 == Fr << 24 >> 24;
                            Pr = Zs + 1 | 0;
                            if (!Ir) {
                                break
                            }
                            Dr = t + Pr | 0;
                            Hr = r[Dr >> 0] | 0;
                            Br = Hr << 24 >> 24 == 0;
                            if (Br) {
                                to = Ut;
                                break u
                            } else {
                                w = Hr;
                                Zs = Pr
                            }
                        }
                        Rr = Zs - Is | 0;
                        Ur = p + Rr | 0;
                        p = Ur;
                        bo = Eo;
                        continue o
                    }
                } while (0);
                while (1) {
                    zr = (to | 0) == 0;
                    if (zr) {
                        u = p;
                        xo = 79;
                        break o
                    }
                    Wr = to + -1 | 0;
                    Xr = t + Wr | 0;
                    Vr = r[Xr >> 0] | 0;
                    $r = p + Wr | 0;
                    Jr = r[$r >> 0] | 0;
                    Kr = Vr << 24 >> 24 == Jr << 24 >> 24;
                    if (Kr) {
                        to = Wr
                    } else {
                        break
                    }
                }
                Qr = p + go | 0;
                p = Qr;
                bo = Eo
            }
            if ((xo | 0) == 79) {
                c = To;
                return u | 0
            }
            return 0 | 0
        }

        function Ms(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0;
            var x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0;
            var z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0;
            var ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0;
            var Ot = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Qt = 0,
                Yt = 0,
                Zt = 0;
            var en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0;
            var En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0;
            var Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0;
            var ur = 0,
                ar = 0,
                fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0,
                Tr = 0,
                Nr = 0,
                Cr = 0;
            var kr = 0,
                Lr = 0,
                Ar = 0,
                Or = 0,
                Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0,
                Wr = 0,
                Xr = 0,
                Vr = 0;
            var $r = 0,
                Jr = 0,
                Kr = 0,
                Qr = 0,
                Gr = 0,
                Yr = 0,
                Zr = 0,
                ei = 0,
                ti = 0,
                ni = 0,
                ri = 0,
                ii = 0,
                si = 0,
                oi = 0,
                ui = 0,
                ai = 0,
                fi = 0,
                li = 0,
                ci = 0,
                hi = 0;
            var pi = 0,
                di = 0,
                vi = 0,
                mi = 0,
                gi = 0,
                yi = 0,
                bi = 0,
                wi = 0,
                Ei = 0,
                Si = 0,
                xi = 0,
                Ti = 0,
                Ni = 0,
                Ci = 0,
                ki = 0,
                Li = 0,
                Ai = 0,
                Oi = 0,
                Mi = 0,
                _i = 0;
            var Di = 0,
                Pi = 0,
                Hi = 0,
                Bi = 0,
                ji = 0,
                Fi = 0,
                Ii = 0,
                qi = 0,
                Ri = 0,
                Ui = 0,
                zi = 0,
                Wi = 0,
                Xi = 0,
                Vi = 0,
                $i = 0,
                Ji = 0,
                Ki = 0,
                Qi = 0,
                Gi = 0,
                Yi = 0;
            var Zi = 0,
                es = 0,
                ts = 0,
                ns = 0,
                rs = 0,
                is = 0,
                ss = 0,
                os = 0,
                us = 0,
                as = 0,
                fs = 0,
                ls = 0,
                cs = 0,
                hs = 0,
                ps = 0,
                ds = 0,
                vs = 0,
                ms = 0,
                gs = 0,
                ys = 0;
            var bs = 0,
                ws = 0,
                Es = 0,
                Ss = 0,
                xs = 0,
                Ts = 0,
                Ns = 0,
                Cs = 0,
                ks = 0,
                Ls = 0,
                As = 0,
                Os = 0,
                Ms = 0,
                _s = 0,
                Ds = 0,
                Ps = 0,
                Hs = 0,
                Bs = 0,
                js = 0,
                Fs = 0;
            var Is = 0,
                qs = 0,
                Rs = 0,
                Us = 0,
                zs = 0,
                Ws = 0,
                Xs = 0,
                Vs = 0,
                $s = 0,
                Js = 0,
                Ks = 0,
                Qs = 0,
                Gs = 0,
                Ys = 0,
                Zs = 0,
                eo = 0,
                to = 0,
                no = 0,
                ro = 0,
                io = 0;
            var so = 0,
                oo = 0,
                uo = 0,
                ao = 0,
                fo = 0,
                lo = 0,
                co = 0,
                ho = 0,
                po = 0,
                vo = 0,
                mo = 0,
                go = 0,
                yo = 0,
                bo = 0,
                wo = 0,
                Eo = 0,
                So = 0,
                xo = 0,
                To = 0,
                No = 0;
            var Co = 0,
                ko = 0,
                Lo = 0,
                Ao = 0,
                Oo = 0,
                Mo = 0,
                _o = 0,
                Do = 0,
                Po = 0,
                Ho = 0,
                Bo = 0,
                jo = 0,
                Fo = 0,
                Io = 0,
                qo = 0,
                Ro = 0,
                Uo = 0,
                zo = 0,
                Wo = 0,
                Xo = 0;
            var Vo = 0,
                $o = 0,
                Jo = 0,
                Ko = 0,
                Qo = 0,
                Go = 0,
                Yo = 0,
                Zo = 0,
                eu = 0,
                tu = 0,
                nu = 0,
                ru = 0,
                iu = 0,
                su = 0,
                ou = 0,
                uu = 0,
                au = 0,
                fu = 0,
                lu = 0,
                cu = 0;
            var hu = 0,
                pu = 0,
                du = 0,
                vu = 0,
                mu = 0,
                gu = 0,
                yu = 0,
                bu = 0,
                wu = 0,
                Eu = 0,
                Su = 0,
                xu = 0,
                Tu = 0,
                Nu = 0,
                Cu = 0,
                ku = 0,
                Lu = 0,
                Au = 0,
                Ou = 0,
                Mu = 0;
            var _u = 0,
                Du = 0,
                Pu = 0,
                Hu = 0,
                Bu = 0,
                ju = 0,
                Fu = 0,
                Iu = 0,
                qu = 0,
                Ru = 0,
                Uu = 0,
                zu = 0,
                Wu = 0,
                Xu = 0,
                Vu = 0,
                $u = 0,
                Ju = 0,
                Ku = 0,
                Qu = 0,
                Gu = 0;
            var Yu = 0,
                Zu = 0,
                ea = 0,
                ta = 0,
                na = 0,
                ra = 0,
                ia = 0,
                sa = 0,
                oa = 0,
                ua = 0,
                aa = 0,
                fa = 0,
                la = 0,
                ca = 0,
                ha = 0,
                pa = 0,
                da = 0,
                va = 0,
                ma = 0,
                ga = 0;
            var ya = 0,
                ba = 0,
                wa = 0,
                Ea = 0,
                Sa = 0,
                xa = 0,
                Ta = 0,
                Na = 0,
                Ca = 0,
                ka = 0,
                La = 0,
                Aa = 0,
                Oa = 0,
                Ma = 0,
                _a = 0,
                Da = 0,
                Pa = 0,
                Ha = 0,
                Ba = 0,
                ja = 0;
            var Fa = 0,
                Ia = 0,
                qa = 0,
                Ra = 0,
                Ua = 0,
                za = 0,
                Wa = 0,
                Xa = 0,
                Va = 0,
                $a = 0,
                Ja = 0,
                Ka = 0,
                Qa = 0,
                Ga = 0,
                Ya = 0,
                Za = 0,
                ef = 0,
                tf = 0,
                nf = 0,
                rf = 0;
            var sf = 0,
                of = 0,
                uf = 0,
                af = 0,
                ff = 0,
                lf = 0,
                cf = 0,
                hf = 0,
                pf = 0,
                df = 0,
                vf = 0,
                mf = 0,
                gf = 0,
                yf = 0,
                bf = 0,
                wf = 0,
                Ef = 0,
                Sf = 0,
                xf = 0,
                Tf = 0;
            var Nf = 0,
                Cf = 0,
                kf = 0,
                Lf = 0,
                Af = 0,
                Of = 0,
                Mf = 0,
                _f = 0,
                Df = 0,
                Pf = 0,
                Hf = 0,
                Bf = 0,
                jf = 0,
                Ff = 0,
                If = 0,
                qf = 0,
                Rf = 0,
                Uf = 0,
                zf = 0,
                Wf = 0;
            var Xf = 0,
                Vf = 0,
                $f = 0,
                Jf = 0,
                Kf = 0,
                Qf = 0,
                Gf = 0,
                Yf = 0,
                Zf = 0,
                el = 0,
                tl = 0,
                nl = 0,
                rl = 0,
                il = 0,
                sl = 0,
                ol = 0,
                ul = 0,
                al = 0,
                fl = 0,
                ll = 0;
            var cl = 0,
                hl = 0,
                pl = 0,
                dl = 0,
                vl = 0,
                ml = 0,
                gl = 0,
                yl = 0,
                bl = 0,
                wl = 0,
                El = 0,
                Sl = 0,
                xl = 0,
                Tl = 0,
                Nl = 0,
                Cl = 0,
                kl = 0,
                Ll = 0,
                Al = 0,
                Ol = 0;
            var Ml = 0,
                _l = 0,
                Dl = 0,
                Pl = 0,
                Hl = 0,
                Bl = 0,
                jl = 0,
                Fl = 0,
                Il = 0,
                ql = 0,
                Rl = 0,
                Ul = 0,
                zl = 0,
                Wl = 0,
                Xl = 0,
                Vl = 0,
                $l = 0,
                Jl = 0,
                Kl = 0,
                Ql = 0;
            var Gl = 0,
                Yl = 0,
                Zl = 0,
                ec = 0,
                tc = 0,
                nc = 0,
                rc = 0,
                ic = 0,
                sc = 0,
                oc = 0,
                uc = 0,
                ac = 0,
                fc = 0,
                lc = 0,
                cc = 0,
                hc = 0,
                pc = 0,
                dc = 0,
                vc = 0,
                mc = 0;
            var gc = 0,
                yc = 0,
                bc = 0,
                wc = 0,
                Ec = 0,
                Sc = 0,
                xc = 0,
                Tc = 0,
                Nc = 0,
                Cc = 0,
                kc = 0,
                Lc = 0,
                Ac = 0,
                Oc = 0,
                Mc = 0,
                _c = 0,
                Dc = 0,
                Pc = 0,
                Hc = 0,
                Bc = 0;
            var jc = 0,
                Fc = 0,
                Ic = 0,
                qc = 0,
                Rc = 0,
                Uc = 0,
                zc = 0,
                Wc = 0,
                Xc = 0,
                Vc = 0,
                $c = 0,
                Jc = 0,
                Kc = 0,
                Qc = 0,
                Gc = 0,
                Yc = 0,
                Zc = 0,
                eh = 0,
                th = 0,
                nh = 0;
            var rh = 0,
                ih = 0,
                sh = 0,
                oh = 0,
                uh = 0,
                ah = 0,
                fh = 0,
                lh = 0,
                ch = 0,
                hh = 0,
                ph = 0,
                dh = 0,
                vh = 0,
                mh = 0,
                gh = 0,
                yh = 0,
                bh = 0,
                wh = 0,
                Eh = 0,
                Sh = 0;
            var xh = 0,
                Th = 0,
                Nh = 0,
                Ch = 0,
                kh = 0,
                Lh = 0,
                Ah = 0,
                Oh = 0,
                Mh = 0,
                _h = 0,
                Dh = 0,
                Ph = 0,
                Hh = 0,
                Bh = 0,
                jh = 0,
                Fh = 0,
                Ih = 0,
                qh = 0,
                Rh = 0,
                Uh = 0;
            var zh = 0,
                Wh = 0,
                Xh = 0,
                Vh = 0,
                $h = 0,
                Jh = 0,
                Kh = 0,
                Qh = 0,
                Gh = 0,
                Yh = 0,
                Zh = 0,
                ep = 0,
                tp = 0,
                np = 0,
                rp = 0,
                ip = 0,
                sp = 0,
                op = 0,
                up = 0,
                ap = 0;
            var fp = 0,
                lp = 0,
                cp = 0,
                hp = 0,
                pp = 0,
                dp = 0,
                vp = 0,
                mp = 0,
                gp = 0,
                yp = 0,
                bp = 0,
                wp = 0,
                Ep = 0,
                Sp = 0,
                xp = 0,
                Tp = 0,
                Np = 0,
                Cp = 0,
                kp = 0,
                Lp = 0;
            var Ap = 0,
                Op = 0,
                Mp = 0,
                _p = 0,
                Dp = 0,
                Pp = 0,
                Hp = 0,
                Bp = 0,
                jp = 0,
                Fp = 0,
                Ip = 0,
                qp = 0,
                Rp = 0,
                Up = 0,
                zp = 0,
                Wp = 0,
                Xp = 0,
                Vp = 0,
                $p = 0,
                Jp = 0;
            var Kp = 0,
                Qp = 0,
                Gp = 0,
                Yp = 0,
                Zp = 0,
                ed = 0,
                td = 0,
                nd = 0,
                rd = 0,
                id = 0,
                sd = 0,
                od = 0,
                ud = 0,
                ad = 0,
                fd = 0,
                ld = 0,
                cd = 0,
                hd = 0,
                pd = 0,
                dd = 0;
            var vd = 0,
                md = 0,
                gd = 0,
                yd = 0,
                bd = 0,
                wd = 0,
                Ed = 0,
                Sd = 0,
                xd = 0,
                Td = 0,
                Nd = 0,
                Cd = 0,
                kd = 0,
                Ld = 0,
                Ad = 0,
                Od = 0,
                Md = 0,
                _d = 0,
                Dd = 0,
                Pd = 0;
            var Hd = 0,
                Bd = 0,
                jd = 0,
                Fd = 0,
                Id = 0,
                qd = 0,
                Rd = 0,
                Ud = 0,
                zd = 0,
                Wd = 0,
                Xd = 0,
                Vd = 0,
                $d = 0,
                Jd = 0,
                Kd = 0,
                Qd = 0,
                Gd = 0,
                Yd = 0,
                Zd = 0,
                ev = 0;
            var tv = 0,
                nv = 0,
                rv = 0,
                iv = 0,
                sv = 0,
                ov = 0,
                uv = 0,
                av = 0,
                fv = 0,
                lv = 0,
                cv = 0,
                hv = 0,
                pv = 0,
                dv = 0,
                vv = 0,
                mv = 0,
                gv = 0,
                yv = 0,
                bv = 0,
                wv = 0;
            var Ev = 0,
                Sv = 0,
                xv = 0,
                Tv = 0,
                Nv = 0,
                Cv = 0,
                kv = 0,
                Lv = 0,
                Av = 0,
                Ov = 0,
                Mv = 0,
                _v = 0,
                Dv = 0,
                Pv = 0,
                Hv = 0,
                Bv = 0,
                jv = 0,
                Fv = 0,
                Iv = 0,
                qv = 0;
            var Rv = 0,
                Uv = 0,
                zv = 0,
                Wv = 0,
                Xv = 0,
                Vv = 0,
                $v = 0,
                Jv = 0,
                Kv = 0,
                Qv = 0,
                Gv = 0,
                Yv = 0,
                Zv = 0,
                em = 0,
                tm = 0,
                nm = 0,
                rm = 0,
                im = 0,
                sm = 0,
                om = 0;
            var um = 0,
                am = 0,
                fm = 0,
                lm = 0,
                cm = 0,
                hm = 0,
                pm = 0,
                dm = 0,
                vm = 0,
                mm = 0,
                gm = 0,
                ym = 0,
                bm = 0,
                wm = 0,
                Em = 0,
                Sm = 0,
                xm = 0,
                Tm = 0,
                Nm = 0,
                Cm = 0;
            var km = 0,
                Lm = 0,
                Am = 0,
                Om = 0,
                Mm = 0,
                _m = 0,
                Dm = 0,
                Pm = 0,
                Hm = 0,
                Bm = 0,
                jm = 0,
                Fm = 0,
                Im = 0,
                qm = 0,
                Rm = 0,
                Um = 0,
                zm = 0,
                Wm = 0,
                Xm = 0,
                Vm = 0;
            var $m = 0,
                Jm = 0,
                Km = 0,
                Qm = 0,
                Gm = 0,
                Ym = 0,
                Zm = 0,
                eg = 0,
                tg = 0,
                ng = 0,
                rg = 0,
                ig = 0,
                sg = 0,
                og = 0,
                ug = 0,
                ag = 0,
                fg = 0,
                lg = 0,
                cg = 0,
                hg = 0;
            var pg = 0,
                dg = 0,
                vg = 0,
                mg = 0,
                gg = 0,
                yg = 0,
                bg = 0,
                wg = 0,
                Eg = 0,
                Sg = 0,
                xg = 0,
                Tg = 0,
                Ng = 0,
                Cg = 0,
                kg = 0,
                Lg = 0,
                Ag = 0,
                Og = 0,
                Mg = 0,
                _g = 0;
            var Dg = 0,
                Pg = 0,
                Hg = 0,
                Bg = 0,
                jg = 0,
                Fg = 0,
                Ig = 0,
                qg = 0,
                Rg = 0,
                Ug = 0,
                zg = 0,
                Wg = 0,
                Xg = 0,
                Vg = 0,
                $g = 0,
                Jg = 0,
                Kg = 0,
                Qg = 0,
                Gg = 0,
                Yg = 0;
            var Zg = 0,
                ey = 0,
                ty = 0,
                ny = 0,
                ry = 0,
                iy = 0,
                sy = 0,
                oy = 0,
                uy = 0,
                ay = 0,
                fy = 0,
                ly = 0,
                cy = 0,
                hy = 0,
                py = 0,
                dy = 0,
                vy = 0,
                my = 0,
                gy = 0,
                yy = 0;
            var by = 0,
                wy = 0,
                Ey = 0,
                Sy = 0,
                xy = 0,
                Ty = 0,
                Ny = 0,
                Cy = 0,
                ky = 0,
                Ly = 0,
                Ay = 0,
                Oy = 0,
                My = 0,
                _y = 0,
                Dy = 0,
                Py = 0,
                Hy = 0,
                By = 0,
                jy = 0,
                Fy = 0;
            var Iy = 0,
                qy = 0,
                Ry = 0,
                Uy = 0,
                zy = 0,
                Wy = 0,
                Xy = 0,
                Vy = 0,
                $y = 0,
                Jy = 0,
                Ky = 0,
                Qy = 0,
                Gy = 0,
                Yy = 0,
                Zy = 0,
                eb = 0,
                tb = 0,
                nb = 0,
                rb = 0,
                ib = 0;
            var sb = 0,
                ob = 0,
                ub = 0,
                ab = 0,
                fb = 0,
                lb = 0,
                cb = 0,
                hb = 0,
                pb = 0,
                db = 0,
                vb = 0,
                mb = 0,
                gb = 0,
                yb = 0,
                bb = 0,
                wb = 0,
                Eb = 0,
                Sb = 0,
                xb = 0,
                Tb = 0;
            var Nb = 0,
                Cb = 0,
                kb = 0,
                Lb = 0,
                Ab = 0,
                Ob = 0,
                Mb = 0,
                _b = 0,
                Db = 0,
                Pb = 0,
                Hb = 0,
                Bb = 0,
                jb = 0,
                Fb = 0,
                Ib = 0,
                qb = 0,
                Rb = 0,
                Ub = 0,
                zb = 0,
                Wb = 0;
            var Xb = 0,
                Vb = 0,
                $b = 0,
                Jb = 0,
                Kb = 0,
                Qb = 0,
                Gb = 0,
                Yb = 0,
                Zb = 0,
                ew = 0,
                tw = 0,
                nw = 0,
                rw = 0,
                iw = 0,
                sw = 0,
                ow = 0,
                uw = 0,
                aw = 0,
                fw = 0,
                lw = 0;
            var cw = 0,
                hw = 0,
                pw = 0,
                dw = 0,
                vw = 0,
                mw = 0,
                gw = 0,
                yw = 0,
                bw = 0,
                ww = 0,
                Ew = 0,
                Sw = 0,
                xw = 0,
                Tw = 0,
                Nw = 0,
                Cw = 0,
                kw = 0,
                Lw = 0,
                Aw = 0,
                Ow = 0;
            var Mw = 0,
                _w = 0,
                Dw = 0,
                Pw = 0,
                Hw = 0,
                Bw = 0,
                jw = 0,
                Fw = 0,
                Iw = 0,
                qw = 0,
                Rw = 0,
                Uw = 0,
                zw = 0,
                Ww = 0,
                Xw = 0,
                Vw = 0,
                $w = 0,
                Jw = 0,
                Kw = 0,
                Qw = 0;
            var Gw = 0,
                Yw = 0,
                Zw = 0,
                eE = 0,
                tE = 0,
                nE = 0,
                rE = 0,
                iE = 0,
                sE = 0,
                oE = 0,
                uE = 0,
                aE = 0,
                fE = 0,
                lE = 0,
                cE = 0,
                hE = 0,
                pE = 0,
                dE = 0,
                vE = 0,
                mE = 0;
            var gE = 0,
                yE = 0,
                bE = 0,
                wE = 0,
                EE = 0,
                SE = 0,
                xE = 0,
                TE = 0,
                NE = 0,
                CE = 0,
                kE = 0,
                LE = 0,
                AE = 0,
                OE = 0,
                ME = 0,
                _E = 0,
                DE = 0,
                PE = 0,
                HE = 0,
                BE = 0;
            var jE = 0,
                FE = 0,
                IE = 0,
                qE = 0,
                RE = 0,
                UE = 0,
                zE = 0,
                WE = 0,
                XE = 0,
                VE = 0,
                $E = 0,
                JE = 0,
                KE = 0,
                QE = 0,
                GE = 0,
                YE = 0,
                ZE = 0,
                eS = 0,
                tS = 0,
                nS = 0;
            var rS = 0,
                iS = 0,
                sS = 0,
                oS = 0,
                uS = 0,
                aS = 0,
                fS = 0,
                lS = 0,
                cS = 0,
                hS = 0,
                pS = 0,
                dS = 0,
                vS = 0,
                mS = 0,
                gS = 0,
                yS = 0,
                bS = 0,
                wS = 0,
                ES = 0,
                SS = 0;
            var xS = 0,
                TS = 0,
                NS = 0,
                CS = 0,
                kS = 0,
                LS = 0,
                AS = 0,
                OS = 0,
                MS = 0,
                _S = 0,
                DS = 0,
                PS = 0,
                HS = 0,
                BS = 0,
                jS = 0,
                FS = 0,
                IS = 0,
                qS = 0,
                RS = 0,
                US = 0;
            var zS = 0,
                WS = 0,
                XS = 0,
                VS = 0,
                $S = 0,
                JS = 0,
                KS = 0,
                QS = 0,
                GS = 0,
                YS = 0,
                ZS = 0,
                ex = 0,
                tx = 0,
                nx = 0,
                rx = 0,
                ix = 0,
                sx = 0,
                ox = 0,
                ux = 0,
                ax = 0;
            var fx = 0,
                lx = 0,
                cx = 0,
                hx = 0,
                px = 0,
                dx = 0,
                vx = 0,
                mx = 0,
                gx = 0,
                yx = 0,
                bx = 0,
                wx = 0,
                Ex = 0,
                Sx = 0,
                xx = 0,
                Tx = 0,
                Nx = 0,
                Cx = 0,
                kx = 0,
                Lx = 0;
            var Ax = 0,
                Ox = 0,
                Mx = 0,
                _x = 0,
                Dx = 0,
                Px = 0,
                Hx = 0,
                Bx = 0,
                jx = 0,
                Fx = 0,
                Ix = 0,
                qx = 0,
                Rx = 0,
                Ux = 0,
                zx = 0,
                Wx = 0,
                Xx = 0,
                Vx = 0,
                $x = 0,
                Jx = 0;
            var Kx = 0,
                Qx = 0,
                Gx = 0;
            Gx = c;
            mn = e >>> 0 < 245;
            do {
                if (mn) {
                    gn = e >>> 0 < 11;
                    if (gn) {
                        rh = 16
                    } else {
                        Vs = e + 11 | 0;
                        Qu = Vs & -8;
                        rh = Qu
                    }
                    el = rh >>> 3;
                    od = s[133240 >> 2] | 0;
                    fm = od >>> el;
                    hy = fm & 3;
                    vw = (hy | 0) == 0;
                    if (!vw) {
                        yn = fm & 1;
                        ti = yn ^ 1;
                        hi = ti + el | 0;
                        xi = hi << 1;
                        Pi = (133240 + (xi << 2) | 0) + 40 | 0;
                        B = xi + 2 | 0;
                        Xi = (133240 + (B << 2) | 0) + 40 | 0;
                        ns = s[Xi >> 2] | 0;
                        ps = ns + 8 | 0;
                        Ts = s[ps >> 2] | 0;
                        Hs = (Pi | 0) == (Ts | 0);
                        do {
                            if (Hs) {
                                $s = 1 << hi;
                                io = $s ^ -1;
                                mo = od & io;
                                s[133240 >> 2] = mo
                            } else {
                                ko = s[(133240 + 16 | 0) >> 2] | 0;
                                Fo = Ts >>> 0 < ko >>> 0;
                                if (Fo) {
                                    Kt()
                                }
                                Ko = Ts + 12 | 0;
                                ou = s[Ko >> 2] | 0;
                                gu = (ou | 0) == (ns | 0);
                                if (gu) {
                                    s[Ko >> 2] = Pi;
                                    s[Xi >> 2] = Ts;
                                    break
                                } else {
                                    Kt()
                                }
                            }
                        } while (0);
                        Lu = hi << 3;
                        Iu = Lu | 3;
                        Gu = ns + 4 | 0;
                        s[Gu >> 2] = Iu;
                        J = Lu | 4;
                        aa = ns + J | 0;
                        ba = s[aa >> 2] | 0;
                        Oa = ba | 1;
                        s[aa >> 2] = Oa;
                        YS = ps;
                        c = Gx;
                        return YS | 0
                    }
                    Ra = s[(133240 + 8 | 0) >> 2] | 0;
                    Ya = rh >>> 0 > Ra >>> 0;
                    if (Ya) {
                        lf = (fm | 0) == 0;
                        if (!lf) {
                            Ef = fm << el;
                            _f = 2 << el;
                            zf = 0 - _f | 0;
                            tl = _f | zf;
                            hl = Ef & tl;
                            xl = 0 - hl | 0;
                            Pl = hl & xl;
                            Xl = Pl + -1 | 0;
                            nc = Xl >>> 12;
                            pc = nc & 16;
                            Tc = Xl >>> pc;
                            Hc = Tc >>> 5;
                            Vc = Hc & 8;
                            ih = Vc | pc;
                            vh = Tc >>> Vc;
                            Ch = vh >>> 2;
                            jh = Ch & 4;
                            Jh = ih | jh;
                            sp = vh >>> jh;
                            mp = sp >>> 1;
                            kp = mp & 2;
                            Fp = Jh | kp;
                            Kp = sp >>> kp;
                            ud = Kp >>> 1;
                            yd = ud & 1;
                            Ad = Fp | yd;
                            qd = Kp >>> yd;
                            Gd = Ad + qd | 0;
                            av = Gd << 1;
                            bv = (133240 + (av << 2) | 0) + 40 | 0;
                            Jt = av + 2 | 0;
                            Ov = (133240 + (Jt << 2) | 0) + 40 | 0;
                            Rv = s[Ov >> 2] | 0;
                            Yv = Rv + 8 | 0;
                            lm = s[Yv >> 2] | 0;
                            Em = (bv | 0) == (lm | 0);
                            do {
                                if (Em) {
                                    _m = 1 << Gd;
                                    zm = _m ^ -1;
                                    eg = od & zm;
                                    s[133240 >> 2] = eg
                                } else {
                                    cg = s[(133240 + 16 | 0) >> 2] | 0;
                                    Sg = lm >>> 0 < cg >>> 0;
                                    if (Sg) {
                                        Kt()
                                    }
                                    Dg = lm + 12 | 0;
                                    Wg = s[Dg >> 2] | 0;
                                    ty = (Wg | 0) == (Rv | 0);
                                    if (ty) {
                                        s[Dg >> 2] = bv;
                                        s[Ov >> 2] = lm;
                                        break
                                    } else {
                                        Kt()
                                    }
                                }
                            } while (0);
                            py = Gd << 3;
                            Ty = py - rh | 0;
                            Hy = rh | 3;
                            Vy = Rv + 4 | 0;
                            s[Vy >> 2] = Hy;
                            rb = Rv + rh | 0;
                            db = Ty | 1;
                            sn = rh | 4;
                            Nb = Rv + sn | 0;
                            s[Nb >> 2] = db;
                            Bb = Rv + py | 0;
                            s[Bb >> 2] = Ty;
                            $b = s[(133240 + 8 | 0) >> 2] | 0;
                            iw = ($b | 0) == 0;
                            if (!iw) {
                                mw = s[(133240 + 20 | 0) >> 2] | 0;
                                kw = $b >>> 3;
                                Fw = kw << 1;
                                Kw = (133240 + (Fw << 2) | 0) + 40 | 0;
                                oE = s[133240 >> 2] | 0;
                                gE = 1 << kw;
                                LE = oE & gE;
                                IE = (LE | 0) == 0;
                                if (IE) {
                                    QE = oE | gE;
                                    s[133240 >> 2] = QE;
                                    ln = Fw + 2 | 0;
                                    i = (133240 + (ln << 2) | 0) + 40 | 0;
                                    m = i;
                                    wS = Kw
                                } else {
                                    cn = Fw + 2 | 0;
                                    uS = (133240 + (cn << 2) | 0) + 40 | 0;
                                    bn = s[uS >> 2] | 0;
                                    On = s[(133240 + 16 | 0) >> 2] | 0;
                                    Rn = bn >>> 0 < On >>> 0;
                                    if (Rn) {
                                        Kt()
                                    } else {
                                        m = uS;
                                        wS = bn
                                    }
                                }
                                s[m >> 2] = mw;
                                Yn = wS + 12 | 0;
                                s[Yn >> 2] = mw;
                                fr = mw + 8 | 0;
                                s[fr >> 2] = wS;
                                wr = mw + 12 | 0;
                                s[wr >> 2] = Kw
                            }
                            s[(133240 + 8 | 0) >> 2] = Ty;
                            s[(133240 + 20 | 0) >> 2] = rb;
                            YS = Yv;
                            c = Gx;
                            return YS | 0
                        }
                        Mr = s[(133240 + 4 | 0) >> 2] | 0;
                        Ur = (Mr | 0) == 0;
                        if (Ur) {
                            ZS = rh
                        } else {
                            Zr = 0 - Mr | 0;
                            ei = Mr & Zr;
                            ni = ei + -1 | 0;
                            ri = ni >>> 12;
                            ii = ri & 16;
                            si = ni >>> ii;
                            oi = si >>> 5;
                            ui = oi & 8;
                            ai = ui | ii;
                            fi = si >>> ui;
                            li = fi >>> 2;
                            ci = li & 4;
                            pi = ai | ci;
                            di = fi >>> ci;
                            vi = di >>> 1;
                            mi = vi & 2;
                            gi = pi | mi;
                            yi = di >>> mi;
                            bi = yi >>> 1;
                            wi = bi & 1;
                            Ei = gi | wi;
                            Si = yi >>> wi;
                            Ti = Ei + Si | 0;
                            Ni = (133240 + (Ti << 2) | 0) + 304 | 0;
                            Ci = s[Ni >> 2] | 0;
                            ki = Ci + 4 | 0;
                            Li = s[ki >> 2] | 0;
                            Ai = Li & -8;
                            Oi = Ai - rh | 0;
                            vx = Oi;
                            _x = Ci;
                            Wx = Ci;
                            while (1) {
                                Mi = _x + 16 | 0;
                                _i = s[Mi >> 2] | 0;
                                Di = (_i | 0) == (0 | 0);
                                if (Di) {
                                    Hi = _x + 20 | 0;
                                    Bi = s[Hi >> 2] | 0;
                                    ji = (Bi | 0) == (0 | 0);
                                    if (ji) {
                                        break
                                    } else {
                                        Ii = Bi
                                    }
                                } else {
                                    Ii = _i
                                }
                                Fi = Ii + 4 | 0;
                                qi = s[Fi >> 2] | 0;
                                Ri = qi & -8;
                                Ui = Ri - rh | 0;
                                zi = Ui >>> 0 < vx >>> 0;
                                y = zi ? Ui : vx;
                                vn = zi ? Ii : Wx;
                                vx = y;
                                _x = Ii;
                                Wx = vn
                            }
                            Wi = s[(133240 + 16 | 0) >> 2] | 0;
                            Vi = Wx >>> 0 < Wi >>> 0;
                            if (Vi) {
                                Kt()
                            }
                            $i = Wx + rh | 0;
                            Ji = Wx >>> 0 < $i >>> 0;
                            if (!Ji) {
                                Kt()
                            }
                            Ki = Wx + 24 | 0;
                            Qi = s[Ki >> 2] | 0;
                            Gi = Wx + 12 | 0;
                            Yi = s[Gi >> 2] | 0;
                            Zi = (Yi | 0) == (Wx | 0);
                            do {
                                if (Zi) {
                                    ls = Wx + 20 | 0;
                                    cs = s[ls >> 2] | 0;
                                    hs = (cs | 0) == (0 | 0);
                                    if (hs) {
                                        ds = Wx + 16 | 0;
                                        vs = s[ds >> 2] | 0;
                                        ms = (vs | 0) == (0 | 0);
                                        if (ms) {
                                            DS = 0;
                                            break
                                        } else {
                                            OS = vs;
                                            BS = ds
                                        }
                                    } else {
                                        OS = cs;
                                        BS = ls
                                    }
                                    while (1) {
                                        gs = OS + 20 | 0;
                                        ys = s[gs >> 2] | 0;
                                        bs = (ys | 0) == (0 | 0);
                                        if (!bs) {
                                            OS = ys;
                                            BS = gs;
                                            continue
                                        }
                                        ws = OS + 16 | 0;
                                        Es = s[ws >> 2] | 0;
                                        Ss = (Es | 0) == (0 | 0);
                                        if (Ss) {
                                            break
                                        } else {
                                            OS = Es;
                                            BS = ws
                                        }
                                    }
                                    xs = BS >>> 0 < Wi >>> 0;
                                    if (xs) {
                                        Kt()
                                    } else {
                                        s[BS >> 2] = 0;
                                        DS = OS;
                                        break
                                    }
                                } else {
                                    es = Wx + 8 | 0;
                                    ts = s[es >> 2] | 0;
                                    rs = ts >>> 0 < Wi >>> 0;
                                    if (rs) {
                                        Kt()
                                    }
                                    is = ts + 12 | 0;
                                    ss = s[is >> 2] | 0;
                                    os = (ss | 0) == (Wx | 0);
                                    if (!os) {
                                        Kt()
                                    }
                                    us = Yi + 8 | 0;
                                    as = s[us >> 2] | 0;
                                    fs = (as | 0) == (Wx | 0);
                                    if (fs) {
                                        s[is >> 2] = Yi;
                                        s[us >> 2] = ts;
                                        DS = Yi;
                                        break
                                    } else {
                                        Kt()
                                    }
                                }
                            } while (0);
                            Ns = (Qi | 0) == (0 | 0);
                            do {
                                if (!Ns) {
                                    Cs = Wx + 28 | 0;
                                    ks = s[Cs >> 2] | 0;
                                    Ls = (133240 + (ks << 2) | 0) + 304 | 0;
                                    As = s[Ls >> 2] | 0;
                                    Os = (Wx | 0) == (As | 0);
                                    if (Os) {
                                        s[Ls >> 2] = DS;
                                        VS = (DS | 0) == (0 | 0);
                                        if (VS) {
                                            Ms = 1 << ks;
                                            _s = Ms ^ -1;
                                            Ds = s[(133240 + 4 | 0) >> 2] | 0;
                                            Ps = Ds & _s;
                                            s[(133240 + 4 | 0) >> 2] = Ps;
                                            break
                                        }
                                    } else {
                                        Bs = s[(133240 + 16 | 0) >> 2] | 0;
                                        js = Qi >>> 0 < Bs >>> 0;
                                        if (js) {
                                            Kt()
                                        }
                                        Fs = Qi + 16 | 0;
                                        Is = s[Fs >> 2] | 0;
                                        qs = (Is | 0) == (Wx | 0);
                                        if (qs) {
                                            s[Fs >> 2] = DS
                                        } else {
                                            Rs = Qi + 20 | 0;
                                            s[Rs >> 2] = DS
                                        }
                                        Us = (DS | 0) == (0 | 0);
                                        if (Us) {
                                            break
                                        }
                                    }
                                    zs = s[(133240 + 16 | 0) >> 2] | 0;
                                    Ws = DS >>> 0 < zs >>> 0;
                                    if (Ws) {
                                        Kt()
                                    }
                                    Xs = DS + 24 | 0;
                                    s[Xs >> 2] = Qi;
                                    Js = Wx + 16 | 0;
                                    Ks = s[Js >> 2] | 0;
                                    Qs = (Ks | 0) == (0 | 0);
                                    do {
                                        if (!Qs) {
                                            Gs = s[(133240 + 16 | 0) >> 2] | 0;
                                            Ys = Ks >>> 0 < Gs >>> 0;
                                            if (Ys) {
                                                Kt()
                                            } else {
                                                Zs = DS + 16 | 0;
                                                s[Zs >> 2] = Ks;
                                                eo = Ks + 24 | 0;
                                                s[eo >> 2] = DS;
                                                break
                                            }
                                        }
                                    } while (0);
                                    to = Wx + 20 | 0;
                                    no = s[to >> 2] | 0;
                                    ro = (no | 0) == (0 | 0);
                                    if (!ro) {
                                        so = s[(133240 + 16 | 0) >> 2] | 0;
                                        oo = no >>> 0 < so >>> 0;
                                        if (oo) {
                                            Kt()
                                        } else {
                                            uo = DS + 20 | 0;
                                            s[uo >> 2] = no;
                                            ao = no + 24 | 0;
                                            s[ao >> 2] = DS;
                                            break
                                        }
                                    }
                                }
                            } while (0);
                            fo = vx >>> 0 < 16;
                            if (fo) {
                                lo = vx + rh | 0;
                                co = lo | 3;
                                ho = Wx + 4 | 0;
                                s[ho >> 2] = co;
                                Qt = lo + 4 | 0;
                                po = Wx + Qt | 0;
                                vo = s[po >> 2] | 0;
                                go = vo | 1;
                                s[po >> 2] = go
                            } else {
                                yo = rh | 3;
                                bo = Wx + 4 | 0;
                                s[bo >> 2] = yo;
                                wo = vx | 1;
                                A = rh | 4;
                                Eo = Wx + A | 0;
                                s[Eo >> 2] = wo;
                                M = vx + rh | 0;
                                So = Wx + M | 0;
                                s[So >> 2] = vx;
                                xo = s[(133240 + 8 | 0) >> 2] | 0;
                                To = (xo | 0) == 0;
                                if (!To) {
                                    No = s[(133240 + 20 | 0) >> 2] | 0;
                                    Co = xo >>> 3;
                                    Lo = Co << 1;
                                    Ao = (133240 + (Lo << 2) | 0) + 40 | 0;
                                    Oo = s[133240 >> 2] | 0;
                                    Mo = 1 << Co;
                                    _o = Oo & Mo;
                                    Do = (_o | 0) == 0;
                                    if (Do) {
                                        Po = Oo | Mo;
                                        s[133240 >> 2] = Po;
                                        Ct = Lo + 2 | 0;
                                        o = (133240 + (Ct << 2) | 0) + 40 | 0;
                                        d = o;
                                        bS = Ao
                                    } else {
                                        Ft = Lo + 2 | 0;
                                        Ho = (133240 + (Ft << 2) | 0) + 40 | 0;
                                        Bo = s[Ho >> 2] | 0;
                                        jo = s[(133240 + 16 | 0) >> 2] | 0;
                                        Io = Bo >>> 0 < jo >>> 0;
                                        if (Io) {
                                            Kt()
                                        } else {
                                            d = Ho;
                                            bS = Bo
                                        }
                                    }
                                    s[d >> 2] = No;
                                    qo = bS + 12 | 0;
                                    s[qo >> 2] = No;
                                    Ro = No + 8 | 0;
                                    s[Ro >> 2] = bS;
                                    Uo = No + 12 | 0;
                                    s[Uo >> 2] = Ao
                                }
                                s[(133240 + 8 | 0) >> 2] = vx;
                                s[(133240 + 20 | 0) >> 2] = $i
                            }
                            zo = Wx + 8 | 0;
                            YS = zo;
                            c = Gx;
                            return YS | 0
                        }
                    } else {
                        ZS = rh
                    }
                } else {
                    Wo = e >>> 0 > 4294967231;
                    if (Wo) {
                        ZS = -1
                    } else {
                        Xo = e + 11 | 0;
                        Vo = Xo & -8;
                        $o = s[(133240 + 4 | 0) >> 2] | 0;
                        Jo = ($o | 0) == 0;
                        if (Jo) {
                            ZS = Vo
                        } else {
                            Qo = 0 - Vo | 0;
                            Go = Xo >>> 8;
                            Yo = (Go | 0) == 0;
                            if (Yo) {
                                GS = 0
                            } else {
                                Zo = Vo >>> 0 > 16777215;
                                if (Zo) {
                                    GS = 31
                                } else {
                                    eu = Go + 1048320 | 0;
                                    tu = eu >>> 16;
                                    nu = tu & 8;
                                    ru = Go << nu;
                                    iu = ru + 520192 | 0;
                                    su = iu >>> 16;
                                    uu = su & 4;
                                    au = uu | nu;
                                    fu = ru << uu;
                                    lu = fu + 245760 | 0;
                                    cu = lu >>> 16;
                                    hu = cu & 2;
                                    pu = au | hu;
                                    du = 14 - pu | 0;
                                    vu = fu << hu;
                                    mu = vu >>> 15;
                                    yu = du + mu | 0;
                                    bu = yu << 1;
                                    wu = yu + 7 | 0;
                                    Eu = Vo >>> wu;
                                    Su = Eu & 1;
                                    xu = Su | bu;
                                    GS = xu
                                }
                            }
                            Tu = (133240 + (GS << 2) | 0) + 304 | 0;
                            Nu = s[Tu >> 2] | 0;
                            Cu = (Nu | 0) == (0 | 0);
                            e: do {
                                if (Cu) {
                                    yx = Qo;
                                    Px = 0;
                                    $x = 0
                                } else {
                                    ku = (GS | 0) == 31;
                                    if (ku) {
                                        _u = 0
                                    } else {
                                        Au = GS >>> 1;
                                        Ou = 25 - Au | 0;
                                        _u = Ou
                                    }
                                    Mu = Vo << _u;
                                    mx = Qo;
                                    Ex = 0;
                                    xx = Mu;
                                    Dx = Nu;
                                    Xx = 0;
                                    while (1) {
                                        Du = Dx + 4 | 0;
                                        Pu = s[Du >> 2] | 0;
                                        Hu = Pu & -8;
                                        Bu = Hu - Vo | 0;
                                        ju = Bu >>> 0 < mx >>> 0;
                                        if (ju) {
                                            Fu = (Hu | 0) == (Vo | 0);
                                            if (Fu) {
                                                yx = Bu;
                                                Px = Dx;
                                                $x = Dx;
                                                break e
                                            } else {
                                                gx = Bu;
                                                Vx = Dx
                                            }
                                        } else {
                                            gx = mx;
                                            Vx = Xx
                                        }
                                        qu = Dx + 20 | 0;
                                        Ru = s[qu >> 2] | 0;
                                        Uu = xx >>> 31;
                                        zu = (Dx + (Uu << 2) | 0) + 16 | 0;
                                        Wu = s[zu >> 2] | 0;
                                        Xu = (Ru | 0) == (0 | 0);
                                        Vu = (Ru | 0) == (Wu | 0);
                                        rx = Xu | Vu;
                                        Sx = rx ? Ex : Ru;
                                        $u = (Wu | 0) == (0 | 0);
                                        Ju = xx << 1;
                                        if ($u) {
                                            yx = gx;
                                            Px = Sx;
                                            $x = Vx;
                                            break
                                        } else {
                                            mx = gx;
                                            Ex = Sx;
                                            xx = Ju;
                                            Dx = Wu;
                                            Xx = Vx
                                        }
                                    }
                                }
                            } while (0);
                            Ku = (Px | 0) == (0 | 0);
                            Yu = ($x | 0) == (0 | 0);
                            ux = Ku & Yu;
                            if (ux) {
                                Zu = 2 << GS;
                                ea = 0 - Zu | 0;
                                ta = Zu | ea;
                                na = $o & ta;
                                ra = (na | 0) == 0;
                                if (ra) {
                                    ZS = Vo;
                                    break
                                }
                                ia = 0 - na | 0;
                                sa = na & ia;
                                oa = sa + -1 | 0;
                                ua = oa >>> 12;
                                fa = ua & 16;
                                la = oa >>> fa;
                                ca = la >>> 5;
                                ha = ca & 8;
                                pa = ha | fa;
                                da = la >>> ha;
                                va = da >>> 2;
                                ma = va & 4;
                                ga = pa | ma;
                                ya = da >>> ma;
                                wa = ya >>> 1;
                                Ea = wa & 2;
                                Sa = ga | Ea;
                                xa = ya >>> Ea;
                                Ta = xa >>> 1;
                                Na = Ta & 1;
                                Ca = Sa | Na;
                                ka = xa >>> Na;
                                La = Ca + ka | 0;
                                Aa = (133240 + (La << 2) | 0) + 304 | 0;
                                Ma = s[Aa >> 2] | 0;
                                Hx = Ma
                            } else {
                                Hx = Px
                            }
                            _a = (Hx | 0) == (0 | 0);
                            if (_a) {
                                bx = yx;
                                Jx = $x
                            } else {
                                wx = yx;
                                jx = Hx;
                                Kx = $x;
                                while (1) {
                                    Da = jx + 4 | 0;
                                    Pa = s[Da >> 2] | 0;
                                    Ha = Pa & -8;
                                    Ba = Ha - Vo | 0;
                                    ja = Ba >>> 0 < wx >>> 0;
                                    b = ja ? Ba : wx;
                                    Bx = ja ? jx : Kx;
                                    Fa = jx + 16 | 0;
                                    Ia = s[Fa >> 2] | 0;
                                    qa = (Ia | 0) == (0 | 0);
                                    if (!qa) {
                                        wx = b;
                                        jx = Ia;
                                        Kx = Bx;
                                        continue
                                    }
                                    Ua = jx + 20 | 0;
                                    za = s[Ua >> 2] | 0;
                                    Wa = (za | 0) == (0 | 0);
                                    if (Wa) {
                                        bx = b;
                                        Jx = Bx;
                                        break
                                    } else {
                                        wx = b;
                                        jx = za;
                                        Kx = Bx
                                    }
                                }
                            }
                            Xa = (Jx | 0) == (0 | 0);
                            if (Xa) {
                                ZS = Vo
                            } else {
                                Va = s[(133240 + 8 | 0) >> 2] | 0;
                                $a = Va - Vo | 0;
                                Ja = bx >>> 0 < $a >>> 0;
                                if (Ja) {
                                    Ka = s[(133240 + 16 | 0) >> 2] | 0;
                                    Qa = Jx >>> 0 < Ka >>> 0;
                                    if (Qa) {
                                        Kt()
                                    }
                                    Ga = Jx + Vo | 0;
                                    Za = Jx >>> 0 < Ga >>> 0;
                                    if (!Za) {
                                        Kt()
                                    }
                                    ef = Jx + 24 | 0;
                                    tf = s[ef >> 2] | 0;
                                    nf = Jx + 12 | 0;
                                    rf = s[nf >> 2] | 0;
                                    sf = (rf | 0) == (Jx | 0);
                                    do {
                                        if (sf) {
                                            mf = Jx + 20 | 0;
                                            gf = s[mf >> 2] | 0;
                                            yf = (gf | 0) == (0 | 0);
                                            if (yf) {
                                                bf = Jx + 16 | 0;
                                                wf = s[bf >> 2] | 0;
                                                Sf = (wf | 0) == (0 | 0);
                                                if (Sf) {
                                                    HS = 0;
                                                    break
                                                } else {
                                                    _S = wf;
                                                    FS = bf
                                                }
                                            } else {
                                                _S = gf;
                                                FS = mf
                                            }
                                            while (1) {
                                                xf = _S + 20 | 0;
                                                Tf = s[xf >> 2] | 0;
                                                Nf = (Tf | 0) == (0 | 0);
                                                if (!Nf) {
                                                    _S = Tf;
                                                    FS = xf;
                                                    continue
                                                }
                                                Cf = _S + 16 | 0;
                                                kf = s[Cf >> 2] | 0;
                                                Lf = (kf | 0) == (0 | 0);
                                                if (Lf) {
                                                    break
                                                } else {
                                                    _S = kf;
                                                    FS = Cf
                                                }
                                            }
                                            Af = FS >>> 0 < Ka >>> 0;
                                            if (Af) {
                                                Kt()
                                            } else {
                                                s[FS >> 2] = 0;
                                                HS = _S;
                                                break
                                            }
                                        } else {
                                            of = Jx + 8 | 0;
                                            uf = s[of >> 2] | 0;
                                            af = uf >>> 0 < Ka >>> 0;
                                            if (af) {
                                                Kt()
                                            }
                                            ff = uf + 12 | 0;
                                            cf = s[ff >> 2] | 0;
                                            hf = (cf | 0) == (Jx | 0);
                                            if (!hf) {
                                                Kt()
                                            }
                                            pf = rf + 8 | 0;
                                            df = s[pf >> 2] | 0;
                                            vf = (df | 0) == (Jx | 0);
                                            if (vf) {
                                                s[ff >> 2] = rf;
                                                s[pf >> 2] = uf;
                                                HS = rf;
                                                break
                                            } else {
                                                Kt()
                                            }
                                        }
                                    } while (0);
                                    Of = (tf | 0) == (0 | 0);
                                    do {
                                        if (!Of) {
                                            Mf = Jx + 28 | 0;
                                            Df = s[Mf >> 2] | 0;
                                            Pf = (133240 + (Df << 2) | 0) + 304 | 0;
                                            Hf = s[Pf >> 2] | 0;
                                            Bf = (Jx | 0) == (Hf | 0);
                                            if (Bf) {
                                                s[Pf >> 2] = HS;
                                                JS = (HS | 0) == (0 | 0);
                                                if (JS) {
                                                    jf = 1 << Df;
                                                    Ff = jf ^ -1;
                                                    If = s[(133240 + 4 | 0) >> 2] | 0;
                                                    qf = If & Ff;
                                                    s[(133240 + 4 | 0) >> 2] = qf;
                                                    break
                                                }
                                            } else {
                                                Rf = s[(133240 + 16 | 0) >> 2] | 0;
                                                Uf = tf >>> 0 < Rf >>> 0;
                                                if (Uf) {
                                                    Kt()
                                                }
                                                Wf = tf + 16 | 0;
                                                Xf = s[Wf >> 2] | 0;
                                                Vf = (Xf | 0) == (Jx | 0);
                                                if (Vf) {
                                                    s[Wf >> 2] = HS
                                                } else {
                                                    $f = tf + 20 | 0;
                                                    s[$f >> 2] = HS
                                                }
                                                Jf = (HS | 0) == (0 | 0);
                                                if (Jf) {
                                                    break
                                                }
                                            }
                                            Kf = s[(133240 + 16 | 0) >> 2] | 0;
                                            Qf = HS >>> 0 < Kf >>> 0;
                                            if (Qf) {
                                                Kt()
                                            }
                                            Gf = HS + 24 | 0;
                                            s[Gf >> 2] = tf;
                                            Yf = Jx + 16 | 0;
                                            Zf = s[Yf >> 2] | 0;
                                            nl = (Zf | 0) == (0 | 0);
                                            do {
                                                if (!nl) {
                                                    rl = s[(133240 + 16 | 0) >> 2] | 0;
                                                    il = Zf >>> 0 < rl >>> 0;
                                                    if (il) {
                                                        Kt()
                                                    } else {
                                                        sl = HS + 16 | 0;
                                                        s[sl >> 2] = Zf;
                                                        ol = Zf + 24 | 0;
                                                        s[ol >> 2] = HS;
                                                        break
                                                    }
                                                }
                                            } while (0);
                                            ul = Jx + 20 | 0;
                                            al = s[ul >> 2] | 0;
                                            fl = (al | 0) == (0 | 0);
                                            if (!fl) {
                                                ll = s[(133240 + 16 | 0) >> 2] | 0;
                                                cl = al >>> 0 < ll >>> 0;
                                                if (cl) {
                                                    Kt()
                                                } else {
                                                    pl = HS + 20 | 0;
                                                    s[pl >> 2] = al;
                                                    dl = al + 24 | 0;
                                                    s[dl >> 2] = HS;
                                                    break
                                                }
                                            }
                                        }
                                    } while (0);
                                    vl = bx >>> 0 < 16;
                                    t: do {
                                        if (vl) {
                                            ml = bx + Vo | 0;
                                            gl = ml | 3;
                                            yl = Jx + 4 | 0;
                                            s[yl >> 2] = gl;
                                            mt = ml + 4 | 0;
                                            bl = Jx + mt | 0;
                                            wl = s[bl >> 2] | 0;
                                            El = wl | 1;
                                            s[bl >> 2] = El
                                        } else {
                                            Sl = Vo | 3;
                                            Tl = Jx + 4 | 0;
                                            s[Tl >> 2] = Sl;
                                            Nl = bx | 1;
                                            k = Vo | 4;
                                            Cl = Jx + k | 0;
                                            s[Cl >> 2] = Nl;
                                            H = bx + Vo | 0;
                                            kl = Jx + H | 0;
                                            s[kl >> 2] = bx;
                                            Ll = bx >>> 3;
                                            Al = bx >>> 0 < 256;
                                            if (Al) {
                                                Ol = Ll << 1;
                                                Ml = (133240 + (Ol << 2) | 0) + 40 | 0;
                                                _l = s[133240 >> 2] | 0;
                                                Dl = 1 << Ll;
                                                Hl = _l & Dl;
                                                Bl = (Hl | 0) == 0;
                                                do {
                                                    if (Bl) {
                                                        jl = _l | Dl;
                                                        s[133240 >> 2] = jl;
                                                        ft = Ol + 2 | 0;
                                                        a = (133240 + (ft << 2) | 0) + 40 | 0;
                                                        p = a;
                                                        SS = Ml
                                                    } else {
                                                        dt = Ol + 2 | 0;
                                                        Fl = (133240 + (dt << 2) | 0) + 40 | 0;
                                                        Il = s[Fl >> 2] | 0;
                                                        ql = s[(133240 + 16 | 0) >> 2] | 0;
                                                        Rl = Il >>> 0 < ql >>> 0;
                                                        if (!Rl) {
                                                            p = Fl;
                                                            SS = Il;
                                                            break
                                                        }
                                                        Kt()
                                                    }
                                                } while (0);
                                                s[p >> 2] = Ga;
                                                Ul = SS + 12 | 0;
                                                s[Ul >> 2] = Ga;
                                                lt = Vo + 8 | 0;
                                                zl = Jx + lt | 0;
                                                s[zl >> 2] = SS;
                                                ht = Vo + 12 | 0;
                                                Wl = Jx + ht | 0;
                                                s[Wl >> 2] = Ml;
                                                break
                                            }
                                            Vl = bx >>> 8;
                                            $l = (Vl | 0) == 0;
                                            if ($l) {
                                                NS = 0
                                            } else {
                                                Jl = bx >>> 0 > 16777215;
                                                if (Jl) {
                                                    NS = 31
                                                } else {
                                                    Kl = Vl + 1048320 | 0;
                                                    Ql = Kl >>> 16;
                                                    Gl = Ql & 8;
                                                    Yl = Vl << Gl;
                                                    Zl = Yl + 520192 | 0;
                                                    ec = Zl >>> 16;
                                                    tc = ec & 4;
                                                    rc = tc | Gl;
                                                    ic = Yl << tc;
                                                    sc = ic + 245760 | 0;
                                                    oc = sc >>> 16;
                                                    uc = oc & 2;
                                                    ac = rc | uc;
                                                    fc = 14 - ac | 0;
                                                    lc = ic << uc;
                                                    cc = lc >>> 15;
                                                    hc = fc + cc | 0;
                                                    dc = hc << 1;
                                                    vc = hc + 7 | 0;
                                                    mc = bx >>> vc;
                                                    gc = mc & 1;
                                                    yc = gc | dc;
                                                    NS = yc
                                                }
                                            }
                                            bc = (133240 + (NS << 2) | 0) + 304 | 0;
                                            bt = Vo + 28 | 0;
                                            wc = Jx + bt | 0;
                                            s[wc >> 2] = NS;
                                            qt = Vo + 16 | 0;
                                            Ec = Jx + qt | 0;
                                            Yt = Vo + 20 | 0;
                                            Sc = Jx + Yt | 0;
                                            s[Sc >> 2] = 0;
                                            s[Ec >> 2] = 0;
                                            xc = s[(133240 + 4 | 0) >> 2] | 0;
                                            Nc = 1 << NS;
                                            Cc = xc & Nc;
                                            kc = (Cc | 0) == 0;
                                            if (kc) {
                                                Lc = xc | Nc;
                                                s[(133240 + 4 | 0) >> 2] = Lc;
                                                s[bc >> 2] = Ga;
                                                nn = Vo + 24 | 0;
                                                Ac = Jx + nn | 0;
                                                s[Ac >> 2] = bc;
                                                on = Vo + 12 | 0;
                                                Oc = Jx + on | 0;
                                                s[Oc >> 2] = Ga;
                                                an = Vo + 8 | 0;
                                                Mc = Jx + an | 0;
                                                s[Mc >> 2] = Ga;
                                                break
                                            }
                                            _c = s[bc >> 2] | 0;
                                            Dc = (NS | 0) == 31;
                                            if (Dc) {
                                                Uc = 0
                                            } else {
                                                Pc = NS >>> 1;
                                                Bc = 25 - Pc | 0;
                                                Uc = Bc
                                            }
                                            jc = _c + 4 | 0;
                                            Fc = s[jc >> 2] | 0;
                                            Ic = Fc & -8;
                                            qc = (Ic | 0) == (bx | 0);
                                            n: do {
                                                if (qc) {
                                                    IS = _c
                                                } else {
                                                    Rc = bx << Uc;
                                                    kS = Rc;
                                                    zS = _c;
                                                    while (1) {
                                                        Qc = kS >>> 31;
                                                        Gc = (zS + (Qc << 2) | 0) + 16 | 0;
                                                        Xc = s[Gc >> 2] | 0;
                                                        Yc = (Xc | 0) == (0 | 0);
                                                        if (Yc) {
                                                            break
                                                        }
                                                        zc = kS << 1;
                                                        Wc = Xc + 4 | 0;
                                                        $c = s[Wc >> 2] | 0;
                                                        Jc = $c & -8;
                                                        Kc = (Jc | 0) == (bx | 0);
                                                        if (Kc) {
                                                            IS = Xc;
                                                            break n
                                                        } else {
                                                            kS = zc;
                                                            zS = Xc
                                                        }
                                                    }
                                                    Zc = s[(133240 + 16 | 0) >> 2] | 0;
                                                    eh = Gc >>> 0 < Zc >>> 0;
                                                    if (eh) {
                                                        Kt()
                                                    } else {
                                                        s[Gc >> 2] = Ga;
                                                        z = Vo + 24 | 0;
                                                        th = Jx + z | 0;
                                                        s[th >> 2] = zS;
                                                        rt = Vo + 12 | 0;
                                                        nh = Jx + rt | 0;
                                                        s[nh >> 2] = Ga;
                                                        ot = Vo + 8 | 0;
                                                        sh = Jx + ot | 0;
                                                        s[sh >> 2] = Ga;
                                                        break t
                                                    }
                                                }
                                            } while (0);
                                            oh = IS + 8 | 0;
                                            uh = s[oh >> 2] | 0;
                                            ah = s[(133240 + 16 | 0) >> 2] | 0;
                                            fh = IS >>> 0 < ah >>> 0;
                                            if (fh) {
                                                Kt()
                                            }
                                            lh = uh >>> 0 < ah >>> 0;
                                            if (lh) {
                                                Kt()
                                            } else {
                                                ch = uh + 12 | 0;
                                                s[ch >> 2] = Ga;
                                                s[oh >> 2] = Ga;
                                                fn = Vo + 8 | 0;
                                                hh = Jx + fn | 0;
                                                s[hh >> 2] = uh;
                                                hn = Vo + 12 | 0;
                                                ph = Jx + hn | 0;
                                                s[ph >> 2] = IS;
                                                j = Vo + 24 | 0;
                                                dh = Jx + j | 0;
                                                s[dh >> 2] = 0;
                                                break
                                            }
                                        }
                                    } while (0);
                                    mh = Jx + 8 | 0;
                                    YS = mh;
                                    c = Gx;
                                    return YS | 0
                                } else {
                                    ZS = Vo
                                }
                            }
                        }
                    }
                }
            } while (0);
            gh = s[(133240 + 8 | 0) >> 2] | 0;
            yh = ZS >>> 0 > gh >>> 0;
            if (!yh) {
                bh = gh - ZS | 0;
                wh = s[(133240 + 20 | 0) >> 2] | 0;
                Eh = bh >>> 0 > 15;
                if (Eh) {
                    Sh = wh + ZS | 0;
                    s[(133240 + 20 | 0) >> 2] = Sh;
                    s[(133240 + 8 | 0) >> 2] = bh;
                    xh = bh | 1;
                    yt = ZS + 4 | 0;
                    Th = wh + yt | 0;
                    s[Th >> 2] = xh;
                    Nh = wh + gh | 0;
                    s[Nh >> 2] = bh;
                    kh = ZS | 3;
                    Lh = wh + 4 | 0;
                    s[Lh >> 2] = kh
                } else {
                    s[(133240 + 8 | 0) >> 2] = 0;
                    s[(133240 + 20 | 0) >> 2] = 0;
                    Ah = gh | 3;
                    Oh = wh + 4 | 0;
                    s[Oh >> 2] = Ah;
                    O = gh + 4 | 0;
                    Mh = wh + O | 0;
                    _h = s[Mh >> 2] | 0;
                    Dh = _h | 1;
                    s[Mh >> 2] = Dh
                }
                Ph = wh + 8 | 0;
                YS = Ph;
                c = Gx;
                return YS | 0
            }
            Hh = s[(133240 + 12 | 0) >> 2] | 0;
            Bh = ZS >>> 0 < Hh >>> 0;
            if (Bh) {
                Fh = Hh - ZS | 0;
                s[(133240 + 12 | 0) >> 2] = Fh;
                Ih = s[(133240 + 24 | 0) >> 2] | 0;
                qh = Ih + ZS | 0;
                s[(133240 + 24 | 0) >> 2] = qh;
                Rh = Fh | 1;
                w = ZS + 4 | 0;
                Uh = Ih + w | 0;
                s[Uh >> 2] = Rh;
                zh = ZS | 3;
                Wh = Ih + 4 | 0;
                s[Wh >> 2] = zh;
                Xh = Ih + 8 | 0;
                YS = Xh;
                c = Gx;
                return YS | 0
            }
            Vh = s[133712 >> 2] | 0;
            $h = (Vh | 0) == 0;
            do {
                if ($h) {
                    Kh = Mt(30) | 0;
                    Qh = Kh + -1 | 0;
                    Gh = Qh & Kh;
                    Yh = (Gh | 0) == 0;
                    if (Yh) {
                        s[(133712 + 8 | 0) >> 2] = Kh;
                        s[(133712 + 4 | 0) >> 2] = Kh;
                        s[(133712 + 12 | 0) >> 2] = -1;
                        s[(133712 + 16 | 0) >> 2] = -1;
                        s[(133712 + 20 | 0) >> 2] = 0;
                        s[(133240 + 444 | 0) >> 2] = 0;
                        Zh = Gt(0 | 0) | 0;
                        ep = Zh & -16;
                        tp = ep ^ 1431655768;
                        s[133712 >> 2] = tp;
                        break
                    } else {
                        Kt()
                    }
                }
            } while (0);
            np = ZS + 48 | 0;
            rp = s[(133712 + 8 | 0) >> 2] | 0;
            ip = ZS + 47 | 0;
            op = rp + ip | 0;
            up = 0 - rp | 0;
            ap = op & up;
            fp = ap >>> 0 > ZS >>> 0;
            if (!fp) {
                YS = 0;
                c = Gx;
                return YS | 0
            }
            lp = s[(133240 + 440 | 0) >> 2] | 0;
            cp = (lp | 0) == 0;
            if (!cp) {
                hp = s[(133240 + 432 | 0) >> 2] | 0;
                pp = hp + ap | 0;
                dp = pp >>> 0 <= hp >>> 0;
                vp = pp >>> 0 > lp >>> 0;
                sx = dp | vp;
                if (sx) {
                    YS = 0;
                    c = Gx;
                    return YS | 0
                }
            }
            gp = s[(133240 + 444 | 0) >> 2] | 0;
            yp = gp & 4;
            bp = (yp | 0) == 0;
            r: do {
                if (bp) {
                    wp = s[(133240 + 24 | 0) >> 2] | 0;
                    Ep = (wp | 0) == (0 | 0);
                    i: do {
                        if (Ep) {
                            Qx = 182
                        } else {
                            Tx = 133240 + 448 | 0;
                            while (1) {
                                Sp = s[Tx >> 2] | 0;
                                xp = Sp >>> 0 > wp >>> 0;
                                if (!xp) {
                                    Tp = Tx + 4 | 0;
                                    Np = s[Tp >> 2] | 0;
                                    Cp = Sp + Np | 0;
                                    Lp = Cp >>> 0 > wp >>> 0;
                                    if (Lp) {
                                        break
                                    }
                                }
                                Ap = Tx + 8 | 0;
                                Op = s[Ap >> 2] | 0;
                                Mp = (Op | 0) == (0 | 0);
                                if (Mp) {
                                    Qx = 182;
                                    break i
                                } else {
                                    Tx = Op
                                }
                            }
                            _p = (Tx | 0) == (0 | 0);
                            if (_p) {
                                Qx = 182
                            } else {
                                rd = s[(133240 + 12 | 0) >> 2] | 0;
                                id = op - rd | 0;
                                sd = id & up;
                                ad = sd >>> 0 < 2147483647;
                                if (ad) {
                                    fd = Nt(sd | 0) | 0;
                                    ld = s[Tx >> 2] | 0;
                                    cd = s[Tp >> 2] | 0;
                                    hd = ld + cd | 0;
                                    pd = (fd | 0) == (hd | 0);
                                    n = pd ? sd : 0;
                                    r = pd ? fd : -1;
                                    XS = fd;
                                    Ox = sd;
                                    Fx = r;
                                    qx = n;
                                    Qx = 191
                                } else {
                                    Rx = 0
                                }
                            }
                        }
                    } while (0);
                    do {
                        if ((Qx | 0) == 182) {
                            Dp = Nt(0) | 0;
                            Pp = (Dp | 0) == (-1 | 0);
                            if (Pp) {
                                Rx = 0
                            } else {
                                Hp = Dp;
                                Bp = s[(133712 + 4 | 0) >> 2] | 0;
                                jp = Bp + -1 | 0;
                                Ip = jp & Hp;
                                qp = (Ip | 0) == 0;
                                if (qp) {
                                    Ax = ap
                                } else {
                                    Rp = jp + Hp | 0;
                                    Up = 0 - Bp | 0;
                                    zp = Rp & Up;
                                    Wp = ap - Hp | 0;
                                    Xp = Wp + zp | 0;
                                    Ax = Xp
                                }
                                Vp = s[(133240 + 432 | 0) >> 2] | 0;
                                $p = Vp + Ax | 0;
                                Jp = Ax >>> 0 > ZS >>> 0;
                                Qp = Ax >>> 0 < 2147483647;
                                ix = Jp & Qp;
                                if (ix) {
                                    Gp = s[(133240 + 440 | 0) >> 2] | 0;
                                    Yp = (Gp | 0) == 0;
                                    if (!Yp) {
                                        Zp = $p >>> 0 <= Vp >>> 0;
                                        ed = $p >>> 0 > Gp >>> 0;
                                        ax = Zp | ed;
                                        if (ax) {
                                            Rx = 0;
                                            break
                                        }
                                    }
                                    td = Nt(Ax | 0) | 0;
                                    nd = (td | 0) == (Dp | 0);
                                    Lx = nd ? Ax : 0;
                                    t = nd ? Dp : -1;
                                    XS = td;
                                    Ox = Ax;
                                    Fx = t;
                                    qx = Lx;
                                    Qx = 191
                                } else {
                                    Rx = 0
                                }
                            }
                        }
                    } while (0);
                    s: do {
                        if ((Qx | 0) == 191) {
                            dd = 0 - Ox | 0;
                            vd = (Fx | 0) == (-1 | 0);
                            if (!vd) {
                                Ix = Fx;
                                zx = qx;
                                Qx = 202;
                                break r
                            }
                            md = (XS | 0) != (-1 | 0);
                            gd = Ox >>> 0 < 2147483647;
                            lx = md & gd;
                            bd = Ox >>> 0 < np >>> 0;
                            cx = lx & bd;
                            do {
                                if (cx) {
                                    wd = s[(133712 + 8 | 0) >> 2] | 0;
                                    Ed = ip - Ox | 0;
                                    Sd = Ed + wd | 0;
                                    xd = 0 - wd | 0;
                                    Td = Sd & xd;
                                    Nd = Td >>> 0 < 2147483647;
                                    if (Nd) {
                                        Cd = Nt(Td | 0) | 0;
                                        kd = (Cd | 0) == (-1 | 0);
                                        if (kd) {
                                            Nt(dd | 0) | 0;
                                            Rx = qx;
                                            break s
                                        } else {
                                            Ld = Td + Ox | 0;
                                            Mx = Ld;
                                            break
                                        }
                                    } else {
                                        Mx = Ox
                                    }
                                } else {
                                    Mx = Ox
                                }
                            } while (0);
                            Od = (XS | 0) == (-1 | 0);
                            if (Od) {
                                Rx = qx
                            } else {
                                Ix = XS;
                                zx = Mx;
                                Qx = 202;
                                break r
                            }
                        }
                    } while (0);
                    Md = s[(133240 + 444 | 0) >> 2] | 0;
                    _d = Md | 4;
                    s[(133240 + 444 | 0) >> 2] = _d;
                    Ux = Rx;
                    Qx = 199
                } else {
                    Ux = 0;
                    Qx = 199
                }
            } while (0);
            if ((Qx | 0) == 199) {
                Dd = ap >>> 0 < 2147483647;
                if (Dd) {
                    Pd = Nt(ap | 0) | 0;
                    Hd = Nt(0) | 0;
                    ex = (Pd | 0) != (-1 | 0);
                    tx = (Hd | 0) != (-1 | 0);
                    hx = tx & ex;
                    Bd = Pd >>> 0 < Hd >>> 0;
                    px = hx & Bd;
                    if (px) {
                        jd = Hd;
                        Fd = Pd;
                        Id = jd - Fd | 0;
                        Rd = ZS + 40 | 0;
                        Ud = Id >>> 0 > Rd >>> 0;
                        dn = Ud ? Id : Ux;
                        if (Ud) {
                            Ix = Pd;
                            zx = dn;
                            Qx = 202
                        }
                    }
                }
            }
            if ((Qx | 0) == 202) {
                zd = s[(133240 + 432 | 0) >> 2] | 0;
                Wd = zd + zx | 0;
                s[(133240 + 432 | 0) >> 2] = Wd;
                Xd = s[(133240 + 436 | 0) >> 2] | 0;
                Vd = Wd >>> 0 > Xd >>> 0;
                if (Vd) {
                    s[(133240 + 436 | 0) >> 2] = Wd
                }
                $d = s[(133240 + 24 | 0) >> 2] | 0;
                Jd = ($d | 0) == (0 | 0);
                o: do {
                    if (Jd) {
                        Kd = s[(133240 + 16 | 0) >> 2] | 0;
                        Qd = (Kd | 0) == (0 | 0);
                        Yd = Ix >>> 0 < Kd >>> 0;
                        ox = Qd | Yd;
                        if (ox) {
                            s[(133240 + 16 | 0) >> 2] = Ix
                        }
                        s[(133240 + 448 | 0) >> 2] = Ix;
                        s[(133240 + 452 | 0) >> 2] = zx;
                        s[(133240 + 460 | 0) >> 2] = 0;
                        Zd = s[133712 >> 2] | 0;
                        s[(133240 + 36 | 0) >> 2] = Zd;
                        s[(133240 + 32 | 0) >> 2] = -1;
                        QS = 0;
                        while (1) {
                            ev = QS << 1;
                            tv = (133240 + (ev << 2) | 0) + 40 | 0;
                            E = ev + 3 | 0;
                            nv = (133240 + (E << 2) | 0) + 40 | 0;
                            s[nv >> 2] = tv;
                            _ = ev + 2 | 0;
                            rv = (133240 + (_ << 2) | 0) + 40 | 0;
                            s[rv >> 2] = tv;
                            iv = QS + 1 | 0;
                            KS = (iv | 0) == 32;
                            if (KS) {
                                break
                            } else {
                                QS = iv
                            }
                        }
                        sv = zx + -40 | 0;
                        ov = Ix + 8 | 0;
                        uv = ov;
                        fv = uv & 7;
                        lv = (fv | 0) == 0;
                        if (lv) {
                            dv = 0
                        } else {
                            cv = 0 - uv | 0;
                            hv = cv & 7;
                            dv = hv
                        }
                        pv = Ix + dv | 0;
                        vv = sv - dv | 0;
                        s[(133240 + 24 | 0) >> 2] = pv;
                        s[(133240 + 12 | 0) >> 2] = vv;
                        mv = vv | 1;
                        x = dv + 4 | 0;
                        gv = Ix + x | 0;
                        s[gv >> 2] = mv;
                        wt = zx + -36 | 0;
                        yv = Ix + wt | 0;
                        s[yv >> 2] = 40;
                        wv = s[(133712 + 16 | 0) >> 2] | 0;
                        s[(133240 + 28 | 0) >> 2] = wv
                    } else {
                        Cx = 133240 + 448 | 0;
                        while (1) {
                            Ev = s[Cx >> 2] | 0;
                            Sv = Cx + 4 | 0;
                            xv = s[Sv >> 2] | 0;
                            Tv = Ev + xv | 0;
                            Nv = (Ix | 0) == (Tv | 0);
                            if (Nv) {
                                Qx = 214;
                                break
                            }
                            Cv = Cx + 8 | 0;
                            kv = s[Cv >> 2] | 0;
                            Lv = (kv | 0) == (0 | 0);
                            if (Lv) {
                                break
                            } else {
                                Cx = kv
                            }
                        }
                        if ((Qx | 0) == 214) {
                            Av = Cx + 12 | 0;
                            Mv = s[Av >> 2] | 0;
                            _v = Mv & 8;
                            Dv = (_v | 0) == 0;
                            if (Dv) {
                                Pv = $d >>> 0 >= Ev >>> 0;
                                Hv = $d >>> 0 < Ix >>> 0;
                                fx = Pv & Hv;
                                if (fx) {
                                    Bv = xv + zx | 0;
                                    s[Sv >> 2] = Bv;
                                    jv = s[(133240 + 12 | 0) >> 2] | 0;
                                    Fv = jv + zx | 0;
                                    Iv = $d + 8 | 0;
                                    qv = Iv;
                                    Uv = qv & 7;
                                    zv = (Uv | 0) == 0;
                                    if (zv) {
                                        $v = 0
                                    } else {
                                        Wv = 0 - qv | 0;
                                        Xv = Wv & 7;
                                        $v = Xv
                                    }
                                    Vv = $d + $v | 0;
                                    Jv = Fv - $v | 0;
                                    s[(133240 + 24 | 0) >> 2] = Vv;
                                    s[(133240 + 12 | 0) >> 2] = Jv;
                                    Kv = Jv | 1;
                                    N = $v + 4 | 0;
                                    Qv = $d + N | 0;
                                    s[Qv >> 2] = Kv;
                                    xt = Fv + 4 | 0;
                                    Gv = $d + xt | 0;
                                    s[Gv >> 2] = 40;
                                    Zv = s[(133712 + 16 | 0) >> 2] | 0;
                                    s[(133240 + 28 | 0) >> 2] = Zv;
                                    break
                                }
                            }
                        }
                        em = s[(133240 + 16 | 0) >> 2] | 0;
                        tm = Ix >>> 0 < em >>> 0;
                        if (tm) {
                            s[(133240 + 16 | 0) >> 2] = Ix
                        }
                        nm = Ix + zx | 0;
                        kx = 133240 + 448 | 0;
                        while (1) {
                            rm = s[kx >> 2] | 0;
                            im = (rm | 0) == (nm | 0);
                            if (im) {
                                Qx = 224;
                                break
                            }
                            sm = kx + 8 | 0;
                            om = s[sm >> 2] | 0;
                            um = (om | 0) == (0 | 0);
                            if (um) {
                                break
                            } else {
                                kx = om
                            }
                        }
                        if ((Qx | 0) == 224) {
                            am = kx + 12 | 0;
                            cm = s[am >> 2] | 0;
                            hm = cm & 8;
                            pm = (hm | 0) == 0;
                            if (pm) {
                                s[kx >> 2] = Ix;
                                dm = kx + 4 | 0;
                                vm = s[dm >> 2] | 0;
                                mm = vm + zx | 0;
                                s[dm >> 2] = mm;
                                gm = Ix + 8 | 0;
                                ym = gm;
                                bm = ym & 7;
                                wm = (bm | 0) == 0;
                                if (wm) {
                                    Nm = 0
                                } else {
                                    Sm = 0 - ym | 0;
                                    xm = Sm & 7;
                                    Nm = xm
                                }
                                Tm = Ix + Nm | 0;
                                q = zx + 8 | 0;
                                Cm = Ix + q | 0;
                                km = Cm;
                                Lm = km & 7;
                                Am = (Lm | 0) == 0;
                                if (Am) {
                                    Dm = 0
                                } else {
                                    Om = 0 - km | 0;
                                    Mm = Om & 7;
                                    Dm = Mm
                                }
                                R = Dm + zx | 0;
                                Pm = Ix + R | 0;
                                Hm = Pm;
                                Bm = Tm;
                                jm = Hm - Bm | 0;
                                C = Nm + ZS | 0;
                                Fm = Ix + C | 0;
                                Im = jm - ZS | 0;
                                qm = ZS | 3;
                                P = Nm + 4 | 0;
                                Rm = Ix + P | 0;
                                s[Rm >> 2] = qm;
                                Um = s[(133240 + 24 | 0) >> 2] | 0;
                                Wm = (Pm | 0) == (Um | 0);
                                u: do {
                                    if (Wm) {
                                        Xm = s[(133240 + 12 | 0) >> 2] | 0;
                                        Vm = Xm + Im | 0;
                                        s[(133240 + 12 | 0) >> 2] = Vm;
                                        s[(133240 + 24 | 0) >> 2] = Fm;
                                        $m = Vm | 1;
                                        tn = C + 4 | 0;
                                        Jm = Ix + tn | 0;
                                        s[Jm >> 2] = $m
                                    } else {
                                        Km = s[(133240 + 20 | 0) >> 2] | 0;
                                        Qm = (Pm | 0) == (Km | 0);
                                        if (Qm) {
                                            Gm = s[(133240 + 8 | 0) >> 2] | 0;
                                            Ym = Gm + Im | 0;
                                            s[(133240 + 8 | 0) >> 2] = Ym;
                                            s[(133240 + 20 | 0) >> 2] = Fm;
                                            Zm = Ym | 1;
                                            Zt = C + 4 | 0;
                                            tg = Ix + Zt | 0;
                                            s[tg >> 2] = Zm;
                                            en = Ym + C | 0;
                                            ng = Ix + en | 0;
                                            s[ng >> 2] = Ym;
                                            break
                                        }
                                        Tt = zx + 4 | 0;
                                        U = Tt + Dm | 0;
                                        rg = Ix + U | 0;
                                        ig = s[rg >> 2] | 0;
                                        sg = ig & 3;
                                        og = (sg | 0) == 1;
                                        if (og) {
                                            ug = ig & -8;
                                            ag = ig >>> 3;
                                            fg = ig >>> 0 < 256;
                                            a: do {
                                                if (fg) {
                                                    Vt = Dm | 8;
                                                    nt = Vt + zx | 0;
                                                    lg = Ix + nt | 0;
                                                    hg = s[lg >> 2] | 0;
                                                    $t = zx + 12 | 0;
                                                    st = $t + Dm | 0;
                                                    pg = Ix + st | 0;
                                                    dg = s[pg >> 2] | 0;
                                                    vg = ag << 1;
                                                    mg = (133240 + (vg << 2) | 0) + 40 | 0;
                                                    gg = (hg | 0) == (mg | 0);
                                                    do {
                                                        if (!gg) {
                                                            yg = s[(133240 + 16 | 0) >> 2] | 0;
                                                            bg = hg >>> 0 < yg >>> 0;
                                                            if (bg) {
                                                                Kt()
                                                            }
                                                            wg = hg + 12 | 0;
                                                            Eg = s[wg >> 2] | 0;
                                                            xg = (Eg | 0) == (Pm | 0);
                                                            if (xg) {
                                                                break
                                                            }
                                                            Kt()
                                                        }
                                                    } while (0);
                                                    Tg = (dg | 0) == (hg | 0);
                                                    if (Tg) {
                                                        Ng = 1 << ag;
                                                        Cg = Ng ^ -1;
                                                        kg = s[133240 >> 2] | 0;
                                                        Lg = kg & Cg;
                                                        s[133240 >> 2] = Lg;
                                                        break
                                                    }
                                                    Ag = (dg | 0) == (mg | 0);
                                                    do {
                                                        if (Ag) {
                                                            g = dg + 8 | 0;
                                                            v = g
                                                        } else {
                                                            Og = s[(133240 + 16 | 0) >> 2] | 0;
                                                            Mg = dg >>> 0 < Og >>> 0;
                                                            if (Mg) {
                                                                Kt()
                                                            }
                                                            _g = dg + 8 | 0;
                                                            Pg = s[_g >> 2] | 0;
                                                            Hg = (Pg | 0) == (Pm | 0);
                                                            if (Hg) {
                                                                v = _g;
                                                                break
                                                            }
                                                            Kt()
                                                        }
                                                    } while (0);
                                                    Bg = hg + 12 | 0;
                                                    s[Bg >> 2] = dg;
                                                    s[v >> 2] = hg
                                                } else {
                                                    Wt = Dm | 24;
                                                    V = Wt + zx | 0;
                                                    jg = Ix + V | 0;
                                                    Fg = s[jg >> 2] | 0;
                                                    rn = zx + 12 | 0;
                                                    $ = rn + Dm | 0;
                                                    Ig = Ix + $ | 0;
                                                    qg = s[Ig >> 2] | 0;
                                                    Rg = (qg | 0) == (Pm | 0);
                                                    do {
                                                        if (Rg) {
                                                            un = Dm | 16;
                                                            et = Tt + un | 0;
                                                            Zg = Ix + et | 0;
                                                            ey = s[Zg >> 2] | 0;
                                                            ny = (ey | 0) == (0 | 0);
                                                            if (ny) {
                                                                tt = un + zx | 0;
                                                                ry = Ix + tt | 0;
                                                                iy = s[ry >> 2] | 0;
                                                                sy = (iy | 0) == (0 | 0);
                                                                if (sy) {
                                                                    PS = 0;
                                                                    break
                                                                } else {
                                                                    MS = iy;
                                                                    jS = ry
                                                                }
                                                            } else {
                                                                MS = ey;
                                                                jS = Zg
                                                            }
                                                            while (1) {
                                                                oy = MS + 20 | 0;
                                                                uy = s[oy >> 2] | 0;
                                                                ay = (uy | 0) == (0 | 0);
                                                                if (!ay) {
                                                                    MS = uy;
                                                                    jS = oy;
                                                                    continue
                                                                }
                                                                fy = MS + 16 | 0;
                                                                ly = s[fy >> 2] | 0;
                                                                cy = (ly | 0) == (0 | 0);
                                                                if (cy) {
                                                                    break
                                                                } else {
                                                                    MS = ly;
                                                                    jS = fy
                                                                }
                                                            }
                                                            dy = s[(133240 + 16 | 0) >> 2] | 0;
                                                            vy = jS >>> 0 < dy >>> 0;
                                                            if (vy) {
                                                                Kt()
                                                            } else {
                                                                s[jS >> 2] = 0;
                                                                PS = MS;
                                                                break
                                                            }
                                                        } else {
                                                            Xt = Dm | 8;
                                                            K = Xt + zx | 0;
                                                            Ug = Ix + K | 0;
                                                            zg = s[Ug >> 2] | 0;
                                                            Xg = s[(133240 + 16 | 0) >> 2] | 0;
                                                            Vg = zg >>> 0 < Xg >>> 0;
                                                            if (Vg) {
                                                                Kt()
                                                            }
                                                            $g = zg + 12 | 0;
                                                            Jg = s[$g >> 2] | 0;
                                                            Kg = (Jg | 0) == (Pm | 0);
                                                            if (!Kg) {
                                                                Kt()
                                                            }
                                                            Qg = qg + 8 | 0;
                                                            Gg = s[Qg >> 2] | 0;
                                                            Yg = (Gg | 0) == (Pm | 0);
                                                            if (Yg) {
                                                                s[$g >> 2] = qg;
                                                                s[Qg >> 2] = zg;
                                                                PS = qg;
                                                                break
                                                            } else {
                                                                Kt()
                                                            }
                                                        }
                                                    } while (0);
                                                    my = (Fg | 0) == (0 | 0);
                                                    if (my) {
                                                        break
                                                    }
                                                    Rt = zx + 28 | 0;
                                                    Q = Rt + Dm | 0;
                                                    gy = Ix + Q | 0;
                                                    yy = s[gy >> 2] | 0;
                                                    by = (133240 + (yy << 2) | 0) + 304 | 0;
                                                    wy = s[by >> 2] | 0;
                                                    Ey = (Pm | 0) == (wy | 0);
                                                    do {
                                                        if (Ey) {
                                                            s[by >> 2] = PS;
                                                            $S = (PS | 0) == (0 | 0);
                                                            if (!$S) {
                                                                break
                                                            }
                                                            Sy = 1 << yy;
                                                            xy = Sy ^ -1;
                                                            Ny = s[(133240 + 4 | 0) >> 2] | 0;
                                                            Cy = Ny & xy;
                                                            s[(133240 + 4 | 0) >> 2] = Cy;
                                                            break a
                                                        } else {
                                                            ky = s[(133240 + 16 | 0) >> 2] | 0;
                                                            Ly = Fg >>> 0 < ky >>> 0;
                                                            if (Ly) {
                                                                Kt()
                                                            }
                                                            Ay = Fg + 16 | 0;
                                                            Oy = s[Ay >> 2] | 0;
                                                            My = (Oy | 0) == (Pm | 0);
                                                            if (My) {
                                                                s[Ay >> 2] = PS
                                                            } else {
                                                                _y = Fg + 20 | 0;
                                                                s[_y >> 2] = PS
                                                            }
                                                            Dy = (PS | 0) == (0 | 0);
                                                            if (Dy) {
                                                                break a
                                                            }
                                                        }
                                                    } while (0);
                                                    Py = s[(133240 + 16 | 0) >> 2] | 0;
                                                    By = PS >>> 0 < Py >>> 0;
                                                    if (By) {
                                                        Kt()
                                                    }
                                                    jy = PS + 24 | 0;
                                                    s[jy >> 2] = Fg;
                                                    Ut = Dm | 16;
                                                    G = Ut + zx | 0;
                                                    Fy = Ix + G | 0;
                                                    Iy = s[Fy >> 2] | 0;
                                                    qy = (Iy | 0) == (0 | 0);
                                                    do {
                                                        if (!qy) {
                                                            Ry = s[(133240 + 16 | 0) >> 2] | 0;
                                                            Uy = Iy >>> 0 < Ry >>> 0;
                                                            if (Uy) {
                                                                Kt()
                                                            } else {
                                                                zy = PS + 16 | 0;
                                                                s[zy >> 2] = Iy;
                                                                Wy = Iy + 24 | 0;
                                                                s[Wy >> 2] = PS;
                                                                break
                                                            }
                                                        }
                                                    } while (0);
                                                    Y = Tt + Ut | 0;
                                                    Xy = Ix + Y | 0;
                                                    $y = s[Xy >> 2] | 0;
                                                    Jy = ($y | 0) == (0 | 0);
                                                    if (Jy) {
                                                        break
                                                    }
                                                    Ky = s[(133240 + 16 | 0) >> 2] | 0;
                                                    Qy = $y >>> 0 < Ky >>> 0;
                                                    if (Qy) {
                                                        Kt()
                                                    } else {
                                                        Gy = PS + 20 | 0;
                                                        s[Gy >> 2] = $y;
                                                        Yy = $y + 24 | 0;
                                                        s[Yy >> 2] = PS;
                                                        break
                                                    }
                                                }
                                            } while (0);
                                            pn = ug | Dm;
                                            Z = pn + zx | 0;
                                            Zy = Ix + Z | 0;
                                            eb = ug + Im | 0;
                                            nx = Zy;
                                            dx = eb
                                        } else {
                                            nx = Pm;
                                            dx = Im
                                        }
                                        tb = nx + 4 | 0;
                                        nb = s[tb >> 2] | 0;
                                        ib = nb & -2;
                                        s[tb >> 2] = ib;
                                        sb = dx | 1;
                                        F = C + 4 | 0;
                                        ob = Ix + F | 0;
                                        s[ob >> 2] = sb;
                                        X = dx + C | 0;
                                        ub = Ix + X | 0;
                                        s[ub >> 2] = dx;
                                        ab = dx >>> 3;
                                        fb = dx >>> 0 < 256;
                                        if (fb) {
                                            lb = ab << 1;
                                            cb = (133240 + (lb << 2) | 0) + 40 | 0;
                                            hb = s[133240 >> 2] | 0;
                                            pb = 1 << ab;
                                            vb = hb & pb;
                                            mb = (vb | 0) == 0;
                                            do {
                                                if (mb) {
                                                    gb = hb | pb;
                                                    s[133240 >> 2] = gb;
                                                    Pt = lb + 2 | 0;
                                                    f = (133240 + (Pt << 2) | 0) + 40 | 0;
                                                    h = f;
                                                    ES = cb
                                                } else {
                                                    jt = lb + 2 | 0;
                                                    yb = (133240 + (jt << 2) | 0) + 40 | 0;
                                                    bb = s[yb >> 2] | 0;
                                                    wb = s[(133240 + 16 | 0) >> 2] | 0;
                                                    Eb = bb >>> 0 < wb >>> 0;
                                                    if (!Eb) {
                                                        h = yb;
                                                        ES = bb;
                                                        break
                                                    }
                                                    Kt()
                                                }
                                            } while (0);
                                            s[h >> 2] = Fm;
                                            Sb = ES + 12 | 0;
                                            s[Sb >> 2] = Fm;
                                            Ht = C + 8 | 0;
                                            xb = Ix + Ht | 0;
                                            s[xb >> 2] = ES;
                                            Bt = C + 12 | 0;
                                            Tb = Ix + Bt | 0;
                                            s[Tb >> 2] = cb;
                                            break
                                        }
                                        Cb = dx >>> 8;
                                        kb = (Cb | 0) == 0;
                                        do {
                                            if (kb) {
                                                CS = 0
                                            } else {
                                                Lb = dx >>> 0 > 16777215;
                                                if (Lb) {
                                                    CS = 31;
                                                    break
                                                }
                                                Ab = Cb + 1048320 | 0;
                                                Ob = Ab >>> 16;
                                                Mb = Ob & 8;
                                                _b = Cb << Mb;
                                                Db = _b + 520192 | 0;
                                                Pb = Db >>> 16;
                                                Hb = Pb & 4;
                                                jb = Hb | Mb;
                                                Fb = _b << Hb;
                                                Ib = Fb + 245760 | 0;
                                                qb = Ib >>> 16;
                                                Rb = qb & 2;
                                                Ub = jb | Rb;
                                                zb = 14 - Ub | 0;
                                                Wb = Fb << Rb;
                                                Xb = Wb >>> 15;
                                                Vb = zb + Xb | 0;
                                                Jb = Vb << 1;
                                                Kb = Vb + 7 | 0;
                                                Qb = dx >>> Kb;
                                                Gb = Qb & 1;
                                                Yb = Gb | Jb;
                                                CS = Yb
                                            }
                                        } while (0);
                                        Zb = (133240 + (CS << 2) | 0) + 304 | 0;
                                        it = C + 28 | 0;
                                        ew = Ix + it | 0;
                                        s[ew >> 2] = CS;
                                        ut = C + 16 | 0;
                                        tw = Ix + ut | 0;
                                        at = C + 20 | 0;
                                        nw = Ix + at | 0;
                                        s[nw >> 2] = 0;
                                        s[tw >> 2] = 0;
                                        rw = s[(133240 + 4 | 0) >> 2] | 0;
                                        sw = 1 << CS;
                                        ow = rw & sw;
                                        uw = (ow | 0) == 0;
                                        if (uw) {
                                            aw = rw | sw;
                                            s[(133240 + 4 | 0) >> 2] = aw;
                                            s[Zb >> 2] = Fm;
                                            ct = C + 24 | 0;
                                            fw = Ix + ct | 0;
                                            s[fw >> 2] = Zb;
                                            pt = C + 12 | 0;
                                            lw = Ix + pt | 0;
                                            s[lw >> 2] = Fm;
                                            vt = C + 8 | 0;
                                            cw = Ix + vt | 0;
                                            s[cw >> 2] = Fm;
                                            break
                                        }
                                        hw = s[Zb >> 2] | 0;
                                        pw = (CS | 0) == 31;
                                        if (pw) {
                                            xw = 0
                                        } else {
                                            dw = CS >>> 1;
                                            gw = 25 - dw | 0;
                                            xw = gw
                                        }
                                        yw = hw + 4 | 0;
                                        bw = s[yw >> 2] | 0;
                                        ww = bw & -8;
                                        Ew = (ww | 0) == (dx | 0);
                                        f: do {
                                            if (Ew) {
                                                RS = hw
                                            } else {
                                                Sw = dx << xw;
                                                AS = Sw;
                                                WS = hw;
                                                while (1) {
                                                    Mw = AS >>> 31;
                                                    _w = (WS + (Mw << 2) | 0) + 16 | 0;
                                                    Cw = s[_w >> 2] | 0;
                                                    Dw = (Cw | 0) == (0 | 0);
                                                    if (Dw) {
                                                        break
                                                    }
                                                    Tw = AS << 1;
                                                    Nw = Cw + 4 | 0;
                                                    Lw = s[Nw >> 2] | 0;
                                                    Aw = Lw & -8;
                                                    Ow = (Aw | 0) == (dx | 0);
                                                    if (Ow) {
                                                        RS = Cw;
                                                        break f
                                                    } else {
                                                        AS = Tw;
                                                        WS = Cw
                                                    }
                                                }
                                                Pw = s[(133240 + 16 | 0) >> 2] | 0;
                                                Hw = _w >>> 0 < Pw >>> 0;
                                                if (Hw) {
                                                    Kt()
                                                } else {
                                                    s[_w >> 2] = Fm;
                                                    Ot = C + 24 | 0;
                                                    Bw = Ix + Ot | 0;
                                                    s[Bw >> 2] = WS;
                                                    _t = C + 12 | 0;
                                                    jw = Ix + _t | 0;
                                                    s[jw >> 2] = Fm;
                                                    Dt = C + 8 | 0;
                                                    Iw = Ix + Dt | 0;
                                                    s[Iw >> 2] = Fm;
                                                    break u
                                                }
                                            }
                                        } while (0);
                                        qw = RS + 8 | 0;
                                        Rw = s[qw >> 2] | 0;
                                        Uw = s[(133240 + 16 | 0) >> 2] | 0;
                                        zw = RS >>> 0 < Uw >>> 0;
                                        if (zw) {
                                            Kt()
                                        }
                                        Ww = Rw >>> 0 < Uw >>> 0;
                                        if (Ww) {
                                            Kt()
                                        } else {
                                            Xw = Rw + 12 | 0;
                                            s[Xw >> 2] = Fm;
                                            s[qw >> 2] = Fm;
                                            kt = C + 8 | 0;
                                            Vw = Ix + kt | 0;
                                            s[Vw >> 2] = Rw;
                                            Lt = C + 12 | 0;
                                            $w = Ix + Lt | 0;
                                            s[$w >> 2] = RS;
                                            At = C + 24 | 0;
                                            Jw = Ix + At | 0;
                                            s[Jw >> 2] = 0;
                                            break
                                        }
                                    }
                                } while (0);
                                gt = Nm | 8;
                                Qw = Ix + gt | 0;
                                YS = Qw;
                                c = Gx;
                                return YS | 0
                            }
                        }
                        Nx = 133240 + 448 | 0;
                        while (1) {
                            Gw = s[Nx >> 2] | 0;
                            Yw = Gw >>> 0 > $d >>> 0;
                            if (!Yw) {
                                Zw = Nx + 4 | 0;
                                eE = s[Zw >> 2] | 0;
                                tE = Gw + eE | 0;
                                nE = tE >>> 0 > $d >>> 0;
                                if (nE) {
                                    break
                                }
                            }
                            rE = Nx + 8 | 0;
                            iE = s[rE >> 2] | 0;
                            Nx = iE
                        }
                        T = eE + -47 | 0;
                        D = eE + -39 | 0;
                        sE = Gw + D | 0;
                        uE = sE;
                        aE = uE & 7;
                        fE = (aE | 0) == 0;
                        if (fE) {
                            hE = 0
                        } else {
                            lE = 0 - uE | 0;
                            cE = lE & 7;
                            hE = cE
                        }
                        St = T + hE | 0;
                        pE = Gw + St | 0;
                        dE = $d + 16 | 0;
                        vE = pE >>> 0 < dE >>> 0;
                        mE = vE ? $d : pE;
                        yE = mE + 8 | 0;
                        bE = zx + -40 | 0;
                        wE = Ix + 8 | 0;
                        EE = wE;
                        SE = EE & 7;
                        xE = (SE | 0) == 0;
                        if (xE) {
                            kE = 0
                        } else {
                            TE = 0 - EE | 0;
                            NE = TE & 7;
                            kE = NE
                        }
                        CE = Ix + kE | 0;
                        AE = bE - kE | 0;
                        s[(133240 + 24 | 0) >> 2] = CE;
                        s[(133240 + 12 | 0) >> 2] = AE;
                        OE = AE | 1;
                        S = kE + 4 | 0;
                        ME = Ix + S | 0;
                        s[ME >> 2] = OE;
                        Et = zx + -36 | 0;
                        _E = Ix + Et | 0;
                        s[_E >> 2] = 40;
                        DE = s[(133712 + 16 | 0) >> 2] | 0;
                        s[(133240 + 28 | 0) >> 2] = DE;
                        PE = mE + 4 | 0;
                        s[PE >> 2] = 27;
                        s[yE + 0 >> 2] = s[(133240 + 448 | 0) + 0 >> 2] | 0;
                        s[yE + 4 >> 2] = s[(133240 + 448 | 0) + 4 >> 2] | 0;
                        s[yE + 8 >> 2] = s[(133240 + 448 | 0) + 8 >> 2] | 0;
                        s[yE + 12 >> 2] = s[(133240 + 448 | 0) + 12 >> 2] | 0;
                        s[(133240 + 448 | 0) >> 2] = Ix;
                        s[(133240 + 452 | 0) >> 2] = zx;
                        s[(133240 + 460 | 0) >> 2] = 0;
                        s[(133240 + 456 | 0) >> 2] = yE;
                        HE = mE + 28 | 0;
                        s[HE >> 2] = 7;
                        BE = mE + 32 | 0;
                        jE = BE >>> 0 < tE >>> 0;
                        if (jE) {
                            qE = HE;
                            while (1) {
                                FE = qE + 4 | 0;
                                s[FE >> 2] = 7;
                                RE = qE + 8 | 0;
                                UE = RE >>> 0 < tE >>> 0;
                                if (UE) {
                                    qE = FE
                                } else {
                                    break
                                }
                            }
                        }
                        zE = (mE | 0) == ($d | 0);
                        if (!zE) {
                            WE = mE;
                            XE = $d;
                            VE = WE - XE | 0;
                            $E = $d + VE | 0;
                            It = VE + 4 | 0;
                            JE = $d + It | 0;
                            KE = s[JE >> 2] | 0;
                            GE = KE & -2;
                            s[JE >> 2] = GE;
                            YE = VE | 1;
                            ZE = $d + 4 | 0;
                            s[ZE >> 2] = YE;
                            s[$E >> 2] = VE;
                            eS = VE >>> 3;
                            tS = VE >>> 0 < 256;
                            if (tS) {
                                nS = eS << 1;
                                rS = (133240 + (nS << 2) | 0) + 40 | 0;
                                iS = s[133240 >> 2] | 0;
                                sS = 1 << eS;
                                oS = iS & sS;
                                aS = (oS | 0) == 0;
                                do {
                                    if (aS) {
                                        fS = iS | sS;
                                        s[133240 >> 2] = fS;
                                        I = nS + 2 | 0;
                                        u = (133240 + (I << 2) | 0) + 40 | 0;
                                        l = u;
                                        yS = rS
                                    } else {
                                        W = nS + 2 | 0;
                                        lS = (133240 + (W << 2) | 0) + 40 | 0;
                                        cS = s[lS >> 2] | 0;
                                        hS = s[(133240 + 16 | 0) >> 2] | 0;
                                        pS = cS >>> 0 < hS >>> 0;
                                        if (!pS) {
                                            l = lS;
                                            yS = cS;
                                            break
                                        }
                                        Kt()
                                    }
                                } while (0);
                                s[l >> 2] = $d;
                                dS = yS + 12 | 0;
                                s[dS >> 2] = $d;
                                vS = $d + 8 | 0;
                                s[vS >> 2] = yS;
                                mS = $d + 12 | 0;
                                s[mS >> 2] = rS;
                                break
                            }
                            gS = VE >>> 8;
                            wn = (gS | 0) == 0;
                            if (wn) {
                                TS = 0
                            } else {
                                En = VE >>> 0 > 16777215;
                                if (En) {
                                    TS = 31
                                } else {
                                    Sn = gS + 1048320 | 0;
                                    xn = Sn >>> 16;
                                    Tn = xn & 8;
                                    Nn = gS << Tn;
                                    Cn = Nn + 520192 | 0;
                                    kn = Cn >>> 16;
                                    Ln = kn & 4;
                                    An = Ln | Tn;
                                    Mn = Nn << Ln;
                                    _n = Mn + 245760 | 0;
                                    Dn = _n >>> 16;
                                    Pn = Dn & 2;
                                    Hn = An | Pn;
                                    Bn = 14 - Hn | 0;
                                    jn = Mn << Pn;
                                    Fn = jn >>> 15;
                                    In = Bn + Fn | 0;
                                    qn = In << 1;
                                    Un = In + 7 | 0;
                                    zn = VE >>> Un;
                                    Wn = zn & 1;
                                    Xn = Wn | qn;
                                    TS = Xn
                                }
                            }
                            Vn = (133240 + (TS << 2) | 0) + 304 | 0;
                            $n = $d + 28 | 0;
                            xS = TS;
                            s[$n >> 2] = xS;
                            Jn = $d + 20 | 0;
                            s[Jn >> 2] = 0;
                            Kn = $d + 16 | 0;
                            s[Kn >> 2] = 0;
                            Qn = s[(133240 + 4 | 0) >> 2] | 0;
                            Gn = 1 << TS;
                            Zn = Qn & Gn;
                            er = (Zn | 0) == 0;
                            if (er) {
                                tr = Qn | Gn;
                                s[(133240 + 4 | 0) >> 2] = tr;
                                s[Vn >> 2] = $d;
                                nr = $d + 24 | 0;
                                s[nr >> 2] = Vn;
                                rr = $d + 12 | 0;
                                s[rr >> 2] = $d;
                                ir = $d + 8 | 0;
                                s[ir >> 2] = $d;
                                break
                            }
                            sr = s[Vn >> 2] | 0;
                            or = (TS | 0) == 31;
                            if (or) {
                                vr = 0
                            } else {
                                ur = TS >>> 1;
                                ar = 25 - ur | 0;
                                vr = ar
                            }
                            lr = sr + 4 | 0;
                            cr = s[lr >> 2] | 0;
                            hr = cr & -8;
                            pr = (hr | 0) == (VE | 0);
                            l: do {
                                if (pr) {
                                    qS = sr
                                } else {
                                    dr = VE << vr;
                                    LS = dr;
                                    US = sr;
                                    while (1) {
                                        xr = LS >>> 31;
                                        Tr = (US + (xr << 2) | 0) + 16 | 0;
                                        yr = s[Tr >> 2] | 0;
                                        Nr = (yr | 0) == (0 | 0);
                                        if (Nr) {
                                            break
                                        }
                                        mr = LS << 1;
                                        gr = yr + 4 | 0;
                                        br = s[gr >> 2] | 0;
                                        Er = br & -8;
                                        Sr = (Er | 0) == (VE | 0);
                                        if (Sr) {
                                            qS = yr;
                                            break l
                                        } else {
                                            LS = mr;
                                            US = yr
                                        }
                                    }
                                    Cr = s[(133240 + 16 | 0) >> 2] | 0;
                                    kr = Tr >>> 0 < Cr >>> 0;
                                    if (kr) {
                                        Kt()
                                    } else {
                                        s[Tr >> 2] = $d;
                                        Lr = $d + 24 | 0;
                                        s[Lr >> 2] = US;
                                        Ar = $d + 12 | 0;
                                        s[Ar >> 2] = $d;
                                        Or = $d + 8 | 0;
                                        s[Or >> 2] = $d;
                                        break o
                                    }
                                }
                            } while (0);
                            _r = qS + 8 | 0;
                            Dr = s[_r >> 2] | 0;
                            Pr = s[(133240 + 16 | 0) >> 2] | 0;
                            Hr = qS >>> 0 < Pr >>> 0;
                            if (Hr) {
                                Kt()
                            }
                            Br = Dr >>> 0 < Pr >>> 0;
                            if (Br) {
                                Kt()
                            } else {
                                jr = Dr + 12 | 0;
                                s[jr >> 2] = $d;
                                s[_r >> 2] = $d;
                                Fr = $d + 8 | 0;
                                s[Fr >> 2] = Dr;
                                Ir = $d + 12 | 0;
                                s[Ir >> 2] = qS;
                                qr = $d + 24 | 0;
                                s[qr >> 2] = 0;
                                break
                            }
                        }
                    }
                } while (0);
                Rr = s[(133240 + 12 | 0) >> 2] | 0;
                zr = Rr >>> 0 > ZS >>> 0;
                if (zr) {
                    Wr = Rr - ZS | 0;
                    s[(133240 + 12 | 0) >> 2] = Wr;
                    Xr = s[(133240 + 24 | 0) >> 2] | 0;
                    Vr = Xr + ZS | 0;
                    s[(133240 + 24 | 0) >> 2] = Vr;
                    $r = Wr | 1;
                    L = ZS + 4 | 0;
                    Jr = Xr + L | 0;
                    s[Jr >> 2] = $r;
                    Kr = ZS | 3;
                    Qr = Xr + 4 | 0;
                    s[Qr >> 2] = Kr;
                    Gr = Xr + 8 | 0;
                    YS = Gr;
                    c = Gx;
                    return YS | 0
                }
            }
            Yr = zt() | 0;
            s[Yr >> 2] = 12;
            YS = 0;
            c = Gx;
            return YS | 0
        }

        function _s(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0;
            var x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0;
            var z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0;
            var ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0;
            var At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0;
            var Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0;
            var gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0;
            var jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0;
            var rr = 0,
                ir = 0,
                sr = 0,
                or = 0,
                ur = 0,
                ar = 0,
                fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0;
            var xr = 0,
                Tr = 0,
                Nr = 0,
                Cr = 0,
                kr = 0,
                Lr = 0,
                Ar = 0,
                Or = 0,
                Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0;
            var zr = 0,
                Wr = 0,
                Xr = 0,
                Vr = 0,
                $r = 0,
                Jr = 0,
                Kr = 0,
                Qr = 0,
                Gr = 0,
                Yr = 0,
                Zr = 0,
                ei = 0,
                ti = 0,
                ni = 0,
                ri = 0,
                ii = 0,
                si = 0,
                oi = 0,
                ui = 0,
                ai = 0;
            var fi = 0,
                li = 0,
                ci = 0,
                hi = 0,
                pi = 0,
                di = 0,
                vi = 0,
                mi = 0,
                gi = 0,
                yi = 0,
                bi = 0,
                wi = 0,
                Ei = 0,
                Si = 0,
                xi = 0,
                Ti = 0,
                Ni = 0,
                Ci = 0,
                ki = 0,
                Li = 0;
            var Ai = 0,
                Oi = 0,
                Mi = 0,
                _i = 0,
                Di = 0,
                Pi = 0,
                Hi = 0,
                Bi = 0,
                ji = 0,
                Fi = 0,
                Ii = 0,
                qi = 0,
                Ri = 0,
                Ui = 0,
                zi = 0,
                Wi = 0,
                Xi = 0,
                Vi = 0,
                $i = 0,
                Ji = 0;
            var Ki = 0,
                Qi = 0,
                Gi = 0,
                Yi = 0,
                Zi = 0,
                es = 0,
                ts = 0,
                ns = 0,
                rs = 0,
                is = 0,
                ss = 0,
                os = 0,
                us = 0,
                as = 0,
                fs = 0,
                ls = 0,
                cs = 0,
                hs = 0,
                ps = 0,
                ds = 0;
            var vs = 0,
                ms = 0,
                gs = 0,
                ys = 0,
                bs = 0,
                ws = 0,
                Es = 0,
                Ss = 0,
                xs = 0,
                Ts = 0,
                Ns = 0,
                Cs = 0,
                ks = 0,
                Ls = 0,
                As = 0,
                Os = 0,
                Ms = 0,
                _s = 0,
                Ds = 0,
                Ps = 0;
            var Hs = 0,
                Bs = 0,
                js = 0,
                Fs = 0,
                Is = 0,
                qs = 0,
                Rs = 0,
                Us = 0,
                zs = 0,
                Ws = 0,
                Xs = 0,
                Vs = 0,
                $s = 0,
                Js = 0,
                Ks = 0,
                Qs = 0,
                Gs = 0,
                Ys = 0,
                Zs = 0,
                eo = 0;
            var to = 0,
                no = 0,
                ro = 0,
                io = 0,
                so = 0,
                oo = 0,
                uo = 0,
                ao = 0,
                fo = 0,
                lo = 0,
                co = 0,
                ho = 0,
                po = 0,
                vo = 0,
                mo = 0,
                go = 0,
                yo = 0,
                bo = 0,
                wo = 0,
                Eo = 0;
            var So = 0,
                xo = 0,
                To = 0,
                No = 0,
                Co = 0,
                ko = 0,
                Lo = 0,
                Ao = 0,
                Oo = 0,
                Mo = 0,
                _o = 0,
                Do = 0,
                Po = 0,
                Ho = 0,
                Bo = 0,
                jo = 0,
                Fo = 0,
                Io = 0,
                qo = 0,
                Ro = 0;
            var Uo = 0,
                zo = 0,
                Wo = 0,
                Xo = 0,
                Vo = 0,
                $o = 0,
                Jo = 0,
                Ko = 0,
                Qo = 0,
                Go = 0,
                Yo = 0,
                Zo = 0,
                eu = 0,
                tu = 0,
                nu = 0,
                ru = 0,
                iu = 0;
            iu = c;
            P = (e | 0) == (0 | 0);
            if (P) {
                c = iu;
                return
            }
            H = e + -8 | 0;
            qn = s[(133240 + 16 | 0) >> 2] | 0;
            zi = H >>> 0 < qn >>> 0;
            if (zi) {
                Kt()
            }
            Ns = e + -4 | 0;
            Bs = s[Ns >> 2] | 0;
            $s = Bs & 3;
            io = ($s | 0) == 1;
            if (io) {
                Kt()
            }
            mo = Bs & -8;
            a = mo + -8 | 0;
            ko = e + a | 0;
            B = Bs & 1;
            $ = (B | 0) == 0;
            do {
                if ($) {
                    it = s[H >> 2] | 0;
                    vt = ($s | 0) == 0;
                    if (vt) {
                        c = iu;
                        return
                    }
                    d = -8 - it | 0;
                    Ct = e + d | 0;
                    jt = it + mo | 0;
                    Jt = Ct >>> 0 < qn >>> 0;
                    if (Jt) {
                        Kt()
                    }
                    un = s[(133240 + 20 | 0) >> 2] | 0;
                    yn = (Ct | 0) == (un | 0);
                    if (yn) {
                        E = mo + -4 | 0;
                        R = e + E | 0;
                        U = s[R >> 2] | 0;
                        z = U & 3;
                        W = (z | 0) == 3;
                        if (!W) {
                            Yo = Ct;
                            Zo = jt;
                            break
                        }
                        s[(133240 + 8 | 0) >> 2] = jt;
                        X = s[R >> 2] | 0;
                        V = X & -2;
                        s[R >> 2] = V;
                        J = jt | 1;
                        y = d + 4 | 0;
                        K = e + y | 0;
                        s[K >> 2] = J;
                        s[ko >> 2] = jt;
                        c = iu;
                        return
                    }
                    An = it >>> 3;
                    Rn = it >>> 0 < 256;
                    if (Rn) {
                        L = d + 8 | 0;
                        Yn = e + L | 0;
                        fr = s[Yn >> 2] | 0;
                        A = d + 12 | 0;
                        wr = e + A | 0;
                        Mr = s[wr >> 2] | 0;
                        Ur = An << 1;
                        Zr = (133240 + (Ur << 2) | 0) + 40 | 0;
                        li = (fr | 0) == (Zr | 0);
                        if (!li) {
                            Ei = fr >>> 0 < qn >>> 0;
                            if (Ei) {
                                Kt()
                            }
                            _i = fr + 12 | 0;
                            Wi = s[_i >> 2] | 0;
                            ts = (Wi | 0) == (Ct | 0);
                            if (!ts) {
                                Kt()
                            }
                        }
                        hs = (Mr | 0) == (fr | 0);
                        if (hs) {
                            ys = 1 << An;
                            bs = ys ^ -1;
                            ws = s[133240 >> 2] | 0;
                            Es = ws & bs;
                            s[133240 >> 2] = Es;
                            Yo = Ct;
                            Zo = jt;
                            break
                        }
                        Ss = (Mr | 0) == (Zr | 0);
                        if (Ss) {
                            u = Mr + 8 | 0;
                            r = u
                        } else {
                            xs = Mr >>> 0 < qn >>> 0;
                            if (xs) {
                                Kt()
                            }
                            Ts = Mr + 8 | 0;
                            Cs = s[Ts >> 2] | 0;
                            ks = (Cs | 0) == (Ct | 0);
                            if (ks) {
                                r = Ts
                            } else {
                                Kt()
                            }
                        }
                        Ls = fr + 12 | 0;
                        s[Ls >> 2] = Mr;
                        s[r >> 2] = fr;
                        Yo = Ct;
                        Zo = jt;
                        break
                    }
                    b = d + 24 | 0;
                    As = e + b | 0;
                    Os = s[As >> 2] | 0;
                    w = d + 12 | 0;
                    Ms = e + w | 0;
                    _s = s[Ms >> 2] | 0;
                    Ds = (_s | 0) == (Ct | 0);
                    do {
                        if (Ds) {
                            x = d + 20 | 0;
                            Ws = e + x | 0;
                            Xs = s[Ws >> 2] | 0;
                            Vs = (Xs | 0) == (0 | 0);
                            if (Vs) {
                                S = d + 16 | 0;
                                Js = e + S | 0;
                                Ks = s[Js >> 2] | 0;
                                Qs = (Ks | 0) == (0 | 0);
                                if (Qs) {
                                    zo = 0;
                                    break
                                } else {
                                    Uo = Ks;
                                    Vo = Js
                                }
                            } else {
                                Uo = Xs;
                                Vo = Ws
                            }
                            while (1) {
                                Gs = Uo + 20 | 0;
                                Ys = s[Gs >> 2] | 0;
                                Zs = (Ys | 0) == (0 | 0);
                                if (!Zs) {
                                    Uo = Ys;
                                    Vo = Gs;
                                    continue
                                }
                                eo = Uo + 16 | 0;
                                to = s[eo >> 2] | 0;
                                no = (to | 0) == (0 | 0);
                                if (no) {
                                    break
                                } else {
                                    Uo = to;
                                    Vo = eo
                                }
                            }
                            ro = Vo >>> 0 < qn >>> 0;
                            if (ro) {
                                Kt()
                            } else {
                                s[Vo >> 2] = 0;
                                zo = Uo;
                                break
                            }
                        } else {
                            k = d + 8 | 0;
                            Ps = e + k | 0;
                            Hs = s[Ps >> 2] | 0;
                            js = Hs >>> 0 < qn >>> 0;
                            if (js) {
                                Kt()
                            }
                            Fs = Hs + 12 | 0;
                            Is = s[Fs >> 2] | 0;
                            qs = (Is | 0) == (Ct | 0);
                            if (!qs) {
                                Kt()
                            }
                            Rs = _s + 8 | 0;
                            Us = s[Rs >> 2] | 0;
                            zs = (Us | 0) == (Ct | 0);
                            if (zs) {
                                s[Fs >> 2] = _s;
                                s[Rs >> 2] = Hs;
                                zo = _s;
                                break
                            } else {
                                Kt()
                            }
                        }
                    } while (0);
                    so = (Os | 0) == (0 | 0);
                    if (so) {
                        Yo = Ct;
                        Zo = jt
                    } else {
                        T = d + 28 | 0;
                        oo = e + T | 0;
                        uo = s[oo >> 2] | 0;
                        ao = (133240 + (uo << 2) | 0) + 304 | 0;
                        fo = s[ao >> 2] | 0;
                        lo = (Ct | 0) == (fo | 0);
                        if (lo) {
                            s[ao >> 2] = zo;
                            Qo = (zo | 0) == (0 | 0);
                            if (Qo) {
                                co = 1 << uo;
                                ho = co ^ -1;
                                po = s[(133240 + 4 | 0) >> 2] | 0;
                                vo = po & ho;
                                s[(133240 + 4 | 0) >> 2] = vo;
                                Yo = Ct;
                                Zo = jt;
                                break
                            }
                        } else {
                            go = s[(133240 + 16 | 0) >> 2] | 0;
                            yo = Os >>> 0 < go >>> 0;
                            if (yo) {
                                Kt()
                            }
                            bo = Os + 16 | 0;
                            wo = s[bo >> 2] | 0;
                            Eo = (wo | 0) == (Ct | 0);
                            if (Eo) {
                                s[bo >> 2] = zo
                            } else {
                                So = Os + 20 | 0;
                                s[So >> 2] = zo
                            }
                            xo = (zo | 0) == (0 | 0);
                            if (xo) {
                                Yo = Ct;
                                Zo = jt;
                                break
                            }
                        }
                        To = s[(133240 + 16 | 0) >> 2] | 0;
                        No = zo >>> 0 < To >>> 0;
                        if (No) {
                            Kt()
                        }
                        Co = zo + 24 | 0;
                        s[Co >> 2] = Os;
                        N = d + 16 | 0;
                        Lo = e + N | 0;
                        Ao = s[Lo >> 2] | 0;
                        Oo = (Ao | 0) == (0 | 0);
                        do {
                            if (!Oo) {
                                Mo = s[(133240 + 16 | 0) >> 2] | 0;
                                _o = Ao >>> 0 < Mo >>> 0;
                                if (_o) {
                                    Kt()
                                } else {
                                    Do = zo + 16 | 0;
                                    s[Do >> 2] = Ao;
                                    Po = Ao + 24 | 0;
                                    s[Po >> 2] = zo;
                                    break
                                }
                            }
                        } while (0);
                        C = d + 20 | 0;
                        Ho = e + C | 0;
                        Bo = s[Ho >> 2] | 0;
                        jo = (Bo | 0) == (0 | 0);
                        if (jo) {
                            Yo = Ct;
                            Zo = jt
                        } else {
                            j = s[(133240 + 16 | 0) >> 2] | 0;
                            F = Bo >>> 0 < j >>> 0;
                            if (F) {
                                Kt()
                            } else {
                                I = zo + 20 | 0;
                                s[I >> 2] = Bo;
                                q = Bo + 24 | 0;
                                s[q >> 2] = zo;
                                Yo = Ct;
                                Zo = jt;
                                break
                            }
                        }
                    }
                } else {
                    Yo = H;
                    Zo = mo
                }
            } while (0);
            Q = Yo >>> 0 < ko >>> 0;
            if (!Q) {
                Kt()
            }
            g = mo + -4 | 0;
            G = e + g | 0;
            Y = s[G >> 2] | 0;
            Z = Y & 1;
            et = (Z | 0) == 0;
            if (et) {
                Kt()
            }
            tt = Y & 2;
            nt = (tt | 0) == 0;
            if (nt) {
                rt = s[(133240 + 24 | 0) >> 2] | 0;
                st = (ko | 0) == (rt | 0);
                if (st) {
                    ot = s[(133240 + 12 | 0) >> 2] | 0;
                    ut = ot + Zo | 0;
                    s[(133240 + 12 | 0) >> 2] = ut;
                    s[(133240 + 24 | 0) >> 2] = Yo;
                    at = ut | 1;
                    ft = Yo + 4 | 0;
                    s[ft >> 2] = at;
                    lt = s[(133240 + 20 | 0) >> 2] | 0;
                    ct = (Yo | 0) == (lt | 0);
                    if (!ct) {
                        c = iu;
                        return
                    }
                    s[(133240 + 20 | 0) >> 2] = 0;
                    s[(133240 + 8 | 0) >> 2] = 0;
                    c = iu;
                    return
                }
                ht = s[(133240 + 20 | 0) >> 2] | 0;
                pt = (ko | 0) == (ht | 0);
                if (pt) {
                    dt = s[(133240 + 8 | 0) >> 2] | 0;
                    mt = dt + Zo | 0;
                    s[(133240 + 8 | 0) >> 2] = mt;
                    s[(133240 + 20 | 0) >> 2] = Yo;
                    gt = mt | 1;
                    yt = Yo + 4 | 0;
                    s[yt >> 2] = gt;
                    bt = Yo + mt | 0;
                    s[bt >> 2] = mt;
                    c = iu;
                    return
                }
                wt = Y & -8;
                Et = wt + Zo | 0;
                St = Y >>> 3;
                xt = Y >>> 0 < 256;
                do {
                    if (xt) {
                        Tt = e + mo | 0;
                        Nt = s[Tt >> 2] | 0;
                        m = mo | 4;
                        kt = e + m | 0;
                        Lt = s[kt >> 2] | 0;
                        At = St << 1;
                        Ot = (133240 + (At << 2) | 0) + 40 | 0;
                        Mt = (Nt | 0) == (Ot | 0);
                        if (!Mt) {
                            _t = s[(133240 + 16 | 0) >> 2] | 0;
                            Dt = Nt >>> 0 < _t >>> 0;
                            if (Dt) {
                                Kt()
                            }
                            Pt = Nt + 12 | 0;
                            Ht = s[Pt >> 2] | 0;
                            Bt = (Ht | 0) == (ko | 0);
                            if (!Bt) {
                                Kt()
                            }
                        }
                        Ft = (Lt | 0) == (Nt | 0);
                        if (Ft) {
                            It = 1 << St;
                            qt = It ^ -1;
                            Rt = s[133240 >> 2] | 0;
                            Ut = Rt & qt;
                            s[133240 >> 2] = Ut;
                            break
                        }
                        zt = (Lt | 0) == (Ot | 0);
                        if (zt) {
                            o = Lt + 8 | 0;
                            n = o
                        } else {
                            Wt = s[(133240 + 16 | 0) >> 2] | 0;
                            Xt = Lt >>> 0 < Wt >>> 0;
                            if (Xt) {
                                Kt()
                            }
                            Vt = Lt + 8 | 0;
                            $t = s[Vt >> 2] | 0;
                            Qt = ($t | 0) == (ko | 0);
                            if (Qt) {
                                n = Vt
                            } else {
                                Kt()
                            }
                        }
                        Gt = Nt + 12 | 0;
                        s[Gt >> 2] = Lt;
                        s[n >> 2] = Nt
                    } else {
                        O = mo + 16 | 0;
                        Yt = e + O | 0;
                        Zt = s[Yt >> 2] | 0;
                        M = mo | 4;
                        en = e + M | 0;
                        tn = s[en >> 2] | 0;
                        nn = (tn | 0) == (ko | 0);
                        do {
                            if (nn) {
                                D = mo + 12 | 0;
                                vn = e + D | 0;
                                mn = s[vn >> 2] | 0;
                                gn = (mn | 0) == (0 | 0);
                                if (gn) {
                                    _ = mo + 8 | 0;
                                    bn = e + _ | 0;
                                    wn = s[bn >> 2] | 0;
                                    En = (wn | 0) == (0 | 0);
                                    if (En) {
                                        Xo = 0;
                                        break
                                    } else {
                                        Wo = wn;
                                        $o = bn
                                    }
                                } else {
                                    Wo = mn;
                                    $o = vn
                                }
                                while (1) {
                                    Sn = Wo + 20 | 0;
                                    xn = s[Sn >> 2] | 0;
                                    Tn = (xn | 0) == (0 | 0);
                                    if (!Tn) {
                                        Wo = xn;
                                        $o = Sn;
                                        continue
                                    }
                                    Nn = Wo + 16 | 0;
                                    Cn = s[Nn >> 2] | 0;
                                    kn = (Cn | 0) == (0 | 0);
                                    if (kn) {
                                        break
                                    } else {
                                        Wo = Cn;
                                        $o = Nn
                                    }
                                }
                                Ln = s[(133240 + 16 | 0) >> 2] | 0;
                                On = $o >>> 0 < Ln >>> 0;
                                if (On) {
                                    Kt()
                                } else {
                                    s[$o >> 2] = 0;
                                    Xo = Wo;
                                    break
                                }
                            } else {
                                rn = e + mo | 0;
                                sn = s[rn >> 2] | 0;
                                on = s[(133240 + 16 | 0) >> 2] | 0;
                                an = sn >>> 0 < on >>> 0;
                                if (an) {
                                    Kt()
                                }
                                fn = sn + 12 | 0;
                                ln = s[fn >> 2] | 0;
                                cn = (ln | 0) == (ko | 0);
                                if (!cn) {
                                    Kt()
                                }
                                hn = tn + 8 | 0;
                                pn = s[hn >> 2] | 0;
                                dn = (pn | 0) == (ko | 0);
                                if (dn) {
                                    s[fn >> 2] = tn;
                                    s[hn >> 2] = sn;
                                    Xo = tn;
                                    break
                                } else {
                                    Kt()
                                }
                            }
                        } while (0);
                        Mn = (Zt | 0) == (0 | 0);
                        if (!Mn) {
                            h = mo + 20 | 0;
                            _n = e + h | 0;
                            Dn = s[_n >> 2] | 0;
                            Pn = (133240 + (Dn << 2) | 0) + 304 | 0;
                            Hn = s[Pn >> 2] | 0;
                            Bn = (ko | 0) == (Hn | 0);
                            if (Bn) {
                                s[Pn >> 2] = Xo;
                                Go = (Xo | 0) == (0 | 0);
                                if (Go) {
                                    jn = 1 << Dn;
                                    Fn = jn ^ -1;
                                    In = s[(133240 + 4 | 0) >> 2] | 0;
                                    Un = In & Fn;
                                    s[(133240 + 4 | 0) >> 2] = Un;
                                    break
                                }
                            } else {
                                zn = s[(133240 + 16 | 0) >> 2] | 0;
                                Wn = Zt >>> 0 < zn >>> 0;
                                if (Wn) {
                                    Kt()
                                }
                                Xn = Zt + 16 | 0;
                                Vn = s[Xn >> 2] | 0;
                                $n = (Vn | 0) == (ko | 0);
                                if ($n) {
                                    s[Xn >> 2] = Xo
                                } else {
                                    Jn = Zt + 20 | 0;
                                    s[Jn >> 2] = Xo
                                }
                                Kn = (Xo | 0) == (0 | 0);
                                if (Kn) {
                                    break
                                }
                            }
                            Qn = s[(133240 + 16 | 0) >> 2] | 0;
                            Gn = Xo >>> 0 < Qn >>> 0;
                            if (Gn) {
                                Kt()
                            }
                            Zn = Xo + 24 | 0;
                            s[Zn >> 2] = Zt;
                            p = mo + 8 | 0;
                            er = e + p | 0;
                            tr = s[er >> 2] | 0;
                            nr = (tr | 0) == (0 | 0);
                            do {
                                if (!nr) {
                                    rr = s[(133240 + 16 | 0) >> 2] | 0;
                                    ir = tr >>> 0 < rr >>> 0;
                                    if (ir) {
                                        Kt()
                                    } else {
                                        sr = Xo + 16 | 0;
                                        s[sr >> 2] = tr;
                                        or = tr + 24 | 0;
                                        s[or >> 2] = Xo;
                                        break
                                    }
                                }
                            } while (0);
                            v = mo + 12 | 0;
                            ur = e + v | 0;
                            ar = s[ur >> 2] | 0;
                            lr = (ar | 0) == (0 | 0);
                            if (!lr) {
                                cr = s[(133240 + 16 | 0) >> 2] | 0;
                                hr = ar >>> 0 < cr >>> 0;
                                if (hr) {
                                    Kt()
                                } else {
                                    pr = Xo + 20 | 0;
                                    s[pr >> 2] = ar;
                                    dr = ar + 24 | 0;
                                    s[dr >> 2] = Xo;
                                    break
                                }
                            }
                        }
                    }
                } while (0);
                vr = Et | 1;
                mr = Yo + 4 | 0;
                s[mr >> 2] = vr;
                gr = Yo + Et | 0;
                s[gr >> 2] = Et;
                yr = s[(133240 + 20 | 0) >> 2] | 0;
                br = (Yo | 0) == (yr | 0);
                if (br) {
                    s[(133240 + 8 | 0) >> 2] = Et;
                    c = iu;
                    return
                } else {
                    eu = Et
                }
            } else {
                Er = Y & -2;
                s[G >> 2] = Er;
                Sr = Zo | 1;
                xr = Yo + 4 | 0;
                s[xr >> 2] = Sr;
                Tr = Yo + Zo | 0;
                s[Tr >> 2] = Zo;
                eu = Zo
            }
            Nr = eu >>> 3;
            Cr = eu >>> 0 < 256;
            if (Cr) {
                kr = Nr << 1;
                Lr = (133240 + (kr << 2) | 0) + 40 | 0;
                Ar = s[133240 >> 2] | 0;
                Or = 1 << Nr;
                _r = Ar & Or;
                Dr = (_r | 0) == 0;
                if (Dr) {
                    Pr = Ar | Or;
                    s[133240 >> 2] = Pr;
                    f = kr + 2 | 0;
                    t = (133240 + (f << 2) | 0) + 40 | 0;
                    i = t;
                    Fo = Lr
                } else {
                    l = kr + 2 | 0;
                    Hr = (133240 + (l << 2) | 0) + 40 | 0;
                    Br = s[Hr >> 2] | 0;
                    jr = s[(133240 + 16 | 0) >> 2] | 0;
                    Fr = Br >>> 0 < jr >>> 0;
                    if (Fr) {
                        Kt()
                    } else {
                        i = Hr;
                        Fo = Br
                    }
                }
                s[i >> 2] = Yo;
                Ir = Fo + 12 | 0;
                s[Ir >> 2] = Yo;
                qr = Yo + 8 | 0;
                s[qr >> 2] = Fo;
                Rr = Yo + 12 | 0;
                s[Rr >> 2] = Lr;
                c = iu;
                return
            }
            zr = eu >>> 8;
            Wr = (zr | 0) == 0;
            if (Wr) {
                Io = 0
            } else {
                Xr = eu >>> 0 > 16777215;
                if (Xr) {
                    Io = 31
                } else {
                    Vr = zr + 1048320 | 0;
                    $r = Vr >>> 16;
                    Jr = $r & 8;
                    Kr = zr << Jr;
                    Qr = Kr + 520192 | 0;
                    Gr = Qr >>> 16;
                    Yr = Gr & 4;
                    ei = Yr | Jr;
                    ti = Kr << Yr;
                    ni = ti + 245760 | 0;
                    ri = ni >>> 16;
                    ii = ri & 2;
                    si = ei | ii;
                    oi = 14 - si | 0;
                    ui = ti << ii;
                    ai = ui >>> 15;
                    fi = oi + ai | 0;
                    ci = fi << 1;
                    hi = fi + 7 | 0;
                    pi = eu >>> hi;
                    di = pi & 1;
                    vi = di | ci;
                    Io = vi
                }
            }
            mi = (133240 + (Io << 2) | 0) + 304 | 0;
            gi = Yo + 28 | 0;
            qo = Io;
            s[gi >> 2] = qo;
            yi = Yo + 20 | 0;
            s[yi >> 2] = 0;
            bi = Yo + 16 | 0;
            s[bi >> 2] = 0;
            wi = s[(133240 + 4 | 0) >> 2] | 0;
            Si = 1 << Io;
            xi = wi & Si;
            Ti = (xi | 0) == 0;
            e: do {
                if (Ti) {
                    Ni = wi | Si;
                    s[(133240 + 4 | 0) >> 2] = Ni;
                    s[mi >> 2] = Yo;
                    Ci = Yo + 24 | 0;
                    s[Ci >> 2] = mi;
                    ki = Yo + 12 | 0;
                    s[ki >> 2] = Yo;
                    Li = Yo + 8 | 0;
                    s[Li >> 2] = Yo
                } else {
                    Ai = s[mi >> 2] | 0;
                    Oi = (Io | 0) == 31;
                    if (Oi) {
                        Ii = 0
                    } else {
                        Mi = Io >>> 1;
                        Di = 25 - Mi | 0;
                        Ii = Di
                    }
                    Pi = Ai + 4 | 0;
                    Hi = s[Pi >> 2] | 0;
                    Bi = Hi & -8;
                    ji = (Bi | 0) == (eu | 0);
                    t: do {
                        if (ji) {
                            Jo = Ai
                        } else {
                            Fi = eu << Ii;
                            Ro = Fi;
                            Ko = Ai;
                            while (1) {
                                Ji = Ro >>> 31;
                                Ki = (Ko + (Ji << 2) | 0) + 16 | 0;
                                Ui = s[Ki >> 2] | 0;
                                Qi = (Ui | 0) == (0 | 0);
                                if (Qi) {
                                    break
                                }
                                qi = Ro << 1;
                                Ri = Ui + 4 | 0;
                                Xi = s[Ri >> 2] | 0;
                                Vi = Xi & -8;
                                $i = (Vi | 0) == (eu | 0);
                                if ($i) {
                                    Jo = Ui;
                                    break t
                                } else {
                                    Ro = qi;
                                    Ko = Ui
                                }
                            }
                            Gi = s[(133240 + 16 | 0) >> 2] | 0;
                            Yi = Ki >>> 0 < Gi >>> 0;
                            if (Yi) {
                                Kt()
                            } else {
                                s[Ki >> 2] = Yo;
                                Zi = Yo + 24 | 0;
                                s[Zi >> 2] = Ko;
                                es = Yo + 12 | 0;
                                s[es >> 2] = Yo;
                                ns = Yo + 8 | 0;
                                s[ns >> 2] = Yo;
                                break e
                            }
                        }
                    } while (0);
                    rs = Jo + 8 | 0;
                    is = s[rs >> 2] | 0;
                    ss = s[(133240 + 16 | 0) >> 2] | 0;
                    os = Jo >>> 0 < ss >>> 0;
                    if (os) {
                        Kt()
                    }
                    us = is >>> 0 < ss >>> 0;
                    if (us) {
                        Kt()
                    } else {
                        as = is + 12 | 0;
                        s[as >> 2] = Yo;
                        s[rs >> 2] = Yo;
                        fs = Yo + 8 | 0;
                        s[fs >> 2] = is;
                        ls = Yo + 12 | 0;
                        s[ls >> 2] = Jo;
                        cs = Yo + 24 | 0;
                        s[cs >> 2] = 0;
                        break
                    }
                }
            } while (0);
            ps = s[(133240 + 32 | 0) >> 2] | 0;
            ds = ps + -1 | 0;
            s[(133240 + 32 | 0) >> 2] = ds;
            vs = (ds | 0) == 0;
            if (vs) {
                nu = 133240 + 456 | 0
            } else {
                c = iu;
                return
            }
            while (1) {
                tu = s[nu >> 2] | 0;
                ms = (tu | 0) == (0 | 0);
                gs = tu + 8 | 0;
                if (ms) {
                    break
                } else {
                    nu = gs
                }
            }
            s[(133240 + 32 | 0) >> 2] = -1;
            c = iu;
            return
        }

        function Ds(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0;
            b = c;
            r = (e | 0) == 0;
            if (r) {
                g = 0
            } else {
                i = rt(t, e) | 0;
                a = t | e;
                f = a >>> 0 > 65535;
                if (f) {
                    l = (i >>> 0) / (e >>> 0) & -1;
                    h = (l | 0) == (t | 0);
                    n = h ? i : -1;
                    g = n
                } else {
                    g = i
                }
            }
            p = Ms(g) | 0;
            d = (p | 0) == (0 | 0);
            if (d) {
                c = b;
                return p | 0
            }
            v = p + -4 | 0;
            m = s[v >> 2] | 0;
            o = m & 3;
            u = (o | 0) == 0;
            if (u) {
                c = b;
                return p | 0
            }
            eo(p | 0, 0, g | 0) | 0;
            c = b;
            return p | 0
        }

        function Ps(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0;
            A = c;
            n = (e | 0) == (0 | 0);
            do {
                if (n) {
                    r = Ms(t) | 0;
                    k = r
                } else {
                    m = t >>> 0 > 4294967231;
                    if (m) {
                        w = zt() | 0;
                        s[w >> 2] = 12;
                        k = 0;
                        break
                    }
                    E = t >>> 0 < 11;
                    if (E) {
                        N = 16
                    } else {
                        S = t + 11 | 0;
                        x = S & -8;
                        N = x
                    }
                    T = e + -8 | 0;
                    C = Hs(T, N) | 0;
                    i = (C | 0) == (0 | 0);
                    if (!i) {
                        o = C + 8 | 0;
                        k = o;
                        break
                    }
                    u = Ms(t) | 0;
                    a = (u | 0) == (0 | 0);
                    if (a) {
                        k = 0
                    } else {
                        f = e + -4 | 0;
                        l = s[f >> 2] | 0;
                        h = l & -8;
                        p = l & 3;
                        d = (p | 0) == 0;
                        v = d ? 8 : 4;
                        g = h - v | 0;
                        y = g >>> 0 < t >>> 0;
                        b = y ? g : t;
                        oo(u | 0, e | 0, b | 0) | 0;
                        _s(e);
                        k = u
                    }
                }
            } while (0);
            c = A;
            return k | 0
        }

        function Hs(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0;
            var W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0;
            var lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0;
            var Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Qt = 0;
            var Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0;
            var yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0;
            var Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0;
            var ir = 0,
                sr = 0,
                or = 0,
                ur = 0,
                ar = 0,
                fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0;
            var Tr = 0,
                Nr = 0,
                Cr = 0,
                kr = 0,
                Lr = 0,
                Ar = 0,
                Or = 0,
                Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0;
            var Wr = 0,
                Xr = 0,
                Vr = 0,
                $r = 0,
                Jr = 0,
                Kr = 0,
                Qr = 0;
            Qr = c;
            N = e + 4 | 0;
            C = s[N >> 2] | 0;
            un = C & -8;
            yn = e + un | 0;
            An = s[(133240 + 16 | 0) >> 2] | 0;
            qn = e >>> 0 < An >>> 0;
            if (qn) {
                Kt()
            }
            Gn = C & 3;
            ar = (Gn | 0) != 1;
            br = e >>> 0 < yn >>> 0;
            Vr = ar & br;
            if (!Vr) {
                Kt()
            }
            b = un | 4;
            Or = e + b | 0;
            k = s[Or >> 2] | 0;
            F = k & 1;
            K = (F | 0) == 0;
            if (K) {
                Kt()
            }
            ot = (Gn | 0) == 0;
            if (ot) {
                gt = t >>> 0 < 256;
                if (gt) {
                    Xr = 0;
                    c = Qr;
                    return Xr | 0
                }
                Lt = t + 4 | 0;
                It = un >>> 0 < Lt >>> 0;
                if (!It) {
                    Gt = un - t | 0;
                    sn = s[(133712 + 8 | 0) >> 2] | 0;
                    on = sn << 1;
                    an = Gt >>> 0 > on >>> 0;
                    if (!an) {
                        Xr = e;
                        c = Qr;
                        return Xr | 0
                    }
                }
                Xr = 0;
                c = Qr;
                return Xr | 0
            }
            fn = un >>> 0 < t >>> 0;
            if (!fn) {
                ln = un - t | 0;
                cn = ln >>> 0 > 15;
                if (!cn) {
                    Xr = e;
                    c = Qr;
                    return Xr | 0
                }
                hn = e + t | 0;
                pn = C & 1;
                dn = pn | t;
                vn = dn | 2;
                s[N >> 2] = vn;
                y = t + 4 | 0;
                mn = e + y | 0;
                gn = ln | 3;
                s[mn >> 2] = gn;
                bn = s[Or >> 2] | 0;
                wn = bn | 1;
                s[Or >> 2] = wn;
                Bs(hn, ln);
                Xr = e;
                c = Qr;
                return Xr | 0
            }
            En = s[(133240 + 24 | 0) >> 2] | 0;
            Sn = (yn | 0) == (En | 0);
            if (Sn) {
                xn = s[(133240 + 12 | 0) >> 2] | 0;
                Tn = xn + un | 0;
                Nn = Tn >>> 0 > t >>> 0;
                if (!Nn) {
                    Xr = 0;
                    c = Qr;
                    return Xr | 0
                }
                Cn = Tn - t | 0;
                kn = e + t | 0;
                Ln = C & 1;
                On = Ln | t;
                Mn = On | 2;
                s[N >> 2] = Mn;
                g = t + 4 | 0;
                _n = e + g | 0;
                Dn = Cn | 1;
                s[_n >> 2] = Dn;
                s[(133240 + 24 | 0) >> 2] = kn;
                s[(133240 + 12 | 0) >> 2] = Cn;
                Xr = e;
                c = Qr;
                return Xr | 0
            }
            Pn = s[(133240 + 20 | 0) >> 2] | 0;
            Hn = (yn | 0) == (Pn | 0);
            if (Hn) {
                Bn = s[(133240 + 8 | 0) >> 2] | 0;
                jn = Bn + un | 0;
                Fn = jn >>> 0 < t >>> 0;
                if (Fn) {
                    Xr = 0;
                    c = Qr;
                    return Xr | 0
                }
                In = jn - t | 0;
                Rn = In >>> 0 > 15;
                if (Rn) {
                    Un = e + t | 0;
                    zn = e + jn | 0;
                    Wn = C & 1;
                    Xn = Wn | t;
                    Vn = Xn | 2;
                    s[N >> 2] = Vn;
                    d = t + 4 | 0;
                    $n = e + d | 0;
                    Jn = In | 1;
                    s[$n >> 2] = Jn;
                    s[zn >> 2] = In;
                    m = jn + 4 | 0;
                    Kn = e + m | 0;
                    Qn = s[Kn >> 2] | 0;
                    Yn = Qn & -2;
                    s[Kn >> 2] = Yn;
                    $r = Un;
                    Jr = In
                } else {
                    Zn = C & 1;
                    er = Zn | jn;
                    tr = er | 2;
                    s[N >> 2] = tr;
                    p = jn + 4 | 0;
                    nr = e + p | 0;
                    rr = s[nr >> 2] | 0;
                    ir = rr | 1;
                    s[nr >> 2] = ir;
                    $r = 0;
                    Jr = 0
                }
                s[(133240 + 8 | 0) >> 2] = Jr;
                s[(133240 + 20 | 0) >> 2] = $r;
                Xr = e;
                c = Qr;
                return Xr | 0
            }
            sr = k & 2;
            or = (sr | 0) == 0;
            if (!or) {
                Xr = 0;
                c = Qr;
                return Xr | 0
            }
            ur = k & -8;
            fr = ur + un | 0;
            lr = fr >>> 0 < t >>> 0;
            if (lr) {
                Xr = 0;
                c = Qr;
                return Xr | 0
            }
            cr = fr - t | 0;
            hr = k >>> 3;
            pr = k >>> 0 < 256;
            do {
                if (pr) {
                    l = un + 8 | 0;
                    dr = e + l | 0;
                    vr = s[dr >> 2] | 0;
                    h = un + 12 | 0;
                    mr = e + h | 0;
                    gr = s[mr >> 2] | 0;
                    yr = hr << 1;
                    wr = (133240 + (yr << 2) | 0) + 40 | 0;
                    Er = (vr | 0) == (wr | 0);
                    if (!Er) {
                        Sr = vr >>> 0 < An >>> 0;
                        if (Sr) {
                            Kt()
                        }
                        xr = vr + 12 | 0;
                        Tr = s[xr >> 2] | 0;
                        Nr = (Tr | 0) == (yn | 0);
                        if (!Nr) {
                            Kt()
                        }
                    }
                    Cr = (gr | 0) == (vr | 0);
                    if (Cr) {
                        kr = 1 << hr;
                        Lr = kr ^ -1;
                        Ar = s[133240 >> 2] | 0;
                        Mr = Ar & Lr;
                        s[133240 >> 2] = Mr;
                        break
                    }
                    _r = (gr | 0) == (wr | 0);
                    if (_r) {
                        n = gr + 8 | 0;
                        r = n
                    } else {
                        Dr = gr >>> 0 < An >>> 0;
                        if (Dr) {
                            Kt()
                        }
                        Pr = gr + 8 | 0;
                        Hr = s[Pr >> 2] | 0;
                        Br = (Hr | 0) == (yn | 0);
                        if (Br) {
                            r = Pr
                        } else {
                            Kt()
                        }
                    }
                    jr = vr + 12 | 0;
                    s[jr >> 2] = gr;
                    s[r >> 2] = vr
                } else {
                    i = un + 24 | 0;
                    Fr = e + i | 0;
                    Ir = s[Fr >> 2] | 0;
                    v = un + 12 | 0;
                    qr = e + v | 0;
                    L = s[qr >> 2] | 0;
                    A = (L | 0) == (yn | 0);
                    do {
                        if (A) {
                            E = un + 20 | 0;
                            q = e + E | 0;
                            R = s[q >> 2] | 0;
                            U = (R | 0) == (0 | 0);
                            if (U) {
                                w = un + 16 | 0;
                                z = e + w | 0;
                                W = s[z >> 2] | 0;
                                X = (W | 0) == (0 | 0);
                                if (X) {
                                    Ur = 0;
                                    break
                                } else {
                                    Rr = W;
                                    zr = z
                                }
                            } else {
                                Rr = R;
                                zr = q
                            }
                            while (1) {
                                V = Rr + 20 | 0;
                                $ = s[V >> 2] | 0;
                                J = ($ | 0) == (0 | 0);
                                if (!J) {
                                    Rr = $;
                                    zr = V;
                                    continue
                                }
                                Q = Rr + 16 | 0;
                                G = s[Q >> 2] | 0;
                                Y = (G | 0) == (0 | 0);
                                if (Y) {
                                    break
                                } else {
                                    Rr = G;
                                    zr = Q
                                }
                            }
                            Z = zr >>> 0 < An >>> 0;
                            if (Z) {
                                Kt()
                            } else {
                                s[zr >> 2] = 0;
                                Ur = Rr;
                                break
                            }
                        } else {
                            f = un + 8 | 0;
                            O = e + f | 0;
                            M = s[O >> 2] | 0;
                            _ = M >>> 0 < An >>> 0;
                            if (_) {
                                Kt()
                            }
                            D = M + 12 | 0;
                            P = s[D >> 2] | 0;
                            H = (P | 0) == (yn | 0);
                            if (!H) {
                                Kt()
                            }
                            B = L + 8 | 0;
                            j = s[B >> 2] | 0;
                            I = (j | 0) == (yn | 0);
                            if (I) {
                                s[D >> 2] = L;
                                s[B >> 2] = M;
                                Ur = L;
                                break
                            } else {
                                Kt()
                            }
                        }
                    } while (0);
                    et = (Ir | 0) == (0 | 0);
                    if (!et) {
                        o = un + 28 | 0;
                        tt = e + o | 0;
                        nt = s[tt >> 2] | 0;
                        rt = (133240 + (nt << 2) | 0) + 304 | 0;
                        it = s[rt >> 2] | 0;
                        st = (yn | 0) == (it | 0);
                        if (st) {
                            s[rt >> 2] = Ur;
                            Wr = (Ur | 0) == (0 | 0);
                            if (Wr) {
                                ut = 1 << nt;
                                at = ut ^ -1;
                                ft = s[(133240 + 4 | 0) >> 2] | 0;
                                lt = ft & at;
                                s[(133240 + 4 | 0) >> 2] = lt;
                                break
                            }
                        } else {
                            ct = s[(133240 + 16 | 0) >> 2] | 0;
                            ht = Ir >>> 0 < ct >>> 0;
                            if (ht) {
                                Kt()
                            }
                            pt = Ir + 16 | 0;
                            dt = s[pt >> 2] | 0;
                            vt = (dt | 0) == (yn | 0);
                            if (vt) {
                                s[pt >> 2] = Ur
                            } else {
                                mt = Ir + 20 | 0;
                                s[mt >> 2] = Ur
                            }
                            yt = (Ur | 0) == (0 | 0);
                            if (yt) {
                                break
                            }
                        }
                        bt = s[(133240 + 16 | 0) >> 2] | 0;
                        wt = Ur >>> 0 < bt >>> 0;
                        if (wt) {
                            Kt()
                        }
                        Et = Ur + 24 | 0;
                        s[Et >> 2] = Ir;
                        u = un + 16 | 0;
                        St = e + u | 0;
                        xt = s[St >> 2] | 0;
                        Tt = (xt | 0) == (0 | 0);
                        do {
                            if (!Tt) {
                                Nt = s[(133240 + 16 | 0) >> 2] | 0;
                                Ct = xt >>> 0 < Nt >>> 0;
                                if (Ct) {
                                    Kt()
                                } else {
                                    kt = Ur + 16 | 0;
                                    s[kt >> 2] = xt;
                                    At = xt + 24 | 0;
                                    s[At >> 2] = Ur;
                                    break
                                }
                            }
                        } while (0);
                        a = un + 20 | 0;
                        Ot = e + a | 0;
                        Mt = s[Ot >> 2] | 0;
                        _t = (Mt | 0) == (0 | 0);
                        if (!_t) {
                            Dt = s[(133240 + 16 | 0) >> 2] | 0;
                            Pt = Mt >>> 0 < Dt >>> 0;
                            if (Pt) {
                                Kt()
                            } else {
                                Ht = Ur + 20 | 0;
                                s[Ht >> 2] = Mt;
                                Bt = Mt + 24 | 0;
                                s[Bt >> 2] = Ur;
                                break
                            }
                        }
                    }
                }
            } while (0);
            jt = cr >>> 0 < 16;
            if (jt) {
                Ft = s[N >> 2] | 0;
                qt = Ft & 1;
                Rt = fr | qt;
                Ut = Rt | 2;
                s[N >> 2] = Ut;
                T = fr | 4;
                zt = e + T | 0;
                Wt = s[zt >> 2] | 0;
                Xt = Wt | 1;
                s[zt >> 2] = Xt;
                Xr = e;
                c = Qr;
                return Xr | 0
            } else {
                Vt = e + t | 0;
                $t = s[N >> 2] | 0;
                Jt = $t & 1;
                Qt = Jt | t;
                Yt = Qt | 2;
                s[N >> 2] = Yt;
                S = t + 4 | 0;
                Zt = e + S | 0;
                en = cr | 3;
                s[Zt >> 2] = en;
                x = fr | 4;
                tn = e + x | 0;
                nn = s[tn >> 2] | 0;
                rn = nn | 1;
                s[tn >> 2] = rn;
                Bs(Vt, cr);
                Xr = e;
                c = Qr;
                return Xr | 0
            }
            return 0 | 0
        }

        function Bs(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0;
            var W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0;
            var lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0,
                bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                Ct = 0,
                kt = 0,
                Lt = 0,
                At = 0;
            var Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0,
                qt = 0,
                Rt = 0,
                Ut = 0,
                zt = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Qt = 0;
            var Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0,
                an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0;
            var yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0,
                Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0;
            var Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0,
                Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0;
            var ir = 0,
                sr = 0,
                or = 0,
                ur = 0,
                ar = 0,
                fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0,
                dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0;
            var Tr = 0,
                Nr = 0,
                Cr = 0,
                kr = 0,
                Lr = 0,
                Ar = 0,
                Or = 0,
                Mr = 0,
                _r = 0,
                Dr = 0,
                Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0;
            var Wr = 0,
                Xr = 0,
                Vr = 0,
                $r = 0,
                Jr = 0,
                Kr = 0,
                Qr = 0,
                Gr = 0,
                Yr = 0,
                Zr = 0,
                ei = 0,
                ti = 0,
                ni = 0,
                ri = 0,
                ii = 0,
                si = 0,
                oi = 0,
                ui = 0,
                ai = 0,
                fi = 0;
            var li = 0,
                ci = 0,
                hi = 0,
                pi = 0,
                di = 0,
                vi = 0,
                mi = 0,
                gi = 0,
                yi = 0,
                bi = 0,
                wi = 0,
                Ei = 0,
                Si = 0,
                xi = 0,
                Ti = 0,
                Ni = 0,
                Ci = 0,
                ki = 0,
                Li = 0,
                Ai = 0;
            var Oi = 0,
                Mi = 0,
                _i = 0,
                Di = 0,
                Pi = 0,
                Hi = 0,
                Bi = 0,
                ji = 0,
                Fi = 0,
                Ii = 0,
                qi = 0,
                Ri = 0,
                Ui = 0,
                zi = 0,
                Wi = 0,
                Xi = 0,
                Vi = 0,
                $i = 0,
                Ji = 0,
                Ki = 0;
            var Qi = 0,
                Gi = 0,
                Yi = 0,
                Zi = 0,
                es = 0,
                ts = 0,
                ns = 0,
                rs = 0,
                is = 0,
                ss = 0,
                os = 0,
                us = 0,
                as = 0,
                fs = 0,
                ls = 0,
                cs = 0,
                hs = 0,
                ps = 0,
                ds = 0,
                vs = 0;
            var ms = 0,
                gs = 0,
                ys = 0,
                bs = 0,
                ws = 0,
                Es = 0,
                Ss = 0,
                xs = 0,
                Ts = 0,
                Ns = 0,
                Cs = 0,
                ks = 0,
                Ls = 0,
                As = 0,
                Os = 0,
                Ms = 0,
                _s = 0,
                Ds = 0,
                Ps = 0,
                Hs = 0;
            var Bs = 0,
                js = 0,
                Fs = 0,
                Is = 0,
                qs = 0,
                Rs = 0,
                Us = 0,
                zs = 0,
                Ws = 0,
                Xs = 0,
                Vs = 0,
                $s = 0,
                Js = 0,
                Ks = 0,
                Qs = 0,
                Gs = 0,
                Ys = 0,
                Zs = 0,
                eo = 0,
                to = 0;
            var no = 0,
                ro = 0,
                io = 0,
                so = 0,
                oo = 0,
                uo = 0,
                ao = 0,
                fo = 0,
                lo = 0,
                co = 0,
                ho = 0,
                po = 0,
                vo = 0,
                mo = 0,
                go = 0,
                yo = 0,
                bo = 0,
                wo = 0,
                Eo = 0,
                So = 0;
            var xo = 0,
                To = 0,
                No = 0,
                Co = 0,
                ko = 0,
                Lo = 0,
                Ao = 0,
                Oo = 0,
                Mo = 0,
                _o = 0,
                Do = 0,
                Po = 0,
                Ho = 0,
                Bo = 0,
                jo = 0,
                Fo = 0,
                Io = 0,
                qo = 0,
                Ro = 0,
                Uo = 0;
            var zo = 0;
            zo = c;
            F = e + t | 0;
            I = e + 4 | 0;
            Wn = s[I >> 2] | 0;
            $i = Wn & 1;
            vs = ($i | 0) == 0;
            do {
                if (vs) {
                    Cs = s[e >> 2] | 0;
                    js = Wn & 3;
                    Js = (js | 0) == 0;
                    if (Js) {
                        c = zo;
                        return
                    }
                    so = 0 - Cs | 0;
                    go = e + so | 0;
                    q = Cs + t | 0;
                    G = s[(133240 + 16 | 0) >> 2] | 0;
                    at = go >>> 0 < G >>> 0;
                    if (at) {
                        Kt()
                    }
                    bt = s[(133240 + 20 | 0) >> 2] | 0;
                    Ot = (go | 0) == (bt | 0);
                    if (Ot) {
                        p = t + 4 | 0;
                        R = e + p | 0;
                        U = s[R >> 2] | 0;
                        z = U & 3;
                        W = (z | 0) == 3;
                        if (!W) {
                            n = go;
                            r = q;
                            break
                        }
                        s[(133240 + 8 | 0) >> 2] = q;
                        X = s[R >> 2] | 0;
                        V = X & -2;
                        s[R >> 2] = V;
                        $ = q | 1;
                        T = 4 - Cs | 0;
                        J = e + T | 0;
                        s[J >> 2] = $;
                        s[F >> 2] = q;
                        c = zo;
                        return
                    }
                    Rt = Cs >>> 3;
                    Zt = Cs >>> 0 < 256;
                    if (Zt) {
                        P = 8 - Cs | 0;
                        cn = e + P | 0;
                        Sn = s[cn >> 2] | 0;
                        H = 12 - Cs | 0;
                        Dn = e + H | 0;
                        Xn = s[Dn >> 2] | 0;
                        nr = Rt << 1;
                        pr = (133240 + (nr << 2) | 0) + 40 | 0;
                        Tr = (Sn | 0) == (pr | 0);
                        if (!Tr) {
                            Hr = Sn >>> 0 < G >>> 0;
                            if (Hr) {
                                Kt()
                            }
                            Vr = Sn + 12 | 0;
                            ri = s[Vr >> 2] | 0;
                            di = (ri | 0) == (go | 0);
                            if (!di) {
                                Kt()
                            }
                        }
                        Ni = (Xn | 0) == (Sn | 0);
                        if (Ni) {
                            Bi = 1 << Rt;
                            Ji = Bi ^ -1;
                            ss = s[133240 >> 2] | 0;
                            us = ss & Ji;
                            s[133240 >> 2] = us;
                            n = go;
                            r = q;
                            break
                        }
                        as = (Xn | 0) == (pr | 0);
                        if (as) {
                            h = Xn + 8 | 0;
                            a = h
                        } else {
                            fs = Xn >>> 0 < G >>> 0;
                            if (fs) {
                                Kt()
                            }
                            ls = Xn + 8 | 0;
                            cs = s[ls >> 2] | 0;
                            hs = (cs | 0) == (go | 0);
                            if (hs) {
                                a = ls
                            } else {
                                Kt()
                            }
                        }
                        ps = Sn + 12 | 0;
                        s[ps >> 2] = Xn;
                        s[a >> 2] = Sn;
                        n = go;
                        r = q;
                        break
                    }
                    N = 24 - Cs | 0;
                    ds = e + N | 0;
                    ms = s[ds >> 2] | 0;
                    C = 12 - Cs | 0;
                    gs = e + C | 0;
                    ys = s[gs >> 2] | 0;
                    bs = (ys | 0) == (go | 0);
                    do {
                        if (bs) {
                            k = 16 - Cs | 0;
                            L = k + 4 | 0;
                            Os = e + L | 0;
                            Ms = s[Os >> 2] | 0;
                            _s = (Ms | 0) == (0 | 0);
                            if (_s) {
                                Ds = e + k | 0;
                                Ps = s[Ds >> 2] | 0;
                                Hs = (Ps | 0) == (0 | 0);
                                if (Hs) {
                                    Do = 0;
                                    break
                                } else {
                                    _o = Ps;
                                    Bo = Ds
                                }
                            } else {
                                _o = Ms;
                                Bo = Os
                            }
                            while (1) {
                                Bs = _o + 20 | 0;
                                Fs = s[Bs >> 2] | 0;
                                Is = (Fs | 0) == (0 | 0);
                                if (!Is) {
                                    _o = Fs;
                                    Bo = Bs;
                                    continue
                                }
                                qs = _o + 16 | 0;
                                Rs = s[qs >> 2] | 0;
                                Us = (Rs | 0) == (0 | 0);
                                if (Us) {
                                    break
                                } else {
                                    _o = Rs;
                                    Bo = qs
                                }
                            }
                            zs = Bo >>> 0 < G >>> 0;
                            if (zs) {
                                Kt()
                            } else {
                                s[Bo >> 2] = 0;
                                Do = _o;
                                break
                            }
                        } else {
                            _ = 8 - Cs | 0;
                            ws = e + _ | 0;
                            Es = s[ws >> 2] | 0;
                            Ss = Es >>> 0 < G >>> 0;
                            if (Ss) {
                                Kt()
                            }
                            xs = Es + 12 | 0;
                            Ts = s[xs >> 2] | 0;
                            Ns = (Ts | 0) == (go | 0);
                            if (!Ns) {
                                Kt()
                            }
                            ks = ys + 8 | 0;
                            Ls = s[ks >> 2] | 0;
                            As = (Ls | 0) == (go | 0);
                            if (As) {
                                s[xs >> 2] = ys;
                                s[ks >> 2] = Es;
                                Do = ys;
                                break
                            } else {
                                Kt()
                            }
                        }
                    } while (0);
                    Ws = (ms | 0) == (0 | 0);
                    if (Ws) {
                        n = go;
                        r = q
                    } else {
                        A = 28 - Cs | 0;
                        Xs = e + A | 0;
                        Vs = s[Xs >> 2] | 0;
                        $s = (133240 + (Vs << 2) | 0) + 304 | 0;
                        Ks = s[$s >> 2] | 0;
                        Qs = (go | 0) == (Ks | 0);
                        if (Qs) {
                            s[$s >> 2] = Do;
                            qo = (Do | 0) == (0 | 0);
                            if (qo) {
                                Gs = 1 << Vs;
                                Ys = Gs ^ -1;
                                Zs = s[(133240 + 4 | 0) >> 2] | 0;
                                eo = Zs & Ys;
                                s[(133240 + 4 | 0) >> 2] = eo;
                                n = go;
                                r = q;
                                break
                            }
                        } else {
                            to = s[(133240 + 16 | 0) >> 2] | 0;
                            no = ms >>> 0 < to >>> 0;
                            if (no) {
                                Kt()
                            }
                            ro = ms + 16 | 0;
                            io = s[ro >> 2] | 0;
                            oo = (io | 0) == (go | 0);
                            if (oo) {
                                s[ro >> 2] = Do
                            } else {
                                uo = ms + 20 | 0;
                                s[uo >> 2] = Do
                            }
                            ao = (Do | 0) == (0 | 0);
                            if (ao) {
                                n = go;
                                r = q;
                                break
                            }
                        }
                        fo = s[(133240 + 16 | 0) >> 2] | 0;
                        lo = Do >>> 0 < fo >>> 0;
                        if (lo) {
                            Kt()
                        }
                        co = Do + 24 | 0;
                        s[co >> 2] = ms;
                        O = 16 - Cs | 0;
                        ho = e + O | 0;
                        po = s[ho >> 2] | 0;
                        vo = (po | 0) == (0 | 0);
                        do {
                            if (!vo) {
                                mo = s[(133240 + 16 | 0) >> 2] | 0;
                                yo = po >>> 0 < mo >>> 0;
                                if (yo) {
                                    Kt()
                                } else {
                                    bo = Do + 16 | 0;
                                    s[bo >> 2] = po;
                                    wo = po + 24 | 0;
                                    s[wo >> 2] = Do;
                                    break
                                }
                            }
                        } while (0);
                        M = O + 4 | 0;
                        Eo = e + M | 0;
                        So = s[Eo >> 2] | 0;
                        xo = (So | 0) == (0 | 0);
                        if (xo) {
                            n = go;
                            r = q
                        } else {
                            To = s[(133240 + 16 | 0) >> 2] | 0;
                            No = So >>> 0 < To >>> 0;
                            if (No) {
                                Kt()
                            } else {
                                Co = Do + 20 | 0;
                                s[Co >> 2] = So;
                                ko = So + 24 | 0;
                                s[ko >> 2] = Do;
                                n = go;
                                r = q;
                                break
                            }
                        }
                    }
                } else {
                    n = e;
                    r = t
                }
            } while (0);
            K = s[(133240 + 16 | 0) >> 2] | 0;
            Q = F >>> 0 < K >>> 0;
            if (Q) {
                Kt()
            }
            d = t + 4 | 0;
            Y = e + d | 0;
            Z = s[Y >> 2] | 0;
            et = Z & 2;
            tt = (et | 0) == 0;
            if (tt) {
                nt = s[(133240 + 24 | 0) >> 2] | 0;
                rt = (F | 0) == (nt | 0);
                if (rt) {
                    it = s[(133240 + 12 | 0) >> 2] | 0;
                    st = it + r | 0;
                    s[(133240 + 12 | 0) >> 2] = st;
                    s[(133240 + 24 | 0) >> 2] = n;
                    ot = st | 1;
                    ut = n + 4 | 0;
                    s[ut >> 2] = ot;
                    ft = s[(133240 + 20 | 0) >> 2] | 0;
                    lt = (n | 0) == (ft | 0);
                    if (!lt) {
                        c = zo;
                        return
                    }
                    s[(133240 + 20 | 0) >> 2] = 0;
                    s[(133240 + 8 | 0) >> 2] = 0;
                    c = zo;
                    return
                }
                ct = s[(133240 + 20 | 0) >> 2] | 0;
                ht = (F | 0) == (ct | 0);
                if (ht) {
                    pt = s[(133240 + 8 | 0) >> 2] | 0;
                    dt = pt + r | 0;
                    s[(133240 + 8 | 0) >> 2] = dt;
                    s[(133240 + 20 | 0) >> 2] = n;
                    vt = dt | 1;
                    mt = n + 4 | 0;
                    s[mt >> 2] = vt;
                    gt = n + dt | 0;
                    s[gt >> 2] = dt;
                    c = zo;
                    return
                }
                yt = Z & -8;
                wt = yt + r | 0;
                Et = Z >>> 3;
                St = Z >>> 0 < 256;
                do {
                    if (St) {
                        E = t + 8 | 0;
                        xt = e + E | 0;
                        Tt = s[xt >> 2] | 0;
                        S = t + 12 | 0;
                        Nt = e + S | 0;
                        Ct = s[Nt >> 2] | 0;
                        kt = Et << 1;
                        Lt = (133240 + (kt << 2) | 0) + 40 | 0;
                        At = (Tt | 0) == (Lt | 0);
                        if (!At) {
                            Mt = Tt >>> 0 < K >>> 0;
                            if (Mt) {
                                Kt()
                            }
                            _t = Tt + 12 | 0;
                            Dt = s[_t >> 2] | 0;
                            Pt = (Dt | 0) == (F | 0);
                            if (!Pt) {
                                Kt()
                            }
                        }
                        Ht = (Ct | 0) == (Tt | 0);
                        if (Ht) {
                            Bt = 1 << Et;
                            jt = Bt ^ -1;
                            Ft = s[133240 >> 2] | 0;
                            It = Ft & jt;
                            s[133240 >> 2] = It;
                            break
                        }
                        qt = (Ct | 0) == (Lt | 0);
                        if (qt) {
                            l = Ct + 8 | 0;
                            u = l
                        } else {
                            Ut = Ct >>> 0 < K >>> 0;
                            if (Ut) {
                                Kt()
                            }
                            zt = Ct + 8 | 0;
                            Wt = s[zt >> 2] | 0;
                            Xt = (Wt | 0) == (F | 0);
                            if (Xt) {
                                u = zt
                            } else {
                                Kt()
                            }
                        }
                        Vt = Tt + 12 | 0;
                        s[Vt >> 2] = Ct;
                        s[u >> 2] = Tt
                    } else {
                        x = t + 24 | 0;
                        $t = e + x | 0;
                        Jt = s[$t >> 2] | 0;
                        D = t + 12 | 0;
                        Qt = e + D | 0;
                        Gt = s[Qt >> 2] | 0;
                        Yt = (Gt | 0) == (F | 0);
                        do {
                            if (Yt) {
                                j = t + 20 | 0;
                                ln = e + j | 0;
                                hn = s[ln >> 2] | 0;
                                pn = (hn | 0) == (0 | 0);
                                if (pn) {
                                    B = t + 16 | 0;
                                    dn = e + B | 0;
                                    vn = s[dn >> 2] | 0;
                                    mn = (vn | 0) == (0 | 0);
                                    if (mn) {
                                        Ho = 0;
                                        break
                                    } else {
                                        Po = vn;
                                        jo = dn
                                    }
                                } else {
                                    Po = hn;
                                    jo = ln
                                }
                                while (1) {
                                    gn = Po + 20 | 0;
                                    yn = s[gn >> 2] | 0;
                                    bn = (yn | 0) == (0 | 0);
                                    if (!bn) {
                                        Po = yn;
                                        jo = gn;
                                        continue
                                    }
                                    wn = Po + 16 | 0;
                                    En = s[wn >> 2] | 0;
                                    xn = (En | 0) == (0 | 0);
                                    if (xn) {
                                        break
                                    } else {
                                        Po = En;
                                        jo = wn
                                    }
                                }
                                Tn = jo >>> 0 < K >>> 0;
                                if (Tn) {
                                    Kt()
                                } else {
                                    s[jo >> 2] = 0;
                                    Ho = Po;
                                    break
                                }
                            } else {
                                w = t + 8 | 0;
                                en = e + w | 0;
                                tn = s[en >> 2] | 0;
                                nn = tn >>> 0 < K >>> 0;
                                if (nn) {
                                    Kt()
                                }
                                rn = tn + 12 | 0;
                                sn = s[rn >> 2] | 0;
                                on = (sn | 0) == (F | 0);
                                if (!on) {
                                    Kt()
                                }
                                un = Gt + 8 | 0;
                                an = s[un >> 2] | 0;
                                fn = (an | 0) == (F | 0);
                                if (fn) {
                                    s[rn >> 2] = Gt;
                                    s[un >> 2] = tn;
                                    Ho = Gt;
                                    break
                                } else {
                                    Kt()
                                }
                            }
                        } while (0);
                        Nn = (Jt | 0) == (0 | 0);
                        if (!Nn) {
                            g = t + 28 | 0;
                            Cn = e + g | 0;
                            kn = s[Cn >> 2] | 0;
                            Ln = (133240 + (kn << 2) | 0) + 304 | 0;
                            An = s[Ln >> 2] | 0;
                            On = (F | 0) == (An | 0);
                            if (On) {
                                s[Ln >> 2] = Ho;
                                Ro = (Ho | 0) == (0 | 0);
                                if (Ro) {
                                    Mn = 1 << kn;
                                    _n = Mn ^ -1;
                                    Pn = s[(133240 + 4 | 0) >> 2] | 0;
                                    Hn = Pn & _n;
                                    s[(133240 + 4 | 0) >> 2] = Hn;
                                    break
                                }
                            } else {
                                Bn = s[(133240 + 16 | 0) >> 2] | 0;
                                jn = Jt >>> 0 < Bn >>> 0;
                                if (jn) {
                                    Kt()
                                }
                                Fn = Jt + 16 | 0;
                                In = s[Fn >> 2] | 0;
                                qn = (In | 0) == (F | 0);
                                if (qn) {
                                    s[Fn >> 2] = Ho
                                } else {
                                    Rn = Jt + 20 | 0;
                                    s[Rn >> 2] = Ho
                                }
                                Un = (Ho | 0) == (0 | 0);
                                if (Un) {
                                    break
                                }
                            }
                            zn = s[(133240 + 16 | 0) >> 2] | 0;
                            Vn = Ho >>> 0 < zn >>> 0;
                            if (Vn) {
                                Kt()
                            }
                            $n = Ho + 24 | 0;
                            s[$n >> 2] = Jt;
                            y = t + 16 | 0;
                            Jn = e + y | 0;
                            Kn = s[Jn >> 2] | 0;
                            Qn = (Kn | 0) == (0 | 0);
                            do {
                                if (!Qn) {
                                    Gn = s[(133240 + 16 | 0) >> 2] | 0;
                                    Yn = Kn >>> 0 < Gn >>> 0;
                                    if (Yn) {
                                        Kt()
                                    } else {
                                        Zn = Ho + 16 | 0;
                                        s[Zn >> 2] = Kn;
                                        er = Kn + 24 | 0;
                                        s[er >> 2] = Ho;
                                        break
                                    }
                                }
                            } while (0);
                            b = t + 20 | 0;
                            tr = e + b | 0;
                            rr = s[tr >> 2] | 0;
                            ir = (rr | 0) == (0 | 0);
                            if (!ir) {
                                sr = s[(133240 + 16 | 0) >> 2] | 0;
                                or = rr >>> 0 < sr >>> 0;
                                if (or) {
                                    Kt()
                                } else {
                                    ur = Ho + 20 | 0;
                                    s[ur >> 2] = rr;
                                    ar = rr + 24 | 0;
                                    s[ar >> 2] = Ho;
                                    break
                                }
                            }
                        }
                    }
                } while (0);
                fr = wt | 1;
                lr = n + 4 | 0;
                s[lr >> 2] = fr;
                cr = n + wt | 0;
                s[cr >> 2] = wt;
                hr = s[(133240 + 20 | 0) >> 2] | 0;
                dr = (n | 0) == (hr | 0);
                if (dr) {
                    s[(133240 + 8 | 0) >> 2] = wt;
                    c = zo;
                    return
                } else {
                    i = wt
                }
            } else {
                vr = Z & -2;
                s[Y >> 2] = vr;
                mr = r | 1;
                gr = n + 4 | 0;
                s[gr >> 2] = mr;
                yr = n + r | 0;
                s[yr >> 2] = r;
                i = r
            }
            br = i >>> 3;
            wr = i >>> 0 < 256;
            if (wr) {
                Er = br << 1;
                Sr = (133240 + (Er << 2) | 0) + 40 | 0;
                xr = s[133240 >> 2] | 0;
                Nr = 1 << br;
                Cr = xr & Nr;
                kr = (Cr | 0) == 0;
                if (kr) {
                    Lr = xr | Nr;
                    s[133240 >> 2] = Lr;
                    v = Er + 2 | 0;
                    o = (133240 + (v << 2) | 0) + 40 | 0;
                    f = o;
                    Lo = Sr
                } else {
                    m = Er + 2 | 0;
                    Ar = (133240 + (m << 2) | 0) + 40 | 0;
                    Or = s[Ar >> 2] | 0;
                    Mr = s[(133240 + 16 | 0) >> 2] | 0;
                    _r = Or >>> 0 < Mr >>> 0;
                    if (_r) {
                        Kt()
                    } else {
                        f = Ar;
                        Lo = Or
                    }
                }
                s[f >> 2] = n;
                Dr = Lo + 12 | 0;
                s[Dr >> 2] = n;
                Pr = n + 8 | 0;
                s[Pr >> 2] = Lo;
                Br = n + 12 | 0;
                s[Br >> 2] = Sr;
                c = zo;
                return
            }
            jr = i >>> 8;
            Fr = (jr | 0) == 0;
            if (Fr) {
                Ao = 0
            } else {
                Ir = i >>> 0 > 16777215;
                if (Ir) {
                    Ao = 31
                } else {
                    qr = jr + 1048320 | 0;
                    Rr = qr >>> 16;
                    Ur = Rr & 8;
                    zr = jr << Ur;
                    Wr = zr + 520192 | 0;
                    Xr = Wr >>> 16;
                    $r = Xr & 4;
                    Jr = $r | Ur;
                    Kr = zr << $r;
                    Qr = Kr + 245760 | 0;
                    Gr = Qr >>> 16;
                    Yr = Gr & 2;
                    Zr = Jr | Yr;
                    ei = 14 - Zr | 0;
                    ti = Kr << Yr;
                    ni = ti >>> 15;
                    ii = ei + ni | 0;
                    si = ii << 1;
                    oi = ii + 7 | 0;
                    ui = i >>> oi;
                    ai = ui & 1;
                    fi = ai | si;
                    Ao = fi
                }
            }
            li = (133240 + (Ao << 2) | 0) + 304 | 0;
            ci = n + 28 | 0;
            Oo = Ao;
            s[ci >> 2] = Oo;
            hi = n + 20 | 0;
            s[hi >> 2] = 0;
            pi = n + 16 | 0;
            s[pi >> 2] = 0;
            vi = s[(133240 + 4 | 0) >> 2] | 0;
            mi = 1 << Ao;
            gi = vi & mi;
            yi = (gi | 0) == 0;
            if (yi) {
                bi = vi | mi;
                s[(133240 + 4 | 0) >> 2] = bi;
                s[li >> 2] = n;
                wi = n + 24 | 0;
                s[wi >> 2] = li;
                Ei = n + 12 | 0;
                s[Ei >> 2] = n;
                Si = n + 8 | 0;
                s[Si >> 2] = n;
                c = zo;
                return
            }
            xi = s[li >> 2] | 0;
            Ti = (Ao | 0) == 31;
            if (Ti) {
                Di = 0
            } else {
                Ci = Ao >>> 1;
                ki = 25 - Ci | 0;
                Di = ki
            }
            Li = xi + 4 | 0;
            Ai = s[Li >> 2] | 0;
            Oi = Ai & -8;
            Mi = (Oi | 0) == (i | 0);
            e: do {
                if (Mi) {
                    Fo = xi
                } else {
                    _i = i << Di;
                    Mo = _i;
                    Io = xi;
                    while (1) {
                        Ri = Mo >>> 31;
                        Ui = (Io + (Ri << 2) | 0) + 16 | 0;
                        ji = s[Ui >> 2] | 0;
                        zi = (ji | 0) == (0 | 0);
                        if (zi) {
                            break
                        }
                        Pi = Mo << 1;
                        Hi = ji + 4 | 0;
                        Fi = s[Hi >> 2] | 0;
                        Ii = Fi & -8;
                        qi = (Ii | 0) == (i | 0);
                        if (qi) {
                            Fo = ji;
                            break e
                        } else {
                            Mo = Pi;
                            Io = ji
                        }
                    }
                    Wi = s[(133240 + 16 | 0) >> 2] | 0;
                    Xi = Ui >>> 0 < Wi >>> 0;
                    if (Xi) {
                        Kt()
                    }
                    s[Ui >> 2] = n;
                    Vi = n + 24 | 0;
                    s[Vi >> 2] = Io;
                    Ki = n + 12 | 0;
                    s[Ki >> 2] = n;
                    Qi = n + 8 | 0;
                    s[Qi >> 2] = n;
                    c = zo;
                    return
                }
            } while (0);
            Gi = Fo + 8 | 0;
            Yi = s[Gi >> 2] | 0;
            Zi = s[(133240 + 16 | 0) >> 2] | 0;
            es = Fo >>> 0 < Zi >>> 0;
            if (es) {
                Kt()
            }
            ts = Yi >>> 0 < Zi >>> 0;
            if (ts) {
                Kt()
            }
            ns = Yi + 12 | 0;
            s[ns >> 2] = n;
            s[Gi >> 2] = n;
            rs = n + 8 | 0;
            s[rs >> 2] = Yi;
            is = n + 12 | 0;
            s[is >> 2] = Fo;
            os = n + 24 | 0;
            s[os >> 2] = 0;
            c = zo;
            return
        }

        function js(e, t) {
            e = +e;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                h = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0;
            T = c;
            l[p >> 3] = e;
            i = s[p >> 2] | 0;
            o = s[p + 4 >> 2] | 0;
            d = so(i | 0, o | 0, 52) | 0;
            v = D;
            m = d & 2047;
            if ((m | 0) == 0) {
                g = e != 0;
                if (g) {
                    y = e * 0x10000000000000000;
                    b = +js(y, t);
                    w = s[t >> 2] | 0;
                    E = w + -64 | 0;
                    r = b;
                    S = E
                } else {
                    r = e;
                    S = 0
                }
                s[t >> 2] = S;
                n = r;
                c = T;
                return +n
            } else if ((m | 0) == 2047) {
                n = e;
                c = T;
                return +n
            } else {
                u = m + -1022 | 0;
                s[t >> 2] = u;
                a = o & -2146435073;
                f = a | 1071644672;
                s[p >> 2] = i;
                s[p + 4 >> 2] = f;
                h = +l[p >> 3];
                n = h;
                c = T;
                return +n
            }
            return +0
        }

        function Fs(e, t) {
            e = +e;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0;
            i = c;
            n = +js(e, t);
            c = i;
            return +n
        }

        function Is(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                s = 0,
                o = 0;
            o = c;
            r = (e | 0) == (0 | 0);
            if (r) {
                n = 0
            } else {
                i = qs(e, t, 0) | 0;
                n = i
            }
            c = o;
            return n | 0
        }

        function qs(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0;
            var V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0;
            tt = c;
            o = (e | 0) == (0 | 0);
            if (o) {
                i = 1;
                c = tt;
                return i | 0
            }
            u = t >>> 0 < 128;
            if (u) {
                b = t & 255;
                r[e >> 0] = b;
                i = 1;
                c = tt;
                return i | 0
            }
            O = t >>> 0 < 2048;
            if (O) {
                R = t >>> 6;
                J = R | 192;
                K = J & 255;
                Q = e + 1 | 0;
                r[e >> 0] = K;
                G = t & 63;
                Y = G | 128;
                a = Y & 255;
                r[Q >> 0] = a;
                i = 2;
                c = tt;
                return i | 0
            }
            f = t >>> 0 < 55296;
            l = t + -57344 | 0;
            h = l >>> 0 < 8192;
            Z = f | h;
            if (Z) {
                p = t >>> 12;
                d = p | 224;
                v = d & 255;
                m = e + 1 | 0;
                r[e >> 0] = v;
                g = t >>> 6;
                y = g & 63;
                w = y | 128;
                E = w & 255;
                S = e + 2 | 0;
                r[m >> 0] = E;
                x = t & 63;
                T = x | 128;
                N = T & 255;
                r[S >> 0] = N;
                i = 3;
                c = tt;
                return i | 0
            }
            C = t + -65536 | 0;
            k = C >>> 0 < 1048576;
            if (k) {
                L = t >>> 18;
                A = L | 240;
                M = A & 255;
                _ = e + 1 | 0;
                r[e >> 0] = M;
                D = t >>> 12;
                P = D & 63;
                H = P | 128;
                B = H & 255;
                j = e + 2 | 0;
                r[_ >> 0] = B;
                F = t >>> 6;
                I = F & 63;
                q = I | 128;
                U = q & 255;
                z = e + 3 | 0;
                r[j >> 0] = U;
                W = t & 63;
                X = W | 128;
                V = X & 255;
                r[z >> 0] = V;
                i = 4;
                c = tt;
                return i | 0
            } else {
                $ = zt() | 0;
                s[$ >> 2] = 84;
                i = -1;
                c = tt;
                return i | 0
            }
            return 0 | 0
        }

        function Rs(e) {
            e = e | 0;
            var t = 0,
                n = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0;
            var T = 0,
                N = 0,
                C = 0;
            C = c;
            n = e + 74 | 0;
            i = r[n >> 0] | 0;
            g = i << 24 >> 24;
            y = g + 255 | 0;
            b = y | g;
            w = b & 255;
            r[n >> 0] = w;
            E = s[e >> 2] | 0;
            S = E & 8;
            x = (S | 0) == 0;
            if (x) {
                o = e + 8 | 0;
                s[o >> 2] = 0;
                u = e + 4 | 0;
                s[u >> 2] = 0;
                a = e + 44 | 0;
                f = s[a >> 2] | 0;
                l = e + 28 | 0;
                s[l >> 2] = f;
                h = e + 20 | 0;
                s[h >> 2] = f;
                p = e + 48 | 0;
                d = s[p >> 2] | 0;
                v = f + d | 0;
                m = e + 16 | 0;
                s[m >> 2] = v;
                t = 0;
                c = C;
                return t | 0
            } else {
                T = E | 32;
                s[e >> 2] = T;
                t = -1;
                c = C;
                return t | 0
            }
            return 0 | 0
        }

        function Us(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0;
            var V = 0,
                $ = 0;
            $ = c;
            l = n + 16 | 0;
            h = s[l >> 2] | 0;
            x = (h | 0) == (0 | 0);
            do {
                if (x) {
                    P = Rs(n) | 0;
                    F = (P | 0) == 0;
                    if (F) {
                        f = s[l >> 2] | 0;
                        R = f;
                        break
                    } else {
                        i = 0;
                        c = $;
                        return i | 0
                    }
                } else {
                    R = h
                }
            } while (0);
            I = n + 20 | 0;
            q = s[I >> 2] | 0;
            U = R;
            z = q;
            p = U - z | 0;
            d = p >>> 0 < t >>> 0;
            if (d) {
                v = n + 36 | 0;
                m = s[v >> 2] | 0;
                g = Mo[m & 1](n, e, t) | 0;
                i = g;
                c = $;
                return i | 0
            }
            y = n + 75 | 0;
            b = r[y >> 0] | 0;
            w = b << 24 >> 24 > -1;
            e: do {
                if (w) {
                    W = t;
                    while (1) {
                        E = (W | 0) == 0;
                        if (E) {
                            o = t;
                            u = e;
                            D = q;
                            X = 0;
                            break e
                        }
                        S = W + -1 | 0;
                        T = e + S | 0;
                        N = r[T >> 0] | 0;
                        C = N << 24 >> 24 == 10;
                        if (C) {
                            break
                        } else {
                            W = S
                        }
                    }
                    k = n + 36 | 0;
                    L = s[k >> 2] | 0;
                    A = Mo[L & 1](n, e, W) | 0;
                    O = A >>> 0 < W >>> 0;
                    if (O) {
                        i = W;
                        c = $;
                        return i | 0
                    } else {
                        M = e + W | 0;
                        _ = t - W | 0;
                        a = s[I >> 2] | 0;
                        o = _;
                        u = M;
                        D = a;
                        X = W;
                        break
                    }
                } else {
                    o = t;
                    u = e;
                    D = q;
                    X = 0
                }
            } while (0);
            oo(D | 0, u | 0, o | 0) | 0;
            H = s[I >> 2] | 0;
            B = H + o | 0;
            s[I >> 2] = B;
            j = X + o | 0;
            i = j;
            c = $;
            return i | 0
        }

        function zs(e, t, n, r) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            var i = 0,
                o = 0,
                u = 0,
                a = 0;
            a = c;
            c = c + 16 | 0;
            o = a;
            s[o >> 2] = r;
            i = $s(e, t, n, o) | 0;
            c = a;
            return i | 0
        }

        function Ws(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0,
                i = 0,
                o = 0,
                u = 0;
            u = c;
            c = c + 16 | 0;
            i = u;
            s[i >> 2] = n;
            r = Ks(e, t, i) | 0;
            c = u;
            return r | 0
        }

        function Xs(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0;
            var N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0;
            D = c;
            c = c + 224 | 0;
            N = D + 120 | 0;
            L = D + 80 | 0;
            k = D;
            C = D + 136 | 0;
            M = L + 0 | 0;
            P = M + 40 | 0;
            do {
                s[M >> 2] = 0 | 0;
                M = M + 4 | 0
            } while ((M | 0) < (P | 0));
            O = s[n >> 2] | 0;
            s[N >> 2] = O;
            o = Vs(0, t, N, k, L) | 0;
            u = (o | 0) < 0;
            if (u) {
                i = -1;
                c = D;
                return i | 0
            }
            g = e + 48 | 0;
            y = s[g >> 2] | 0;
            b = (y | 0) == 0;
            if (b) {
                E = e + 44 | 0;
                S = s[E >> 2] | 0;
                s[E >> 2] = C;
                x = e + 28 | 0;
                s[x >> 2] = C;
                T = e + 20 | 0;
                s[T >> 2] = C;
                s[g >> 2] = 80;
                a = C + 80 | 0;
                f = e + 16 | 0;
                s[f >> 2] = a;
                l = Vs(e, t, N, k, L) | 0;
                h = (S | 0) == (0 | 0);
                if (h) {
                    A = l
                } else {
                    p = e + 36 | 0;
                    d = s[p >> 2] | 0;
                    Mo[d & 1](e, 0, 0) | 0;
                    v = s[T >> 2] | 0;
                    m = (v | 0) == (0 | 0);
                    r = m ? -1 : l;
                    s[E >> 2] = S;
                    s[g >> 2] = 0;
                    s[f >> 2] = 0;
                    s[x >> 2] = 0;
                    s[T >> 2] = 0;
                    A = r
                }
            } else {
                w = Vs(e, t, N, k, L) | 0;
                A = w
            }
            i = A;
            c = D;
            return i | 0
        }

        function Vs(e, t, n, o, u) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            o = o | 0;
            u = u | 0;
            var a = 0,
                f = 0,
                h = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0;
            var M = 0,
                _ = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0;
            var Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0,
                gt = 0,
                yt = 0;
            var bt = 0,
                wt = 0,
                Et = 0,
                St = 0,
                xt = 0,
                Tt = 0,
                Nt = 0,
                kt = 0,
                Lt = 0,
                At = 0,
                Ot = 0,
                Mt = 0,
                _t = 0,
                Dt = 0,
                Pt = 0,
                Ht = 0,
                Bt = 0,
                jt = 0,
                Ft = 0,
                It = 0;
            var qt = 0,
                Rt = 0,
                Ut = 0,
                Wt = 0,
                Xt = 0,
                Vt = 0,
                $t = 0,
                Jt = 0,
                Kt = 0,
                Qt = 0,
                Gt = 0,
                Yt = 0,
                Zt = 0,
                en = 0,
                tn = 0,
                nn = 0,
                rn = 0,
                sn = 0,
                on = 0,
                un = 0;
            var an = 0,
                fn = 0,
                ln = 0,
                cn = 0,
                hn = 0,
                pn = 0,
                dn = 0,
                vn = 0,
                mn = 0,
                gn = 0,
                yn = 0,
                bn = 0,
                wn = 0,
                En = 0,
                Sn = 0,
                xn = 0,
                Tn = 0,
                Nn = 0,
                Cn = 0,
                kn = 0;
            var Ln = 0,
                An = 0,
                On = 0,
                Mn = 0,
                _n = 0,
                Dn = 0,
                Pn = 0,
                Hn = 0,
                Bn = 0,
                jn = 0,
                Fn = 0,
                In = 0,
                qn = 0,
                Rn = 0,
                Un = 0,
                zn = 0,
                Wn = 0,
                Xn = 0,
                Vn = 0,
                $n = 0;
            var Jn = 0,
                Kn = 0,
                Qn = 0,
                Gn = 0,
                Yn = 0,
                Zn = 0,
                er = 0,
                tr = 0,
                nr = 0,
                rr = 0,
                ir = 0,
                sr = 0,
                or = 0,
                ur = 0,
                ar = 0,
                fr = 0,
                lr = 0,
                cr = 0,
                hr = 0,
                pr = 0;
            var dr = 0,
                vr = 0,
                mr = 0,
                gr = 0,
                yr = 0,
                br = 0,
                wr = 0,
                Er = 0,
                Sr = 0,
                xr = 0,
                Tr = 0,
                Nr = 0,
                Cr = 0,
                kr = 0,
                Lr = 0,
                Ar = 0,
                Or = 0,
                Mr = 0,
                _r = 0,
                Dr = 0;
            var Pr = 0,
                Hr = 0,
                Br = 0,
                jr = 0,
                Fr = 0,
                Ir = 0,
                qr = 0,
                Rr = 0,
                Ur = 0,
                zr = 0,
                Wr = 0,
                Xr = 0,
                Vr = 0,
                $r = 0,
                Jr = 0,
                Kr = 0,
                Qr = 0,
                Gr = 0,
                Yr = 0,
                Zr = 0;
            var ei = 0,
                ti = 0,
                ni = 0,
                ri = 0,
                ii = 0,
                si = 0,
                oi = 0,
                ui = 0,
                ai = 0,
                fi = 0,
                li = 0,
                ci = 0,
                hi = 0,
                pi = 0,
                di = 0,
                vi = 0,
                mi = 0,
                gi = 0,
                yi = 0,
                bi = 0;
            var wi = 0,
                Ei = 0,
                Si = 0,
                xi = 0,
                Ti = 0,
                Ni = 0,
                Ci = 0,
                ki = 0,
                Li = 0,
                Ai = 0,
                Oi = 0,
                Mi = 0,
                _i = 0,
                Di = 0,
                Pi = 0,
                Hi = 0,
                Bi = 0,
                ji = 0,
                Fi = 0,
                Ii = 0;
            var qi = 0,
                Ri = 0,
                Ui = 0,
                zi = 0,
                Wi = 0,
                Xi = 0,
                Vi = 0,
                $i = 0,
                Ji = 0,
                Ki = 0,
                Qi = 0,
                Gi = 0,
                Yi = 0,
                Zi = 0,
                es = 0,
                ts = 0,
                ns = 0,
                rs = 0,
                is = 0,
                ss = 0;
            var os = 0,
                us = 0,
                as = 0,
                fs = 0,
                ls = 0,
                cs = 0,
                hs = 0,
                ps = 0,
                ds = 0,
                vs = 0,
                ms = 0,
                gs = 0,
                ys = 0,
                bs = 0,
                ws = 0,
                Es = 0,
                Ss = 0,
                xs = 0,
                Ts = 0,
                Ns = 0;
            var Cs = 0,
                ks = 0,
                Ls = 0,
                As = 0,
                Os = 0,
                Ms = 0,
                _s = 0,
                Ds = 0,
                Ps = 0,
                Hs = 0,
                Bs = 0,
                js = 0,
                qs = 0,
                Rs = 0,
                zs = 0,
                Ws = 0,
                Xs = 0,
                Vs = 0,
                $s = 0,
                Js = 0;
            var Ks = 0,
                Gs = 0,
                Ys = 0,
                no = 0,
                io = 0,
                oo = 0,
                uo = 0,
                ao = 0,
                fo = 0,
                lo = 0,
                co = 0,
                ho = 0,
                po = 0,
                vo = 0,
                yo = 0,
                bo = 0,
                wo = 0,
                Eo = 0,
                So = 0,
                xo = 0;
            var To = 0,
                No = 0,
                Co = 0,
                ko = 0,
                Lo = 0,
                Ao = 0,
                Oo = 0,
                Mo = 0,
                _o = 0,
                Do = 0,
                Po = 0,
                Ho = 0,
                Bo = 0,
                jo = 0,
                Fo = 0,
                Io = 0,
                qo = 0,
                Ro = 0,
                Uo = 0,
                zo = 0;
            var Wo = 0,
                Xo = 0,
                Vo = 0,
                $o = 0,
                Jo = 0,
                Ko = 0,
                Qo = 0,
                Go = 0,
                Yo = 0,
                Zo = 0,
                eu = 0,
                tu = 0,
                nu = 0,
                ru = 0,
                iu = 0,
                su = 0,
                ou = 0,
                uu = 0,
                au = 0,
                fu = 0;
            var lu = 0,
                cu = 0,
                hu = 0,
                pu = 0,
                du = 0,
                vu = 0,
                mu = 0,
                gu = 0,
                yu = 0,
                bu = 0,
                wu = 0,
                Eu = 0,
                Su = 0,
                xu = 0,
                Tu = 0,
                Nu = 0,
                Cu = 0,
                ku = 0,
                Lu = 0,
                Au = 0;
            var Ou = 0,
                Mu = 0,
                _u = 0,
                Du = 0,
                Pu = 0,
                Hu = 0,
                Bu = 0,
                ju = 0,
                Fu = 0,
                Iu = 0,
                qu = 0,
                Ru = 0,
                Uu = 0,
                zu = 0,
                Wu = 0,
                Xu = 0,
                Vu = 0,
                $u = 0,
                Ju = 0,
                Ku = 0;
            var Qu = 0,
                Gu = 0,
                Yu = 0,
                Zu = 0,
                ea = 0,
                ta = 0,
                na = 0,
                ra = 0,
                ia = 0,
                sa = 0,
                oa = 0,
                ua = 0,
                aa = 0,
                fa = 0,
                la = 0,
                ca = 0,
                ha = 0,
                pa = 0,
                da = 0,
                va = 0;
            var ma = 0,
                ga = 0,
                ya = 0,
                ba = 0,
                wa = 0,
                Ea = 0,
                Sa = 0,
                xa = 0,
                Ta = 0,
                Na = 0,
                Ca = 0,
                ka = 0,
                La = 0,
                Aa = 0,
                Oa = 0,
                Ma = 0,
                _a = 0,
                Da = 0,
                Pa = 0,
                Ha = 0;
            var Ba = 0,
                ja = 0,
                Fa = 0,
                Ia = 0,
                qa = 0,
                Ra = 0,
                Ua = 0,
                za = 0,
                Wa = 0,
                Xa = 0,
                Va = 0,
                $a = 0,
                Ja = 0,
                Ka = 0,
                Qa = 0,
                Ga = 0,
                Ya = 0,
                Za = 0,
                ef = 0,
                tf = 0;
            var nf = 0,
                rf = 0,
                sf = 0,
                of = 0,
                uf = 0,
                af = 0,
                ff = 0,
                lf = 0,
                cf = 0,
                hf = 0,
                pf = 0,
                df = 0,
                vf = 0,
                mf = 0,
                gf = 0,
                yf = 0,
                bf = 0,
                wf = 0,
                Ef = 0,
                Sf = 0;
            var xf = 0,
                Tf = 0,
                Nf = 0,
                Cf = 0,
                kf = 0,
                Lf = 0,
                Af = 0,
                Of = 0,
                Mf = 0,
                _f = 0,
                Df = 0,
                Pf = 0,
                Hf = 0,
                Bf = 0,
                jf = 0,
                Ff = 0,
                If = 0,
                qf = 0,
                Rf = 0,
                Uf = 0;
            var zf = 0,
                Wf = 0,
                Xf = 0,
                Vf = 0,
                $f = 0,
                Jf = 0,
                Kf = 0,
                Qf = 0,
                Gf = 0,
                Yf = 0,
                Zf = 0,
                el = 0,
                tl = 0,
                nl = 0,
                rl = 0,
                il = 0,
                sl = 0,
                ol = 0,
                ul = 0,
                al = 0;
            var fl = 0,
                ll = 0,
                cl = 0,
                hl = 0,
                pl = 0,
                dl = 0,
                vl = 0,
                ml = 0,
                gl = 0,
                yl = 0,
                bl = 0,
                wl = 0,
                El = 0,
                Sl = 0,
                xl = 0,
                Tl = 0,
                Nl = 0,
                Cl = 0,
                kl = 0,
                Ll = 0;
            var Al = 0,
                Ol = 0,
                Ml = 0,
                _l = 0,
                Dl = 0,
                Pl = 0,
                Hl = 0,
                Bl = 0,
                jl = 0,
                Fl = 0,
                Il = 0,
                ql = 0,
                Rl = 0,
                Ul = 0,
                zl = 0,
                Wl = 0,
                Xl = 0,
                Vl = 0,
                $l = 0,
                Jl = 0;
            var Kl = 0,
                Ql = 0,
                Gl = 0,
                Yl = 0,
                Zl = 0,
                ec = 0,
                tc = 0,
                nc = 0,
                rc = 0,
                ic = 0,
                sc = 0,
                oc = 0,
                uc = 0,
                ac = 0,
                fc = 0,
                lc = 0,
                cc = 0,
                hc = 0,
                pc = 0,
                dc = 0;
            var vc = 0,
                mc = 0,
                gc = 0,
                yc = 0,
                bc = 0,
                wc = 0,
                Ec = 0,
                Sc = 0,
                xc = 0,
                Tc = 0,
                Nc = 0,
                Cc = 0,
                kc = 0,
                Lc = 0,
                Ac = 0,
                Oc = 0,
                Mc = 0,
                _c = 0,
                Dc = 0,
                Pc = 0;
            var Hc = 0,
                Bc = 0,
                jc = 0,
                Fc = 0,
                Ic = 0,
                qc = 0,
                Rc = 0,
                Uc = 0,
                zc = 0,
                Wc = 0,
                Xc = 0,
                Vc = 0,
                $c = 0,
                Jc = 0,
                Kc = 0,
                Qc = 0,
                Gc = 0,
                Yc = 0,
                Zc = 0,
                eh = 0;
            var th = 0,
                nh = 0,
                rh = 0,
                ih = 0,
                sh = 0,
                oh = 0,
                uh = 0,
                ah = 0,
                fh = 0,
                lh = 0,
                ch = 0,
                hh = 0,
                ph = 0,
                dh = 0,
                vh = 0,
                mh = 0,
                gh = 0,
                yh = 0,
                bh = 0,
                wh = 0;
            var Eh = 0,
                Sh = 0,
                xh = 0,
                Th = 0,
                Nh = 0,
                Ch = 0,
                kh = 0,
                Lh = 0,
                Ah = 0,
                Oh = 0,
                Mh = 0,
                _h = 0,
                Dh = 0,
                Ph = 0,
                Hh = 0,
                Bh = 0,
                jh = 0,
                Fh = 0,
                Ih = 0,
                qh = 0;
            var Rh = 0,
                Uh = 0,
                zh = 0,
                Wh = 0,
                Xh = 0,
                Vh = 0,
                $h = 0,
                Jh = 0,
                Kh = 0,
                Qh = 0,
                Gh = 0,
                Yh = 0,
                Zh = 0,
                ep = 0,
                tp = 0,
                np = 0,
                rp = 0,
                ip = 0,
                sp = 0,
                op = 0;
            var up = 0,
                ap = 0,
                fp = 0,
                lp = 0,
                cp = 0,
                hp = 0,
                pp = 0,
                dp = 0,
                vp = 0,
                mp = 0,
                gp = 0,
                yp = 0,
                bp = 0,
                wp = 0,
                Ep = 0,
                Sp = 0,
                xp = 0,
                Tp = 0,
                Np = 0,
                Cp = 0;
            var kp = 0,
                Lp = 0,
                Ap = 0,
                Op = 0,
                Mp = 0,
                _p = 0,
                Dp = 0,
                Pp = 0,
                Hp = 0,
                Bp = 0,
                jp = 0,
                Fp = 0,
                Ip = 0,
                qp = 0,
                Rp = 0,
                Up = 0,
                zp = 0,
                Wp = 0,
                Xp = 0,
                Vp = 0;
            var $p = 0,
                Jp = 0,
                Kp = 0,
                Qp = 0,
                Gp = 0,
                Yp = 0,
                Zp = 0,
                ed = 0,
                td = 0,
                nd = 0,
                rd = 0,
                id = 0,
                sd = 0,
                od = 0,
                ud = 0,
                ad = 0,
                fd = 0,
                ld = 0,
                cd = 0,
                hd = 0;
            var pd = 0,
                dd = 0,
                vd = 0,
                md = 0,
                gd = 0,
                yd = 0,
                bd = 0,
                wd = 0,
                Ed = 0,
                Sd = 0,
                xd = 0,
                Td = 0,
                Nd = 0,
                Cd = 0,
                kd = 0,
                Ld = 0,
                Ad = 0,
                Od = 0,
                Md = 0,
                _d = 0;
            var Dd = 0,
                Pd = 0,
                Hd = 0,
                Bd = 0,
                jd = 0,
                Fd = 0,
                Id = 0,
                qd = 0,
                Rd = 0,
                Ud = 0,
                zd = 0,
                Wd = 0,
                Xd = 0,
                Vd = 0,
                $d = 0,
                Jd = 0,
                Kd = 0,
                Qd = 0,
                Gd = 0,
                Yd = 0;
            var Zd = 0,
                ev = 0,
                tv = 0,
                nv = 0,
                rv = 0,
                iv = 0,
                sv = 0,
                ov = 0,
                uv = 0,
                av = 0,
                fv = 0,
                lv = 0,
                cv = 0,
                hv = 0,
                pv = 0,
                dv = 0,
                vv = 0,
                mv = 0,
                gv = 0,
                yv = 0;
            var bv = 0,
                wv = 0,
                Ev = 0,
                Sv = 0,
                xv = 0,
                Tv = 0,
                Nv = 0,
                Cv = 0,
                kv = 0,
                Lv = 0,
                Av = 0,
                Ov = 0,
                Mv = 0,
                _v = 0,
                Dv = 0,
                Pv = 0,
                Hv = 0,
                Bv = 0,
                jv = 0,
                Fv = 0;
            var Iv = 0,
                qv = 0,
                Rv = 0,
                Uv = 0,
                zv = 0,
                Wv = 0,
                Xv = 0,
                Vv = 0,
                $v = 0,
                Jv = 0,
                Kv = 0,
                Qv = 0,
                Gv = 0,
                Yv = 0,
                Zv = 0,
                em = 0,
                tm = 0,
                nm = 0,
                rm = 0,
                im = 0;
            var sm = 0,
                om = 0,
                um = 0,
                am = 0,
                fm = 0,
                lm = 0,
                cm = 0,
                hm = 0,
                pm = 0,
                dm = 0,
                vm = 0,
                mm = 0,
                gm = 0,
                ym = 0,
                bm = 0,
                wm = 0,
                Em = 0,
                Sm = 0,
                xm = 0,
                Tm = 0;
            var Nm = 0,
                Cm = 0,
                km = 0,
                Lm = 0,
                Am = 0,
                Om = 0,
                Mm = 0,
                _m = 0,
                Dm = 0,
                Pm = 0,
                Hm = 0,
                Bm = 0,
                jm = 0,
                Fm = 0,
                Im = 0,
                qm = 0,
                Rm = 0,
                Um = 0,
                zm = 0,
                Wm = 0;
            var Xm = 0,
                Vm = 0,
                $m = 0,
                Jm = 0,
                Km = 0,
                Qm = 0,
                Gm = 0,
                Ym = 0,
                Zm = 0,
                eg = 0,
                tg = 0,
                ng = 0,
                rg = 0,
                ig = 0,
                sg = 0,
                og = 0,
                ug = 0,
                ag = 0,
                fg = 0,
                lg = 0;
            var cg = 0,
                hg = 0,
                pg = 0,
                dg = 0,
                vg = 0,
                mg = 0,
                gg = 0,
                yg = 0,
                bg = 0,
                wg = 0,
                Eg = 0,
                Sg = 0,
                xg = 0,
                Tg = 0,
                Ng = 0,
                Cg = 0,
                kg = 0,
                Lg = 0,
                Ag = 0,
                Og = 0;
            var Mg = 0,
                _g = 0,
                Dg = 0,
                Pg = 0,
                Hg = 0,
                Bg = 0,
                jg = 0,
                Fg = 0,
                Ig = 0,
                qg = 0,
                Rg = 0,
                Ug = 0,
                zg = 0,
                Wg = 0,
                Xg = 0,
                Vg = 0,
                $g = 0,
                Jg = 0,
                Kg = 0,
                Qg = 0;
            var Gg = 0,
                Yg = 0,
                Zg = 0,
                ey = 0,
                ty = 0,
                ny = 0,
                ry = 0,
                iy = 0,
                sy = 0,
                oy = 0,
                uy = 0,
                ay = 0,
                fy = 0,
                ly = 0,
                cy = 0,
                hy = 0,
                py = 0,
                dy = 0,
                vy = 0,
                my = 0;
            var gy = 0,
                yy = 0,
                by = 0,
                wy = 0,
                Ey = 0,
                Sy = 0,
                xy = 0,
                Ty = 0,
                Ny = 0,
                Cy = 0,
                ky = 0,
                Ly = 0,
                Ay = 0,
                Oy = 0,
                My = 0,
                _y = 0,
                Dy = 0,
                Py = 0,
                Hy = 0,
                By = 0;
            var jy = 0,
                Fy = 0,
                Iy = 0,
                qy = 0,
                Ry = 0,
                Uy = 0,
                zy = 0,
                Wy = 0,
                Xy = 0,
                Vy = 0,
                $y = 0,
                Jy = 0,
                Ky = 0,
                Qy = 0,
                Gy = 0,
                Yy = 0,
                Zy = 0,
                eb = 0,
                tb = 0,
                nb = 0;
            var rb = 0,
                ib = 0,
                sb = 0,
                ob = 0,
                ub = 0,
                ab = 0,
                fb = 0,
                lb = 0,
                cb = 0,
                hb = 0,
                pb = 0,
                db = 0,
                vb = 0,
                mb = 0,
                gb = 0,
                yb = 0,
                bb = 0,
                wb = 0,
                Eb = 0,
                Sb = 0;
            var xb = 0,
                Tb = 0,
                Nb = 0,
                Cb = 0,
                kb = 0,
                Lb = 0,
                Ab = 0,
                Ob = 0,
                Mb = 0,
                _b = 0,
                Db = 0,
                Pb = 0,
                Hb = 0,
                Bb = 0,
                jb = 0,
                Fb = 0,
                Ib = 0,
                qb = 0,
                Rb = 0,
                Ub = 0;
            var zb = 0,
                Wb = 0,
                Xb = 0,
                Vb = 0,
                $b = 0,
                Jb = 0,
                Kb = 0,
                Qb = 0,
                Gb = 0,
                Yb = 0,
                Zb = 0,
                ew = 0,
                tw = 0,
                nw = 0,
                rw = 0,
                iw = 0,
                sw = 0,
                ow = 0,
                uw = 0,
                aw = 0;
            var fw = 0,
                lw = 0,
                cw = 0,
                hw = 0,
                pw = 0,
                dw = 0,
                vw = 0,
                mw = 0,
                gw = 0,
                yw = 0,
                bw = 0,
                ww = 0,
                Ew = 0,
                Sw = 0,
                xw = 0,
                Tw = 0,
                Nw = 0,
                Cw = 0,
                kw = 0,
                Lw = 0;
            var Aw = 0,
                Ow = 0,
                Mw = 0,
                _w = 0,
                Dw = 0,
                Pw = 0,
                Hw = 0,
                Bw = 0,
                jw = 0,
                Fw = 0,
                Iw = 0,
                qw = 0,
                Rw = 0,
                Uw = 0,
                zw = 0,
                Ww = 0,
                Xw = 0,
                Vw = 0,
                $w = 0,
                Jw = 0;
            var Kw = 0,
                Qw = 0,
                Gw = 0,
                Yw = 0,
                Zw = 0,
                eE = 0,
                tE = 0,
                nE = 0,
                rE = 0,
                iE = 0,
                sE = 0,
                oE = 0,
                uE = 0,
                aE = 0,
                fE = 0,
                lE = 0,
                cE = 0,
                hE = 0,
                pE = 0,
                dE = 0;
            var vE = 0,
                mE = 0,
                gE = 0,
                yE = 0,
                bE = 0,
                wE = 0,
                EE = 0,
                SE = 0,
                xE = 0,
                TE = 0,
                NE = 0,
                CE = 0,
                kE = 0,
                LE = 0,
                AE = 0,
                OE = 0,
                ME = 0,
                _E = 0,
                DE = 0,
                PE = 0;
            var HE = 0,
                BE = 0,
                jE = 0,
                FE = 0,
                IE = 0,
                qE = 0,
                RE = 0,
                UE = 0,
                zE = 0,
                WE = 0,
                XE = 0,
                VE = 0,
                $E = 0,
                JE = 0,
                KE = 0,
                QE = 0,
                GE = 0,
                YE = 0,
                ZE = 0,
                eS = 0;
            var tS = 0,
                nS = 0,
                rS = 0,
                iS = 0,
                sS = 0,
                oS = 0,
                uS = 0,
                aS = 0,
                fS = 0,
                lS = 0,
                cS = 0,
                hS = 0,
                pS = 0,
                dS = 0,
                vS = 0,
                mS = 0,
                gS = 0,
                yS = 0,
                bS = 0,
                wS = 0;
            var ES = 0,
                SS = 0,
                xS = 0,
                TS = 0,
                NS = 0,
                CS = 0,
                kS = 0,
                LS = 0,
                AS = 0,
                OS = 0,
                MS = 0,
                _S = 0,
                DS = 0,
                PS = 0,
                HS = 0,
                BS = 0,
                jS = 0,
                FS = 0,
                IS = 0,
                qS = 0;
            var RS = 0,
                US = 0,
                zS = 0,
                WS = 0,
                XS = 0,
                VS = 0,
                $S = 0,
                JS = 0,
                KS = 0,
                QS = 0,
                GS = 0,
                YS = 0,
                ZS = 0,
                ex = 0,
                tx = 0,
                nx = 0,
                rx = 0,
                ix = 0,
                sx = 0,
                ox = 0;
            var ux = 0,
                ax = 0,
                fx = 0,
                lx = 0,
                cx = 0,
                hx = 0,
                px = 0,
                dx = 0,
                vx = 0,
                mx = 0,
                gx = 0,
                yx = 0,
                bx = 0,
                wx = 0,
                Ex = 0,
                Sx = 0,
                xx = 0,
                Tx = 0,
                Nx = 0,
                Cx = 0;
            var kx = 0,
                Lx = 0,
                Ax = 0,
                Ox = 0,
                Mx = 0,
                _x = 0,
                Dx = 0,
                Px = 0,
                Hx = 0,
                Bx = 0,
                jx = 0,
                Fx = 0,
                Ix = 0,
                qx = 0,
                Rx = 0,
                Ux = 0,
                zx = 0,
                Wx = 0,
                Xx = 0,
                Vx = 0;
            var $x = 0,
                Jx = 0,
                Kx = 0,
                Qx = 0,
                Gx = 0,
                Yx = 0,
                Zx = 0,
                eT = 0,
                tT = 0,
                nT = 0,
                rT = 0,
                iT = 0,
                sT = 0,
                oT = 0,
                uT = 0,
                aT = 0,
                fT = 0,
                lT = 0,
                cT = 0,
                hT = 0;
            var pT = 0,
                dT = 0,
                vT = 0,
                mT = 0,
                gT = 0,
                yT = 0,
                bT = 0,
                wT = 0,
                ET = 0,
                ST = 0,
                xT = 0,
                TT = 0,
                NT = 0,
                CT = 0,
                kT = 0,
                LT = 0,
                AT = 0,
                OT = 0,
                MT = 0,
                _T = 0;
            var DT = 0,
                PT = 0,
                HT = 0,
                BT = 0,
                jT = 0,
                FT = 0,
                IT = 0,
                qT = 0,
                RT = 0,
                UT = 0,
                zT = 0,
                WT = 0,
                XT = 0,
                VT = 0,
                $T = 0,
                JT = 0,
                KT = 0,
                QT = 0,
                GT = 0,
                YT = 0;
            var ZT = 0,
                eN = 0,
                tN = 0,
                nN = 0,
                rN = 0,
                iN = 0,
                sN = 0,
                oN = 0,
                uN = 0,
                aN = 0,
                fN = 0,
                lN = 0,
                cN = 0,
                hN = 0,
                pN = 0,
                dN = 0,
                vN = 0,
                mN = 0,
                gN = 0,
                yN = 0;
            var bN = 0,
                wN = 0,
                EN = 0,
                SN = 0,
                xN = 0,
                TN = 0,
                NN = 0,
                CN = 0,
                kN = 0,
                LN = 0,
                AN = 0,
                ON = 0,
                MN = 0,
                _N = 0,
                DN = 0,
                PN = 0,
                HN = 0,
                BN = 0,
                jN = 0,
                FN = 0;
            var IN = 0,
                qN = 0,
                RN = 0,
                UN = 0,
                zN = 0,
                WN = 0,
                XN = 0,
                VN = 0,
                $N = 0,
                JN = 0,
                KN = 0,
                QN = 0,
                GN = 0,
                YN = 0,
                ZN = 0,
                eC = 0,
                tC = 0,
                nC = 0,
                rC = 0,
                iC = 0;
            var sC = 0,
                oC = 0,
                uC = 0,
                aC = 0,
                fC = 0,
                lC = 0,
                cC = 0,
                hC = 0,
                pC = 0,
                dC = 0,
                vC = 0,
                mC = 0,
                gC = 0,
                yC = 0,
                bC = 0,
                wC = 0,
                EC = 0,
                SC = 0,
                xC = 0,
                TC = 0;
            var NC = 0,
                CC = 0,
                kC = 0,
                LC = 0,
                AC = 0,
                OC = 0,
                MC = 0,
                _C = 0,
                DC = 0,
                PC = 0,
                HC = 0,
                BC = 0,
                jC = 0,
                FC = 0,
                IC = 0,
                qC = 0,
                RC = 0,
                UC = 0,
                zC = 0,
                WC = 0;
            var XC = 0,
                VC = 0,
                $C = 0;
            $C = c;
            c = c + 864 | 0;
            Nx = $C + 16 | 0;
            Qx = $C + 8 | 0;
            Lx = $C + 836 | 0;
            Cn = Lx;
            Gx = $C + 824 | 0;
            NN = $C + 568 | 0;
            kx = $C + 528 | 0;
            EC = $C;
            ZT = $C + 520 | 0;
            kn = (e | 0) != (0 | 0);
            js = kx + 40 | 0;
            Yu = js;
            nl = kx + 39 | 0;
            sh = EC + 4 | 0;
            ad = Gx + 12 | 0;
            cm = Gx + 11 | 0;
            dy = ad;
            gw = dy - Cn | 0;
            Ln = -2 - Cn | 0;
            Vr = dy + 2 | 0;
            ri = Nx + 288 | 0;
            di = Lx + 9 | 0;
            Ni = di;
            Bi = Lx + 8 | 0;
            Nr = 0;
            kr = 0;
            yo = t;
            _x = 0;
            zT = 0;
            JT = 0;
            e: while (1) {
                $i = (_x | 0) > -1;
                do {
                    if ($i) {
                        is = 2147483647 - _x | 0;
                        vs = (zT | 0) > (is | 0);
                        if (vs) {
                            Cs = zt() | 0;
                            s[Cs >> 2] = 75;
                            Dx = -1;
                            break
                        } else {
                            qs = zT + _x | 0;
                            Dx = qs;
                            break
                        }
                    } else {
                        Dx = _x
                    }
                } while (0);
                no = r[yo >> 0] | 0;
                Ao = no << 24 >> 24 == 0;
                if (Ao) {
                    VC = 344;
                    break
                } else {
                    Ar = no;
                    Go = yo
                }
                while (1) {
                    if (Ar << 24 >> 24 == 37) {
                        bu = Go;
                        _C = Go;
                        VC = 9;
                        break
                    } else if (Ar << 24 >> 24 == 0) {
                        nn = Go;
                        MC = Go;
                        break
                    }
                    qo = Go + 1 | 0;
                    mn = r[qo >> 0] | 0;
                    Ar = mn;
                    Go = qo
                }
                t: do {
                    if ((VC | 0) == 9) {
                        while (1) {
                            VC = 0;
                            au = bu + 1 | 0;
                            Ou = r[au >> 0] | 0;
                            Ru = Ou << 24 >> 24 == 37;
                            if (!Ru) {
                                nn = bu;
                                MC = _C;
                                break t
                            }
                            Zu = _C + 1 | 0;
                            la = bu + 2 | 0;
                            Ea = r[la >> 0] | 0;
                            _a = Ea << 24 >> 24 == 37;
                            if (_a) {
                                bu = la;
                                _C = Zu;
                                VC = 9
                            } else {
                                nn = la;
                                MC = Zu;
                                break
                            }
                        }
                    }
                } while (0);
                za = MC;
                ef = yo;
                hf = za - ef | 0;
                if (kn) {
                    Us(yo, hf, e) | 0
                }
                xf = (MC | 0) == (yo | 0);
                if (!xf) {
                    KT = JT;
                    Lr = kr;
                    Cr = Nr;
                    yo = nn;
                    _x = Dx;
                    zT = hf;
                    JT = KT;
                    kr = Lr;
                    Nr = Cr;
                    continue
                }
                Pf = nn + 1 | 0;
                Xf = r[Pf >> 0] | 0;
                rl = Xf << 24 >> 24;
                MT = rl + -48 | 0;
                TT = MT >>> 0 < 10;
                if (TT) {
                    dl = nn + 2 | 0;
                    Nl = r[dl >> 0] | 0;
                    Bl = Nl << 24 >> 24 == 36;
                    if (Bl) {
                        $l = nn + 3 | 0;
                        yn = r[$l >> 0] | 0;
                        vc = yn;
                        Tx = MT;
                        QT = 1;
                        fC = $l
                    } else {
                        vc = Xf;
                        Tx = -1;
                        QT = JT;
                        fC = Pf
                    }
                } else {
                    vc = Xf;
                    Tx = -1;
                    QT = JT;
                    fC = Pf
                }
                ic = vc << 24 >> 24;
                Cc = ic + -32 | 0;
                jc = Cc >>> 0 < 32;
                n: do {
                    if (jc) {
                        oh = ic;
                        up = vc;
                        sT = 0;
                        cC = fC;
                        while (1) {
                            Jc = oh + -32 | 0;
                            gh = 1 << Jc;
                            Lh = gh & 75913;
                            Ih = (Lh | 0) == 0;
                            if (Ih) {
                                Zd = up;
                                iT = sT;
                                hC = cC;
                                break n
                            }
                            Qh = up << 24 >> 24;
                            yp = Qh + -32 | 0;
                            Ap = 1 << yp;
                            qp = Ap | sT;
                            Gp = cC + 1 | 0;
                            fd = r[Gp >> 0] | 0;
                            wd = fd << 24 >> 24;
                            Md = wd + -32 | 0;
                            Ud = Md >>> 0 < 32;
                            if (Ud) {
                                oh = wd;
                                up = fd;
                                sT = qp;
                                cC = Gp
                            } else {
                                Zd = fd;
                                iT = qp;
                                hC = Gp;
                                break
                            }
                        }
                    } else {
                        Zd = vc;
                        iT = 0;
                        hC = fC
                    }
                } while (0);
                lv = Zd << 24 >> 24 == 42;
                do {
                    if (lv) {
                        Ev = hC + 1 | 0;
                        _v = r[Ev >> 0] | 0;
                        zv = _v << 24 >> 24;
                        BT = zv + -48 | 0;
                        kT = BT >>> 0 < 10;
                        if (kT) {
                            em = hC + 2 | 0;
                            hm = r[em >> 0] | 0;
                            xm = hm << 24 >> 24 == 36;
                            if (xm) {
                                Pm = u + (BT << 2) | 0;
                                s[Pm >> 2] = 10;
                                Xm = r[Ev >> 0] | 0;
                                ng = Xm << 24 >> 24;
                                pg = ng + -48 | 0;
                                Tg = o + (pg << 3) | 0;
                                Hg = Tg;
                                Vg = Hg;
                                ry = s[Vg >> 2] | 0;
                                vy = Hg + 4 | 0;
                                Cy = vy;
                                jy = s[Cy >> 2] | 0;
                                Jy = hC + 3 | 0;
                                GT = 1;
                                lC = Jy;
                                mC = ry
                            } else {
                                VC = 24
                            }
                        } else {
                            VC = 24
                        }
                        if ((VC | 0) == 24) {
                            VC = 0;
                            sb = (QT | 0) == 0;
                            if (!sb) {
                                v = -1;
                                VC = 362;
                                break e
                            }
                            if (!kn) {
                                An = Ev;
                                oT = iT;
                                YT = 0;
                                gC = 0;
                                break
                            }
                            PS = s[n >> 2] | 0;
                            mb = s[PS >> 2] | 0;
                            nx = PS + 4 | 0;
                            s[n >> 2] = nx;
                            GT = 0;
                            lC = Ev;
                            mC = mb
                        }
                        kb = (mC | 0) < 0;
                        if (kb) {
                            Fb = iT | 8192;
                            Kb = 0 - mC | 0;
                            An = lC;
                            oT = Fb;
                            YT = GT;
                            gC = Kb
                        } else {
                            An = lC;
                            oT = iT;
                            YT = GT;
                            gC = mC
                        }
                    } else {
                        ow = Zd << 24 >> 24;
                        PT = ow + -48 | 0;
                        LT = PT >>> 0 < 10;
                        if (LT) {
                            qw = ow;
                            bE = hC;
                            vT = 0;
                            while (1) {
                                yw = vT * 10 | 0;
                                Aw = qw + -48 | 0;
                                Gw = Aw + yw | 0;
                                aE = bE + 1 | 0;
                                OE = r[aE >> 0] | 0;
                                RE = OE << 24 >> 24;
                                _T = RE + -48 | 0;
                                NT = _T >>> 0 < 10;
                                if (NT) {
                                    qw = RE;
                                    bE = aE;
                                    vT = Gw
                                } else {
                                    break
                                }
                            }
                            YE = (Gw | 0) < 0;
                            if (YE) {
                                v = -1;
                                VC = 362;
                                break e
                            } else {
                                An = aE;
                                oT = iT;
                                YT = QT;
                                gC = Gw
                            }
                        } else {
                            An = hC;
                            oT = iT;
                            YT = QT;
                            gC = 0
                        }
                    }
                } while (0);
                fS = r[An >> 0] | 0;
                qn = fS << 24 >> 24 == 46;
                r: do {
                    if (qn) {
                        Gn = An + 1 | 0;
                        ar = r[Gn >> 0] | 0;
                        br = ar << 24 >> 24 == 42;
                        if (!br) {
                            fi = ar << 24 >> 24;
                            HT = fi + -48 | 0;
                            AT = HT >>> 0 < 10;
                            if (AT) {
                                hi = fi;
                                mi = Gn;
                                mT = 0
                            } else {
                                Or = Gn;
                                bN = 0;
                                break
                            }
                            while (1) {
                                li = mT * 10 | 0;
                                ci = hi + -48 | 0;
                                pi = ci + li | 0;
                                vi = mi + 1 | 0;
                                gi = r[vi >> 0] | 0;
                                yi = gi << 24 >> 24;
                                DT = yi + -48 | 0;
                                CT = DT >>> 0 < 10;
                                if (CT) {
                                    hi = yi;
                                    mi = vi;
                                    mT = pi
                                } else {
                                    Or = vi;
                                    bN = pi;
                                    break r
                                }
                            }
                        }
                        _r = An + 2 | 0;
                        Ur = r[_r >> 0] | 0;
                        zr = Ur << 24 >> 24;
                        jT = zr + -48 | 0;
                        OT = jT >>> 0 < 10;
                        if (OT) {
                            Wr = An + 3 | 0;
                            Xr = r[Wr >> 0] | 0;
                            $r = Xr << 24 >> 24 == 36;
                            if ($r) {
                                Jr = u + (jT << 2) | 0;
                                s[Jr >> 2] = 10;
                                Kr = r[_r >> 0] | 0;
                                Qr = Kr << 24 >> 24;
                                Gr = Qr + -48 | 0;
                                Yr = o + (Gr << 3) | 0;
                                Zr = Yr;
                                ei = Zr;
                                ti = s[ei >> 2] | 0;
                                ni = Zr + 4 | 0;
                                ii = ni;
                                si = s[ii >> 2] | 0;
                                oi = An + 4 | 0;
                                Or = oi;
                                bN = ti;
                                break
                            }
                        }
                        ui = (YT | 0) == 0;
                        if (!ui) {
                            v = -1;
                            VC = 362;
                            break e
                        }
                        if (kn) {
                            FS = s[n >> 2] | 0;
                            ai = s[FS >> 2] | 0;
                            fx = FS + 4 | 0;
                            s[n >> 2] = fx;
                            Or = _r;
                            bN = ai
                        } else {
                            Or = _r;
                            bN = 0
                        }
                    } else {
                        Or = An;
                        bN = -1
                    }
                } while (0);
                wi = Or;
                aC = 0;
                while (1) {
                    bi = r[wi >> 0] | 0;
                    Ei = bi << 24 >> 24;
                    Si = Ei + -65 | 0;
                    xi = Si >>> 0 > 57;
                    if (xi) {
                        v = -1;
                        VC = 362;
                        break e
                    }
                    Ti = wi + 1 | 0;
                    Ci = (133736 + (aC * 58 | 0) | 0) + Si | 0;
                    ki = r[Ci >> 0] | 0;
                    Li = ki & 255;
                    Ai = Li + -1 | 0;
                    Oi = Ai >>> 0 < 8;
                    if (Oi) {
                        wi = Ti;
                        aC = Li
                    } else {
                        break
                    }
                }
                Mi = ki << 24 >> 24 == 0;
                if (Mi) {
                    v = -1;
                    VC = 362;
                    break
                }
                _i = ki << 24 >> 24 == 19;
                Di = (Tx | 0) > -1;
                i: do {
                    if (_i) {
                        if (Di) {
                            v = -1;
                            VC = 362;
                            break e
                        } else {
                            Mr = Nr;
                            Dr = kr;
                            VC = 63
                        }
                    } else {
                        if (Di) {
                            Pi = u + (Tx << 2) | 0;
                            s[Pi >> 2] = Li;
                            Hi = o + (Tx << 3) | 0;
                            ji = Hi;
                            Fi = ji;
                            Ii = s[Fi >> 2] | 0;
                            qi = ji + 4 | 0;
                            Ri = qi;
                            Ui = s[Ri >> 2] | 0;
                            zi = Ii;
                            Mr = Ui;
                            Dr = zi;
                            VC = 63;
                            break
                        }
                        if (!kn) {
                            v = 0;
                            VC = 362;
                            break e
                        }
                        Wi = (ki & 255) > 20;
                        if (Wi) {
                            Bs = bi;
                            Ks = kr;
                            ko = Nr
                        } else {
                            do {
                                switch (Li | 0) {
                                    case 14:
                                        {
                                            IS = s[n >> 2] | 0;
                                            ds = s[IS >> 2] | 0;
                                            ox = IS + 4 | 0;
                                            s[n >> 2] = ox;
                                            un = ds & 65535;
                                            ms = un;
                                            Pr = ms;
                                            Hr = 0;
                                            VC = 64;
                                            break i;
                                            break
                                        };
                                    case 12:
                                        {
                                            BS = s[n >> 2] | 0;
                                            Zi = BS;
                                            es = Zi;
                                            ts = s[es >> 2] | 0;
                                            ns = Zi + 4 | 0;
                                            rs = ns;
                                            ss = s[rs >> 2] | 0;
                                            ix = BS + 8 | 0;
                                            s[n >> 2] = ix;
                                            os = ts;
                                            Pr = os;
                                            Hr = ss;
                                            VC = 64;
                                            break i;
                                            break
                                        };
                                    case 13:
                                        {
                                            jS = s[n >> 2] | 0;
                                            us = s[jS >> 2] | 0;
                                            sx = jS + 4 | 0;
                                            s[n >> 2] = sx;
                                            as = us & 65535;
                                            fs = as << 16 >> 16;
                                            ls = (fs | 0) < 0;
                                            cs = ls << 31 >> 31;
                                            sC = us << 16;
                                            hs = sC >> 16;
                                            ps = hs;
                                            Pr = ps;
                                            Hr = cs;
                                            VC = 64;
                                            break i;
                                            break
                                        };
                                    case 18:
                                        {
                                            zS = s[n >> 2] | 0;
                                            s[p >> 2] = s[zS >> 2];
                                            s[p + 4 >> 2] = s[zS + 4 >> 2];
                                            Ms = +l[p >> 3];
                                            cx = zS + 8 | 0;
                                            s[n >> 2] = cx;
                                            l[p >> 3] = Ms;
                                            _s = s[p >> 2] | 0;
                                            Ds = s[p + 4 >> 2] | 0;
                                            Ps = _s;
                                            Mr = Ds;
                                            Dr = Ps;
                                            VC = 63;
                                            break i;
                                            break
                                        };
                                    case 9:
                                        {
                                            KS = s[n >> 2] | 0;
                                            Xi = s[KS >> 2] | 0;
                                            wx = KS + 4 | 0;
                                            s[n >> 2] = wx;
                                            Pr = Xi;
                                            Hr = Nr;
                                            VC = 64;
                                            break i;
                                            break
                                        };
                                    case 11:
                                        {
                                            HS = s[n >> 2] | 0;
                                            Gi = s[HS >> 2] | 0;
                                            rx = HS + 4 | 0;
                                            s[n >> 2] = rx;
                                            Yi = Gi;
                                            Pr = Yi;
                                            Hr = 0;
                                            VC = 64;
                                            break i;
                                            break
                                        };
                                    case 15:
                                        {
                                            qS = s[n >> 2] | 0;
                                            gs = s[qS >> 2] | 0;
                                            ux = qS + 4 | 0;
                                            s[n >> 2] = ux;
                                            ys = gs & 255;
                                            bs = ys << 24 >> 24;
                                            ws = (bs | 0) < 0;
                                            Es = ws << 31 >> 31;
                                            iC = gs << 24;
                                            Ss = iC >> 24;
                                            xs = Ss;
                                            Pr = xs;
                                            Hr = Es;
                                            VC = 64;
                                            break i;
                                            break
                                        };
                                    case 17:
                                        {
                                            US = s[n >> 2] | 0;
                                            s[p >> 2] = s[US >> 2];
                                            s[p + 4 >> 2] = s[US + 4 >> 2];
                                            ks = +l[p >> 3];
                                            lx = US + 8 | 0;
                                            s[n >> 2] = lx;
                                            l[p >> 3] = ks;
                                            Ls = s[p >> 2] | 0;
                                            As = s[p + 4 >> 2] | 0;
                                            Os = Ls;
                                            Pr = Os;
                                            Hr = As;
                                            VC = 64;
                                            break i;
                                            break
                                        };
                                    case 10:
                                        {
                                            tx = s[n >> 2] | 0;
                                            Vi = s[tx >> 2] | 0;
                                            xx = tx + 4 | 0;
                                            s[n >> 2] = xx;
                                            Ji = (Vi | 0) < 0;
                                            Ki = Ji << 31 >> 31;
                                            Qi = Vi;
                                            Pr = Qi;
                                            Hr = Ki;
                                            VC = 64;
                                            break i;
                                            break
                                        };
                                    case 16:
                                        {
                                            RS = s[n >> 2] | 0;
                                            Ts = s[RS >> 2] | 0;
                                            ax = RS + 4 | 0;
                                            s[n >> 2] = ax;
                                            sn = Ts & 255;
                                            Ns = sn;
                                            Pr = Ns;
                                            Hr = 0;
                                            VC = 64;
                                            break i;
                                            break
                                        };
                                    default:
                                        {
                                            Pr = kr;
                                            Hr = Nr;
                                            VC = 64;
                                            break i
                                        }
                                }
                            } while (0)
                        }
                    }
                } while (0);
                if ((VC | 0) == 63) {
                    VC = 0;
                    if (kn) {
                        Pr = Dr;
                        Hr = Mr;
                        VC = 64
                    } else {
                        Nr = Mr;
                        kr = Dr;
                        yo = Ti;
                        _x = Dx;
                        zT = hf;
                        JT = YT;
                        continue
                    }
                }
                if ((VC | 0) == 64) {
                    VC = 0;
                    bn = r[wi >> 0] | 0;
                    Bs = bn;
                    Ks = Pr;
                    ko = Hr
                }
                Hs = Bs << 24 >> 24;
                Rs = (aC | 0) == 0;
                if (Rs) {
                    pC = Hs
                } else {
                    zs = Hs & 15;
                    Ws = (zs | 0) == 3;
                    Xs = Hs & -33;
                    a = Ws ? Xs : Hs;
                    pC = a
                }
                Vs = oT & 8192;
                $s = (Vs | 0) == 0;
                Js = oT & -65537;
                uT = $s ? oT : Js;
                s: do {
                    switch (pC | 0) {
                        case 117:
                            {
                                Cu = Ks;
                                Lu = ko;
                                CN = 0;
                                MN = 134200;
                                VC = 89;
                                break
                            };
                        case 65:
                        case 71:
                        case 70:
                        case 69:
                        case 97:
                        case 103:
                        case 102:
                        case 101:
                            {
                                Ef = Ks;
                                s[p >> 2] = Ef;
                                s[p + 4 >> 2] = ko;
                                Sf = +l[p >> 3];
                                s[Qx >> 2] = 0;
                                Tf = (ko | 0) < 0;
                                if (Tf) {
                                    Nf = -Sf;
                                    ct = Nf;
                                    kN = 1;
                                    DN = 134224
                                } else {
                                    Cf = uT & 2048;
                                    kf = (Cf | 0) == 0;
                                    if (kf) {
                                        Lf = uT & 1;
                                        Af = (Lf | 0) == 0;
                                        h = Af ? 134224 + 1 | 0 : 134224 + 6 | 0;
                                        ct = Sf;
                                        kN = Lf;
                                        DN = h
                                    } else {
                                        ct = Sf;
                                        kN = 1;
                                        DN = 134224 + 3 | 0
                                    }
                                }
                                l[p >> 3] = ct;
                                Of = s[p >> 2] | 0;
                                Mf = s[p + 4 >> 2] | 0;
                                _f = Mf & 2146435072;
                                Df = _f >>> 0 < 2146435072;
                                Hf = (_f | 0) == 2146435072;
                                Bf = 0 < 0;
                                jf = Hf & Bf;
                                Ff = Df | jf;
                                if (!Ff) {
                                    If = pC & 32;
                                    qf = (If | 0) != 0;
                                    Rf = qf ? 134248 : 134256;
                                    Uf = ct != ct | 0 != 0;
                                    if (Uf) {
                                        zf = qf ? 134264 : 134272;
                                        AN = 0;
                                        QN = zf
                                    } else {
                                        AN = kN;
                                        QN = Rf
                                    }
                                    Wf = AN + 3 | 0;
                                    Vf = uT & 8192;
                                    $f = (Vf | 0) == 0;
                                    Jf = (Wf | 0) < (gC | 0);
                                    iN = $f & Jf;
                                    if (iN) {
                                        Kf = gC - Wf | 0;
                                        Qf = Kf >>> 0 > 256;
                                        Gf = Qf ? 256 : Kf;
                                        eo(NN | 0, 32, Gf | 0) | 0;
                                        Yf = Kf >>> 0 > 255;
                                        if (Yf) {
                                            W = Kf;
                                            while (1) {
                                                Us(NN, 256, e) | 0;
                                                Zf = W + -256 | 0;
                                                el = Zf >>> 0 > 255;
                                                if (el) {
                                                    W = Zf
                                                } else {
                                                    S = Zf;
                                                    break
                                                }
                                            }
                                        } else {
                                            S = Kf
                                        }
                                        Us(NN, S, e) | 0
                                    }
                                    Us(DN, AN, e) | 0;
                                    Us(QN, 3, e) | 0;
                                    tl = uT & 73728;
                                    il = (tl | 0) == 8192;
                                    sN = il & Jf;
                                    if (sN) {
                                        sl = gC - Wf | 0;
                                        ol = sl >>> 0 > 256;
                                        ul = ol ? 256 : sl;
                                        eo(NN | 0, 32, ul | 0) | 0;
                                        al = sl >>> 0 > 255;
                                        if (al) {
                                            X = sl;
                                            while (1) {
                                                Us(NN, 256, e) | 0;
                                                fl = X + -256 | 0;
                                                ll = fl >>> 0 > 255;
                                                if (ll) {
                                                    X = fl
                                                } else {
                                                    N = fl;
                                                    break
                                                }
                                            }
                                        } else {
                                            N = sl
                                        }
                                        Us(NN, N, e) | 0
                                    }
                                    vC = Jf ? gC : Wf;
                                    Nr = ko;
                                    kr = Ks;
                                    yo = Ti;
                                    _x = Dx;
                                    zT = vC;
                                    JT = YT;
                                    continue e
                                }
                                cl = +Fs(ct, Qx);
                                hl = cl * 2;
                                pl = hl != 0;
                                if (pl) {
                                    vl = s[Qx >> 2] | 0;
                                    ml = vl + -1 | 0;
                                    s[Qx >> 2] = ml
                                }
                                gl = pC | 32;
                                yl = (gl | 0) == 97;
                                if (yl) {
                                    bl = pC & 32;
                                    wl = (bl | 0) == 0;
                                    El = DN + 9 | 0;
                                    _N = wl ? DN : El;
                                    Sl = kN | 2;
                                    xl = bN >>> 0 > 11;
                                    Tl = 12 - bN | 0;
                                    jN = xl ? 0 : Tl;
                                    Cl = (jN | 0) == 0;
                                    do {
                                        if (Cl) {
                                            ht = hl
                                        } else {
                                            FN = jN;
                                            IN = 8;
                                            while (1) {
                                                kl = FN + -1 | 0;
                                                Ll = IN * 16;
                                                Al = (kl | 0) == 0;
                                                if (Al) {
                                                    break
                                                } else {
                                                    FN = kl;
                                                    IN = Ll
                                                }
                                            }
                                            Ol = r[_N >> 0] | 0;
                                            Ml = Ol << 24 >> 24 == 45;
                                            if (Ml) {
                                                _l = -hl;
                                                Dl = _l - Ll;
                                                Pl = Ll + Dl;
                                                Hl = -Pl;
                                                ht = Hl;
                                                break
                                            } else {
                                                jl = hl + Ll;
                                                Fl = jl - Ll;
                                                ht = Fl;
                                                break
                                            }
                                        }
                                    } while (0);
                                    Il = s[Qx >> 2] | 0;
                                    ql = (Il | 0) < 0;
                                    Rl = 0 - Il | 0;
                                    Ul = ql ? Rl : Il;
                                    zl = (Ul | 0) < 0;
                                    if (zl) {
                                        Wl = (Ul | 0) < 0;
                                        Xl = Wl << 31 >> 31;
                                        ft = ad;
                                        Vl = Ul;
                                        Jl = Xl;
                                        while (1) {
                                            Kl = go(Vl | 0, Jl | 0, 10, 0) | 0;
                                            Ql = D;
                                            Gl = Kl | 48;
                                            Yl = Gl & 255;
                                            Zl = ft + -1 | 0;
                                            r[Zl >> 0] = Yl;
                                            ec = mo(Vl | 0, Jl | 0, 10, 0) | 0;
                                            tc = D;
                                            nc = Jl >>> 0 > 9;
                                            rc = (Jl | 0) == 9;
                                            sc = Vl >>> 0 > 4294967295;
                                            oc = rc & sc;
                                            uc = nc | oc;
                                            if (uc) {
                                                ft = Zl;
                                                Vl = ec;
                                                Jl = tc
                                            } else {
                                                break
                                            }
                                        }
                                        C = Zl;
                                        nt = ec
                                    } else {
                                        C = ad;
                                        nt = Ul
                                    }
                                    ac = (nt | 0) == 0;
                                    if (ac) {
                                        pt = C
                                    } else {
                                        gt = C;
                                        NC = nt;
                                        while (1) {
                                            fc = (NC >>> 0) % 10 & -1;
                                            lc = fc | 48;
                                            cc = lc & 255;
                                            hc = gt + -1 | 0;
                                            r[hc >> 0] = cc;
                                            pc = (NC >>> 0) / 10 & -1;
                                            dc = NC >>> 0 < 10;
                                            if (dc) {
                                                pt = hc;
                                                break
                                            } else {
                                                gt = hc;
                                                NC = pc
                                            }
                                        }
                                    }
                                    mc = (pt | 0) == (ad | 0);
                                    if (mc) {
                                        r[cm >> 0] = 48;
                                        Yx = cm
                                    } else {
                                        Yx = pt
                                    }
                                    gc = s[Qx >> 2] | 0;
                                    yc = gc >> 31;
                                    bc = yc & 2;
                                    wc = bc + 43 | 0;
                                    Ec = wc & 255;
                                    Sc = Yx + -1 | 0;
                                    r[Sc >> 0] = Ec;
                                    xc = pC + 15 | 0;
                                    Tc = xc & 255;
                                    Nc = Yx + -2 | 0;
                                    r[Nc >> 0] = Tc;
                                    kc = (bN | 0) > 0;
                                    Lc = uT & 8;
                                    Ac = (Lc | 0) == 0;
                                    if (kc) {
                                        if (Ac) {
                                            At = ht;
                                            zN = Lx;
                                            while (1) {
                                                Oc = ~~At;
                                                Mc = 134280 + Oc | 0;
                                                _c = r[Mc >> 0] | 0;
                                                Dc = _c & 255;
                                                Pc = Dc | bl;
                                                Hc = Pc & 255;
                                                Bc = zN + 1 | 0;
                                                r[zN >> 0] = Hc;
                                                Fc = +(Oc | 0);
                                                Ic = At - Fc;
                                                qc = Ic * 16;
                                                Rc = Bc;
                                                Uc = Rc - Cn | 0;
                                                zc = (Uc | 0) == 1;
                                                if (zc) {
                                                    Wc = zN + 2 | 0;
                                                    r[Bc >> 0] = 46;
                                                    JN = Wc
                                                } else {
                                                    JN = Bc
                                                }
                                                Xc = qc != 0;
                                                if (Xc) {
                                                    At = qc;
                                                    zN = JN
                                                } else {
                                                    VN = JN;
                                                    break
                                                }
                                            }
                                        } else {
                                            Lt = ht;
                                            UN = Lx;
                                            while (1) {
                                                Vc = ~~Lt;
                                                $c = 134280 + Vc | 0;
                                                Kc = r[$c >> 0] | 0;
                                                Qc = Kc & 255;
                                                Gc = Qc | bl;
                                                Yc = Gc & 255;
                                                Zc = UN + 1 | 0;
                                                r[UN >> 0] = Yc;
                                                eh = +(Vc | 0);
                                                th = Lt - eh;
                                                nh = th * 16;
                                                rh = Zc;
                                                ih = rh - Cn | 0;
                                                uh = (ih | 0) == 1;
                                                if (uh) {
                                                    ah = UN + 2 | 0;
                                                    r[Zc >> 0] = 46;
                                                    $N = ah
                                                } else {
                                                    $N = Zc
                                                }
                                                fh = nh != 0;
                                                if (fh) {
                                                    Lt = nh;
                                                    UN = $N
                                                } else {
                                                    VN = $N;
                                                    break
                                                }
                                            }
                                        }
                                    } else {
                                        if (Ac) {
                                            Ot = ht;
                                            WN = Lx;
                                            while (1) {
                                                lh = ~~Ot;
                                                ch = 134280 + lh | 0;
                                                hh = r[ch >> 0] | 0;
                                                ph = hh & 255;
                                                dh = ph | bl;
                                                vh = dh & 255;
                                                mh = WN + 1 | 0;
                                                r[WN >> 0] = vh;
                                                yh = +(lh | 0);
                                                bh = Ot - yh;
                                                wh = bh * 16;
                                                Eh = mh;
                                                Sh = Eh - Cn | 0;
                                                xh = (Sh | 0) == 1;
                                                Th = wh != 0;
                                                cN = xh & Th;
                                                if (cN) {
                                                    Nh = WN + 2 | 0;
                                                    r[mh >> 0] = 46;
                                                    KN = Nh
                                                } else {
                                                    KN = mh
                                                }
                                                if (Th) {
                                                    Ot = wh;
                                                    WN = KN
                                                } else {
                                                    VN = KN;
                                                    break
                                                }
                                            }
                                        } else {
                                            kt = ht;
                                            RN = Lx;
                                            while (1) {
                                                Ch = ~~kt;
                                                kh = 134280 + Ch | 0;
                                                Ah = r[kh >> 0] | 0;
                                                Oh = Ah & 255;
                                                Mh = Oh | bl;
                                                _h = Mh & 255;
                                                Dh = RN + 1 | 0;
                                                r[RN >> 0] = _h;
                                                Ph = +(Ch | 0);
                                                Hh = kt - Ph;
                                                Bh = Hh * 16;
                                                jh = Dh;
                                                Fh = jh - Cn | 0;
                                                qh = (Fh | 0) == 1;
                                                if (qh) {
                                                    Rh = RN + 2 | 0;
                                                    r[Dh >> 0] = 46;
                                                    XN = Rh
                                                } else {
                                                    XN = Dh
                                                }
                                                Uh = Bh != 0;
                                                if (Uh) {
                                                    kt = Bh;
                                                    RN = XN
                                                } else {
                                                    VN = XN;
                                                    break
                                                }
                                            }
                                        }
                                    }
                                    zh = (bN | 0) == 0;
                                    wn = VN;
                                    do {
                                        if (zh) {
                                            VC = 173
                                        } else {
                                            Wh = Ln + wn | 0;
                                            Xh = (Wh | 0) < (bN | 0);
                                            if (!Xh) {
                                                VC = 173;
                                                break
                                            }
                                            Vh = Nc;
                                            $h = Vr + bN | 0;
                                            Jh = $h - Vh | 0;
                                            WT = Jh
                                        }
                                    } while (0);
                                    if ((VC | 0) == 173) {
                                        VC = 0;
                                        Kh = Nc;
                                        Gh = gw - Kh | 0;
                                        Yh = Gh + wn | 0;
                                        WT = Yh
                                    }
                                    Zh = WT + Sl | 0;
                                    ep = uT & 73728;
                                    tp = (ep | 0) == 0;
                                    np = (Zh | 0) < (gC | 0);
                                    uN = tp & np;
                                    if (uN) {
                                        rp = gC - Zh | 0;
                                        ip = rp >>> 0 > 256;
                                        sp = ip ? 256 : rp;
                                        eo(NN | 0, 32, sp | 0) | 0;
                                        op = rp >>> 0 > 255;
                                        if (op) {
                                            $ = rp;
                                            while (1) {
                                                Us(NN, 256, e) | 0;
                                                ap = $ + -256 | 0;
                                                fp = ap >>> 0 > 255;
                                                if (fp) {
                                                    $ = ap
                                                } else {
                                                    L = ap;
                                                    break
                                                }
                                            }
                                        } else {
                                            L = rp
                                        }
                                        Us(NN, L, e) | 0
                                    }
                                    Us(_N, Sl, e) | 0;
                                    lp = (ep | 0) == 65536;
                                    fN = lp & np;
                                    if (fN) {
                                        cp = gC - Zh | 0;
                                        hp = cp >>> 0 > 256;
                                        pp = hp ? 256 : cp;
                                        eo(NN | 0, 48, pp | 0) | 0;
                                        dp = cp >>> 0 > 255;
                                        if (dp) {
                                            K = cp;
                                            while (1) {
                                                Us(NN, 256, e) | 0;
                                                vp = K + -256 | 0;
                                                mp = vp >>> 0 > 255;
                                                if (mp) {
                                                    K = vp
                                                } else {
                                                    O = vp;
                                                    break
                                                }
                                            }
                                        } else {
                                            O = cp
                                        }
                                        Us(NN, O, e) | 0
                                    }
                                    gp = wn - Cn | 0;
                                    Us(Lx, gp, e) | 0;
                                    bp = Nc;
                                    wp = dy - bp | 0;
                                    Ep = WT - wp | 0;
                                    Sp = Ep - gp | 0;
                                    xp = (Sp | 0) > 0;
                                    if (xp) {
                                        Tp = Sp >>> 0 > 256;
                                        Np = Tp ? 256 : Sp;
                                        eo(NN | 0, 48, Np | 0) | 0;
                                        Cp = Sp >>> 0 > 255;
                                        if (Cp) {
                                            G = Sp;
                                            while (1) {
                                                Us(NN, 256, e) | 0;
                                                kp = G + -256 | 0;
                                                Lp = kp >>> 0 > 255;
                                                if (Lp) {
                                                    G = kp
                                                } else {
                                                    _ = kp;
                                                    break
                                                }
                                            }
                                        } else {
                                            _ = Sp
                                        }
                                        Us(NN, _, e) | 0
                                    }
                                    Us(Nc, wp, e) | 0;
                                    Op = (ep | 0) == 8192;
                                    hN = Op & np;
                                    if (hN) {
                                        Mp = gC - Zh | 0;
                                        _p = Mp >>> 0 > 256;
                                        Dp = _p ? 256 : Mp;
                                        eo(NN | 0, 32, Dp | 0) | 0;
                                        Pp = Mp >>> 0 > 255;
                                        if (Pp) {
                                            Y = Mp;
                                            while (1) {
                                                Us(NN, 256, e) | 0;
                                                Hp = Y + -256 | 0;
                                                Bp = Hp >>> 0 > 255;
                                                if (Bp) {
                                                    Y = Hp
                                                } else {
                                                    P = Hp;
                                                    break
                                                }
                                            }
                                        } else {
                                            P = Mp
                                        }
                                        Us(NN, P, e) | 0
                                    }
                                    yC = np ? gC : Zh;
                                    Nr = ko;
                                    kr = Ks;
                                    yo = Ti;
                                    _x = Dx;
                                    zT = yC;
                                    JT = YT;
                                    continue e
                                }
                                jp = (bN | 0) < 0;
                                hn = jp ? 6 : bN;
                                if (pl) {
                                    Fp = hl * 268435456;
                                    Ip = s[Qx >> 2] | 0;
                                    Rp = Ip + -28 | 0;
                                    s[Qx >> 2] = Rp;
                                    qt = Fp;
                                    Up = Rp
                                } else {
                                    gn = s[Qx >> 2] | 0;
                                    qt = hl;
                                    Up = gn
                                }
                                zp = (Up | 0) < 0;
                                Rt = zp ? Nx : ri;
                                Wt = qt;
                                OC = Rt;
                                while (1) {
                                    Wp = ~~Wt >>> 0;
                                    s[OC >> 2] = Wp;
                                    Xp = OC + 4 | 0;
                                    Vp = +(Wp >>> 0);
                                    $p = Wt - Vp;
                                    Jp = $p * 1e9;
                                    Kp = Jp != 0;
                                    if (Kp) {
                                        Wt = Jp;
                                        OC = Xp
                                    } else {
                                        break
                                    }
                                }
                                dn = s[Qx >> 2] | 0;
                                Qp = (dn | 0) > 0;
                                if (Qp) {
                                    Yp = dn;
                                    xS = Rt;
                                    PC = Xp;
                                    while (1) {
                                        Zp = (Yp | 0) > 29;
                                        ed = Zp ? 29 : Yp;
                                        Hx = PC + -4 | 0;
                                        td = Hx >>> 0 < xS >>> 0;
                                        do {
                                            if (td) {
                                                NS = xS
                                            } else {
                                                Ax = 0;
                                                Bx = Hx;
                                                while (1) {
                                                    nd = s[Bx >> 2] | 0;
                                                    rd = to(nd | 0, 0, ed | 0) | 0;
                                                    id = D;
                                                    sd = ro(rd | 0, id | 0, Ax | 0, 0) | 0;
                                                    od = D;
                                                    ud = go(sd | 0, od | 0, 1e9, 0) | 0;
                                                    ld = D;
                                                    s[Bx >> 2] = ud;
                                                    cd = mo(sd | 0, od | 0, 1e9, 0) | 0;
                                                    hd = D;
                                                    Px = Bx + -4 | 0;
                                                    pd = Px >>> 0 < xS >>> 0;
                                                    if (pd) {
                                                        break
                                                    } else {
                                                        Ax = cd;
                                                        Bx = Px
                                                    }
                                                }
                                                dd = (cd | 0) == 0;
                                                if (dd) {
                                                    NS = xS;
                                                    break
                                                }
                                                vd = xS + -4 | 0;
                                                s[vd >> 2] = cd;
                                                NS = vd
                                            }
                                        } while (0);
                                        BC = PC;
                                        while (1) {
                                            md = BC >>> 0 > NS >>> 0;
                                            if (!md) {
                                                break
                                            }
                                            gd = BC + -4 | 0;
                                            yd = s[gd >> 2] | 0;
                                            bd = (yd | 0) == 0;
                                            if (bd) {
                                                BC = gd
                                            } else {
                                                break
                                            }
                                        }
                                        Ed = s[Qx >> 2] | 0;
                                        Sd = Ed - ed | 0;
                                        s[Qx >> 2] = Sd;
                                        xd = (Sd | 0) > 0;
                                        if (xd) {
                                            Yp = Sd;
                                            xS = NS;
                                            PC = BC
                                        } else {
                                            vn = Sd;
                                            SS = NS;
                                            DC = BC;
                                            break
                                        }
                                    }
                                } else {
                                    vn = dn;
                                    SS = Rt;
                                    DC = Xp
                                }
                                Td = (vn | 0) < 0;
                                o: do {
                                    if (Td) {
                                        Nd = hn + 25 | 0;
                                        Cd = (Nd | 0) / 9 & -1;
                                        kd = Cd + 1 | 0;
                                        Ld = (gl | 0) == 102;
                                        if (Ld) {
                                            Ad = Rt;
                                            Od = Rt + (kd << 2) | 0;
                                            Dd = vn;
                                            LS = SS;
                                            IC = DC;
                                            while (1) {
                                                _d = 0 - Dd | 0;
                                                Pd = (_d | 0) > 9;
                                                _t = Pd ? 9 : _d;
                                                Hd = LS >>> 0 < IC >>> 0;
                                                do {
                                                    if (Hd) {
                                                        av = 1 << _t;
                                                        nv = av + -1 | 0;
                                                        sv = 1e9 >>> _t;
                                                        Mx = 0;
                                                        Fx = LS;
                                                        while (1) {
                                                            ev = s[Fx >> 2] | 0;
                                                            tv = ev & nv;
                                                            rv = ev >>> _t;
                                                            iv = rv + Mx | 0;
                                                            s[Fx >> 2] = iv;
                                                            zd = rt(tv, sv) | 0;
                                                            ov = Fx + 4 | 0;
                                                            uv = ov >>> 0 < IC >>> 0;
                                                            if (uv) {
                                                                Mx = zd;
                                                                Fx = ov
                                                            } else {
                                                                break
                                                            }
                                                        }
                                                        Id = s[LS >> 2] | 0;
                                                        qd = (Id | 0) == 0;
                                                        Rd = LS + 4 | 0;
                                                        Kt = qd ? Rd : LS;
                                                        Wd = (zd | 0) == 0;
                                                        if (Wd) {
                                                            Gt = Kt;
                                                            RC = IC;
                                                            break
                                                        }
                                                        Xd = IC + 4 | 0;
                                                        s[IC >> 2] = zd;
                                                        Gt = Kt;
                                                        RC = Xd
                                                    } else {
                                                        Bd = s[LS >> 2] | 0;
                                                        jd = (Bd | 0) == 0;
                                                        Fd = LS + 4 | 0;
                                                        Qt = jd ? Fd : LS;
                                                        Gt = Qt;
                                                        RC = IC
                                                    }
                                                } while (0);
                                                Vd = RC;
                                                $d = Vd - Ad | 0;
                                                Jd = $d >> 2;
                                                Kd = (Jd | 0) > (kd | 0);
                                                Nn = Kd ? Od : RC;
                                                Qd = s[Qx >> 2] | 0;
                                                Gd = Qd + _t | 0;
                                                s[Qx >> 2] = Gd;
                                                Yd = (Gd | 0) < 0;
                                                if (Yd) {
                                                    Dd = Gd;
                                                    LS = Gt;
                                                    IC = Nn
                                                } else {
                                                    CS = Gt;
                                                    jC = Nn;
                                                    break o
                                                }
                                            }
                                        } else {
                                            cv = vn;
                                            kS = SS;
                                            FC = DC
                                        }
                                        while (1) {
                                            fv = 0 - cv | 0;
                                            hv = (fv | 0) > 9;
                                            Mt = hv ? 9 : fv;
                                            pv = kS >>> 0 < FC >>> 0;
                                            do {
                                                if (pv) {
                                                    gv = 1 << Mt;
                                                    yv = gv + -1 | 0;
                                                    bv = 1e9 >>> Mt;
                                                    Ox = 0;
                                                    jx = kS;
                                                    while (1) {
                                                        wv = s[jx >> 2] | 0;
                                                        Sv = wv & yv;
                                                        xv = wv >>> Mt;
                                                        Tv = xv + Ox | 0;
                                                        s[jx >> 2] = Tv;
                                                        Nv = rt(Sv, bv) | 0;
                                                        Cv = jx + 4 | 0;
                                                        kv = Cv >>> 0 < FC >>> 0;
                                                        if (kv) {
                                                            Ox = Nv;
                                                            jx = Cv
                                                        } else {
                                                            break
                                                        }
                                                    }
                                                    Lv = s[kS >> 2] | 0;
                                                    Av = (Lv | 0) == 0;
                                                    Ov = kS + 4 | 0;
                                                    Jt = Av ? Ov : kS;
                                                    Mv = (Nv | 0) == 0;
                                                    if (Mv) {
                                                        Zt = Jt;
                                                        qC = FC;
                                                        break
                                                    }
                                                    Dv = FC + 4 | 0;
                                                    s[FC >> 2] = Nv;
                                                    Zt = Jt;
                                                    qC = Dv
                                                } else {
                                                    dv = s[kS >> 2] | 0;
                                                    vv = (dv | 0) == 0;
                                                    mv = kS + 4 | 0;
                                                    Yt = vv ? mv : kS;
                                                    Zt = Yt;
                                                    qC = FC
                                                }
                                            } while (0);
                                            Pv = qC;
                                            Hv = Zt;
                                            Bv = Pv - Hv | 0;
                                            jv = Bv >> 2;
                                            Fv = (jv | 0) > (kd | 0);
                                            if (Fv) {
                                                Iv = Zt + (kd << 2) | 0;
                                                UC = Iv
                                            } else {
                                                UC = qC
                                            }
                                            qv = s[Qx >> 2] | 0;
                                            Rv = qv + Mt | 0;
                                            s[Qx >> 2] = Rv;
                                            Uv = (Rv | 0) < 0;
                                            if (Uv) {
                                                cv = Rv;
                                                kS = Zt;
                                                FC = UC
                                            } else {
                                                CS = Zt;
                                                jC = UC;
                                                break
                                            }
                                        }
                                    } else {
                                        CS = SS;
                                        jC = DC
                                    }
                                } while (0);
                                Wv = CS >>> 0 < jC >>> 0;
                                Xv = Rt;
                                do {
                                    if (Wv) {
                                        Vv = CS;
                                        $v = Xv - Vv | 0;
                                        Jv = $v >> 2;
                                        Kv = Jv * 9 | 0;
                                        Qv = s[CS >> 2] | 0;
                                        Gv = Qv >>> 0 < 10;
                                        if (Gv) {
                                            Vx = Kv;
                                            break
                                        } else {
                                            Xx = Kv;
                                            dT = 10
                                        }
                                        while (1) {
                                            Yv = dT * 10 | 0;
                                            Zv = Xx + 1 | 0;
                                            tm = Qv >>> 0 < Yv >>> 0;
                                            if (tm) {
                                                Vx = Zv;
                                                break
                                            } else {
                                                Xx = Zv;
                                                dT = Yv
                                            }
                                        }
                                    } else {
                                        Vx = 0
                                    }
                                } while (0);
                                nm = (gl | 0) != 102;
                                rm = nm ? Vx : 0;
                                im = hn - rm | 0;
                                sm = (gl | 0) == 103;
                                om = (hn | 0) != 0;
                                Dt = sm & om;
                                an = Dt << 31 >> 31;
                                um = im + an | 0;
                                am = jC;
                                fm = am - Xv | 0;
                                lm = fm >> 2;
                                pm = lm * 9 | 0;
                                dm = pm + -9 | 0;
                                vm = (um | 0) < (dm | 0);
                                if (vm) {
                                    mm = um + 9216 | 0;
                                    gm = (mm | 0) / 9 & -1;
                                    En = gm + -1023 | 0;
                                    ym = Rt + (En << 2) | 0;
                                    bm = (mm | 0) % 9 & -1;
                                    IT = bm + 1 | 0;
                                    wm = (IT | 0) < 9;
                                    if (wm) {
                                        bT = 10;
                                        qT = IT;
                                        while (1) {
                                            Em = bT * 10 | 0;
                                            FT = qT + 1 | 0;
                                            rT = (FT | 0) == 9;
                                            if (rT) {
                                                gT = Em;
                                                break
                                            } else {
                                                bT = Em;
                                                qT = FT
                                            }
                                        }
                                    } else {
                                        gT = 10
                                    }
                                    Sm = s[ym >> 2] | 0;
                                    Tm = (Sm >>> 0) % (gT >>> 0) & -1;
                                    Nm = (Tm | 0) == 0;
                                    if (Nm) {
                                        Sn = gm + -1022 | 0;
                                        Cm = Rt + (Sn << 2) | 0;
                                        km = (Cm | 0) == (jC | 0);
                                        if (km) {
                                            _S = CS;
                                            Rx = ym;
                                            Jx = Vx
                                        } else {
                                            VC = 233
                                        }
                                    } else {
                                        VC = 233
                                    }
                                    do {
                                        if ((VC | 0) == 233) {
                                            VC = 0;
                                            Lm = (Sm >>> 0) / (gT >>> 0) & -1;
                                            Am = Lm & 1;
                                            Om = (Am | 0) == 0;
                                            jt = Om ? 9007199254740992 : 9007199254740994;
                                            Mm = (gT | 0) / 2 & -1;
                                            _m = Tm >>> 0 < Mm >>> 0;
                                            do {
                                                if (_m) {
                                                    oC = .5
                                                } else {
                                                    Dm = (Tm | 0) == (Mm | 0);
                                                    if (Dm) {
                                                        xn = gm + -1022 | 0;
                                                        Hm = Rt + (xn << 2) | 0;
                                                        Bm = (Hm | 0) == (jC | 0);
                                                        if (Bm) {
                                                            oC = 1;
                                                            break
                                                        }
                                                    }
                                                    oC = 1.5
                                                }
                                            } while (0);
                                            jm = (kN | 0) == 0;
                                            do {
                                                if (jm) {
                                                    qN = jt;
                                                    uC = oC
                                                } else {
                                                    Fm = r[DN >> 0] | 0;
                                                    Im = Fm << 24 >> 24 == 45;
                                                    if (!Im) {
                                                        qN = jt;
                                                        uC = oC;
                                                        break
                                                    }
                                                    qm = jt * -1;
                                                    Rm = oC * -1;
                                                    qN = qm;
                                                    uC = Rm
                                                }
                                            } while (0);
                                            Um = Sm - Tm | 0;
                                            s[ym >> 2] = Um;
                                            zm = qN + uC;
                                            Wm = zm != qN;
                                            if (!Wm) {
                                                _S = CS;
                                                Rx = ym;
                                                Jx = Vx;
                                                break
                                            }
                                            Vm = Um + gT | 0;
                                            s[ym >> 2] = Vm;
                                            $m = Vm >>> 0 > 999999999;
                                            if ($m) {
                                                OS = CS;
                                                qx = ym;
                                                while (1) {
                                                    Jm = qx + -4 | 0;
                                                    s[qx >> 2] = 0;
                                                    Km = Jm >>> 0 < OS >>> 0;
                                                    if (Km) {
                                                        Qm = OS + -4 | 0;
                                                        s[Qm >> 2] = 0;
                                                        MS = Qm
                                                    } else {
                                                        MS = OS
                                                    }
                                                    Gm = s[Jm >> 2] | 0;
                                                    Ym = Gm + 1 | 0;
                                                    s[Jm >> 2] = Ym;
                                                    Zm = Ym >>> 0 > 999999999;
                                                    if (Zm) {
                                                        OS = MS;
                                                        qx = Jm
                                                    } else {
                                                        AS = MS;
                                                        Ix = Jm;
                                                        break
                                                    }
                                                }
                                            } else {
                                                AS = CS;
                                                Ix = ym
                                            }
                                            eg = AS;
                                            tg = Xv - eg | 0;
                                            rg = tg >> 2;
                                            ig = rg * 9 | 0;
                                            sg = s[AS >> 2] | 0;
                                            og = sg >>> 0 < 10;
                                            if (og) {
                                                _S = AS;
                                                Rx = Ix;
                                                Jx = ig;
                                                break
                                            } else {
                                                $x = ig;
                                                wT = 10
                                            }
                                            while (1) {
                                                ug = wT * 10 | 0;
                                                ag = $x + 1 | 0;
                                                fg = sg >>> 0 < ug >>> 0;
                                                if (fg) {
                                                    _S = AS;
                                                    Rx = Ix;
                                                    Jx = ag;
                                                    break
                                                } else {
                                                    $x = ag;
                                                    wT = ug
                                                }
                                            }
                                        }
                                    } while (0);
                                    lg = Rx + 4 | 0;
                                    cg = jC >>> 0 > lg >>> 0;
                                    Tn = cg ? lg : jC;
                                    DS = _S;
                                    Kx = Jx;
                                    XC = Tn
                                } else {
                                    DS = CS;
                                    Kx = Vx;
                                    XC = jC
                                }
                                hg = 0 - Kx | 0;
                                WC = XC;
                                while (1) {
                                    dg = WC >>> 0 > DS >>> 0;
                                    if (!dg) {
                                        tn = 0;
                                        break
                                    }
                                    vg = WC + -4 | 0;
                                    mg = s[vg >> 2] | 0;
                                    gg = (mg | 0) == 0;
                                    if (gg) {
                                        WC = vg
                                    } else {
                                        tn = 1;
                                        break
                                    }
                                }
                                do {
                                    if (sm) {
                                        yg = (hn | 0) == 0;
                                        bg = yg & 1;
                                        d = bg + hn | 0;
                                        wg = (d | 0) > (Kx | 0);
                                        Eg = (Kx | 0) > -5;
                                        yN = wg & Eg;
                                        if (yN) {
                                            Sg = pC + -1 | 0;
                                            fn = d + -1 | 0;
                                            xg = fn - Kx | 0;
                                            ot = Sg;
                                            Bt = xg
                                        } else {
                                            Ng = pC + -2 | 0;
                                            Cg = d + -1 | 0;
                                            ot = Ng;
                                            Bt = Cg
                                        }
                                        kg = uT & 8;
                                        Lg = (kg | 0) == 0;
                                        if (!Lg) {
                                            vt = ot;
                                            Ut = Bt;
                                            break
                                        }
                                        do {
                                            if (tn) {
                                                Ag = WC + -4 | 0;
                                                Og = s[Ag >> 2] | 0;
                                                Mg = (Og | 0) == 0;
                                                if (Mg) {
                                                    UT = 9;
                                                    break
                                                }
                                                _g = (Og >>> 0) % 10 & -1;
                                                Dg = (_g | 0) == 0;
                                                if (Dg) {
                                                    ST = 10;
                                                    RT = 0
                                                } else {
                                                    UT = 0;
                                                    break
                                                }
                                                while (1) {
                                                    Pg = ST * 10 | 0;
                                                    Bg = RT + 1 | 0;
                                                    jg = (Og >>> 0) % (Pg >>> 0) & -1;
                                                    Fg = (jg | 0) == 0;
                                                    if (Fg) {
                                                        ST = Pg;
                                                        RT = Bg
                                                    } else {
                                                        UT = Bg;
                                                        break
                                                    }
                                                }
                                            } else {
                                                UT = 9
                                            }
                                        } while (0);
                                        Ig = ot | 32;
                                        qg = (Ig | 0) == 102;
                                        Rg = WC;
                                        Ug = Rg - Xv | 0;
                                        zg = Ug >> 2;
                                        Wg = zg * 9 | 0;
                                        Xg = Wg + -9 | 0;
                                        if (qg) {
                                            $g = Xg - UT | 0;
                                            Jg = ($g | 0) < 0;
                                            Ft = Jg ? 0 : $g;
                                            Kg = (Bt | 0) < (Ft | 0);
                                            Pt = Kg ? Bt : Ft;
                                            vt = ot;
                                            Ut = Pt;
                                            break
                                        } else {
                                            Qg = Xg + Kx | 0;
                                            Gg = Qg - UT | 0;
                                            Yg = (Gg | 0) < 0;
                                            It = Yg ? 0 : Gg;
                                            Zg = (Bt | 0) < (It | 0);
                                            Ht = Zg ? Bt : It;
                                            vt = ot;
                                            Ut = Ht;
                                            break
                                        }
                                    } else {
                                        vt = pC;
                                        Ut = hn
                                    }
                                } while (0);
                                ey = (Ut | 0) != 0;
                                if (ey) {
                                    sy = 1
                                } else {
                                    ty = uT & 8;
                                    ny = (ty | 0) != 0;
                                    sy = ny
                                }
                                iy = sy & 1;
                                oy = vt | 32;
                                uy = (oy | 0) == 102;
                                if (uy) {
                                    ay = (Kx | 0) > 0;
                                    fy = ay ? Kx : 0;
                                    pn = fy;
                                    nT = 0
                                } else {
                                    ly = (Kx | 0) < 0;
                                    cy = ly ? hg : Kx;
                                    hy = (cy | 0) < 0;
                                    if (hy) {
                                        py = (cy | 0) < 0;
                                        my = py << 31 >> 31;
                                        lt = ad;
                                        gy = cy;
                                        yy = my;
                                        while (1) {
                                            by = go(gy | 0, yy | 0, 10, 0) | 0;
                                            wy = D;
                                            Ey = by | 48;
                                            Sy = Ey & 255;
                                            xy = lt + -1 | 0;
                                            r[xy >> 0] = Sy;
                                            Ty = mo(gy | 0, yy | 0, 10, 0) | 0;
                                            Ny = D;
                                            ky = yy >>> 0 > 9;
                                            Ly = (yy | 0) == 9;
                                            Ay = gy >>> 0 > 4294967295;
                                            Oy = Ly & Ay;
                                            My = ky | Oy;
                                            if (My) {
                                                lt = xy;
                                                gy = Ty;
                                                yy = Ny
                                            } else {
                                                break
                                            }
                                        }
                                        B = xy;
                                        it = Ty
                                    } else {
                                        B = ad;
                                        it = cy
                                    }
                                    _y = (it | 0) == 0;
                                    if (_y) {
                                        eT = B
                                    } else {
                                        Et = B;
                                        AC = it;
                                        while (1) {
                                            Dy = (AC >>> 0) % 10 & -1;
                                            Py = Dy | 48;
                                            Hy = Py & 255;
                                            By = Et + -1 | 0;
                                            r[By >> 0] = Hy;
                                            Fy = (AC >>> 0) / 10 & -1;
                                            Iy = AC >>> 0 < 10;
                                            if (Iy) {
                                                eT = By;
                                                break
                                            } else {
                                                Et = By;
                                                AC = Fy
                                            }
                                        }
                                    }
                                    qy = eT;
                                    Ry = dy - qy | 0;
                                    Uy = (Ry | 0) < 2;
                                    if (Uy) {
                                        tT = eT;
                                        while (1) {
                                            zy = tT + -1 | 0;
                                            r[zy >> 0] = 48;
                                            Wy = zy;
                                            Xy = dy - Wy | 0;
                                            Vy = (Xy | 0) < 2;
                                            if (Vy) {
                                                tT = zy
                                            } else {
                                                Zx = zy;
                                                break
                                            }
                                        }
                                    } else {
                                        Zx = eT
                                    }
                                    $y = Kx >> 31;
                                    Ky = $y & 2;
                                    Qy = Ky + 43 | 0;
                                    Gy = Qy & 255;
                                    Yy = Zx + -1 | 0;
                                    r[Yy >> 0] = Gy;
                                    Zy = vt & 255;
                                    eb = Zx + -2 | 0;
                                    r[eb >> 0] = Zy;
                                    tb = eb;
                                    nb = dy - tb | 0;
                                    pn = nb;
                                    nT = eb
                                }
                                rb = kN + 1 | 0;
                                ib = rb + Ut | 0;
                                XT = ib + iy | 0;
                                ob = XT + pn | 0;
                                ub = uT & 73728;
                                ab = (ub | 0) == 0;
                                fb = (ob | 0) < (gC | 0);
                                dN = ab & fb;
                                if (dN) {
                                    lb = gC - ob | 0;
                                    cb = lb >>> 0 > 256;
                                    hb = cb ? 256 : lb;
                                    eo(NN | 0, 32, hb | 0) | 0;
                                    pb = lb >>> 0 > 255;
                                    if (pb) {
                                        et = lb;
                                        while (1) {
                                            Us(NN, 256, e) | 0;
                                            db = et + -256 | 0;
                                            vb = db >>> 0 > 255;
                                            if (vb) {
                                                et = db
                                            } else {
                                                j = db;
                                                break
                                            }
                                        }
                                    } else {
                                        j = lb
                                    }
                                    Us(NN, j, e) | 0
                                }
                                Us(DN, kN, e) | 0;
                                gb = (ub | 0) == 65536;
                                rN = gb & fb;
                                if (rN) {
                                    yb = gC - ob | 0;
                                    bb = yb >>> 0 > 256;
                                    wb = bb ? 256 : yb;
                                    eo(NN | 0, 48, wb | 0) | 0;
                                    Eb = yb >>> 0 > 255;
                                    if (Eb) {
                                        q = yb;
                                        while (1) {
                                            Us(NN, 256, e) | 0;
                                            Sb = q + -256 | 0;
                                            xb = Sb >>> 0 > 255;
                                            if (xb) {
                                                q = Sb
                                            } else {
                                                y = Sb;
                                                break
                                            }
                                        }
                                    } else {
                                        y = yb
                                    }
                                    Us(NN, y, e) | 0
                                }
                                do {
                                    if (uy) {
                                        Tb = DS >>> 0 > Rt >>> 0;
                                        BN = Tb ? Rt : DS;
                                        Ux = BN;
                                        while (1) {
                                            Nb = s[Ux >> 2] | 0;
                                            Cb = (Nb | 0) == 0;
                                            if (Cb) {
                                                dt = di
                                            } else {
                                                yt = di;
                                                CC = Nb;
                                                while (1) {
                                                    Lb = (CC >>> 0) % 10 & -1;
                                                    Ab = Lb | 48;
                                                    Ob = Ab & 255;
                                                    Mb = yt + -1 | 0;
                                                    r[Mb >> 0] = Ob;
                                                    _b = (CC >>> 0) / 10 & -1;
                                                    Db = CC >>> 0 < 10;
                                                    if (Db) {
                                                        dt = Mb;
                                                        break
                                                    } else {
                                                        yt = Mb;
                                                        CC = _b
                                                    }
                                                }
                                            }
                                            Pb = (Ux | 0) == (BN | 0);
                                            do {
                                                if (Pb) {
                                                    Ib = (dt | 0) == (di | 0);
                                                    if (!Ib) {
                                                        YN = dt;
                                                        break
                                                    }
                                                    r[Bi >> 0] = 48;
                                                    YN = Bi
                                                } else {
                                                    Hb = dt >>> 0 > Lx >>> 0;
                                                    if (Hb) {
                                                        GN = dt
                                                    } else {
                                                        YN = dt;
                                                        break
                                                    }
                                                    while (1) {
                                                        Bb = GN + -1 | 0;
                                                        r[Bb >> 0] = 48;
                                                        jb = Bb >>> 0 > Lx >>> 0;
                                                        if (jb) {
                                                            GN = Bb
                                                        } else {
                                                            YN = Bb;
                                                            break
                                                        }
                                                    }
                                                }
                                            } while (0);
                                            qb = YN;
                                            Rb = Ni - qb | 0;
                                            Us(YN, Rb, e) | 0;
                                            Ub = Ux + 4 | 0;
                                            zb = Ub >>> 0 > Rt >>> 0;
                                            if (zb) {
                                                break
                                            } else {
                                                Ux = Ub
                                            }
                                        }
                                        if (!ey) {
                                            Wb = uT & 8;
                                            Xb = (Wb | 0) == 0;
                                            if (Xb) {
                                                break
                                            }
                                        }
                                        Us(134296, 1, e) | 0;
                                        Vb = Ub >>> 0 < WC >>> 0;
                                        $b = (Ut | 0) > 0;
                                        mN = Vb & $b;
                                        if (mN) {
                                            Vt = Ut;
                                            zx = Ub;
                                            while (1) {
                                                Jb = s[zx >> 2] | 0;
                                                Qb = (Jb | 0) == 0;
                                                if (Qb) {
                                                    eC = di;
                                                    VC = 300
                                                } else {
                                                    bt = di;
                                                    kC = Jb;
                                                    while (1) {
                                                        Gb = (kC >>> 0) % 10 & -1;
                                                        Yb = Gb | 48;
                                                        Zb = Yb & 255;
                                                        ew = bt + -1 | 0;
                                                        r[ew >> 0] = Zb;
                                                        tw = (kC >>> 0) / 10 & -1;
                                                        nw = kC >>> 0 < 10;
                                                        if (nw) {
                                                            break
                                                        } else {
                                                            bt = ew;
                                                            kC = tw
                                                        }
                                                    }
                                                    rw = ew >>> 0 > Lx >>> 0;
                                                    if (rw) {
                                                        eC = ew;
                                                        VC = 300
                                                    } else {
                                                        ZN = ew
                                                    }
                                                }
                                                if ((VC | 0) == 300) {
                                                    while (1) {
                                                        VC = 0;
                                                        iw = eC + -1 | 0;
                                                        r[iw >> 0] = 48;
                                                        sw = iw >>> 0 > Lx >>> 0;
                                                        if (sw) {
                                                            eC = iw;
                                                            VC = 300
                                                        } else {
                                                            ZN = iw;
                                                            break
                                                        }
                                                    }
                                                }
                                                uw = (Vt | 0) > 9;
                                                aw = uw ? 9 : Vt;
                                                Us(ZN, aw, e) | 0;
                                                fw = zx + 4 | 0;
                                                lw = Vt + -9 | 0;
                                                cw = fw >>> 0 < WC >>> 0;
                                                hw = (lw | 0) > 0;
                                                vN = cw & hw;
                                                if (vN) {
                                                    Vt = lw;
                                                    zx = fw
                                                } else {
                                                    Xt = lw;
                                                    break
                                                }
                                            }
                                        } else {
                                            Xt = Ut
                                        }
                                        pw = (Xt | 0) > 0;
                                        if (!pw) {
                                            break
                                        }
                                        dw = Xt >>> 0 > 256;
                                        vw = dw ? 256 : Xt;
                                        eo(NN | 0, 48, vw | 0) | 0;
                                        mw = Xt >>> 0 > 255;
                                        if (mw) {
                                            R = Xt;
                                            while (1) {
                                                Us(NN, 256, e) | 0;
                                                bw = R + -256 | 0;
                                                ww = bw >>> 0 > 255;
                                                if (ww) {
                                                    R = bw
                                                } else {
                                                    b = bw;
                                                    break
                                                }
                                            }
                                        } else {
                                            b = Xt
                                        }
                                        Us(NN, b, e) | 0
                                    } else {
                                        Ew = DS + 4 | 0;
                                        zC = tn ? WC : Ew;
                                        Sw = (Ut | 0) > -1;
                                        do {
                                            if (Sw) {
                                                xw = uT & 8;
                                                ln = (xw | 0) != 0;
                                                $t = Ut;
                                                Wx = DS;
                                                while (1) {
                                                    Tw = s[Wx >> 2] | 0;
                                                    Nw = (Tw | 0) == 0;
                                                    if (Nw) {
                                                        VC = 311
                                                    } else {
                                                        wt = di;
                                                        LC = Tw;
                                                        while (1) {
                                                            Cw = (LC >>> 0) % 10 & -1;
                                                            kw = Cw | 48;
                                                            Lw = kw & 255;
                                                            Ow = wt + -1 | 0;
                                                            r[Ow >> 0] = Lw;
                                                            Mw = (LC >>> 0) / 10 & -1;
                                                            _w = LC >>> 0 < 10;
                                                            if (_w) {
                                                                break
                                                            } else {
                                                                wt = Ow;
                                                                LC = Mw
                                                            }
                                                        }
                                                        Dw = (Ow | 0) == (di | 0);
                                                        if (Dw) {
                                                            VC = 311
                                                        } else {
                                                            tC = Ow
                                                        }
                                                    }
                                                    if ((VC | 0) == 311) {
                                                        VC = 0;
                                                        r[Bi >> 0] = 48;
                                                        tC = Bi
                                                    }
                                                    Pw = (Wx | 0) == (DS | 0);
                                                    do {
                                                        if (Pw) {
                                                            Fw = tC + 1 | 0;
                                                            Us(tC, 1, e) | 0;
                                                            Iw = ($t | 0) > 0;
                                                            Cx = Iw | ln;
                                                            if (!Cx) {
                                                                rC = Fw;
                                                                break
                                                            }
                                                            Us(134296, 1, e) | 0;
                                                            rC = Fw
                                                        } else {
                                                            Hw = tC >>> 0 > Lx >>> 0;
                                                            if (Hw) {
                                                                nC = tC
                                                            } else {
                                                                rC = tC;
                                                                break
                                                            }
                                                            while (1) {
                                                                Bw = nC + -1 | 0;
                                                                r[Bw >> 0] = 48;
                                                                jw = Bw >>> 0 > Lx >>> 0;
                                                                if (jw) {
                                                                    nC = Bw
                                                                } else {
                                                                    rC = Bw;
                                                                    break
                                                                }
                                                            }
                                                        }
                                                    } while (0);
                                                    Rw = rC;
                                                    Uw = Ni - Rw | 0;
                                                    zw = (Uw | 0) < ($t | 0);
                                                    f = zw ? Uw : $t;
                                                    Us(rC, f, e) | 0;
                                                    Ww = $t - Uw | 0;
                                                    Xw = Wx + 4 | 0;
                                                    Vw = Xw >>> 0 < zC >>> 0;
                                                    $w = (Ww | 0) > -1;
                                                    gN = Vw & $w;
                                                    if (gN) {
                                                        $t = Ww;
                                                        Wx = Xw
                                                    } else {
                                                        break
                                                    }
                                                }
                                                Jw = (Ww | 0) > 0;
                                                if (!Jw) {
                                                    break
                                                }
                                                Kw = Ww >>> 0 > 256;
                                                Qw = Kw ? 256 : Ww;
                                                eo(NN | 0, 48, Qw | 0) | 0;
                                                Yw = Ww >>> 0 > 255;
                                                if (Yw) {
                                                    U = Ww;
                                                    while (1) {
                                                        Us(NN, 256, e) | 0;
                                                        Zw = U + -256 | 0;
                                                        eE = Zw >>> 0 > 255;
                                                        if (eE) {
                                                            U = Zw
                                                        } else {
                                                            w = Zw;
                                                            break
                                                        }
                                                    }
                                                } else {
                                                    w = Ww
                                                }
                                                Us(NN, w, e) | 0
                                            }
                                        } while (0);
                                        tE = nT;
                                        nE = dy - tE | 0;
                                        Us(nT, nE, e) | 0
                                    }
                                } while (0);
                                rE = (ub | 0) == 8192;
                                nN = rE & fb;
                                if (nN) {
                                    iE = gC - ob | 0;
                                    sE = iE >>> 0 > 256;
                                    oE = sE ? 256 : iE;
                                    eo(NN | 0, 32, oE | 0) | 0;
                                    uE = iE >>> 0 > 255;
                                    if (uE) {
                                        I = iE;
                                        while (1) {
                                            Us(NN, 256, e) | 0;
                                            fE = I + -256 | 0;
                                            lE = fE >>> 0 > 255;
                                            if (lE) {
                                                I = fE
                                            } else {
                                                g = fE;
                                                break
                                            }
                                        }
                                    } else {
                                        g = iE
                                    }
                                    Us(NN, g, e) | 0
                                }
                                wC = fb ? gC : ob;
                                Nr = ko;
                                kr = Ks;
                                yo = Ti;
                                _x = Dx;
                                zT = wC;
                                JT = YT;
                                continue e;
                                break
                            };
                        case 115:
                            {
                                Ca = (Ks | 0) == (0 | 0);
                                Nt = Ca ? 134216 : Ks;
                                ES = Nt;
                                VC = 99;
                                break
                            };
                        case 105:
                        case 100:
                            {
                                mu = Ks;
                                gu = (ko | 0) < 0;
                                if (gu) {
                                    yu = Zs(0, 0, mu | 0, ko | 0) | 0;
                                    wu = D;
                                    Eu = yu;
                                    Cu = Eu;
                                    Lu = wu;
                                    CN = 1;
                                    MN = 134200;
                                    VC = 89;
                                    break s
                                }
                                Su = uT & 2048;
                                xu = (Su | 0) == 0;
                                if (xu) {
                                    Tu = uT & 1;
                                    Nu = (Tu | 0) == 0;
                                    Tt = Nu ? 134200 : 134200 + 2 | 0;
                                    Cu = Ks;
                                    Lu = ko;
                                    CN = Tu;
                                    MN = Tt;
                                    VC = 89
                                } else {
                                    Cu = Ks;
                                    Lu = ko;
                                    CN = 1;
                                    MN = 134200 + 1 | 0;
                                    VC = 89
                                }
                                break
                            };
                        case 110:
                            {
                                switch (aC | 0) {
                                    case 7:
                                        {
                                            co = (Dx | 0) < 0;
                                            ho = co << 31 >> 31;
                                            po = Ks;
                                            vo = po;
                                            s[vo >> 2] = Dx;
                                            bo = po + 4 | 0;
                                            wo = bo;
                                            s[wo >> 2] = ho;
                                            Nr = ko;
                                            kr = Ks;
                                            yo = Ti;
                                            _x = Dx;
                                            zT = hf;
                                            JT = YT;
                                            continue e;
                                            break
                                        };
                                    case 2:
                                        {
                                            Gs = (Dx | 0) < 0;
                                            Ys = Gs << 31 >> 31;
                                            io = Ks;
                                            oo = io;
                                            s[oo >> 2] = Dx;
                                            uo = io + 4 | 0;
                                            ao = uo;
                                            s[ao >> 2] = Ys;
                                            Nr = ko;
                                            kr = Ks;
                                            yo = Ti;
                                            _x = Dx;
                                            zT = hf;
                                            JT = YT;
                                            continue e;
                                            break
                                        };
                                    case 3:
                                        {
                                            fo = Dx & 65535;
                                            i[Ks >> 1] = fo;
                                            Nr = ko;
                                            kr = Ks;
                                            yo = Ti;
                                            _x = Dx;
                                            zT = hf;
                                            JT = YT;
                                            continue e;
                                            break
                                        };
                                    case 4:
                                        {
                                            lo = Dx & 255;
                                            r[Ks >> 0] = lo;
                                            Nr = ko;
                                            kr = Ks;
                                            yo = Ti;
                                            _x = Dx;
                                            zT = hf;
                                            JT = YT;
                                            continue e;
                                            break
                                        };
                                    case 6:
                                        {
                                            s[Ks >> 2] = Dx;
                                            Nr = ko;
                                            kr = Ks;
                                            yo = Ti;
                                            _x = Dx;
                                            zT = hf;
                                            JT = YT;
                                            continue e;
                                            break
                                        };
                                    case 0:
                                        {
                                            s[Ks >> 2] = Dx;
                                            Nr = ko;
                                            kr = Ks;
                                            yo = Ti;
                                            _x = Dx;
                                            zT = hf;
                                            JT = YT;
                                            continue e;
                                            break
                                        };
                                    case 1:
                                        {
                                            s[Ks >> 2] = Dx;
                                            Nr = ko;
                                            kr = Ks;
                                            yo = Ti;
                                            _x = Dx;
                                            zT = hf;
                                            JT = YT;
                                            continue e;
                                            break
                                        };
                                    default:
                                        {
                                            Nr = ko;
                                            kr = Ks;
                                            yo = Ti;
                                            _x = Dx;
                                            zT = hf;
                                            JT = YT;
                                            continue e
                                        }
                                }
                                break
                            };
                        case 112:
                            {
                                Eo = bN >>> 0 > 8;
                                So = Eo ? bN : 8;
                                xo = uT | 8;
                                aT = xo;
                                wN = So;
                                dC = 120;
                                VC = 77;
                                break
                            };
                        case 99:
                            {
                                wa = Ks;
                                Sa = wa & 255;
                                r[nl >> 0] = Sa;
                                Br = ko;
                                jr = Ks;
                                TS = nl;
                                lT = Js;
                                TN = 1;
                                ON = 0;
                                HN = 134200;
                                HC = js;
                                break
                            };
                        case 67:
                            {
                                Pa = Ks;
                                s[EC >> 2] = Pa;
                                s[sh >> 2] = 0;
                                Fr = EC;
                                Ir = EC;
                                xN = -1;
                                VC = 104;
                                break
                            };
                        case 83:
                            {
                                Ha = (bN | 0) == 0;
                                if (Ha) {
                                    qr = Ks;
                                    Rr = Ks;
                                    hT = 0;
                                    VC = 110
                                } else {
                                    Fr = Ks;
                                    Ir = Ks;
                                    xN = bN;
                                    VC = 104
                                }
                                break
                            };
                        case 88:
                        case 120:
                            {
                                aT = uT;
                                wN = bN;
                                dC = pC;
                                VC = 77;
                                break
                            };
                        case 111:
                            {
                                Qo = Ks;
                                Yo = (Qo | 0) == 0;
                                Zo = (ko | 0) == 0;
                                eu = Yo & Zo;
                                if (eu) {
                                    x = js
                                } else {
                                    ut = js;
                                    nu = Qo;
                                    ou = ko;
                                    while (1) {
                                        tu = nu & 7;
                                        ru = tu | 48;
                                        iu = ru & 255;
                                        su = ut + -1 | 0;
                                        r[su >> 0] = iu;
                                        uu = so(nu | 0, ou | 0, 3) | 0;
                                        fu = D;
                                        lu = (uu | 0) == 0;
                                        cu = (fu | 0) == 0;
                                        hu = lu & cu;
                                        if (hu) {
                                            x = su;
                                            break
                                        } else {
                                            ut = su;
                                            nu = uu;
                                            ou = fu
                                        }
                                    }
                                }
                                pu = uT & 8;
                                du = (pu | 0) == 0;
                                if (du) {
                                    ua = Ks;
                                    ca = ko;
                                    wS = x;
                                    fT = uT;
                                    EN = bN;
                                    LN = 0;
                                    PN = 134200;
                                    VC = 94
                                } else {
                                    St = eu ? 134200 : 134200 + 5 | 0;
                                    vu = eu & 1;
                                    xt = vu ^ 1;
                                    ua = Ks;
                                    ca = ko;
                                    wS = x;
                                    fT = uT;
                                    EN = bN;
                                    LN = xt;
                                    PN = St;
                                    VC = 94
                                }
                                break
                            };
                        case 109:
                            {
                                xa = zt() | 0;
                                Ta = s[xa >> 2] | 0;
                                Na = Ct(Ta | 0) | 0;
                                ES = Na;
                                VC = 99;
                                break
                            };
                        default:
                            {
                                Br = ko;
                                jr = Ks;
                                TS = yo;
                                lT = uT;
                                TN = bN;
                                ON = 0;
                                HN = 134200;
                                HC = js
                            }
                    }
                } while (0);
                u: do {
                    if ((VC | 0) == 77) {
                        VC = 0;
                        To = Ks;
                        No = dC & 32;
                        Co = (To | 0) == 0;
                        Lo = (ko | 0) == 0;
                        Oo = Co & Lo;
                        if (Oo) {
                            ua = Ks;
                            ca = ko;
                            wS = js;
                            fT = aT;
                            EN = wN;
                            LN = 0;
                            PN = 134200;
                            VC = 94
                        } else {
                            st = js;
                            _o = To;
                            Io = ko;
                            while (1) {
                                Mo = _o & 15;
                                Do = 134280 + Mo | 0;
                                Po = r[Do >> 0] | 0;
                                Ho = Po & 255;
                                Bo = Ho | No;
                                jo = Bo & 255;
                                Fo = st + -1 | 0;
                                r[Fo >> 0] = jo;
                                Ro = so(_o | 0, Io | 0, 4) | 0;
                                Uo = D;
                                zo = (Ro | 0) == 0;
                                Wo = (Uo | 0) == 0;
                                Xo = zo & Wo;
                                if (Xo) {
                                    break
                                } else {
                                    st = Fo;
                                    _o = Ro;
                                    Io = Uo
                                }
                            }
                            Vo = aT & 8;
                            $o = (Vo | 0) == 0;
                            if ($o) {
                                ua = Ks;
                                ca = ko;
                                wS = Fo;
                                fT = aT;
                                EN = wN;
                                LN = 0;
                                PN = 134200;
                                VC = 94
                            } else {
                                Jo = dC >> 4;
                                Ko = 134200 + Jo | 0;
                                ua = Ks;
                                ca = ko;
                                wS = Fo;
                                fT = aT;
                                EN = wN;
                                LN = 2;
                                PN = Ko;
                                VC = 94
                            }
                        }
                    } else if ((VC | 0) == 89) {
                        VC = 0;
                        ku = Cu;
                        Au = Lu >>> 0 > 0;
                        Mu = (Lu | 0) == 0;
                        _u = ku >>> 0 > 4294967295;
                        Du = Mu & _u;
                        Pu = Au | Du;
                        if (Pu) {
                            at = js;
                            Hu = ku;
                            Bu = Lu;
                            while (1) {
                                ju = go(Hu | 0, Bu | 0, 10, 0) | 0;
                                Fu = D;
                                Iu = ju | 48;
                                qu = Iu & 255;
                                Uu = at + -1 | 0;
                                r[Uu >> 0] = qu;
                                zu = mo(Hu | 0, Bu | 0, 10, 0) | 0;
                                Wu = D;
                                Xu = Bu >>> 0 > 9;
                                Vu = (Bu | 0) == 9;
                                $u = Hu >>> 0 > 4294967295;
                                Ju = Vu & $u;
                                Ku = Xu | Ju;
                                if (Ku) {
                                    at = Uu;
                                    Hu = zu;
                                    Bu = Wu
                                } else {
                                    break
                                }
                            }
                            T = Uu;
                            tt = zu
                        } else {
                            T = js;
                            tt = ku
                        }
                        Qu = (tt | 0) == 0;
                        if (Qu) {
                            ua = Cu;
                            ca = Lu;
                            wS = T;
                            fT = uT;
                            EN = bN;
                            LN = CN;
                            PN = MN;
                            VC = 94
                        } else {
                            mt = T;
                            TC = tt;
                            while (1) {
                                Gu = (TC >>> 0) % 10 & -1;
                                ea = Gu | 48;
                                ta = ea & 255;
                                na = mt + -1 | 0;
                                r[na >> 0] = ta;
                                ra = (TC >>> 0) / 10 & -1;
                                ia = TC >>> 0 < 10;
                                if (ia) {
                                    ua = Cu;
                                    ca = Lu;
                                    wS = na;
                                    fT = uT;
                                    EN = bN;
                                    LN = CN;
                                    PN = MN;
                                    VC = 94;
                                    break
                                } else {
                                    mt = na;
                                    TC = ra
                                }
                            }
                        }
                    } else if ((VC | 0) == 99) {
                        VC = 0;
                        ka = Qs(ES, 0, bN) | 0;
                        La = (ka | 0) == (0 | 0);
                        if (La) {
                            Aa = ES + bN | 0;
                            Br = ko;
                            jr = Ks;
                            TS = ES;
                            lT = Js;
                            TN = bN;
                            ON = 0;
                            HN = 134200;
                            HC = Aa;
                            break
                        } else {
                            Oa = ka;
                            Ma = ES;
                            Da = Oa - Ma | 0;
                            Br = ko;
                            jr = Ks;
                            TS = ES;
                            lT = Js;
                            TN = Da;
                            ON = 0;
                            HN = 134200;
                            HC = ka;
                            break
                        }
                    } else if ((VC | 0) == 104) {
                        VC = 0;
                        pT = 0;
                        $T = 0;
                        SC = Fr;
                        while (1) {
                            Ia = s[SC >> 2] | 0;
                            qa = (Ia | 0) == 0;
                            if (qa) {
                                cT = pT;
                                VT = $T;
                                break
                            }
                            Ra = Is(ZT, Ia) | 0;
                            Ua = (Ra | 0) > -1;
                            if (!Ua) {
                                v = -1;
                                VC = 362;
                                break e
                            }
                            Wa = xN - pT | 0;
                            Xa = Ra >>> 0 > Wa >>> 0;
                            ja = Ra + pT | 0;
                            if (Xa) {
                                qr = Fr;
                                Rr = Ir;
                                hT = pT;
                                VC = 110;
                                break u
                            }
                            Ba = SC + 4 | 0;
                            Fa = ja >>> 0 < xN >>> 0;
                            if (Fa) {
                                pT = ja;
                                $T = Ra;
                                SC = Ba
                            } else {
                                cT = ja;
                                VT = Ra;
                                break
                            }
                        }
                        Va = (VT | 0) < 0;
                        if (Va) {
                            v = -1;
                            VC = 362;
                            break e
                        } else {
                            qr = Fr;
                            Rr = Ir;
                            hT = cT;
                            VC = 110
                        }
                    }
                } while (0);
                if ((VC | 0) == 94) {
                    VC = 0;
                    sa = (EN | 0) > -1;
                    oa = fT & -65537;
                    en = sa ? oa : fT;
                    aa = ua;
                    fa = (aa | 0) == 0;
                    ha = (ca | 0) == 0;
                    pa = fa & ha;
                    da = (EN | 0) == 0;
                    eN = pa & da;
                    if (eN) {
                        Br = ca;
                        jr = ua;
                        TS = js;
                        lT = en;
                        TN = 0;
                        ON = LN;
                        HN = PN;
                        HC = js
                    } else {
                        va = wS;
                        ma = Yu - va | 0;
                        ga = pa & 1;
                        ya = ga + ma | 0;
                        ba = (EN | 0) > (ya | 0);
                        SN = ba ? EN : ya;
                        Br = ca;
                        jr = ua;
                        TS = wS;
                        lT = en;
                        TN = SN;
                        ON = LN;
                        HN = PN;
                        HC = js
                    }
                } else if ((VC | 0) == 110) {
                    VC = 0;
                    $a = uT & 73728;
                    Ja = ($a | 0) == 0;
                    Ka = (hT | 0) < (gC | 0);
                    aN = Ja & Ka;
                    if (aN) {
                        Qa = gC - hT | 0;
                        Ga = Qa >>> 0 > 256;
                        Ya = Ga ? 256 : Qa;
                        eo(NN | 0, 32, Ya | 0) | 0;
                        Za = Qa >>> 0 > 255;
                        if (Za) {
                            J = Qa;
                            while (1) {
                                Us(NN, 256, e) | 0;
                                tf = J + -256 | 0;
                                nf = tf >>> 0 > 255;
                                if (nf) {
                                    J = tf
                                } else {
                                    A = tf;
                                    break
                                }
                            }
                        } else {
                            A = Qa
                        }
                        Us(NN, A, e) | 0
                    }
                    rf = (hT | 0) == 0;
                    a: do {
                        if (!rf) {
                            yT = 0;
                            xC = qr;
                            while (1) {
                                sf = s[xC >> 2] | 0;
                                of = (sf | 0) == 0;
                                if (of) {
                                    break a
                                }
                                uf = Is(ZT, sf) | 0;
                                af = uf + yT | 0;
                                ff = (af | 0) > (hT | 0);
                                if (ff) {
                                    break a
                                }
                                lf = xC + 4 | 0;
                                Us(ZT, uf, e) | 0;
                                cf = af >>> 0 < hT >>> 0;
                                if (cf) {
                                    yT = af;
                                    xC = lf
                                } else {
                                    break
                                }
                            }
                        }
                    } while (0);
                    pf = ($a | 0) == 8192;
                    lN = pf & Ka;
                    if (lN) {
                        df = gC - hT | 0;
                        vf = df >>> 0 > 256;
                        mf = vf ? 256 : df;
                        eo(NN | 0, 32, mf | 0) | 0;
                        gf = df >>> 0 > 255;
                        if (gf) {
                            Q = df;
                            while (1) {
                                Us(NN, 256, e) | 0;
                                yf = Q + -256 | 0;
                                bf = yf >>> 0 > 255;
                                if (bf) {
                                    Q = yf
                                } else {
                                    M = yf;
                                    break
                                }
                            }
                        } else {
                            M = df
                        }
                        Us(NN, M, e) | 0
                    }
                    wf = Ka ? gC : hT;
                    Nr = ko;
                    kr = Rr;
                    yo = Ti;
                    _x = Dx;
                    zT = wf;
                    JT = YT;
                    continue
                }
                cE = HC;
                hE = TS;
                pE = cE - hE | 0;
                dE = (TN | 0) < (pE | 0);
                cn = dE ? pE : TN;
                vE = ON + cn | 0;
                mE = (gC | 0) < (vE | 0);
                bC = mE ? vE : gC;
                gE = lT & 73728;
                yE = (gE | 0) == 0;
                wE = (vE | 0) < (bC | 0);
                pN = yE & wE;
                if (pN) {
                    EE = bC - vE | 0;
                    SE = EE >>> 0 > 256;
                    xE = SE ? 256 : EE;
                    eo(NN | 0, 32, xE | 0) | 0;
                    TE = EE >>> 0 > 255;
                    if (TE) {
                        Z = EE;
                        while (1) {
                            Us(NN, 256, e) | 0;
                            NE = Z + -256 | 0;
                            CE = NE >>> 0 > 255;
                            if (CE) {
                                Z = NE
                            } else {
                                H = NE;
                                break
                            }
                        }
                    } else {
                        H = EE
                    }
                    Us(NN, H, e) | 0
                }
                Us(HN, ON, e) | 0;
                kE = (gE | 0) == 65536;
                oN = kE & wE;
                if (oN) {
                    LE = bC - vE | 0;
                    AE = LE >>> 0 > 256;
                    ME = AE ? 256 : LE;
                    eo(NN | 0, 48, ME | 0) | 0;
                    _E = LE >>> 0 > 255;
                    if (_E) {
                        V = LE;
                        while (1) {
                            Us(NN, 256, e) | 0;
                            DE = V + -256 | 0;
                            PE = DE >>> 0 > 255;
                            if (PE) {
                                V = DE
                            } else {
                                k = DE;
                                break
                            }
                        }
                    } else {
                        k = LE
                    }
                    Us(NN, k, e) | 0
                }
                HE = (pE | 0) < (cn | 0);
                if (HE) {
                    BE = cn - pE | 0;
                    jE = BE >>> 0 > 256;
                    FE = jE ? 256 : BE;
                    eo(NN | 0, 48, FE | 0) | 0;
                    IE = BE >>> 0 > 255;
                    if (IE) {
                        z = BE;
                        while (1) {
                            Us(NN, 256, e) | 0;
                            qE = z + -256 | 0;
                            UE = qE >>> 0 > 255;
                            if (UE) {
                                z = qE
                            } else {
                                E = qE;
                                break
                            }
                        }
                    } else {
                        E = BE
                    }
                    Us(NN, E, e) | 0
                }
                Us(TS, pE, e) | 0;
                zE = (gE | 0) == 8192;
                tN = zE & wE;
                if (!tN) {
                    Nr = Br;
                    kr = jr;
                    yo = Ti;
                    _x = Dx;
                    zT = bC;
                    JT = YT;
                    continue
                }
                WE = bC - vE | 0;
                XE = WE >>> 0 > 256;
                VE = XE ? 256 : WE;
                eo(NN | 0, 32, VE | 0) | 0;
                $E = WE >>> 0 > 255;
                if ($E) {
                    F = WE;
                    while (1) {
                        Us(NN, 256, e) | 0;
                        JE = F + -256 | 0;
                        KE = JE >>> 0 > 255;
                        if (KE) {
                            F = JE
                        } else {
                            m = JE;
                            break
                        }
                    }
                } else {
                    m = WE
                }
                Us(NN, m, e) | 0;
                Nr = Br;
                kr = jr;
                yo = Ti;
                _x = Dx;
                zT = bC;
                JT = YT
            }
            if ((VC | 0) == 344) {
                QE = (e | 0) == (0 | 0);
                if (!QE) {
                    v = Dx;
                    c = $C;
                    return v | 0
                }
                GE = (JT | 0) == 0;
                if (GE) {
                    v = 0;
                    c = $C;
                    return v | 0
                } else {
                    ET = 1
                }
                while (1) {
                    ZE = u + (ET << 2) | 0;
                    eS = s[ZE >> 2] | 0;
                    tS = (eS | 0) == 0;
                    if (tS) {
                        xT = ET;
                        break
                    }
                    nS = o + (ET << 3) | 0;
                    rS = eS >>> 0 > 20;
                    f: do {
                        if (!rS) {
                            do {
                                switch (eS | 0) {
                                    case 9:
                                        {
                                            WS = s[n >> 2] | 0;
                                            iS = s[WS >> 2] | 0;
                                            hx = WS + 4 | 0;
                                            s[n >> 2] = hx;
                                            s[nS >> 2] = iS;
                                            break f;
                                            break
                                        };
                                    case 10:
                                        {
                                            XS = s[n >> 2] | 0;
                                            sS = s[XS >> 2] | 0;
                                            px = XS + 4 | 0;
                                            s[n >> 2] = px;
                                            oS = (sS | 0) < 0;
                                            uS = oS << 31 >> 31;
                                            aS = nS;
                                            lS = aS;
                                            s[lS >> 2] = sS;
                                            cS = aS + 4 | 0;
                                            hS = cS;
                                            s[hS >> 2] = uS;
                                            break f;
                                            break
                                        };
                                    case 11:
                                        {
                                            VS = s[n >> 2] | 0;
                                            pS = s[VS >> 2] | 0;
                                            dx = VS + 4 | 0;
                                            s[n >> 2] = dx;
                                            dS = nS;
                                            vS = dS;
                                            s[vS >> 2] = pS;
                                            mS = dS + 4 | 0;
                                            gS = mS;
                                            s[gS >> 2] = 0;
                                            break f;
                                            break
                                        };
                                    case 12:
                                        {
                                            $S = s[n >> 2] | 0;
                                            yS = $S;
                                            bS = yS;
                                            On = s[bS >> 2] | 0;
                                            Mn = yS + 4 | 0;
                                            _n = Mn;
                                            Dn = s[_n >> 2] | 0;
                                            vx = $S + 8 | 0;
                                            s[n >> 2] = vx;
                                            Pn = nS;
                                            Hn = Pn;
                                            s[Hn >> 2] = On;
                                            Bn = Pn + 4 | 0;
                                            jn = Bn;
                                            s[jn >> 2] = Dn;
                                            break f;
                                            break
                                        };
                                    case 13:
                                        {
                                            JS = s[n >> 2] | 0;
                                            Fn = s[JS >> 2] | 0;
                                            mx = JS + 4 | 0;
                                            s[n >> 2] = mx;
                                            In = Fn & 65535;
                                            Rn = In << 16 >> 16;
                                            Un = (Rn | 0) < 0;
                                            zn = Un << 31 >> 31;
                                            Wn = nS;
                                            Xn = Wn;
                                            s[Xn >> 2] = Rn;
                                            Vn = Wn + 4 | 0;
                                            $n = Vn;
                                            s[$n >> 2] = zn;
                                            break f;
                                            break
                                        };
                                    case 14:
                                        {
                                            QS = s[n >> 2] | 0;
                                            Jn = s[QS >> 2] | 0;
                                            gx = QS + 4 | 0;
                                            s[n >> 2] = gx;
                                            on = Jn & 65535;
                                            Kn = nS;
                                            Qn = Kn;
                                            s[Qn >> 2] = on;
                                            Yn = Kn + 4 | 0;
                                            Zn = Yn;
                                            s[Zn >> 2] = 0;
                                            break f;
                                            break
                                        };
                                    case 15:
                                        {
                                            GS = s[n >> 2] | 0;
                                            er = s[GS >> 2] | 0;
                                            yx = GS + 4 | 0;
                                            s[n >> 2] = yx;
                                            tr = er & 255;
                                            nr = tr << 24 >> 24;
                                            rr = (nr | 0) < 0;
                                            ir = rr << 31 >> 31;
                                            sr = nS;
                                            or = sr;
                                            s[or >> 2] = nr;
                                            ur = sr + 4 | 0;
                                            fr = ur;
                                            s[fr >> 2] = ir;
                                            break f;
                                            break
                                        };
                                    case 16:
                                        {
                                            YS = s[n >> 2] | 0;
                                            lr = s[YS >> 2] | 0;
                                            bx = YS + 4 | 0;
                                            s[n >> 2] = bx;
                                            rn = lr & 255;
                                            cr = nS;
                                            hr = cr;
                                            s[hr >> 2] = rn;
                                            pr = cr + 4 | 0;
                                            dr = pr;
                                            s[dr >> 2] = 0;
                                            break f;
                                            break
                                        };
                                    case 17:
                                        {
                                            ZS = s[n >> 2] | 0;
                                            s[p >> 2] = s[ZS >> 2];
                                            s[p + 4 >> 2] = s[ZS + 4 >> 2];
                                            vr = +l[p >> 3];
                                            Ex = ZS + 8 | 0;
                                            s[n >> 2] = Ex;
                                            l[nS >> 3] = vr;
                                            break f;
                                            break
                                        };
                                    case 18:
                                        {
                                            ex = s[n >> 2] | 0;
                                            s[p >> 2] = s[ex >> 2];
                                            s[p + 4 >> 2] = s[ex + 4 >> 2];
                                            mr = +l[p >> 3];
                                            Sx = ex + 8 | 0;
                                            s[n >> 2] = Sx;
                                            l[nS >> 3] = mr;
                                            break f;
                                            break
                                        };
                                    default:
                                        {
                                            break f
                                        }
                                }
                            } while (0)
                        }
                    } while (0);
                    gr = ET + 1 | 0;
                    yr = (gr | 0) < 10;
                    if (yr) {
                        ET = gr
                    } else {
                        v = 1;
                        VC = 362;
                        break
                    }
                }
                if ((VC | 0) == 362) {
                    c = $C;
                    return v | 0
                }
                while (1) {
                    Sr = u + (xT << 2) | 0;
                    xr = s[Sr >> 2] | 0;
                    Tr = (xr | 0) == 0;
                    wr = xT + 1 | 0;
                    if (!Tr) {
                        v = -1;
                        VC = 362;
                        break
                    }
                    Er = (wr | 0) < 10;
                    if (Er) {
                        xT = wr
                    } else {
                        v = 1;
                        VC = 362;
                        break
                    }
                }
                if ((VC | 0) == 362) {
                    c = $C;
                    return v | 0
                }
            } else if ((VC | 0) == 362) {
                c = $C;
                return v | 0
            }
            return 0 | 0
        }

        function $s(e, t, n, i) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            i = i | 0;
            var o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0;
            var k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0;
            H = c;
            c = c + 128 | 0;
            M = H + 112 | 0;
            _ = H;
            D = _ + 0 | 0;
            B = 134304 + 0 | 0;
            j = D + 112 | 0;
            do {
                s[D >> 2] = s[B >> 2] | 0;
                D = D + 4 | 0;
                B = B + 4 | 0
            } while ((D | 0) < (j | 0));
            l = t + -1 | 0;
            h = l >>> 0 > 2147483646;
            if (h) {
                x = (t | 0) == 0;
                if (x) {
                    a = M;
                    f = 1
                } else {
                    T = zt() | 0;
                    s[T >> 2] = 75;
                    u = -1;
                    c = H;
                    return u | 0
                }
            } else {
                a = e;
                f = t
            }
            N = a;
            C = -2 - N | 0;
            k = f >>> 0 > C >>> 0;
            o = k ? C : f;
            L = _ + 48 | 0;
            s[L >> 2] = o;
            A = _ + 20 | 0;
            s[A >> 2] = a;
            O = _ + 44 | 0;
            s[O >> 2] = a;
            p = a + o | 0;
            d = _ + 16 | 0;
            s[d >> 2] = p;
            v = _ + 28 | 0;
            s[v >> 2] = p;
            m = Xs(_, n, i) | 0;
            g = (o | 0) == 0;
            if (g) {
                u = m;
                c = H;
                return u | 0
            }
            y = s[A >> 2] | 0;
            b = s[d >> 2] | 0;
            w = (y | 0) == (b | 0);
            E = w << 31 >> 31;
            S = y + E | 0;
            r[S >> 0] = 0;
            u = m;
            c = H;
            return u | 0
        }

        function Js(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0,
                i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0;
            g = c;
            r = e + 16 | 0;
            i = s[r >> 2] | 0;
            o = e + 20 | 0;
            u = s[o >> 2] | 0;
            a = i;
            f = u;
            l = a - f | 0;
            h = l >>> 0 > n >>> 0;
            v = h ? n : l;
            oo(u | 0, t | 0, v | 0) | 0;
            p = s[o >> 2] | 0;
            d = p + v | 0;
            s[o >> 2] = d;
            c = g;
            return n | 0
        }

        function Ks(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0,
                i = 0,
                s = 0;
            s = c;
            r = $s(e, 2147483647, t, n) | 0;
            c = s;
            return r | 0
        }

        function Qs(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0;
            var C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                D = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0;
            var V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0;
            at = c;
            d = t & 255;
            v = e;
            C = v & 3;
            j = (C | 0) == 0;
            X = (n | 0) == 0;
            Y = j | X;
            e: do {
                if (Y) {
                    i = n;
                    p = X;
                    Z = e;
                    ut = 5
                } else {
                    V = t & 255;
                    u = n;
                    tt = e;
                    while (1) {
                        $ = r[tt >> 0] | 0;
                        J = $ << 24 >> 24 == V << 24 >> 24;
                        if (J) {
                            o = u;
                            et = tt;
                            ut = 6;
                            break e
                        }
                        K = tt + 1 | 0;
                        Q = u + -1 | 0;
                        m = K;
                        g = m & 3;
                        y = (g | 0) == 0;
                        b = (Q | 0) == 0;
                        G = y | b;
                        if (G) {
                            i = Q;
                            p = b;
                            Z = K;
                            ut = 5;
                            break
                        } else {
                            u = Q;
                            tt = K
                        }
                    }
                }
            } while (0);
            if ((ut | 0) == 5) {
                if (p) {
                    h = 0;
                    it = Z
                } else {
                    o = i;
                    et = Z;
                    ut = 6
                }
            }
            t: do {
                if ((ut | 0) == 6) {
                    w = r[et >> 0] | 0;
                    E = t & 255;
                    S = w << 24 >> 24 == E << 24 >> 24;
                    if (S) {
                        h = o;
                        it = et
                    } else {
                        x = rt(d, 16843009) | 0;
                        T = o >>> 0 > 3;
                        n: do {
                            if (T) {
                                f = o;
                                ot = et;
                                while (1) {
                                    N = s[ot >> 2] | 0;
                                    k = N ^ x;
                                    L = k + -16843009 | 0;
                                    A = k & -2139062144;
                                    O = A ^ -2139062144;
                                    M = O & L;
                                    _ = (M | 0) == 0;
                                    if (!_) {
                                        a = f;
                                        st = ot;
                                        break n
                                    }
                                    D = ot + 4 | 0;
                                    P = f + -4 | 0;
                                    H = P >>> 0 > 3;
                                    if (H) {
                                        f = P;
                                        ot = D
                                    } else {
                                        a = P;
                                        st = D;
                                        break
                                    }
                                }
                            } else {
                                a = o;
                                st = et
                            }
                        } while (0);
                        B = (a | 0) == 0;
                        if (B) {
                            h = 0;
                            it = st
                        } else {
                            l = a;
                            nt = st;
                            while (1) {
                                F = r[nt >> 0] | 0;
                                I = F << 24 >> 24 == E << 24 >> 24;
                                if (I) {
                                    h = l;
                                    it = nt;
                                    break t
                                }
                                q = nt + 1 | 0;
                                R = l + -1 | 0;
                                U = (R | 0) == 0;
                                if (U) {
                                    h = 0;
                                    it = q;
                                    break
                                } else {
                                    l = R;
                                    nt = q
                                }
                            }
                        }
                    }
                }
            } while (0);
            z = (h | 0) != 0;
            W = z ? it : 0;
            c = at;
            return W | 0
        }

        function Gs(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var i = 0,
                s = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0;
            E = c;
            s = (n | 0) == 0;
            e: do {
                if (s) {
                    a = 0
                } else {
                    i = n;
                    y = e;
                    b = t;
                    while (1) {
                        o = r[y >> 0] | 0;
                        f = r[b >> 0] | 0;
                        l = o << 24 >> 24 == f << 24 >> 24;
                        if (!l) {
                            break
                        }
                        h = i + -1 | 0;
                        p = y + 1 | 0;
                        d = b + 1 | 0;
                        v = (h | 0) == 0;
                        if (v) {
                            a = 0;
                            break e
                        } else {
                            i = h;
                            y = p;
                            b = d
                        }
                    }
                    m = o & 255;
                    g = f & 255;
                    u = m - g | 0;
                    a = u
                }
            } while (0);
            c = E;
            return a | 0
        }

        function Ys() {}

        function Zs(e, t, n, r) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            var i = 0,
                s = 0;
            i = e - n >>> 0;
            s = t - r >>> 0;
            s = t - r - (n >>> 0 > e >>> 0 | 0) >>> 0;
            return (D = s, i | 0) | 0
        }

        function eo(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var i = 0,
                o = 0,
                u = 0,
                a = 0;
            i = e + n | 0;
            if ((n | 0) >= 20) {
                t = t & 255;
                a = e & 3;
                o = t | t << 8 | t << 16 | t << 24;
                u = i & ~3;
                if (a) {
                    a = e + 4 - a | 0;
                    while ((e | 0) < (a | 0)) {
                        r[e >> 0] = t;
                        e = e + 1 | 0
                    }
                }
                while ((e | 0) < (u | 0)) {
                    s[e >> 2] = o;
                    e = e + 4 | 0
                }
            }
            while ((e | 0) < (i | 0)) {
                r[e >> 0] = t;
                e = e + 1 | 0
            }
            return e - n | 0
        }

        function to(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0;
            if ((n | 0) < 32) {
                r = (1 << n) - 1 | 0;
                D = t << n | (e & r << 32 - n) >>> 32 - n;
                return e << n
            }
            D = e << n - 32;
            return 0
        }

        function no(e) {
            e = e | 0;
            var t = 0;
            t = e;
            while (r[t >> 0] | 0) {
                t = t + 1 | 0
            }
            return t - e | 0
        }

        function ro(e, t, n, r) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            var i = 0,
                s = 0;
            i = e + n >>> 0;
            s = t + r + (i >>> 0 < e >>> 0 | 0) >>> 0;
            return (D = s, i | 0) | 0
        }

        function io(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0;
            if ((n | 0) < 32) {
                r = (1 << n) - 1 | 0;
                D = t >> n;
                return e >>> n | (t & r) << 32 - n
            }
            D = (t | 0) < 0 ? -1 : 0;
            return t >> n - 32 | 0
        }

        function so(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var r = 0;
            if ((n | 0) < 32) {
                r = (1 << n) - 1 | 0;
                D = t >>> n;
                return e >>> n | (t & r) << 32 - n
            }
            D = 0;
            return t >>> n - 32 | 0
        }

        function oo(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var i = 0;
            if ((n | 0) >= 4096) return Lt(e | 0, t | 0, n | 0) | 0;
            i = e | 0;
            if ((e & 3) == (t & 3)) {
                while (e & 3) {
                    if ((n | 0) == 0) return i | 0;
                    r[e >> 0] = r[t >> 0] | 0;
                    e = e + 1 | 0;
                    t = t + 1 | 0;
                    n = n - 1 | 0
                }
                while ((n | 0) >= 4) {
                    s[e >> 2] = s[t >> 2] | 0;
                    e = e + 4 | 0;
                    t = t + 4 | 0;
                    n = n - 4 | 0
                }
            }
            while ((n | 0) > 0) {
                r[e >> 0] = r[t >> 0] | 0;
                e = e + 1 | 0;
                t = t + 1 | 0;
                n = n - 1 | 0
            }
            return i | 0
        }

        function uo(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            var i = 0;
            if ((t | 0) < (e | 0) & (e | 0) < (t + n | 0)) {
                i = e;
                t = t + n | 0;
                e = e + n | 0;
                while ((n | 0) > 0) {
                    e = e - 1 | 0;
                    t = t - 1 | 0;
                    n = n - 1 | 0;
                    r[e >> 0] = r[t >> 0] | 0
                }
                e = i
            } else {
                oo(e, t, n) | 0
            }
            return e | 0
        }

        function ao(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0;
            do {
                r[(e + n | 0) >> 0] = r[(t + n | 0) >> 0];
                n = n + 1 | 0
            } while (r[t + (n - 1) >> 0] | 0);
            return e | 0
        }

        function fo(e) {
            e = e | 0;
            var t = 0;
            t = r[m + (e >>> 24) >> 0] | 0;
            if ((t | 0) < 8) return t | 0;
            t = r[m + (e >> 16 & 255) >> 0] | 0;
            if ((t | 0) < 8) return t + 8 | 0;
            t = r[m + (e >> 8 & 255) >> 0] | 0;
            if ((t | 0) < 8) return t + 16 | 0;
            return (r[m + (e & 255) >> 0] | 0) + 24 | 0
        }

        function lo(e) {
            e = e | 0;
            var t = 0;
            t = r[v + (e & 255) >> 0] | 0;
            if ((t | 0) < 8) return t | 0;
            t = r[v + (e >> 8 & 255) >> 0] | 0;
            if ((t | 0) < 8) return t + 8 | 0;
            t = r[v + (e >> 16 & 255) >> 0] | 0;
            if ((t | 0) < 8) return t + 16 | 0;
            return (r[v + (e >>> 24) >> 0] | 0) + 24 | 0
        }

        function co(e, t) {
            e = e | 0;
            t = t | 0;
            var n = 0,
                r = 0,
                i = 0,
                s = 0,
                o = 0,
                u = 0,
                a = 0;
            n = e & 65535;
            r = t & 65535;
            i = rt(r, n) | 0;
            s = e >>> 16;
            o = (i >>> 16) + (rt(r, s) | 0) | 0;
            u = t >>> 16;
            a = rt(u, n) | 0;
            return (D = ((o >>> 16) + (rt(u, s) | 0) | 0) + (((o & 65535) + a | 0) >>> 16) | 0, 0 | (o + a << 16 | i & 65535)) | 0
        }

        function ho(e, t, n, r) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            var i = 0,
                s = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                c = 0,
                h = 0,
                p = 0,
                d = 0;
            i = t >> 31 | ((t | 0) < 0 ? -1 : 0) << 1;
            s = ((t | 0) < 0 ? -1 : 0) >> 31 | ((t | 0) < 0 ? -1 : 0) << 1;
            o = r >> 31 | ((r | 0) < 0 ? -1 : 0) << 1;
            u = ((r | 0) < 0 ? -1 : 0) >> 31 | ((r | 0) < 0 ? -1 : 0) << 1;
            a = Zs(i ^ e, s ^ t, i, s) | 0;
            f = D;
            l = Zs(o ^ n, u ^ r, o, u) | 0;
            c = o ^ i;
            h = u ^ s;
            p = yo(a, f, l, D, 0) | 0;
            d = Zs(p ^ c, D ^ h, c, h) | 0;
            return (D = D, d) | 0
        }

        function po(e, t, n, r) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            var i = 0,
                o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0;
            m = c;
            c = c + 8 | 0;
            i = m | 0;
            o = t >> 31 | ((t | 0) < 0 ? -1 : 0) << 1;
            u = ((t | 0) < 0 ? -1 : 0) >> 31 | ((t | 0) < 0 ? -1 : 0) << 1;
            a = r >> 31 | ((r | 0) < 0 ? -1 : 0) << 1;
            f = ((r | 0) < 0 ? -1 : 0) >> 31 | ((r | 0) < 0 ? -1 : 0) << 1;
            l = Zs(o ^ e, u ^ t, o, u) | 0;
            h = D;
            p = Zs(a ^ n, f ^ r, a, f) | 0;
            yo(l, h, p, D, i) | 0;
            d = Zs(s[i >> 2] ^ o, s[i + 4 >> 2] ^ u, o, u) | 0;
            v = D;
            c = m;
            return (D = v, d) | 0
        }

        function vo(e, t, n, r) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            var i = 0,
                s = 0,
                o = 0,
                u = 0,
                a = 0;
            i = e;
            s = n;
            o = co(i, s) | 0;
            u = D;
            a = rt(t, s) | 0;
            return (D = ((rt(r, i) | 0) + a | 0) + u | u & 0, 0 | o & -1) | 0
        }

        function mo(e, t, n, r) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            var i = 0;
            i = yo(e, t, n, r, 0) | 0;
            return (D = D, i) | 0
        }

        function go(e, t, n, r) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            var i = 0,
                o = 0;
            o = c;
            c = c + 8 | 0;
            i = o | 0;
            yo(e, t, n, r, i) | 0;
            c = o;
            return (D = s[i + 4 >> 2] | 0, s[i >> 2] | 0) | 0
        }

        function yo(e, t, n, r, i) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            i = i | 0;
            var o = 0,
                u = 0,
                a = 0,
                f = 0,
                l = 0,
                c = 0,
                h = 0,
                p = 0,
                d = 0,
                v = 0,
                m = 0,
                g = 0,
                y = 0,
                b = 0,
                w = 0,
                E = 0,
                S = 0,
                x = 0,
                T = 0,
                N = 0,
                C = 0,
                k = 0,
                L = 0,
                A = 0,
                O = 0,
                M = 0,
                _ = 0,
                P = 0,
                H = 0,
                B = 0,
                j = 0,
                F = 0,
                I = 0,
                q = 0,
                R = 0,
                U = 0,
                z = 0,
                W = 0,
                X = 0,
                V = 0,
                $ = 0,
                J = 0,
                K = 0,
                Q = 0,
                G = 0,
                Y = 0,
                Z = 0,
                et = 0,
                tt = 0,
                nt = 0,
                rt = 0,
                it = 0,
                st = 0,
                ot = 0,
                ut = 0,
                at = 0,
                ft = 0,
                lt = 0,
                ct = 0,
                ht = 0,
                pt = 0,
                dt = 0,
                vt = 0,
                mt = 0;
            o = e;
            u = t;
            a = u;
            f = n;
            l = r;
            c = l;
            if ((a | 0) == 0) {
                h = (i | 0) != 0;
                if ((c | 0) == 0) {
                    if (h) {
                        s[i >> 2] = (o >>> 0) % (f >>> 0);
                        s[i + 4 >> 2] = 0
                    }
                    mt = 0;
                    vt = (o >>> 0) / (f >>> 0) >>> 0;
                    return (D = mt, vt) | 0
                } else {
                    if (!h) {
                        mt = 0;
                        vt = 0;
                        return (D = mt, vt) | 0
                    }
                    s[i >> 2] = e & -1;
                    s[i + 4 >> 2] = t & 0;
                    mt = 0;
                    vt = 0;
                    return (D = mt, vt) | 0
                }
            }
            p = (c | 0) == 0;
            do {
                if ((f | 0) == 0) {
                    if (p) {
                        if ((i | 0) != 0) {
                            s[i >> 2] = (a >>> 0) % (f >>> 0);
                            s[i + 4 >> 2] = 0
                        }
                        mt = 0;
                        vt = (a >>> 0) / (f >>> 0) >>> 0;
                        return (D = mt, vt) | 0
                    }
                    if ((o | 0) == 0) {
                        if ((i | 0) != 0) {
                            s[i >> 2] = 0;
                            s[i + 4 >> 2] = (a >>> 0) % (c >>> 0)
                        }
                        mt = 0;
                        vt = (a >>> 0) / (c >>> 0) >>> 0;
                        return (D = mt, vt) | 0
                    }
                    d = c - 1 | 0;
                    if ((d & c | 0) == 0) {
                        if ((i | 0) != 0) {
                            s[i >> 2] = 0 | e & -1;
                            s[i + 4 >> 2] = d & a | t & 0
                        }
                        mt = 0;
                        vt = a >>> ((lo(c | 0) | 0) >>> 0);
                        return (D = mt, vt) | 0
                    }
                    v = fo(c | 0) | 0;
                    m = v - (fo(a | 0) | 0) | 0;
                    if (m >>> 0 <= 30) {
                        g = m + 1 | 0;
                        y = 31 - m | 0;
                        F = g;
                        j = a << y | o >>> (g >>> 0);
                        B = a >>> (g >>> 0);
                        H = 0;
                        P = o << y;
                        break
                    }
                    if ((i | 0) == 0) {
                        mt = 0;
                        vt = 0;
                        return (D = mt, vt) | 0
                    }
                    s[i >> 2] = 0 | e & -1;
                    s[i + 4 >> 2] = u | t & 0;
                    mt = 0;
                    vt = 0;
                    return (D = mt, vt) | 0
                } else {
                    if (!p) {
                        L = fo(c | 0) | 0;
                        A = L - (fo(a | 0) | 0) | 0;
                        if (A >>> 0 <= 31) {
                            O = A + 1 | 0;
                            M = 31 - A | 0;
                            _ = A - 31 >> 31;
                            F = O;
                            j = o >>> (O >>> 0) & _ | a << M;
                            B = a >>> (O >>> 0) & _;
                            H = 0;
                            P = o << M;
                            break
                        }
                        if ((i | 0) == 0) {
                            mt = 0;
                            vt = 0;
                            return (D = mt, vt) | 0
                        }
                        s[i >> 2] = 0 | e & -1;
                        s[i + 4 >> 2] = u | t & 0;
                        mt = 0;
                        vt = 0;
                        return (D = mt, vt) | 0
                    }
                    b = f - 1 | 0;
                    if ((b & f | 0) != 0) {
                        E = (fo(f | 0) | 0) + 33 | 0;
                        S = E - (fo(a | 0) | 0) | 0;
                        x = 64 - S | 0;
                        T = 32 - S | 0;
                        N = T >> 31;
                        C = S - 32 | 0;
                        k = C >> 31;
                        F = S;
                        j = T - 1 >> 31 & a >>> (C >>> 0) | (a << T | o >>> (S >>> 0)) & k;
                        B = k & a >>> (S >>> 0);
                        H = o << x & N;
                        P = (a << x | o >>> (C >>> 0)) & N | o << T & S - 33 >> 31;
                        break
                    }
                    if ((i | 0) != 0) {
                        s[i >> 2] = b & o;
                        s[i + 4 >> 2] = 0
                    }
                    if ((f | 0) == 1) {
                        mt = u | t & 0;
                        vt = 0 | e & -1;
                        return (D = mt, vt) | 0
                    } else {
                        w = lo(f | 0) | 0;
                        mt = 0 | a >>> (w >>> 0);
                        vt = a << 32 - w | o >>> (w >>> 0) | 0;
                        return (D = mt, vt) | 0
                    }
                }
            } while (0);
            if ((F | 0) == 0) {
                ct = P;
                lt = H;
                ft = B;
                at = j;
                ut = 0;
                ot = 0
            } else {
                I = 0 | n & -1;
                q = l | r & 0;
                R = ro(I, q, -1, -1) | 0;
                U = D;
                J = P;
                $ = H;
                V = B;
                X = j;
                W = F;
                z = 0;
                while (1) {
                    K = $ >>> 31 | J << 1;
                    Q = z | $ << 1;
                    G = 0 | (X << 1 | J >>> 31);
                    Y = X >>> 31 | V << 1 | 0;
                    Zs(R, U, G, Y) | 0;
                    Z = D;
                    et = Z >> 31 | ((Z | 0) < 0 ? -1 : 0) << 1;
                    tt = et & 1;
                    nt = Zs(G, Y, et & I, (((Z | 0) < 0 ? -1 : 0) >> 31 | ((Z | 0) < 0 ? -1 : 0) << 1) & q) | 0;
                    rt = nt;
                    it = D;
                    st = W - 1 | 0;
                    if ((st | 0) == 0) {
                        break
                    } else {
                        J = K;
                        $ = Q;
                        V = it;
                        X = rt;
                        W = st;
                        z = tt
                    }
                }
                ct = K;
                lt = Q;
                ft = it;
                at = rt;
                ut = 0;
                ot = tt
            }
            ht = lt;
            pt = 0;
            dt = ct | pt;
            if ((i | 0) != 0) {
                s[i >> 2] = 0 | at;
                s[i + 4 >> 2] = ft | 0
            }
            mt = (0 | ht) >>> 31 | dt << 1 | (pt << 1 | ht >>> 31) & 0 | ut;
            vt = (ht << 1 | 0 >>> 31) & -2 | ot;
            return (D = mt, vt) | 0
        }

        function bo(e, t, n, r) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            return Mo[e & 1](t | 0, n | 0, r | 0) | 0
        }

        function wo(e, t) {
            e = e | 0;
            t = t | 0;
            _o[e & 7](t | 0)
        }

        function Eo(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            Do[e & 0](t | 0, n | 0)
        }

        function So(e, t) {
            e = e | 0;
            t = t | 0;
            return Po[e & 0](t | 0) | 0
        }

        function xo(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            return Ho[e & 7](t | 0, n | 0) | 0
        }

        function To(e, t, n, r, i) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            i = i | 0;
            Bo[e & 15](t | 0, n | 0, r | 0, i | 0)
        }

        function No(e, t, n) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            it(0);
            return 0
        }

        function Co(e) {
            e = e | 0;
            it(1)
        }

        function ko(e, t) {
            e = e | 0;
            t = t | 0;
            it(2)
        }

        function Lo(e) {
            e = e | 0;
            it(3);
            return 0
        }

        function Ao(e, t) {
            e = e | 0;
            t = t | 0;
            it(4);
            return 0
        }

        function Oo(e, t, n, r) {
            e = e | 0;
            t = t | 0;
            n = n | 0;
            r = r | 0;
            it(5)
        }
        var r = new e.Int8Array(n);
        var i = new e.Int16Array(n);
        var s = new e.Int32Array(n);
        var o = new e.Uint8Array(n);
        var u = new e.Uint16Array(n);
        var a = new e.Uint32Array(n);
        var f = new e.Float32Array(n);
        var l = new e.Float64Array(n);
        var c = t.STACKTOP | 0;
        var h = t.STACK_MAX | 0;
        var p = t.tempDoublePtr | 0;
        var d = t.ABORT | 0;
        var v = t.cttz_i8 | 0;
        var m = t.ctlz_i8 | 0;
        var g = t._stderr | 0;
        var y = 0;
        var b = 0;
        var w = 0;
        var E = 0;
        var S = +t.NaN,
            x = +t.Infinity;
        var T = 0,
            N = 0,
            C = 0,
            k = 0,
            L = 0,
            A = 0,
            O = 0,
            M = 0,
            _ = 0;
        var D = 0;
        var P = 0;
        var H = 0;
        var B = 0;
        var j = 0;
        var F = 0;
        var I = 0;
        var q = 0;
        var R = 0;
        var U = 0;
        var z = e.Math.floor;
        var W = e.Math.abs;
        var X = e.Math.sqrt;
        var V = e.Math.pow;
        var $ = e.Math.cos;
        var J = e.Math.sin;
        var K = e.Math.tan;
        var Q = e.Math.acos;
        var G = e.Math.asin;
        var Y = e.Math.atan;
        var Z = e.Math.atan2;
        var et = e.Math.exp;
        var tt = e.Math.log;
        var nt = e.Math.ceil;
        var rt = e.Math.imul;
        var it = t.abort;
        var st = t.assert;
        var ot = t.min;
        var ut = t.invoke_iiii;
        var at = t.invoke_vi;
        var ft = t.invoke_vii;
        var lt = t.invoke_ii;
        var ct = t.invoke_iii;
        var ht = t.invoke_viiii;
        var pt = t._emscripten_get_now_is_monotonic;
        var dt = t._send;
        var vt = t._pipe;
        var mt = t._emscripten_set_main_loop_timing;
        var gt = t.___assert_fail;
        var yt = t._js_get_height;
        var bt = t._usleep;
        var wt = t._fflush;
        var Et = t._clock_gettime;
        var St = t._pwrite;
        var xt = t._strerror_r;
        var Tt = t._open;
        var Nt = t._sbrk;
        var Ct = t._strerror;
        var kt = t._emscripten_get_now;
        var Lt = t._emscripten_memcpy_big;
        var At = t._fileno;
        var Ot = t._perror;
        var Mt = t._sysconf;
        var _t = t._close;
        var Dt = t._nanosleep;
        var Pt = t._js_read_image;
        var Ht = t._pread;
        var Bt = t._puts;
        var jt = t._mkport;
        var Ft = t._fclose;
        var It = t._poll;
        var qt = t.__reallyNegative;
        var Rt = t._write;
        var Ut = t._fsync;
        var zt = t.___errno_location;
        var Wt = t._js_get_width;
        var Xt = t._recv;
        var Vt = t._fputc;
        var $t = t._read;
        var Jt = t._emscripten_set_main_loop;
        var Kt = t._abort;
        var Qt = t._fwrite;
        var Gt = t._time;
        var Yt = t._fprintf;
        var Zt = t._js_output_result;
        var en = t.__formatString;
        var tn = t._fputs;
        var nn = t._fopen;
        var rn = t.___setErrNo;
        var sn = 0;
        var Mo = [No, Js];
        var _o = [Co, Ln, rr, dr, ti, ai, Co, Co];
        var Do = [ko];
        var Po = [Lo];
        var Ho = [Ao, Pr, jr, Li, Ai, Ri, Ao, Ao];
        var Bo = [Oo, qr, Wr, Xr, Vr, $r, Jr, Kr, Qr, Gr, Yr, Zr, Oo, Oo, Oo, Oo];
        return {
            _i64Subtract: Zs,
            _free: _s,
            _main: dn,
            _realloc: Ps,
            _i64Add: ro,
            _memmove: uo,
            _bitshift64Ashr: io,
            _strlen: no,
            _memset: eo,
            _malloc: Ms,
            _memcpy: oo,
            _bitshift64Lshr: so,
            _strcpy: ao,
            _calloc: Ds,
            _bitshift64Shl: to,
            runPostSets: Ys,
            stackAlloc: on,
            stackSave: un,
            stackRestore: an,
            setThrew: fn,
            setTempRet0: hn,
            getTempRet0: pn,
            dynCall_iiii: bo,
            dynCall_vi: wo,
            dynCall_vii: Eo,
            dynCall_ii: So,
            dynCall_iii: xo,
            dynCall_viiii: To
        }
    }(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
    var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
    var _free = Module["_free"] = asm["_free"];
    var _main = Module["_main"] = asm["_main"];
    var _realloc = Module["_realloc"] = asm["_realloc"];
    var _i64Add = Module["_i64Add"] = asm["_i64Add"];
    var _memmove = Module["_memmove"] = asm["_memmove"];
    var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
    var _strlen = Module["_strlen"] = asm["_strlen"];
    var _memset = Module["_memset"] = asm["_memset"];
    var _malloc = Module["_malloc"] = asm["_malloc"];
    var _memcpy = Module["_memcpy"] = asm["_memcpy"];
    var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
    var _strcpy = Module["_strcpy"] = asm["_strcpy"];
    var _calloc = Module["_calloc"] = asm["_calloc"];
    var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
    var runPostSets = Module["runPostSets"] = asm["runPostSets"];
    var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
    var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
    var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
    var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
    var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
    var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
    Runtime.stackAlloc = asm["stackAlloc"];
    Runtime.stackSave = asm["stackSave"];
    Runtime.stackRestore = asm["stackRestore"];
    Runtime.setTempRet0 = asm["setTempRet0"];
    Runtime.getTempRet0 = asm["getTempRet0"];
    var i64Math = function() {
        function s(e, t, n) {
            if (e != null)
                if ("number" == typeof e) this.fromNumber(e, t, n);
                else if (t == null && "string" != typeof e) this.fromString(e, 256);
            else this.fromString(e, t)
        }

        function o() {
            return new s(null)
        }

        function u(e, t, n, r, i, s) {
            while (--s >= 0) {
                var o = t * this[e++] + n[r] + i;
                i = Math.floor(o / 67108864);
                n[r++] = o & 67108863
            }
            return i
        }

        function a(e, t, n, r, i, s) {
            var o = t & 32767,
                u = t >> 15;
            while (--s >= 0) {
                var a = this[e] & 32767;
                var f = this[e++] >> 15;
                var l = u * a + f * o;
                a = o * a + ((l & 32767) << 15) + n[r] + (i & 1073741823);
                i = (a >>> 30) + (l >>> 15) + u * f + (i >>> 30);
                n[r++] = a & 1073741823
            }
            return i
        }

        function f(e, t, n, r, i, s) {
            var o = t & 16383,
                u = t >> 14;
            while (--s >= 0) {
                var a = this[e] & 16383;
                var f = this[e++] >> 14;
                var l = u * a + f * o;
                a = o * a + ((l & 16383) << 14) + n[r] + i;
                i = (a >> 28) + (l >> 14) + u * f;
                n[r++] = a & 268435455
            }
            return i
        }

        function v(e) {
            return c.charAt(e)
        }

        function m(e, t) {
            var n = h[e.charCodeAt(t)];
            return n == null ? -1 : n
        }

        function g(e) {
            for (var t = this.t - 1; t >= 0; --t) e[t] = this[t];
            e.t = this.t;
            e.s = this.s
        }

        function y(e) {
            this.t = 1;
            this.s = e < 0 ? -1 : 0;
            if (e > 0) this[0] = e;
            else if (e < -1) this[0] = e + DV;
            else this.t = 0
        }

        function b(e) {
            var t = o();
            t.fromInt(e);
            return t
        }

        function w(e, t) {
            var n;
            if (t == 16) n = 4;
            else if (t == 8) n = 3;
            else if (t == 256) n = 8;
            else if (t == 2) n = 1;
            else if (t == 32) n = 5;
            else if (t == 4) n = 2;
            else {
                this.fromRadix(e, t);
                return
            }
            this.t = 0;
            this.s = 0;
            var r = e.length,
                i = false,
                o = 0;
            while (--r >= 0) {
                var u = n == 8 ? e[r] & 255 : m(e, r);
                if (u < 0) {
                    if (e.charAt(r) == "-") i = true;
                    continue
                }
                i = false;
                if (o == 0) this[this.t++] = u;
                else if (o + n > this.DB) {
                    this[this.t - 1] |= (u & (1 << this.DB - o) - 1) << o;
                    this[this.t++] = u >> this.DB - o
                } else this[this.t - 1] |= u << o;
                o += n;
                if (o >= this.DB) o -= this.DB
            }
            if (n == 8 && (e[0] & 128) != 0) {
                this.s = -1;
                if (o > 0) this[this.t - 1] |= (1 << this.DB - o) - 1 << o
            }
            this.clamp();
            if (i) s.ZERO.subTo(this, this)
        }

        function E() {
            var e = this.s & this.DM;
            while (this.t > 0 && this[this.t - 1] == e) --this.t
        }

        function S(e) {
            if (this.s < 0) return "-" + this.negate().toString(e);
            var t;
            if (e == 16) t = 4;
            else if (e == 8) t = 3;
            else if (e == 2) t = 1;
            else if (e == 32) t = 5;
            else if (e == 4) t = 2;
            else return this.toRadix(e);
            var n = (1 << t) - 1,
                r, i = false,
                s = "",
                o = this.t;
            var u = this.DB - o * this.DB % t;
            if (o-- > 0) {
                if (u < this.DB && (r = this[o] >> u) > 0) {
                    i = true;
                    s = v(r)
                }
                while (o >= 0) {
                    if (u < t) {
                        r = (this[o] & (1 << u) - 1) << t - u;
                        r |= this[--o] >> (u += this.DB - t)
                    } else {
                        r = this[o] >> (u -= t) & n;
                        if (u <= 0) {
                            u += this.DB;
                            --o
                        }
                    }
                    if (r > 0) i = true;
                    if (i) s += v(r)
                }
            }
            return i ? s : "0"
        }

        function x() {
            var e = o();
            s.ZERO.subTo(this, e);
            return e
        }

        function T() {
            return this.s < 0 ? this.negate() : this
        }

        function N(e) {
            var t = this.s - e.s;
            if (t != 0) return t;
            var n = this.t;
            t = n - e.t;
            if (t != 0) return this.s < 0 ? -t : t;
            while (--n >= 0)
                if ((t = this[n] - e[n]) != 0) return t;
            return 0
        }

        function C(e) {
            var t = 1,
                n;
            if ((n = e >>> 16) != 0) {
                e = n;
                t += 16
            }
            if ((n = e >> 8) != 0) {
                e = n;
                t += 8
            }
            if ((n = e >> 4) != 0) {
                e = n;
                t += 4
            }
            if ((n = e >> 2) != 0) {
                e = n;
                t += 2
            }
            if ((n = e >> 1) != 0) {
                e = n;
                t += 1
            }
            return t
        }

        function k() {
            if (this.t <= 0) return 0;
            return this.DB * (this.t - 1) + C(this[this.t - 1] ^ this.s & this.DM)
        }

        function L(e, t) {
            var n;
            for (n = this.t - 1; n >= 0; --n) t[n + e] = this[n];
            for (n = e - 1; n >= 0; --n) t[n] = 0;
            t.t = this.t + e;
            t.s = this.s
        }

        function A(e, t) {
            for (var n = e; n < this.t; ++n) t[n - e] = this[n];
            t.t = Math.max(this.t - e, 0);
            t.s = this.s
        }

        function O(e, t) {
            var n = e % this.DB;
            var r = this.DB - n;
            var i = (1 << r) - 1;
            var s = Math.floor(e / this.DB),
                o = this.s << n & this.DM,
                u;
            for (u = this.t - 1; u >= 0; --u) {
                t[u + s + 1] = this[u] >> r | o;
                o = (this[u] & i) << n
            }
            for (u = s - 1; u >= 0; --u) t[u] = 0;
            t[s] = o;
            t.t = this.t + s + 1;
            t.s = this.s;
            t.clamp()
        }

        function M(e, t) {
            t.s = this.s;
            var n = Math.floor(e / this.DB);
            if (n >= this.t) {
                t.t = 0;
                return
            }
            var r = e % this.DB;
            var i = this.DB - r;
            var s = (1 << r) - 1;
            t[0] = this[n] >> r;
            for (var o = n + 1; o < this.t; ++o) {
                t[o - n - 1] |= (this[o] & s) << i;
                t[o - n] = this[o] >> r
            }
            if (r > 0) t[this.t - n - 1] |= (this.s & s) << i;
            t.t = this.t - n;
            t.clamp()
        }

        function _(e, t) {
            var n = 0,
                r = 0,
                i = Math.min(e.t, this.t);
            while (n < i) {
                r += this[n] - e[n];
                t[n++] = r & this.DM;
                r >>= this.DB
            }
            if (e.t < this.t) {
                r -= e.s;
                while (n < this.t) {
                    r += this[n];
                    t[n++] = r & this.DM;
                    r >>= this.DB
                }
                r += this.s
            } else {
                r += this.s;
                while (n < e.t) {
                    r -= e[n];
                    t[n++] = r & this.DM;
                    r >>= this.DB
                }
                r -= e.s
            }
            t.s = r < 0 ? -1 : 0;
            if (r < -1) t[n++] = this.DV + r;
            else if (r > 0) t[n++] = r;
            t.t = n;
            t.clamp()
        }

        function D(e, t) {
            var n = this.abs(),
                r = e.abs();
            var i = n.t;
            t.t = i + r.t;
            while (--i >= 0) t[i] = 0;
            for (i = 0; i < r.t; ++i) t[i + n.t] = n.am(0, r[i], t, i, 0, n.t);
            t.s = 0;
            t.clamp();
            if (this.s != e.s) s.ZERO.subTo(t, t)
        }

        function P(e) {
            var t = this.abs();
            var n = e.t = 2 * t.t;
            while (--n >= 0) e[n] = 0;
            for (n = 0; n < t.t - 1; ++n) {
                var r = t.am(n, t[n], e, 2 * n, 0, 1);
                if ((e[n + t.t] += t.am(n + 1, 2 * t[n], e, 2 * n + 1, r, t.t - n - 1)) >= t.DV) {
                    e[n + t.t] -= t.DV;
                    e[n + t.t + 1] = 1
                }
            }
            if (e.t > 0) e[e.t - 1] += t.am(n, t[n], e, 2 * n, 0, 1);
            e.s = 0;
            e.clamp()
        }

        function H(e, t, n) {
            var r = e.abs();
            if (r.t <= 0) return;
            var i = this.abs();
            if (i.t < r.t) {
                if (t != null) t.fromInt(0);
                if (n != null) this.copyTo(n);
                return
            }
            if (n == null) n = o();
            var u = o(),
                a = this.s,
                f = e.s;
            var l = this.DB - C(r[r.t - 1]);
            if (l > 0) {
                r.lShiftTo(l, u);
                i.lShiftTo(l, n)
            } else {
                r.copyTo(u);
                i.copyTo(n)
            }
            var c = u.t;
            var h = u[c - 1];
            if (h == 0) return;
            var p = h * (1 << this.F1) + (c > 1 ? u[c - 2] >> this.F2 : 0);
            var d = this.FV / p,
                v = (1 << this.F1) / p,
                m = 1 << this.F2;
            var g = n.t,
                y = g - c,
                b = t == null ? o() : t;
            u.dlShiftTo(y, b);
            if (n.compareTo(b) >= 0) {
                n[n.t++] = 1;
                n.subTo(b, n)
            }
            s.ONE.dlShiftTo(c, b);
            b.subTo(u, u);
            while (u.t < c) u[u.t++] = 0;
            while (--y >= 0) {
                var w = n[--g] == h ? this.DM : Math.floor(n[g] * d + (n[g - 1] + m) * v);
                if ((n[g] += u.am(0, w, n, y, 0, c)) < w) {
                    u.dlShiftTo(y, b);
                    n.subTo(b, n);
                    while (n[g] < --w) n.subTo(b, n)
                }
            }
            if (t != null) {
                n.drShiftTo(c, t);
                if (a != f) s.ZERO.subTo(t, t)
            }
            n.t = c;
            n.clamp();
            if (l > 0) n.rShiftTo(l, n);
            if (a < 0) s.ZERO.subTo(n, n)
        }

        function B(e) {
            var t = o();
            this.abs().divRemTo(e, null, t);
            if (this.s < 0 && t.compareTo(s.ZERO) > 0) e.subTo(t, t);
            return t
        }

        function j(e) {
            this.m = e
        }

        function F(e) {
            if (e.s < 0 || e.compareTo(this.m) >= 0) return e.mod(this.m);
            else return e
        }

        function I(e) {
            return e
        }

        function q(e) {
            e.divRemTo(this.m, null, e)
        }

        function R(e, t, n) {
            e.multiplyTo(t, n);
            this.reduce(n)
        }

        function U(e, t) {
            e.squareTo(t);
            this.reduce(t)
        }

        function z() {
            if (this.t < 1) return 0;
            var e = this[0];
            if ((e & 1) == 0) return 0;
            var t = e & 3;
            t = t * (2 - (e & 15) * t) & 15;
            t = t * (2 - (e & 255) * t) & 255;
            t = t * (2 - ((e & 65535) * t & 65535)) & 65535;
            t = t * (2 - e * t % this.DV) % this.DV;
            return t > 0 ? this.DV - t : -t
        }

        function W(e) {
            this.m = e;
            this.mp = e.invDigit();
            this.mpl = this.mp & 32767;
            this.mph = this.mp >> 15;
            this.um = (1 << e.DB - 15) - 1;
            this.mt2 = 2 * e.t
        }

        function X(e) {
            var t = o();
            e.abs().dlShiftTo(this.m.t, t);
            t.divRemTo(this.m, null, t);
            if (e.s < 0 && t.compareTo(s.ZERO) > 0) this.m.subTo(t, t);
            return t
        }

        function V(e) {
            var t = o();
            e.copyTo(t);
            this.reduce(t);
            return t
        }

        function $(e) {
            while (e.t <= this.mt2) e[e.t++] = 0;
            for (var t = 0; t < this.m.t; ++t) {
                var n = e[t] & 32767;
                var r = n * this.mpl + ((n * this.mph + (e[t] >> 15) * this.mpl & this.um) << 15) & e.DM;
                n = t + this.m.t;
                e[n] += this.m.am(0, r, e, t, 0, this.m.t);
                while (e[n] >= e.DV) {
                    e[n] -= e.DV;
                    e[++n] ++
                }
            }
            e.clamp();
            e.drShiftTo(this.m.t, e);
            if (e.compareTo(this.m) >= 0) e.subTo(this.m, e)
        }

        function J(e, t) {
            e.squareTo(t);
            this.reduce(t)
        }

        function K(e, t, n) {
            e.multiplyTo(t, n);
            this.reduce(n)
        }

        function Q() {
            return (this.t > 0 ? this[0] & 1 : this.s) == 0
        }

        function G(e, t) {
            if (e > 4294967295 || e < 1) return s.ONE;
            var n = o(),
                r = o(),
                i = t.convert(this),
                u = C(e) - 1;
            i.copyTo(n);
            while (--u >= 0) {
                t.sqrTo(n, r);
                if ((e & 1 << u) > 0) t.mulTo(r, i, n);
                else {
                    var a = n;
                    n = r;
                    r = a
                }
            }
            return t.revert(n)
        }

        function Y(e, t) {
            var n;
            if (e < 256 || t.isEven()) n = new j(t);
            else n = new W(t);
            return this.exp(e, n)
        }

        function Z(e, t) {
            this.fromInt(0);
            if (t == null) t = 10;
            var n = this.chunkSize(t);
            var r = Math.pow(t, n),
                i = false,
                o = 0,
                u = 0;
            for (var a = 0; a < e.length; ++a) {
                var f = m(e, a);
                if (f < 0) {
                    if (e.charAt(a) == "-" && this.signum() == 0) i = true;
                    continue
                }
                u = t * u + f;
                if (++o >= n) {
                    this.dMultiply(r);
                    this.dAddOffset(u, 0);
                    o = 0;
                    u = 0
                }
            }
            if (o > 0) {
                this.dMultiply(Math.pow(t, o));
                this.dAddOffset(u, 0)
            }
            if (i) s.ZERO.subTo(this, this)
        }

        function et(e) {
            return Math.floor(Math.LN2 * this.DB / Math.log(e))
        }

        function tt() {
            if (this.s < 0) return -1;
            else if (this.t <= 0 || this.t == 1 && this[0] <= 0) return 0;
            else return 1
        }

        function nt(e) {
            this[this.t] = this.am(0, e - 1, this, 0, 0, this.t);
            ++this.t;
            this.clamp()
        }

        function rt(e, t) {
            if (e == 0) return;
            while (this.t <= t) this[this.t++] = 0;
            this[t] += e;
            while (this[t] >= this.DV) {
                this[t] -= this.DV;
                if (++t >= this.t) this[this.t++] = 0;
                ++this[t]
            }
        }

        function it(e) {
            if (e == null) e = 10;
            if (this.signum() == 0 || e < 2 || e > 36) return "0";
            var t = this.chunkSize(e);
            var n = Math.pow(e, t);
            var r = b(n),
                i = o(),
                s = o(),
                u = "";
            this.divRemTo(r, i, s);
            while (i.signum() > 0) {
                u = (n + s.intValue()).toString(e).substr(1) + u;
                i.divRemTo(r, i, s)
            }
            return s.intValue().toString(e) + u
        }

        function st() {
            if (this.s < 0) {
                if (this.t == 1) return this[0] - this.DV;
                else if (this.t == 0) return -1
            } else if (this.t == 1) return this[0];
            else if (this.t == 0) return 0;
            return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0]
        }

        function ot(e, t) {
            var n = 0,
                r = 0,
                i = Math.min(e.t, this.t);
            while (n < i) {
                r += this[n] + e[n];
                t[n++] = r & this.DM;
                r >>= this.DB
            }
            if (e.t < this.t) {
                r += e.s;
                while (n < this.t) {
                    r += this[n];
                    t[n++] = r & this.DM;
                    r >>= this.DB
                }
                r += this.s
            } else {
                r += this.s;
                while (n < e.t) {
                    r += e[n];
                    t[n++] = r & this.DM;
                    r >>= this.DB
                }
                r += e.s
            }
            t.s = r < 0 ? -1 : 0;
            if (r > 0) t[n++] = r;
            else if (r < -1) t[n++] = this.DV + r;
            t.t = n;
            t.clamp()
        }
        var e = {
            math: {}
        };
        e.math.Long = function(e, t) {
            this.low_ = e | 0;
            this.high_ = t | 0
        };
        e.math.Long.IntCache_ = {};
        e.math.Long.fromInt = function(t) {
            if (-128 <= t && t < 128) {
                var n = e.math.Long.IntCache_[t];
                if (n) {
                    return n
                }
            }
            var r = new e.math.Long(t | 0, t < 0 ? -1 : 0);
            if (-128 <= t && t < 128) {
                e.math.Long.IntCache_[t] = r
            }
            return r
        };
        e.math.Long.fromNumber = function(t) {
            if (isNaN(t) || !isFinite(t)) {
                return e.math.Long.ZERO
            } else if (t <= -e.math.Long.TWO_PWR_63_DBL_) {
                return e.math.Long.MIN_VALUE
            } else if (t + 1 >= e.math.Long.TWO_PWR_63_DBL_) {
                return e.math.Long.MAX_VALUE
            } else if (t < 0) {
                return e.math.Long.fromNumber(-t).negate()
            } else {
                return new e.math.Long(t % e.math.Long.TWO_PWR_32_DBL_ | 0, t / e.math.Long.TWO_PWR_32_DBL_ | 0)
            }
        };
        e.math.Long.fromBits = function(t, n) {
            return new e.math.Long(t, n)
        };
        e.math.Long.fromString = function(t, n) {
            if (t.length == 0) {
                throw Error("number format error: empty string")
            }
            var r = n || 10;
            if (r < 2 || 36 < r) {
                throw Error("radix out of range: " + r)
            }
            if (t.charAt(0) == "-") {
                return e.math.Long.fromString(t.substring(1), r).negate()
            } else if (t.indexOf("-") >= 0) {
                throw Error('number format error: interior "-" character: ' + t)
            }
            var i = e.math.Long.fromNumber(Math.pow(r, 8));
            var s = e.math.Long.ZERO;
            for (var o = 0; o < t.length; o += 8) {
                var u = Math.min(8, t.length - o);
                var a = parseInt(t.substring(o, o + u), r);
                if (u < 8) {
                    var f = e.math.Long.fromNumber(Math.pow(r, u));
                    s = s.multiply(f).add(e.math.Long.fromNumber(a))
                } else {
                    s = s.multiply(i);
                    s = s.add(e.math.Long.fromNumber(a))
                }
            }
            return s
        };
        e.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
        e.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
        e.math.Long.TWO_PWR_32_DBL_ = e.math.Long.TWO_PWR_16_DBL_ * e.math.Long.TWO_PWR_16_DBL_;
        e.math.Long.TWO_PWR_31_DBL_ = e.math.Long.TWO_PWR_32_DBL_ / 2;
        e.math.Long.TWO_PWR_48_DBL_ = e.math.Long.TWO_PWR_32_DBL_ * e.math.Long.TWO_PWR_16_DBL_;
        e.math.Long.TWO_PWR_64_DBL_ = e.math.Long.TWO_PWR_32_DBL_ * e.math.Long.TWO_PWR_32_DBL_;
        e.math.Long.TWO_PWR_63_DBL_ = e.math.Long.TWO_PWR_64_DBL_ / 2;
        e.math.Long.ZERO = e.math.Long.fromInt(0);
        e.math.Long.ONE = e.math.Long.fromInt(1);
        e.math.Long.NEG_ONE = e.math.Long.fromInt(-1);
        e.math.Long.MAX_VALUE = e.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
        e.math.Long.MIN_VALUE = e.math.Long.fromBits(0, 2147483648 | 0);
        e.math.Long.TWO_PWR_24_ = e.math.Long.fromInt(1 << 24);
        e.math.Long.prototype.toInt = function() {
            return this.low_
        };
        e.math.Long.prototype.toNumber = function() {
            return this.high_ * e.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned()
        };
        e.math.Long.prototype.toString = function(t) {
            var n = t || 10;
            if (n < 2 || 36 < n) {
                throw Error("radix out of range: " + n)
            }
            if (this.isZero()) {
                return "0"
            }
            if (this.isNegative()) {
                if (this.equals(e.math.Long.MIN_VALUE)) {
                    var r = e.math.Long.fromNumber(n);
                    var i = this.div(r);
                    var s = i.multiply(r).subtract(this);
                    return i.toString(n) + s.toInt().toString(n)
                } else {
                    return "-" + this.negate().toString(n)
                }
            }
            var o = e.math.Long.fromNumber(Math.pow(n, 6));
            var s = this;
            var u = "";
            while (true) {
                var a = s.div(o);
                var f = s.subtract(a.multiply(o)).toInt();
                var l = f.toString(n);
                s = a;
                if (s.isZero()) {
                    return l + u
                } else {
                    while (l.length < 6) {
                        l = "0" + l
                    }
                    u = "" + l + u
                }
            }
        };
        e.math.Long.prototype.getHighBits = function() {
            return this.high_
        };
        e.math.Long.prototype.getLowBits = function() {
            return this.low_
        };
        e.math.Long.prototype.getLowBitsUnsigned = function() {
            return this.low_ >= 0 ? this.low_ : e.math.Long.TWO_PWR_32_DBL_ + this.low_
        };
        e.math.Long.prototype.getNumBitsAbs = function() {
            if (this.isNegative()) {
                if (this.equals(e.math.Long.MIN_VALUE)) {
                    return 64
                } else {
                    return this.negate().getNumBitsAbs()
                }
            } else {
                var t = this.high_ != 0 ? this.high_ : this.low_;
                for (var n = 31; n > 0; n--) {
                    if ((t & 1 << n) != 0) {
                        break
                    }
                }
                return this.high_ != 0 ? n + 33 : n + 1
            }
        };
        e.math.Long.prototype.isZero = function() {
            return this.high_ == 0 && this.low_ == 0
        };
        e.math.Long.prototype.isNegative = function() {
            return this.high_ < 0
        };
        e.math.Long.prototype.isOdd = function() {
            return (this.low_ & 1) == 1
        };
        e.math.Long.prototype.equals = function(e) {
            return this.high_ == e.high_ && this.low_ == e.low_
        };
        e.math.Long.prototype.notEquals = function(e) {
            return this.high_ != e.high_ || this.low_ != e.low_
        };
        e.math.Long.prototype.lessThan = function(e) {
            return this.compare(e) < 0
        };
        e.math.Long.prototype.lessThanOrEqual = function(e) {
            return this.compare(e) <= 0
        };
        e.math.Long.prototype.greaterThan = function(e) {
            return this.compare(e) > 0
        };
        e.math.Long.prototype.greaterThanOrEqual = function(e) {
            return this.compare(e) >= 0
        };
        e.math.Long.prototype.compare = function(e) {
            if (this.equals(e)) {
                return 0
            }
            var t = this.isNegative();
            var n = e.isNegative();
            if (t && !n) {
                return -1
            }
            if (!t && n) {
                return 1
            }
            if (this.subtract(e).isNegative()) {
                return -1
            } else {
                return 1
            }
        };
        e.math.Long.prototype.negate = function() {
            if (this.equals(e.math.Long.MIN_VALUE)) {
                return e.math.Long.MIN_VALUE
            } else {
                return this.not().add(e.math.Long.ONE)
            }
        };
        e.math.Long.prototype.add = function(t) {
            var n = this.high_ >>> 16;
            var r = this.high_ & 65535;
            var i = this.low_ >>> 16;
            var s = this.low_ & 65535;
            var o = t.high_ >>> 16;
            var u = t.high_ & 65535;
            var a = t.low_ >>> 16;
            var f = t.low_ & 65535;
            var l = 0,
                c = 0,
                h = 0,
                p = 0;
            p += s + f;
            h += p >>> 16;
            p &= 65535;
            h += i + a;
            c += h >>> 16;
            h &= 65535;
            c += r + u;
            l += c >>> 16;
            c &= 65535;
            l += n + o;
            l &= 65535;
            return e.math.Long.fromBits(h << 16 | p, l << 16 | c)
        };
        e.math.Long.prototype.subtract = function(e) {
            return this.add(e.negate())
        };
        e.math.Long.prototype.multiply = function(t) {
            if (this.isZero()) {
                return e.math.Long.ZERO
            } else if (t.isZero()) {
                return e.math.Long.ZERO
            }
            if (this.equals(e.math.Long.MIN_VALUE)) {
                return t.isOdd() ? e.math.Long.MIN_VALUE : e.math.Long.ZERO
            } else if (t.equals(e.math.Long.MIN_VALUE)) {
                return this.isOdd() ? e.math.Long.MIN_VALUE : e.math.Long.ZERO
            }
            if (this.isNegative()) {
                if (t.isNegative()) {
                    return this.negate().multiply(t.negate())
                } else {
                    return this.negate().multiply(t).negate()
                }
            } else if (t.isNegative()) {
                return this.multiply(t.negate()).negate()
            }
            if (this.lessThan(e.math.Long.TWO_PWR_24_) && t.lessThan(e.math.Long.TWO_PWR_24_)) {
                return e.math.Long.fromNumber(this.toNumber() * t.toNumber())
            }
            var n = this.high_ >>> 16;
            var r = this.high_ & 65535;
            var i = this.low_ >>> 16;
            var s = this.low_ & 65535;
            var o = t.high_ >>> 16;
            var u = t.high_ & 65535;
            var a = t.low_ >>> 16;
            var f = t.low_ & 65535;
            var l = 0,
                c = 0,
                h = 0,
                p = 0;
            p += s * f;
            h += p >>> 16;
            p &= 65535;
            h += i * f;
            c += h >>> 16;
            h &= 65535;
            h += s * a;
            c += h >>> 16;
            h &= 65535;
            c += r * f;
            l += c >>> 16;
            c &= 65535;
            c += i * a;
            l += c >>> 16;
            c &= 65535;
            c += s * u;
            l += c >>> 16;
            c &= 65535;
            l += n * f + r * a + i * u + s * o;
            l &= 65535;
            return e.math.Long.fromBits(h << 16 | p, l << 16 | c)
        };
        e.math.Long.prototype.div = function(t) {
            if (t.isZero()) {
                throw Error("division by zero")
            } else if (this.isZero()) {
                return e.math.Long.ZERO
            }
            if (this.equals(e.math.Long.MIN_VALUE)) {
                if (t.equals(e.math.Long.ONE) || t.equals(e.math.Long.NEG_ONE)) {
                    return e.math.Long.MIN_VALUE
                } else if (t.equals(e.math.Long.MIN_VALUE)) {
                    return e.math.Long.ONE
                } else {
                    var n = this.shiftRight(1);
                    var r = n.div(t).shiftLeft(1);
                    if (r.equals(e.math.Long.ZERO)) {
                        return t.isNegative() ? e.math.Long.ONE : e.math.Long.NEG_ONE
                    } else {
                        var i = this.subtract(t.multiply(r));
                        var s = r.add(i.div(t));
                        return s
                    }
                }
            } else if (t.equals(e.math.Long.MIN_VALUE)) {
                return e.math.Long.ZERO
            }
            if (this.isNegative()) {
                if (t.isNegative()) {
                    return this.negate().div(t.negate())
                } else {
                    return this.negate().div(t).negate()
                }
            } else if (t.isNegative()) {
                return this.div(t.negate()).negate()
            }
            var o = e.math.Long.ZERO;
            var i = this;
            while (i.greaterThanOrEqual(t)) {
                var r = Math.max(1, Math.floor(i.toNumber() / t.toNumber()));
                var u = Math.ceil(Math.log(r) / Math.LN2);
                var a = u <= 48 ? 1 : Math.pow(2, u - 48);
                var f = e.math.Long.fromNumber(r);
                var l = f.multiply(t);
                while (l.isNegative() || l.greaterThan(i)) {
                    r -= a;
                    f = e.math.Long.fromNumber(r);
                    l = f.multiply(t)
                }
                if (f.isZero()) {
                    f = e.math.Long.ONE
                }
                o = o.add(f);
                i = i.subtract(l)
            }
            return o
        };
        e.math.Long.prototype.modulo = function(e) {
            return this.subtract(this.div(e).multiply(e))
        };
        e.math.Long.prototype.not = function() {
            return e.math.Long.fromBits(~this.low_, ~this.high_)
        };
        e.math.Long.prototype.and = function(t) {
            return e.math.Long.fromBits(this.low_ & t.low_, this.high_ & t.high_)
        };
        e.math.Long.prototype.or = function(t) {
            return e.math.Long.fromBits(this.low_ | t.low_, this.high_ | t.high_)
        };
        e.math.Long.prototype.xor = function(t) {
            return e.math.Long.fromBits(this.low_ ^ t.low_, this.high_ ^ t.high_)
        };
        e.math.Long.prototype.shiftLeft = function(t) {
            t &= 63;
            if (t == 0) {
                return this
            } else {
                var n = this.low_;
                if (t < 32) {
                    var r = this.high_;
                    return e.math.Long.fromBits(n << t, r << t | n >>> 32 - t)
                } else {
                    return e.math.Long.fromBits(0, n << t - 32)
                }
            }
        };
        e.math.Long.prototype.shiftRight = function(t) {
            t &= 63;
            if (t == 0) {
                return this
            } else {
                var n = this.high_;
                if (t < 32) {
                    var r = this.low_;
                    return e.math.Long.fromBits(r >>> t | n << 32 - t, n >> t)
                } else {
                    return e.math.Long.fromBits(n >> t - 32, n >= 0 ? 0 : -1)
                }
            }
        };
        e.math.Long.prototype.shiftRightUnsigned = function(t) {
            t &= 63;
            if (t == 0) {
                return this
            } else {
                var n = this.high_;
                if (t < 32) {
                    var r = this.low_;
                    return e.math.Long.fromBits(r >>> t | n << 32 - t, n >>> t)
                } else if (t == 32) {
                    return e.math.Long.fromBits(n, 0)
                } else {
                    return e.math.Long.fromBits(n >>> t - 32, 0)
                }
            }
        };
        var t = {
            appName: "Modern Browser"
        };
        var n;
        var r = 0xdeadbeefcafe;
        var i = (r & 16777215) == 15715070;
        if (i && t.appName == "Microsoft Internet Explorer") {
            s.prototype.am = a;
            n = 30
        } else if (i && t.appName != "Netscape") {
            s.prototype.am = u;
            n = 26
        } else {
            s.prototype.am = f;
            n = 28
        }
        s.prototype.DB = n;
        s.prototype.DM = (1 << n) - 1;
        s.prototype.DV = 1 << n;
        var l = 52;
        s.prototype.FV = Math.pow(2, l);
        s.prototype.F1 = l - n;
        s.prototype.F2 = 2 * n - l;
        var c = "0123456789abcdefghijklmnopqrstuvwxyz";
        var h = new Array;
        var p, d;
        p = "0".charCodeAt(0);
        for (d = 0; d <= 9; ++d) h[p++] = d;
        p = "a".charCodeAt(0);
        for (d = 10; d < 36; ++d) h[p++] = d;
        p = "A".charCodeAt(0);
        for (d = 10; d < 36; ++d) h[p++] = d;
        j.prototype.convert = F;
        j.prototype.revert = I;
        j.prototype.reduce = q;
        j.prototype.mulTo = R;
        j.prototype.sqrTo = U;
        W.prototype.convert = X;
        W.prototype.revert = V;
        W.prototype.reduce = $;
        W.prototype.mulTo = K;
        W.prototype.sqrTo = J;
        s.prototype.copyTo = g;
        s.prototype.fromInt = y;
        s.prototype.fromString = w;
        s.prototype.clamp = E;
        s.prototype.dlShiftTo = L;
        s.prototype.drShiftTo = A;
        s.prototype.lShiftTo = O;
        s.prototype.rShiftTo = M;
        s.prototype.subTo = _;
        s.prototype.multiplyTo = D;
        s.prototype.squareTo = P;
        s.prototype.divRemTo = H;
        s.prototype.invDigit = z;
        s.prototype.isEven = Q;
        s.prototype.exp = G;
        s.prototype.toString = S;
        s.prototype.negate = x;
        s.prototype.abs = T;
        s.prototype.compareTo = N;
        s.prototype.bitLength = k;
        s.prototype.mod = B;
        s.prototype.modPowInt = Y;
        s.ZERO = b(0);
        s.ONE = b(1);
        s.prototype.fromRadix = Z;
        s.prototype.chunkSize = et;
        s.prototype.signum = tt;
        s.prototype.dMultiply = nt;
        s.prototype.dAddOffset = rt;
        s.prototype.toRadix = it;
        s.prototype.intValue = st;
        s.prototype.addTo = ot;
        var ut = {
            abs: function(t, n) {
                var r = new e.math.Long(t, n);
                var i;
                if (r.isNegative()) {
                    i = r.negate()
                } else {
                    i = r
                }
                HEAP32[tempDoublePtr >> 2] = i.low_;
                HEAP32[tempDoublePtr + 4 >> 2] = i.high_
            },
            ensureTemps: function() {
                if (ut.ensuredTemps) return;
                ut.ensuredTemps = true;
                ut.two32 = new s;
                ut.two32.fromString("4294967296", 10);
                ut.two64 = new s;
                ut.two64.fromString("18446744073709551616", 10);
                ut.temp1 = new s;
                ut.temp2 = new s
            },
            lh2bignum: function(e, t) {
                var n = new s;
                n.fromString(t.toString(), 10);
                var r = new s;
                n.multiplyTo(ut.two32, r);
                var i = new s;
                i.fromString(e.toString(), 10);
                var o = new s;
                i.addTo(r, o);
                return o
            },
            stringify: function(t, n, r) {
                var i = (new e.math.Long(t, n)).toString();
                if (r && i[0] == "-") {
                    ut.ensureTemps();
                    var o = new s;
                    o.fromString(i, 10);
                    i = new s;
                    ut.two64.addTo(o, i);
                    i = i.toString(10)
                }
                return i
            },
            fromString: function(t, n, r, i, o) {
                ut.ensureTemps();
                var u = new s;
                u.fromString(t, n);
                var a = new s;
                a.fromString(r, 10);
                var f = new s;
                f.fromString(i, 10);
                if (o && u.compareTo(s.ZERO) < 0) {
                    var l = new s;
                    u.addTo(ut.two64, l);
                    u = l
                }
                var c = false;
                if (u.compareTo(a) < 0) {
                    u = a;
                    c = true
                } else if (u.compareTo(f) > 0) {
                    u = f;
                    c = true
                }
                var h = e.math.Long.fromString(u.toString());
                HEAP32[tempDoublePtr >> 2] = h.low_;
                HEAP32[tempDoublePtr + 4 >> 2] = h.high_;
                if (c) throw "range error"
            }
        };
        return ut
    }();
    if (memoryInitializer) {
        if (typeof Module["locateFile"] === "function") {
            memoryInitializer = Module["locateFile"](memoryInitializer)
        } else if (Module["memoryInitializerPrefixURL"]) {
            memoryInitializer = Module["memoryInitializerPrefixURL"] + memoryInitializer
        }
        if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
            var data = Module["readBinary"](memoryInitializer);
            HEAPU8.set(data, STATIC_BASE)
        } else {
            addRunDependency("memory initializer");
            Browser.asyncLoad(memoryInitializer, function(e) {
                HEAPU8.set(e, STATIC_BASE);
                removeRunDependency("memory initializer")
            }, function(e) {
                throw "could not load memory initializer " + memoryInitializer
            })
        }
    }
    ExitStatus.prototype = new Error;
    ExitStatus.prototype.constructor = ExitStatus;
    var initialStackTop;
    var preloadStartTime = null;
    var calledMain = false;
    dependenciesFulfilled = function runCaller() {
        if (!Module["calledRun"] && shouldRunNow) run();
        if (!Module["calledRun"]) dependenciesFulfilled = runCaller
    };
    Module["callMain"] = Module.callMain = function(t) {
        function r() {
            for (var e = 0; e < 4 - 1; e++) {
                i.push(0)
            }
        }
        assert(runDependencies == 0, "cannot call main when async dependencies remain! (listen on __ATMAIN__)");
        assert(__ATPRERUN__.length == 0, "cannot call main when preRun functions remain to be called");
        t = t || [];
        ensureInitRuntime();
        var n = t.length + 1;
        var i = [allocate(intArrayFromString(Module["thisProgram"]), "i8", ALLOC_NORMAL)];
        r();
        for (var s = 0; s < n - 1; s = s + 1) {
            i.push(allocate(intArrayFromString(t[s]), "i8", ALLOC_NORMAL));
            r()
        }
        i.push(0);
        i = allocate(i, "i32", ALLOC_NORMAL);
        initialStackTop = STACKTOP;
        try {
            var o = Module["_main"](n, i, 0);
            exit(o)
        } catch (u) {
            if (u instanceof ExitStatus) {
                return
            } else if (u == "SimulateInfiniteLoop") {
                Module["noExitRuntime"] = true;
                return
            } else {
                if (u && typeof u === "object" && u.stack) Module.printErr("exception thrown: " + [u, u.stack]);
                throw u
            }
        } finally {
            calledMain = true
        }
    };
    Module["run"] = Module.run = run;
    Module["exit"] = Module.exit = exit;
    Module["abort"] = Module.abort = abort;
    if (Module["preInit"]) {
        if (typeof Module["preInit"] == "function") Module["preInit"] = [Module["preInit"]];
        while (Module["preInit"].length > 0) {
            Module["preInit"].pop()()
        }
    }
    var shouldRunNow = true;
    if (Module["noInitialRun"]) {
        shouldRunNow = false
    }
    run();
    return result
}